# HG changeset patch
# Parent 32af3111becc4b1f8f5f4e73e4151a75e1c45b4f
Allow one to use
|   <textbox type="autocomplete" sizetopopup="none" autocompletepopup="myPopup" />
and
|   <panel type="autocomplete" id="myPopup" width="300"/>
to specify that the popup's width should NOT be set to that of the
textbox. When using this, one must manually set the width on the
popup widget (set to 300 in the example above).

Currently the popup is sized to the textbox's width regardless of the
value of "sizetopopup".

The `.removeAttribute("width")` call was added for this bug:
https://bugzilla.mozilla.org/show_bug.cgi?id=381084

See: https://bugzilla.mozilla.org/show_bug.cgi?id=416250

diff --git a/toolkit/content/widgets/autocomplete.xml b/toolkit/content/widgets/autocomplete.xml
--- a/toolkit/content/widgets/autocomplete.xml
+++ b/toolkit/content/widgets/autocomplete.xml
@@ -726,12 +726,22 @@
                               .getInterface(Components.interfaces.nsIWebNavigation);
             var docShell = nav.QueryInterface(Components.interfaces.nsIDocShell);
             var docViewer = docShell.contentViewer.QueryInterface(Components.interfaces.nsIMarkupDocumentViewer);
             var width = (rect.right - rect.left) * docViewer.fullZoom;
             this.setAttribute("width", width > 100 ? width : 100);
 
+            if (aElement.sizetopopup == "always" || aElement.sizetopopup == "pref") {
+              var rect = aElement.getBoundingClientRect();
+              var nav = aElement.ownerDocument.defaultView.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
+                                .getInterface(Components.interfaces.nsIWebNavigation);
+              var docShell = nav.QueryInterface(Components.interfaces.nsIDocShell);
+              var docViewer = docShell.contentViewer.QueryInterface(Components.interfaces.nsIMarkupDocumentViewer);
+              var width = (rect.right - rect.left) * docViewer.fullZoom;
+              this.setAttribute("width", width > 100 ? width : 100);
+            }
+
             // Adjust the direction of the autocomplete popup list based on the textbox direction, bug 649840
             var popupDirection = aElement.ownerDocument.defaultView.getComputedStyle(aElement).direction;
             this.style.direction = popupDirection;
 
             // setConsumeRollupEvent() before we call openPopup()
             var nsIPopupBO = Components.interfaces.nsIPopupBoxObject;
@@ -803,17 +805,20 @@
       <property name="popupOpen" readonly="true"
                 onget="return this.mPopupOpen;"/>
 
       <method name="closePopup">
         <body>
           <![CDATA[
           if (this.mPopupOpen) {
             this.hidePopup();
-            this.removeAttribute("width");
+            var sizetopopup = this.mInput.getAttribute("sizetopopup");
+            if (sizetopopup == "always" || sizetopopup == "pref") {
+              this.removeAttribute("width");
+            }
           }
         ]]>
         </body>
       </method>
 
       <!-- This is the default number of rows that we give the autocomplete
            popup when the textbox doesn't have a "maxrows" attribute
            for us to use. -->
@@ -957,20 +962,22 @@
         <parameter name="aElement"/>
         <body>
           <![CDATA[
           if (!this.mPopupOpen) {
             this.mInput = aInput;
             // clear any previous selection, see bugs 400671 and 488357
             this.selectedIndex = -1;
 
-            var width = aElement.getBoundingClientRect().width;
-            this.setAttribute("width", width > 100 ? width : 100);
-            // invalidate() depends on the width attribute
-            this._invalidate();
+            if (aElement.sizetopopup == "always" || aElement.sizetopopup == "pref") {
+              var width = aElement.getBoundingClientRect().width;
+              this.setAttribute("width", width > 100 ? width : 100);
+              // invalidate() depends on the width attribute
+              this._invalidate();
+            }
 
             // setConsumeRollupEvent() before we call openPopup()
             var nsIPopupBO = Components.interfaces.nsIPopupBoxObject;
             this.popupBoxObject.setConsumeRollupEvent(
               this.mInput.consumeRollupEvent ?
                 nsIPopupBO.ROLLUP_CONSUME :
                 nsIPopupBO.ROLLUP_NO_CONSUME);
             this.openPopup(aElement, "after_start", 0, 0, false, false);
