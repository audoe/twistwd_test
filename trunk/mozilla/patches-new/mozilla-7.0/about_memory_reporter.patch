Index: /home/toddw/as/komodo-devel/mozilla/build/moz700-ko7.9/mozilla/toolkit/components/aboutmemory/content/aboutMemory.js
--- a/toolkit/components/aboutmemory/content/aboutMemory.js	Thu Sep 29 11:24:41 2011 -0700
+++ b/toolkit/components/aboutmemory/content/aboutMemory.js	Mon Oct 24 15:27:39 2011 -0700
@@ -489,12 +489,13 @@
     return t;
   }
 
   // Nb: the newlines give nice spacing if we cut+paste into a text buffer.
   var text = "";
   text += "<h1>" + aProcess + " Process</h1>\n\n";
+  text += genKomodoText(aReporters);
   text += genTreeText(buildTree());
   text += genOtherText(aReporters);
   text += "<hr></hr>";
   return text;
 }
 
@@ -875,6 +876,66 @@
   var content = $("content");
   var div = document.createElement("div");
   div.innerHTML = JSON.stringify(x);
   content.appendChild(div);
 }
 
+/**
+ * Generates the text for the "Komodo" section.
+ *
+ * @param aReporters
+ *        Table of reporters for this process, indexed by _path
+ * @return The generated text
+ */
+function genKomodoText(aReporters)
+{
+  // Generate an array of Reporter-like elements, stripping out all the
+  // reporters that have already been handled.  Also find the width of the
+  // widest element, so we can format things nicely.
+  var maxAmountLength = 0;
+  var rArray = [];
+  for (var path in aReporters) {
+    if (path.substr(0, 7) != "komodo ") {
+      continue;
+    }
+    var r = aReporters[path];
+    if (!r._done) {
+      var hasProblem = false;
+      if (r._amount === kUnknown) {
+        hasProblem = true;
+      }
+      var elem = {
+        _path:        r._path,
+        _kind:        r._kind,
+        _units:       r._units,
+        _amount:      hasProblem ? 0 : r._amount,
+        _description: r._description,
+        _hasProblem:  hasProblem
+      };
+      rArray.push(elem);
+      var thisAmountLength = formatReporterAmount(elem).length;
+      if (thisAmountLength > maxAmountLength) {
+        maxAmountLength = thisAmountLength;
+      }
+    }
+    // Mark it as done - so it's not reported twice.
+    r._done = true;
+  }
+
+  rArray.sort(function(x, y) { return x._path > y._path; });
+
+  // Generate text for the not-yet-printed values.
+  var text = "";
+  for (var i = 0; i < rArray.length; i++) {
+    var elem = rArray[i];
+    text += genMrValueText(
+              pad(formatReporterAmount(elem), maxAmountLength, ' ')) + " ";
+    text += genMrNameText(elem._kind, elem._description, elem._path.substr(7),
+                          elem._hasProblem);
+  }
+
+  // Nb: the newlines give nice spacing if we cut+paste into a text buffer.
+  const desc = "This list contains Komodo specific memory measurements."
+  return "<h2 class='hasDesc' title='" + desc + "'>Komodo Usage</h2>\n" +
+         "<pre>" + text + "</pre>\n";
+}
+
