# HG changeset patch
# Parent f15f06204e2494c90694b12e79c12df1f77db95c
importing patch silo-mozilla-profiles.ppatch

diff --git a/modules/libreg/src/vr_stubs.c b/modules/libreg/src/vr_stubs.c
--- a/modules/libreg/src/vr_stubs.c
+++ b/modules/libreg/src/vr_stubs.c
@@ -70,25 +70,25 @@ static const UniChar kOSXRegParentName[]
 static const UniChar kOSXRegName[] =
   { 'G', 'l', 'o', 'b', 'a', 'l', '.', 'r', 'e', 'g', 's' };
 static const UniChar kOSXVersRegName[] =
   { 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', '.', 'r', 'e', 'g', 's' };
 
 #define UNICHAR_ARRAY_LEN(s) (sizeof(s) / sizeof(UniChar))
 #endif
 
-#define DEF_REG "/.mozilla/registry"
-#define WIN_REG "\\mozregistry.dat"
-#define MAC_REG "\pMozilla Registry"
-#define BEOS_REG "/mozilla/registry"
+#define DEF_REG "/.komodo/PT_CONFIG_komodoVersion/mozilla/registry"
+#define WIN_REG "\\PT_CONFIG_komodoUndottedVersionmozregistry.dat"
+#define MAC_REG "\pKomodo-PT_CONFIG_komodoVersion Registry"
+#define BEOS_REG "/komodo/PT_CONFIG_komodoVersion/mozilla/registry"
 
-#define DEF_VERREG "/.mozilla/mozver.dat"
-#define WIN_VERREG "\\mozver.dat"
-#define MAC_VERREG "\pMozilla Versions"
-#define BEOS_VERREG "/mozilla/mozver.dat"
+#define DEF_VERREG "/.komodo/PT_CONFIG_komodoVersion/mozilla/komozver.dat"
+#define WIN_VERREG "\\koPT_CONFIG_komodoUndottedVersionmozver.dat"
+#define MAC_VERREG "\pKomodo-PT_CONFIG_komodoVersion Versions"
+#define BEOS_VERREG "/komodo/PT_CONFIG_komodoVersion/mozilla/komozver.dat"
 
 
 /* ------------------------------------------------------------------
  *  OS/2 STUBS
  * ------------------------------------------------------------------
  */
 #ifdef XP_OS2
 #define INCL_DOS
diff --git a/xpcom/io/nsAppFileLocationProvider.cpp b/xpcom/io/nsAppFileLocationProvider.cpp
--- a/xpcom/io/nsAppFileLocationProvider.cpp
+++ b/xpcom/io/nsAppFileLocationProvider.cpp
@@ -42,16 +42,17 @@
 #include "nsDirectoryServiceDefs.h"
 #include "nsIAtom.h"
 #include "nsILocalFile.h"
 #include "nsString.h"
 #include "nsXPIDLString.h"
 #include "nsISimpleEnumerator.h"
 #include "prenv.h"
 #include "nsCRT.h"
+#include "nsLocalFile.h"
 
 #if defined(XP_MACOSX)
 #include <Carbon/Carbon.h>
 #include "nsILocalFileMac.h"
 #elif defined(XP_OS2)
 #define INCL_DOSPROCESS
 #define INCL_DOSMODULEMGR
 #include <os2.h>
@@ -77,17 +78,26 @@
 #define ESSENTIAL_FILES   NS_LITERAL_CSTRING("Essential Files")
 #elif defined(XP_WIN) || defined(XP_OS2)
 #define APP_REGISTRY_NAME NS_LITERAL_CSTRING("registry.dat")
 #else
 #define APP_REGISTRY_NAME NS_LITERAL_CSTRING("appreg")
 #endif
 
 // define default product directory
-#define DEFAULT_PRODUCT_DIR NS_LITERAL_CSTRING(MOZ_USER_DIR)
+// XXX look into MOZ_USER_DIR
+#ifdef XP_MACOSX
+#define DEFAULT_PRODUCT_DIR NS_LITERAL_CSTRING("ActiveState/Komodo/5.10")
+#else
+#if defined(XP_WIN)
+#define DEFAULT_PRODUCT_DIR NS_LITERAL_CSTRING("ActiveState\\Komodo\\5.10")
+#else
+#define DEFAULT_PRODUCT_DIR NS_LITERAL_CSTRING(".komodo/5.10")
+#endif
+#endif
 
 // Locally defined keys used by nsAppDirectoryEnumerator
 #define NS_ENV_PLUGINS_DIR          "EnvPlugins"    // env var MOZ_PLUGIN_PATH
 #define NS_USER_PLUGINS_DIR         "UserPlugins"
 
 #ifdef XP_MACOSX
 #define NS_MACOSX_USER_PLUGIN_DIR   "OSXUserPlugins"
 #define NS_MACOSX_LOCAL_PLUGIN_DIR  "OSXLocalPlugins"
@@ -315,6 +315,29 @@
 // UNIX   : ~/.mozilla/
 // WIN    : <Application Data folder on user's machine>\Mozilla
 // Mac    : :Documents:Mozilla:
+//
+// Komodo change for:
+//      http://bugs.activestate.com/show_bug.cgi?id=28594
+//      http://bugs.activestate.com/show_bug.cgi?id=27985
+// Make sure that "Mozilla Product Dir" includes a directory level named for
+// the current machine. This ensures that two or more Komodo instances being
+// run with a common AppData directory (e.g., a Un*x user with a shared home
+// directory) will not conflict.
+//
+// Komodo change for:
+//      http://bugs.activestate.com/show_bug.cgi?id=32270
+// Allow the user data dir to be overriden via the KOMODO_USERDATADIR
+// environment variable.
+//
+// The intended result is:
+//      <plat-appdata-dir>/DEFAULT_PRODUCT_DIR/Mozilla
+// where,
+//      <plat-appdata-dir> is the platform-dependent application data dir, HOME
+//          dir or whater, as defined by the code in this function;
+//      DEFAULT_PRODUCT_DIR is a define in this file (modified for Komodo);
+// or, if the KOMODO_USERDATADIR environment variable is defined then the path
+// is:
+//      $KOMODO_USERDATADIR/Mozilla
 //----------------------------------------------------------------------------------------
 NS_METHOD nsAppFileLocationProvider::GetProductDirectory(nsILocalFile **aLocalFile, PRBool aLocal)
 {
@@ -324,9 +347,26 @@
     PRBool exists;
     nsCOMPtr<nsILocalFile> localDir;
 
+    char *userDataDir = PR_GetEnv("KOMODO_USERDATADIR");
+    if (userDataDir)
+    {
+        nsLocalFile* customLocalDir = new nsLocalFile;
+        if (customLocalDir == nsnull)
+            return NS_ERROR_OUT_OF_MEMORY;
+        NS_ADDREF(customLocalDir);
+
+        customLocalDir->InitWithNativePath(nsDependentCString(userDataDir));
+        customLocalDir->Normalize();
+        rv = customLocalDir->AppendRelativeNativePath(NS_LITERAL_CSTRING("PT_CONFIG_komodoVersion"));
+        if (NS_FAILED(rv)) return rv;
+        localDir = customLocalDir;
+    }
+    else
+    {
+
 #if defined(XP_MACOSX)
     FSRef fsRef;
-    OSType folderType = aLocal ? (OSType) kCachedDataFolderType : (OSType) kDomainLibraryFolderType;
+    OSType folderType = aLocal ? (OSType) kCachedDataFolderType : (OSType) kApplicationSupportFolderType;
     OSErr err = ::FSFindFolder(kUserDomain, folderType, kCreateFolder, &fsRef);
     if (err) return NS_ERROR_FAILURE;
     NS_NewLocalFile(EmptyString(), PR_TRUE, getter_AddRefs(localDir));
@@ -376,16 +426,23 @@ NS_METHOD nsAppFileLocationProvider::Get
     rv = NS_NewNativeLocalFile(nsDependentCString(path), PR_TRUE, getter_AddRefs(localDir));
     if (NS_FAILED(rv)) return rv;
 #else
 #error dont_know_how_to_get_product_dir_on_your_platform
 #endif
 
     rv = localDir->AppendRelativeNativePath(DEFAULT_PRODUCT_DIR);
     if (NS_FAILED(rv)) return rv;
+
+    } // end if $KOMODO_USERDATADIR
+
+
+    rv = localDir->AppendRelativeNativePath(NS_LITERAL_CSTRING("Mozilla"));
+    if (NS_FAILED(rv)) return rv;
+
     rv = localDir->Exists(&exists);
 
     if (NS_SUCCEEDED(rv) && !exists)
         rv = localDir->Create(nsIFile::DIRECTORY_TYPE, 0700);
 
     if (NS_FAILED(rv)) return rv;
 
     *aLocalFile = localDir;
