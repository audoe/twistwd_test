Index: /Users/toddw/as/komodo-devel/mozilla/build/moz191-ko6.10/mozilla/layout/generic/nsObjectFrame.cpp
--- layout/generic/nsObjectFrame.cpp	Thu Jan 28 17:05:14 2010 -0800
+++ layout/generic/nsObjectFrame.cpp	Fri Feb 05 10:15:12 2010 -0800
@@ -459,6 +459,11 @@
     return strncmp(GetPluginName(), aPluginName, strlen(aPluginName)) == 0;
   }
 
+  PRBool AllowsFocus()
+  {
+    return mPluginAllowsFocus;
+  }
+
 private:
   void FixUpURLS(const nsString &name, nsAString &value);
 
@@ -488,6 +493,9 @@
   // If true, destroy the widget on destruction. Used when plugin stop
   // is being delayed to a safer point in time.
   PRPackedBool                mDestroyWidget;
+  PRPackedBool                mPluginAllowsFocus;
+  PRPackedBool                mPluginHandlesDomEvents;
+  PRPackedBool                mPluginHandlesDragEvents;
   PRUint16          mNumCachedAttrs;
   PRUint16          mNumCachedParams;
   char              **mCachedAttrParamNames;
@@ -746,8 +754,9 @@
   return NS_OK;
 }
 
-#define EMBED_DEF_WIDTH 240
-#define EMBED_DEF_HEIGHT 200
+// XXX ActiveState
+#define EMBED_DEF_WIDTH 20
+#define EMBED_DEF_HEIGHT 20
 
 /* virtual */ nscoord
 nsObjectFrame::GetMinWidth(nsIRenderingContext *aRenderingContext)
@@ -1004,6 +1013,9 @@
 PRBool
 nsObjectFrame::IsFocusable(PRInt32 *aTabIndex, PRBool aWithMouse)
 {
+  if (mInstanceOwner && !mInstanceOwner->AllowsFocus()) {
+    return PR_FALSE;
+  }
   if (aTabIndex)
     *aTabIndex = -1;
   return nsObjectFrameSuper::IsFocusable(aTabIndex, aWithMouse);
@@ -2238,6 +2250,9 @@
   mCachedAttrParamNames = nsnull;
   mCachedAttrParamValues = nsnull;
   mDestroyWidget = PR_FALSE;
+  mPluginAllowsFocus = PR_TRUE;
+  mPluginHandlesDomEvents = PR_FALSE;
+  mPluginHandlesDragEvents = PR_FALSE;
 
   PR_LOG(nsObjectFrameLM, PR_LOG_DEBUG,
          ("nsPluginInstanceOwner %p created\n", this));
@@ -3754,8 +3769,15 @@
                             anEvent.message == NS_MOUSE_BUTTON_DOWN &&
                             static_cast<const nsMouseEvent&>(anEvent).button ==
                               nsMouseEvent::eLeftButton &&
-                            !mContentFocused))
+                            !mContentFocused)) {
         rv = nsEventStatus_eConsumeNoDefault;
+      } else {
+        /* KOMODO: For the Mac, we want the plugin to determine what happens to
+                   this event, whether this event is consumed (PR_TRUE) or
+                   not (PR_FALSE).
+        */
+        rv = static_cast<nsEventStatus>(eventHandled);
+      }
 
       pluginWidget->EndDrawPlugin();
     }
@@ -4027,7 +4049,7 @@
   }
 
   nsCOMPtr<nsIDOMEventTarget> target(do_QueryInterface(mContent));
-  if (target) {
+  if (target && mPluginHandlesDomEvents) {
 
     nsCOMPtr<nsIDOMEventListener> listener;
     QueryInterface(NS_GET_IID(nsIDOMEventListener), getter_AddRefs(listener));
@@ -4046,17 +4068,19 @@
     target->RemoveEventListener(NS_LITERAL_STRING("keydown"), listener, PR_TRUE);
     target->RemoveEventListener(NS_LITERAL_STRING("keyup"), listener, PR_TRUE);
 
-    // Unregister drag event listener;
-    target->RemoveEventListener(NS_LITERAL_STRING("drop"), listener, PR_TRUE);
-    target->RemoveEventListener(NS_LITERAL_STRING("dragdrop"), listener, PR_TRUE);
-    target->RemoveEventListener(NS_LITERAL_STRING("drag"), listener, PR_TRUE);
-    target->RemoveEventListener(NS_LITERAL_STRING("dragenter"), listener, PR_TRUE);
-    target->RemoveEventListener(NS_LITERAL_STRING("dragover"), listener, PR_TRUE);
-    target->RemoveEventListener(NS_LITERAL_STRING("dragexit"), listener, PR_TRUE);
-    target->RemoveEventListener(NS_LITERAL_STRING("dragleave"), listener, PR_TRUE);
-    target->RemoveEventListener(NS_LITERAL_STRING("dragstart"), listener, PR_TRUE);
-    target->RemoveEventListener(NS_LITERAL_STRING("draggesture"), listener, PR_TRUE);
-    target->RemoveEventListener(NS_LITERAL_STRING("dragend"), listener, PR_TRUE);
+    if (mPluginHandlesDragEvents) {
+      // Unregister drag event listener;
+      target->RemoveEventListener(NS_LITERAL_STRING("drop"), listener, PR_TRUE);
+      target->RemoveEventListener(NS_LITERAL_STRING("dragdrop"), listener, PR_TRUE);
+      target->RemoveEventListener(NS_LITERAL_STRING("drag"), listener, PR_TRUE);
+      target->RemoveEventListener(NS_LITERAL_STRING("dragenter"), listener, PR_TRUE);
+      target->RemoveEventListener(NS_LITERAL_STRING("dragover"), listener, PR_TRUE);
+      target->RemoveEventListener(NS_LITERAL_STRING("dragexit"), listener, PR_TRUE);
+      target->RemoveEventListener(NS_LITERAL_STRING("dragleave"), listener, PR_TRUE);
+      target->RemoveEventListener(NS_LITERAL_STRING("dragstart"), listener, PR_TRUE);
+      target->RemoveEventListener(NS_LITERAL_STRING("draggesture"), listener, PR_TRUE);
+      target->RemoveEventListener(NS_LITERAL_STRING("dragend"), listener, PR_TRUE);
+    }
   }
 
   if (mWidget) {
@@ -4507,7 +4533,19 @@
   }
 
   nsCOMPtr<nsIDOMEventTarget> target(do_QueryInterface(mContent));
-  if (target) {
+
+  if (target && mContent->AttrValueIs(kNameSpaceID_None,
+                                      nsGkAtoms::pluginAllowsFocusEvents,
+                                      NS_LITERAL_STRING("false"),
+                                      eCaseMatters)) {
+    mPluginAllowsFocus = PR_FALSE;
+  }
+
+  if (target && !mContent->AttrValueIs(kNameSpaceID_None,
+                                       nsGkAtoms::pluginHandlesDomEvents,
+                                       NS_LITERAL_STRING("false"),
+                                       eCaseMatters)) {
+    mPluginHandlesDomEvents = PR_TRUE;
 
     nsCOMPtr<nsIDOMEventListener> listener;
     QueryInterface(NS_GET_IID(nsIDOMEventListener), getter_AddRefs(listener));
@@ -4526,17 +4564,23 @@
     target->AddEventListener(NS_LITERAL_STRING("keydown"), listener, PR_TRUE);
     target->AddEventListener(NS_LITERAL_STRING("keyup"), listener, PR_TRUE);
 
-    // Register drag listener
-    target->AddEventListener(NS_LITERAL_STRING("drop"), listener, PR_TRUE);
-    target->AddEventListener(NS_LITERAL_STRING("dragdrop"), listener, PR_TRUE);
-    target->AddEventListener(NS_LITERAL_STRING("drag"), listener, PR_TRUE);
-    target->AddEventListener(NS_LITERAL_STRING("dragenter"), listener, PR_TRUE);
-    target->AddEventListener(NS_LITERAL_STRING("dragover"), listener, PR_TRUE);
-    target->AddEventListener(NS_LITERAL_STRING("dragleave"), listener, PR_TRUE);
-    target->AddEventListener(NS_LITERAL_STRING("dragexit"), listener, PR_TRUE);
-    target->AddEventListener(NS_LITERAL_STRING("dragstart"), listener, PR_TRUE);
-    target->AddEventListener(NS_LITERAL_STRING("draggesture"), listener, PR_TRUE);
-    target->AddEventListener(NS_LITERAL_STRING("dragend"), listener, PR_TRUE);
+    if (!mContent->AttrValueIs(kNameSpaceID_None,
+                               nsGkAtoms::pluginHandlesDragEvents,
+                               NS_LITERAL_STRING("false"),
+                               eCaseMatters)) {
+      mPluginHandlesDragEvents = PR_TRUE;
+      // Register drag listener
+      target->AddEventListener(NS_LITERAL_STRING("drop"), listener, PR_TRUE);
+      target->AddEventListener(NS_LITERAL_STRING("dragdrop"), listener, PR_TRUE);
+      target->AddEventListener(NS_LITERAL_STRING("drag"), listener, PR_TRUE);
+      target->AddEventListener(NS_LITERAL_STRING("dragenter"), listener, PR_TRUE);
+      target->AddEventListener(NS_LITERAL_STRING("dragover"), listener, PR_TRUE);
+      target->AddEventListener(NS_LITERAL_STRING("dragleave"), listener, PR_TRUE);
+      target->AddEventListener(NS_LITERAL_STRING("dragexit"), listener, PR_TRUE);
+      target->AddEventListener(NS_LITERAL_STRING("dragstart"), listener, PR_TRUE);
+      target->AddEventListener(NS_LITERAL_STRING("draggesture"), listener, PR_TRUE);
+      target->AddEventListener(NS_LITERAL_STRING("dragend"), listener, PR_TRUE);
+    }
   }
   
   // Register scroll position listener
