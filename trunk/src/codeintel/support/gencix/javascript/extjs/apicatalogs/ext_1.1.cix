<?xml version="1.0" encoding="UTF-8"?>
<codeintel description="Ext JavaScript framework - version 1.1.1" name="ext_v111" version="2.0">
  <file lang="JavaScript" path="">
    <scope ilk="blob" lang="JavaScript" name="ext_111" src="">
      <variable attributes="private" citdl="Ext.Element.Flyweight" line="10" name="libFlyweight" />
      <variable attributes="private" citdl="YAHOO.util.Dom" line="15" name="D" />
      <variable attributes="private" citdl="YAHOO.util.Connect" line="16" name="CN" />
      <variable attributes="private" citdl="YAHOO.util.Easing" line="18" name="ES" />
      <variable attributes="private" citdl="YAHOO.util.Anim" line="19" name="A" />
      <variable attributes="private" citdl="Ext.EventManager" line="19" name="Event" />
      <variable attributes="private" citdl="Ext.lib.Dom" line="20" name="Dom" />
      <variable attributes="private" citdl="Number" doc="for use with generateId" line="32" name="id_counter" />
      <variable attributes="private" citdl="Object" doc="for use with generateId" line="32" lineend="32" name="propertyCache" />
      <variable attributes="private" doc="for use with generateId" line="32" name="getStyle" />
      <variable attributes="private" doc="for use with generateId" line="32" name="setStyle" />
      <variable citdl="Object" line="39" lineend="49" name="YAHOO">
        <variable citdl="Object" line="39" name="util">
          <variable citdl="Object" doc="The Connection Manager provides a simplified interface to the XMLHttpRequest&#xA;object.  It handles cross-browser instantiantion of XMLHttpRequest, negotiates the&#xA;interactive states and server response, returning the results to a pre-defined&#xA;callback you create." line="34" lineend="1061" name="Connect">
            <variable attributes="private __static__" citdl="Array" doc="PRIVATE STATIC: Array of MSFT ActiveX ids for XMLHttpRequest." line="43" name="_msxml_progid" />
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Object literal of HTTP header(s)" line="55" lineend="674" name="_http_headers" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Determines if HTTP headers are set." line="64" name="_has_http_headers" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Determines if a default header of&#xA;Content-Type of &apos;application/x-www-form-urlencoded&apos;&#xA;will be added to any client HTTP headers sent for POST&#xA;transactions." line="76" name="_use_default_post_header" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Determines if a default header of&#xA;Content-Type of &apos;application/x-www-form-urlencoded&apos;&#xA;will be added to client HTTP headers sent for POST&#xA;transactions." line="88" name="_default_post_header" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Determines if a default header of&#xA;&apos;X-Requested-With: XMLHttpRequest&apos;&#xA;will be added to each transaction." line="99" name="_use_default_xhr_header" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: The default header value for the label&#xA;&quot;X-Requested-With&quot;.  This is sent with each&#xA;transaction, by default, to identify the&#xA;request as being made by YUI Connection Manager." line="111" name="_default_xhr_header" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Determines if custom, default headers&#xA;are set for each transaction." line="121" name="_has_default_headers" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Determines if custom, default headers&#xA;are set for each transaction." line="131" lineend="688" name="_default_headers" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Property modified by setForm() to determine if the data&#xA;should be submitted as an HTML form." line="141" name="_isFormSubmit" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Property modified by setForm() to determine if a file(s)&#xA;upload is expected." line="151" name="_isFileUpload" />
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Property modified by setForm() to set a reference to the HTML&#xA;form node if the desired action is file upload." line="161" name="_formNode" />
            <variable attributes="private __static__" citdl="String" doc="PRIVATE STATIC: Property modified by setForm() to set the HTML form data&#xA;for each transaction." line="171" name="_sFormData" />
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Collection of polling references to the polling mechanism in handleReadyState." line="180" lineend="180" name="_poll" />
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Queue of timeout values for each transaction callback with a defined timeout value." line="189" lineend="189" name="_timeOut" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: The polling frequency, in milliseconds, for HandleReadyState.&#xA;when attempting to determine a transaction&apos;s XHR readyState.&#xA;The default is 50 milliseconds." line="200" name="_polling_interval" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: A transaction counter that increments the transaction id for each transaction." line="209" name="_transaction_id" />
            <scope attributes="__static__" doc="STATIC: Member to add an ActiveX id to the existing xml_progid array.&#xA;In the event(unlikely) a new ActiveX id is introduced, it can be added&#xA;without internal code modifications." ilk="function" line="222" lineend="224" name="setProgId" signature="setProgId(id)">
              <variable citdl="String" doc="The ActiveX id to be added to initialize the XHR object." ilk="argument" name="id" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Member to enable or disable the default POST header." ilk="function" line="235" lineend="237" name="setDefaultPostHeader" signature="setDefaultPostHeader(b)">
              <variable citdl="Boolean" doc="Set and use default header - true or false ." ilk="argument" name="b" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Member to enable or disable the default POST header." ilk="function" line="248" lineend="250" name="setDefaultXhrHeader" signature="setDefaultXhrHeader(b)">
              <variable citdl="Boolean" doc="Set and use default header - true or false ." ilk="argument" name="b" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Member to modify the default polling interval." ilk="function" line="261" lineend="265" name="setPollingInterval" signature="setPollingInterval(i)">
              <variable citdl="Number" doc="The polling interval in milliseconds." ilk="argument" name="i" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Instantiates a XMLHttpRequest object and returns an object with two properties:&#xA;the XMLHttpRequest instance and the transaction id." ilk="function" line="277" lineend="304" name="createXhrObject" returns="Object" signature="createXhrObject(transactionId)">
              <variable citdl="Number" doc="Property containing the transaction id for this transaction." ilk="argument" name="transactionId" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="XMLHttpRequest" line="278" name="http" />
              <variable attributes="__local__ private" line="278" lineend="294" name="obj">
                <variable citdl="transactionId" line="284" name="tId" />
                <variable citdl="http" line="284" name="conn" />
              </variable>
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: This method is called by asyncRequest to create a&#xA;valid connection object for the transaction.  It also passes a&#xA;transaction id and increments the transaction id counter." ilk="function" line="316" lineend="332" name="getConnectionObject" returns="Object" signature="getConnectionObject()">
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="this.createXhrObject()" line="317" name="o" />
              <variable attributes="__local__ private" citdl="this._transaction_id" line="318" name="tId" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Method for initiating an asynchronous request via the XHR object." ilk="function" line="346" lineend="404" name="asyncRequest" returns="Object" signature="asyncRequest(method, uri, callback, postData)">
              <variable citdl="String" doc="HTTP transaction method" ilk="argument" name="method" />
              <variable citdl="String" doc="Fully qualified path of resource" ilk="argument" name="uri" />
              <variable citdl="callback" doc="User-defined callback function or object" ilk="argument" name="callback" />
              <variable citdl="String" doc="POST body" ilk="argument" name="postData" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="this.getConnectionObject()" line="347" name="o" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: This method serves as a timer that polls the XHR object&apos;s readyState&#xA;property during a transaction, instead of binding a callback to the&#xA;onreadystatechange event.  Upon readyState 4, handleTransactionResponse&#xA;will process the response, and the timer will be cleared." ilk="function" line="419" lineend="440" name="handleReadyState" signature="handleReadyState(o, callback)">
              <variable citdl="Object" doc="The connection object" ilk="argument" name="o" />
              <variable citdl="callback" doc="The user-defined callback object" ilk="argument" name="callback" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="this" line="420" name="oConn" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: This method attempts to interpret the server response and&#xA;determine whether the transaction was successful, or if an error or&#xA;exception was encountered." ilk="function" line="455" lineend="527" name="handleTransactionResponse" signature="handleTransactionResponse(o, callback, isAbort)">
              <variable citdl="Object" doc="The connection object" ilk="argument" name="o" />
              <variable citdl="Object" doc="The sser-defined callback object" ilk="argument" name="callback" />
              <variable citdl="Boolean" doc="Determines if the transaction was aborted." ilk="argument" name="isAbort" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="this.createResponseObject()" line="462" name="responseObject" />
              <variable attributes="__local__ private" citdl="o.conn.status" line="462" name="httpStatus" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: This method evaluates the server response, creates and returns the results via&#xA;its properties.  Success and failure cases will differ in the response&#xA;object&apos;s property values." ilk="function" line="541" lineend="571" name="createResponseObject" returns="Object" signature="createResponseObject(o, callbackArg)">
              <variable citdl="Object" doc="The connection object" ilk="argument" name="o" />
              <variable citdl="callbackArg" doc="The user-defined argument or arguments to be passed to the callback" ilk="argument" name="callbackArg" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="542" lineend="542" name="obj">
                <variable citdl="o.tId" line="558" name="tId" />
                <variable citdl="o.conn.status" line="559" name="status" />
                <variable citdl="o.conn.statusText" line="560" name="statusText" />
                <variable citdl="headerObj" line="561" name="getResponseHeader" />
                <variable citdl="headerStr" line="562" name="getAllResponseHeaders" />
                <variable citdl="o.conn.responseText" line="563" name="responseText" />
                <variable citdl="o.conn.responseXML" line="564" name="responseXML" />
                <variable citdl="callbackArg" line="567" name="argument" />
              </variable>
              <variable attributes="__local__ private" citdl="Object" line="543" lineend="543" name="headerObj" />
              <variable attributes="__local__ private" citdl="o.conn.getAllResponseHeaders()" line="547" name="headerStr" />
              <variable attributes="__local__ private" citdl="headerStr.split()" line="548" name="header" />
              <variable attributes="__local__ private" citdl="header[i].indexOf()" line="550" name="delimitPos" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: If a transaction cannot be completed due to dropped or closed connections,&#xA;there may be not be enough information to build a full response object.&#xA;The failure callback will be fired and this specific condition can be identified&#xA;by a status property value of 0.&#xA;&#xA;If an abort was successful, the status property will report a value of -1." ilk="function" line="590" lineend="613" name="createExceptionObject" returns="Object" signature="createExceptionObject(tId, callbackArg, isAbort)">
              <variable citdl="Number" doc="The Transaction Id" ilk="argument" name="tId" />
              <variable citdl="callbackArg" doc="The user-defined argument or arguments to be passed to the callback" ilk="argument" name="callbackArg" />
              <variable citdl="Boolean" doc="Determines if the exception case is caused by a transaction abort" ilk="argument" name="isAbort" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="Number" line="591" name="COMM_CODE" />
              <variable attributes="__local__ private" citdl="String" line="592" name="COMM_ERROR" />
              <variable attributes="__local__ private" citdl="Number" line="593" name="ABORT_CODE" />
              <variable attributes="__local__ private" citdl="String" line="594" name="ABORT_ERROR" />
              <variable attributes="__local__ private" citdl="Object" line="596" lineend="596" name="obj">
                <variable citdl="tId" line="598" name="tId" />
                <variable citdl="ABORT_CODE" line="600" name="status" />
                <variable citdl="ABORT_ERROR" line="601" name="statusText" />
                <variable citdl="callbackArg" line="609" name="argument" />
              </variable>
            </scope>
            <scope attributes="__static__" doc="STATIC: Method that initializes the custom HTTP headers for the each transaction." ilk="function" line="627" lineend="645" name="initHeader" signature="initHeader(label, value, isDefault)">
              <variable citdl="String" doc="The HTTP header label" ilk="argument" name="label" />
              <variable citdl="String" doc="The HTTP header value" ilk="argument" name="value" />
              <variable citdl="String" doc="Determines if the specific header is a default header&#xA;automatically sent with each transaction." ilk="argument" name="isDefault" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" line="628" name="headerObj" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Accessor that sets the HTTP headers for each transaction." ilk="function" line="657" lineend="677" name="setHeader" signature="setHeader(o)">
              <variable citdl="Object" doc="The connection object for the transaction." ilk="argument" name="o" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Resets the default HTTP headers object" ilk="function" line="686" lineend="690" name="resetDefaultHeaders" signature="resetDefaultHeaders()">
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: This method assembles the form label and value pairs and&#xA;constructs an encoded string.&#xA;asyncRequest() will automatically initialize the&#xA;transaction with a HTTP header Content-Type of&#xA;application/x-www-form-urlencoded." ilk="function" line="707" lineend="806" name="setForm" returns="String" signature="setForm(formId, isUpload, secureUri)">
              <variable ilk="argument" name="formId" />
              <variable ilk="argument" name="isUpload" />
              <variable ilk="argument" name="secureUri" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="formId" line="709" name="oForm" />
              <variable attributes="__local__ private" citdl="oForm.elements[i].value" line="743" name="oValue" />
              <variable attributes="__local__ private" citdl="oForm.elements[i].disabled" line="743" name="oDisabled" />
              <variable attributes="__local__ private" citdl="oForm.elements[i]" line="743" name="oElement" />
              <variable attributes="__local__ private" citdl="oForm.elements[i].name" line="743" name="oName" />
              <variable attributes="__local__ private" citdl="Boolean" line="744" name="hasSubmit" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Resets HTML form properties when an HTML form or HTML form&#xA;with file upload transaction is sent." ilk="function" line="816" lineend="821" name="resetFormState" signature="resetFormState()">
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Creates an iframe to be used for form file uploads.  It is remove from the&#xA;document upon completion of the upload transaction." ilk="function" line="832" lineend="862" name="createFrame" signature="createFrame(secureUri)">
              <variable ilk="argument" name="secureUri" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="String" doc="pattern is required for IE." line="837" name="frameId" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="839" name="io">
                <variable citdl="Object" line="857" name="style">
                  <variable citdl="String" line="857" name="position" />
                  <variable citdl="String" line="858" name="top" />
                  <variable citdl="String" line="859" name="left" />
                </variable>
              </variable>
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Parses the POST data and creates hidden form elements&#xA;for each key-value, and appends them to the HTML form object." ilk="function" line="874" lineend="889" name="appendPostData" returns="Array" signature="appendPostData(postData)">
              <variable citdl="String" doc="The HTTP POST data" ilk="argument" name="postData" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="875" name="formElements" />
              <variable attributes="__local__ private" citdl="postData.split()" line="876" name="postMessage" />
              <variable attributes="__local__ private" citdl="postMessage[i].indexOf()" line="878" name="delimitPos" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Uploads HTML form, including files/attachments, to the&#xA;iframe created in createFrame." ilk="function" line="902" lineend="993" name="uploadFile" signature="uploadFile(id, callback, uri, postData)">
              <variable citdl="Number" doc="The transaction id." ilk="argument" name="id" />
              <variable citdl="Object" doc="- User-defined callback object." ilk="argument" name="callback" />
              <variable citdl="String" doc="Fully qualified path of resource." ilk="argument" name="uri" />
              <variable ilk="argument" name="postData" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="String" doc="by the unique transaction id." line="906" name="frameId" />
              <variable attributes="__local__ private" citdl="String" line="907" name="uploadEncoding" />
              <variable attributes="__local__ private" citdl="document.getElementById()" line="908" name="io" />
              <variable attributes="__local__ private" citdl="this.appendPostData()" line="927" name="oElements" />
              <scope attributes="__local__ private" doc="and the iframe removed from the document." ilk="function" line="946" lineend="980" name="uploadCallback" signature="uploadCallback()">
                <variable attributes="__local__ private" citdl="Object" line="947" lineend="947" name="obj">
                  <variable citdl="id" line="948" name="tId" />
                  <variable citdl="callback.argument" line="949" name="argument" />
                  <variable citdl="io.contentWindow.document.body" line="953" name="responseText" />
                  <variable citdl="io.contentWindow.document.XMLDocument" line="954" name="responseXML" />
                </variable>
              </scope>
            </scope>
            <variable citdl="uri" doc="not defined in the HTML form." line="912" name="action" />
            <variable citdl="String" line="913" name="method" />
            <variable citdl="frameId" line="914" name="target" />
            <variable citdl="uploadEncoding" doc="Instead it uses the property - &quot;encoding&quot;." line="919" name="encoding" />
            <variable citdl="uploadEncoding" line="922" name="enctype" />
            <scope attributes="__static__" doc="STATIC: Method to terminate a transaction, if it has not reached readyState 4." ilk="function" line="1006" lineend="1022" name="abort" returns="Boolean" signature="abort(o, callback, isTimeout)">
              <variable citdl="Object" doc="The connection object returned by asyncRequest." ilk="argument" name="o" />
              <variable citdl="Object" doc="User-defined callback object." ilk="argument" name="callback" />
              <variable citdl="String" doc="boolean to indicate if abort was a timeout." ilk="argument" name="isTimeout" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Public method to check if the transaction is still being processed." ilk="function" line="1034" lineend="1044" name="isCallInProgress" returns="Boolean" signature="isCallInProgress(o)">
              <variable citdl="Object" doc="The connection object returned by asyncRequest" ilk="argument" name="o" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Dereference the XHR instance and the connection object after the transaction is completed." ilk="function" line="1055" lineend="1060" name="releaseObject" signature="releaseObject(o)">
              <variable citdl="Object" doc="The connection object" ilk="argument" name="o" />
              <variable citdl="Connect" name="this" />
            </scope>
          </variable>
          <variable citdl="Object" line="39" lineend="1281" name="Event">
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: The number of times we should look for elements that are not&#xA;in the DOM at the time the event is requested after the document&#xA;has been loaded.  The default is 200@amp;50 ms, so it will poll&#xA;for 10 seconds or until all outstanding handlers are bound&#xA;(whichever comes first)." line="142" name="POLL_RETRYS" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: The poll interval in milliseconds" line="151" name="POLL_INTERVAL" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Element to bind, int constant" line="160" name="EL" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Type of event, int constant" line="169" name="TYPE" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Function to execute, int constant" line="178" name="FN" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Function wrapped for scope correction and cleanup, int constant" line="187" name="WFN" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Object passed in by the user that will be returned as a&#xA;parameter to the callback, int constant" line="197" name="OBJ" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Adjusted scope, either the element we are registering the event&#xA;on or the custom object passed in by the listener, int constant" line="207" name="ADJ_SCOPE" />
            <variable attributes="deprecated private __static__" doc="DEPRECATED PRIVATE STATIC: Safari detection is necessary to work around the preventDefault&#xA;bug that makes it so you can&apos;t cancel a href click from the&#xA;handler.  Since this function has been used outside of this&#xA;utility, it was changed to detect all KHTML browser to be more&#xA;friendly towards the non-Safari browsers that share the engine.&#xA;Internally, the preventDefault bug detection now uses the&#xA;webkit property." line="222" name="isSafari" />
            <variable doc="If WebKit is detected, we keep track of the version number of&#xA;the engine.&#xA;Safari 1.3.2 (312.6): 312.8.1 &lt;-- currently the latest&#xA;available on Mac OSX 10.3.&#xA;Safari 2.0.2: 416 &lt;-- hasOwnProperty introduced&#xA;Safari 2.0.4: 418 &lt;-- preventDefault fixed (I believe)&#xA;Safari 2.0.4 (419.3): 418.9.1 &lt;-- current release&#xA;&#xA;http://developer.apple.com/internet/safari/uamatrix.html" line="236" name="webkit" />
            <variable attributes="private __static__" doc="PRIVATE STATIC: IE detection needed to properly calculate pageX and pageY.&#xA;capabilities checking didn&apos;t seem to work because another&#xA;browser that does not provide the properties have the values&#xA;calculated in a different manner than IE." line="254" name="isIE" />
            <variable attributes="private" citdl="setInterval()" doc="PRIVATE: poll handle" line="261" name="_interval" />
            <scope attributes="private __static__" doc="*/" ilk="function" line="268" lineend="275" name="startInterval" signature="startInterval()">
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="this" line="270" name="self" />
              <scope attributes="__local__ private" ilk="function" line="271" lineend="271" name="callback" signature="callback()" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Executes the supplied callback when the item with the supplied&#xA;id is found.  This is meant to be used to execute behavior as&#xA;soon as possible as the page loads.  If you use this after the&#xA;initial page load it will poll for a fixed time for the element.&#xA;The number of times it will poll and the frequency are&#xA;configurable.  By default it will poll for 10 seconds." ilk="function" line="296" lineend="305" name="onAvailable" signature="onAvailable(p_id, p_fn, p_obj, p_override)">
              <variable citdl="String" doc="the id of the element to look for." ilk="argument" name="p_id" />
              <variable citdl="Function" doc="what to execute when the element is found." ilk="argument" name="p_fn" />
              <variable citdl="Object" doc="an optional object to be passed back as&#xA;a parameter to p_fn." ilk="argument" name="p_obj" />
              <variable citdl="Boolean" doc="If set to true, p_fn will execute&#xA;in the scope of p_obj" ilk="argument" name="p_override" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Works the same way as onAvailable, but additionally checks the&#xA;state of sibling elements to determine if the content of the&#xA;available element is safe to modify." ilk="function" line="323" lineend="332" name="onContentReady" signature="onContentReady(p_id, p_fn, p_obj, p_override)">
              <variable citdl="String" doc="the id of the element to look for." ilk="argument" name="p_id" />
              <variable citdl="Function" doc="what to execute when the element is ready." ilk="argument" name="p_fn" />
              <variable citdl="Object" doc="an optional object to be passed back as&#xA;a parameter to p_fn." ilk="argument" name="p_obj" />
              <variable citdl="Boolean" doc="If set to true, p_fn will execute&#xA;in the scope of p_obj" ilk="argument" name="p_override" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Appends an event handler" ilk="function" line="353" lineend="477" name="addListener" returns="Boolean" signature="addListener(el, sType, fn, obj, override)">
              <variable citdl="Object" doc="The html element to assign the&#xA;event to" ilk="argument" name="el" />
              <variable citdl="String" doc="The type of event to append" ilk="argument" name="sType" />
              <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
              <variable citdl="Object" doc="An arbitrary object that will be&#xA;passed as a parameter to the handler" ilk="argument" name="obj" />
              <variable citdl="Boolean" doc="If true, the obj passed in becomes&#xA;the execution scope of the listener" ilk="argument" name="override" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="362" name="ok" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="373" name="oEl" />
              <variable attributes="__local__ private" citdl="el" doc="HTML element that the event is registered on" line="413" name="scope" />
              <scope attributes="__local__ private" doc="the event fires;" ilk="function" line="424" lineend="427" name="wrappedFn" returns="fn.call()" signature="wrappedFn(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <variable attributes="__local__ private" citdl="Array" line="429" name="li" />
              <variable attributes="__local__ private" citdl="listeners.length" line="430" name="index" />
              <variable attributes="__local__ private" citdl="this.getLegacyIndex()" line="435" name="legacyIndex" />
            </scope>
            <variable citdl="ex" doc="we need to clean up the cache" line="469" name="lastError" />
            <scope attributes="private __static__" doc="PRIVATE STATIC: When using legacy events, the handler is routed to this object&#xA;so we can fire our custom listener stack." ilk="function" line="486" lineend="509" name="fireLegacyEvent" returns="ok" signature="fireLegacyEvent(e, legacyIndex)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="legacyIndex" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="legacyEvents[legacyIndex]" line="487" name="le" />
              <variable attributes="__local__ private" citdl="Boolean" line="487" name="ok" />
              <variable attributes="__local__ private" citdl="li[this.WFN].call()" line="487" name="ret" />
              <variable attributes="__local__ private" citdl="lh[i]" line="487" name="li" />
              <variable attributes="__local__ private" citdl="legacyHandlers[legacyIndex]" line="487" name="lh" />
              <variable attributes="__local__ private" citdl="li[this.ADJ_SCOPE]" line="487" name="scope" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Returns the legacy event index that matches the supplied&#xA;signature" ilk="function" line="518" lineend="525" name="getLegacyIndex" returns="legacyMap[key]" signature="getLegacyIndex(el, sType)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="sType" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="this.generateId()" line="519" name="key" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Logic that determines when we should automatically use legacy&#xA;events instead of DOM2 events.  Currently this is limited to old&#xA;Safari browsers with a broken preventDefault" ilk="function" line="535" lineend="543" name="useLegacyEvent" returns="Boolean" signature="useLegacyEvent(el, sType)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="sType" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="parseInt()" line="537" name="v" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Removes an event handler" ilk="function" line="560" lineend="649" name="removeListener" returns="Boolean" signature="removeListener(el, sType, fn)">
              <variable citdl="Object" doc="the html element or the id of the element to&#xA;assign the event to." ilk="argument" name="el" />
              <variable citdl="String" doc="the type of event to remove." ilk="argument" name="sType" />
              <variable citdl="Function" doc="the method the event invokes.  If fn is&#xA;undefined, then all event handlers for the type of event are&#xA;removed." ilk="argument" name="fn" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" line="561" name="i" />
              <variable attributes="__local__ private" line="561" name="len" />
              <variable attributes="__local__ private" citdl="Boolean" line="568" name="ok" />
              <variable attributes="__local__ private" citdl="unloadListeners[i]" line="584" name="li" />
              <variable attributes="__local__ private" citdl="listeners[index]" line="597" name="cacheItem" />
              <variable attributes="__local__ private" citdl="arguments[3]" doc="try and take advantage of it, which is not possible." line="602" name="index" />
              <variable attributes="__local__ private" citdl="this.getLegacyIndex()" line="618" name="legacyIndex" />
              <variable attributes="__local__ private" citdl="legacyHandlers[legacyIndex]" line="619" name="llist" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the event&apos;s target element" ilk="function" line="662" lineend="665" name="getTarget" returns="HTMLElement" signature="getTarget(ev, resolveTextNode)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Boolean" doc="when set to true the target&apos;s&#xA;parent will be returned if the target is a&#xA;text node.  @deprecated, the text node is&#xA;now resolved automatically" ilk="argument" name="resolveTextNode" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="ev.target" line="663" name="t" />
            </scope>
            <scope attributes="__static__" doc="STATIC: In some cases, some browsers will return a text node inside&#xA;the actual element that was targeted.  This normalizes the&#xA;return value for getTarget and getRelatedTarget." ilk="function" line="676" lineend="684" name="resolveTextNode" returns="HTMLElement" signature="resolveTextNode(node)">
              <variable citdl="HTMLElement" doc="node to resolve" ilk="argument" name="node" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the event&apos;s pageX" ilk="function" line="693" lineend="704" name="getPageX" returns="Number" signature="getPageX(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="ev.pageX" line="694" name="x" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the event&apos;s pageY" ilk="function" line="713" lineend="725" name="getPageY" returns="Number" signature="getPageY(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="ev.pageY" line="714" name="y" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the pageX and pageY properties as an indexed array." ilk="function" line="734" lineend="736" name="getXY" returns="Array" signature="getXY(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the event&apos;s related target" ilk="function" line="745" lineend="756" name="getRelatedTarget" returns="HTMLElement" signature="getRelatedTarget(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="ev.relatedTarget" line="746" name="t" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the time of the event.  If the time is not included, the&#xA;event is modified using the current time." ilk="function" line="766" lineend="778" name="getTime" returns="Date" signature="getTime(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="Date" line="768" name="t" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Convenience method for stopPropagation + preventDefault" ilk="function" line="786" lineend="789" name="stopEvent" signature="stopEvent(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Stops event propagation" ilk="function" line="797" lineend="803" name="stopPropagation" signature="stopPropagation(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Prevents the default behavior of the event" ilk="function" line="811" lineend="817" name="preventDefault" signature="preventDefault(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Finds the event in the window object, the caller&apos;s arguments, or&#xA;in the arguments of another method in the callstack.  This is&#xA;executed automatically for events registered through the event&#xA;manager, so the implementer should not normally need to execute&#xA;this function at all." ilk="function" line="830" lineend="845" name="getEvent" returns="Event" signature="getEvent(e)">
              <variable citdl="Event" doc="the event parameter from the handler" ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="e" line="831" name="ev" />
              <variable attributes="__local__ private" citdl="this.getEvent.caller" line="834" name="c" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the charcode for an event" ilk="function" line="854" lineend="856" name="getCharCode" returns="Number" signature="getCharCode(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Locating the saved event handler data by function ref" ilk="function" line="865" lineend="877" name="_getCacheIndex" returns="Number" signature="_getCacheIndex(el, sType, fn)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="sType" />
              <variable ilk="argument" name="fn" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="listeners[i]" line="867" name="li" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Generates an unique ID for the element if it does not already&#xA;have one." ilk="function" line="887" lineend="897" name="generateId" returns="String" signature="generateId(el)">
              <variable doc="the element to create the id for" ilk="argument" name="el" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="el.id" line="888" name="id" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: We want to be able to use getElementsByTagName as a collection&#xA;to attach a group of events to.  Unfortunately, different&#xA;browsers return different types of collections.  This function&#xA;tests to determine if the object is array-like.  It will also&#xA;fail if the object is an array, but is empty." ilk="function" line="912" lineend="920" name="_isValidCollection" returns="Boolean" signature="_isValidCollection(o)">
              <variable doc="the object to test" ilk="argument" name="o" />
              <variable citdl="Event" name="this" />
            </scope>
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: DOM element cache" line="928" lineend="928" name="elCache" />
            <scope attributes="private __static__" doc="PRIVATE STATIC: We cache elements bound by id because when the unload event&#xA;fires, we can no longer use document.getElementById" ilk="function" line="937" lineend="939" name="getEl" returns="document.getElementById()" signature="getEl(id)">
              <variable ilk="argument" name="id" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="deprecated private __static__" doc="DEPRECATED PRIVATE STATIC: Clears the element cache" ilk="function" line="948" lineend="948" name="clearCache" signature="clearCache()">
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: hook up any deferred listeners" ilk="function" line="956" lineend="964" name="_load" signature="_load(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="958" name="EU" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Polling function that runs before the onload event fires,&#xA;attempting to attach to DOM Nodes as soon as they are&#xA;available" ilk="function" line="974" lineend="1042" name="_tryPreloadAttach" returns="Boolean" signature="_tryPreloadAttach()">
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" doc="tested appropriately" line="987" name="tryAgain" />
              <variable attributes="__local__ private" citdl="Array" doc="onAvailable" line="993" name="notAvail" />
              <variable attributes="__local__ private" citdl="onAvailStack[i]" line="995" name="item" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="997" name="el" />
              <variable attributes="__local__ private" citdl="el" line="1009" name="scope" />
            </scope>
            <variable citdl="Boolean" line="980" name="locked" />
            <scope attributes="__static__" doc="STATIC: Removes all listeners attached to the given element via addListener.&#xA;Optionally, the node&apos;s children can also be purged.&#xA;Optionally, you can specify a specific type of event to remove." ilk="function" line="1056" lineend="1072" name="purgeElement" signature="purgeElement(el, recurse, sType)">
              <variable citdl="HTMLElement" doc="the element to purge" ilk="argument" name="el" />
              <variable citdl="Boolean" doc="recursively purge this element&apos;s children&#xA;as well.  Use with caution." ilk="argument" name="recurse" />
              <variable citdl="String" doc="optional type of listener to purge. If&#xA;left out, all listeners will be removed" ilk="argument" name="sType" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="this.getListeners()" line="1057" name="elListeners" />
              <variable attributes="__local__ private" citdl="elListeners[i]" line="1060" name="l" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns all listeners attached to the given element via addListener.&#xA;Optionally, you can specify a specific type of event to return." ilk="function" line="1089" lineend="1119" name="getListeners" returns="Object" signature="getListeners(el, sType)">
              <variable citdl="HTMLElement" doc="the element to inspect" ilk="argument" name="el" />
              <variable citdl="String" doc="optional type of listener to return. If&#xA;left out, all listeners will be returned" ilk="argument" name="sType" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="1090" name="searchLists" />
              <variable attributes="__local__ private" citdl="Array" line="1090" name="results" />
              <variable attributes="__local__ private" citdl="searchLists[j]" line="1100" name="searchList" />
              <variable attributes="__local__ private" citdl="searchList[i]" line="1103" name="l" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Removes all listeners registered by pe.event.  Called&#xA;automatically during the unload event." ilk="function" line="1128" lineend="1182" name="_unload" signature="_unload(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="j" line="1130" name="index" />
              <variable attributes="__local__ private" line="1130" name="i" />
              <variable attributes="__local__ private" citdl="listeners.length" line="1130" name="j" />
              <variable attributes="__local__ private" citdl="unloadListeners[i]" line="1130" name="l" />
              <variable attributes="__local__ private" line="1130" name="len" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="1130" name="EU" />
              <variable attributes="__local__ private" citdl="window" line="1135" name="scope" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Returns scrollLeft" ilk="function" line="1190" lineend="1192" name="_getScrollLeft" returns="this._getScroll()[1]" signature="_getScrollLeft()">
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Returns scrollTop" ilk="function" line="1200" lineend="1202" name="_getScrollTop" returns="this._getScroll()[0]" signature="_getScrollTop()">
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Returns the scrollTop and scrollLeft.  Used to calculate the&#xA;pageX and pageY in Internet Explorer" ilk="function" line="1211" lineend="1220" name="_getScroll" returns="Array" signature="_getScroll()">
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="document.documentElement" line="1212" name="dd" />
              <variable attributes="__local__ private" citdl="document.body" line="1212" name="db" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Used by old versions of CustomEvent, restored for backwards&#xA;compatibility" ilk="function" line="1228" lineend="1230" name="regCE" signature="regCE()">
              <variable citdl="Event" name="this" />
            </scope>
            <variable attributes="private __static__" doc="PRIVATE STATIC: Adds a DOM event directly without the caching, cleanup, scope adj, etc" line="1243" name="_simpleAdd" />
            <variable attributes="private __static__" doc="PRIVATE STATIC: Basic remove listener" line="1268" name="_simpleRemove" />
          </variable>
          <scope ilk="class" line="48" lineend="446" name="Anim">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The animation module provides allows effects to be added to HTMLElements." ilk="function" line="48" lineend="52" name="Anim" signature="Anim(el, attributes, duration, method)">
              <variable ilk="argument" name="el" />
              <variable citdl="Object" doc="The attribute(s) to be animated.&#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.&#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).&#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
              <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
              <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
              <variable citdl="Anim" name="this" />
            </scope>
            <scope doc="Provides a readable name for the Anim instance." ilk="function" line="60" lineend="64" name="toString" returns="String" signature="toString()">
              <variable citdl="Anim" name="this" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="61" name="el" />
              <variable attributes="__local__ private" citdl="el.id" line="62" name="id" />
            </scope>
            <variable citdl="Object" line="66" lineend="71" name="patterns">
              <variable doc="cached for performance" line="67" name="noNegatives" />
              <variable doc="keep at zero or above" line="68" name="offsetAttribute" />
              <variable doc="use offsetValue as default" line="69" name="defaultUnit" />
            </variable>
            <scope doc="Returns the value computed by the animation&apos;s &quot;method&quot;." ilk="function" line="81" lineend="83" name="doMethod" returns="Number" signature="doMethod(attr, start, end)">
              <variable citdl="String" doc="The name of the attribute." ilk="argument" name="attr" />
              <variable citdl="Number" doc="The value this attribute should start from for this animation." ilk="argument" name="start" />
              <variable citdl="Number" doc="The value this attribute should end at for this animation." ilk="argument" name="end" />
              <variable citdl="Anim" name="this" />
            </scope>
            <scope doc="Applies a value to an attribute." ilk="function" line="92" lineend="98" name="setAttribute" signature="setAttribute(attr, val, unit)">
              <variable citdl="String" doc="The name of the attribute." ilk="argument" name="attr" />
              <variable citdl="Number" doc="The value to be applied to the attribute." ilk="argument" name="val" />
              <variable citdl="String" doc="The unit (&apos;px&apos;, &apos;%&apos;, etc.) of the value." ilk="argument" name="unit" />
              <variable citdl="Anim" name="this" />
            </scope>
            <scope doc="Returns current value of the attribute." ilk="function" line="106" lineend="126" name="getAttribute" returns="Number" signature="getAttribute(attr)">
              <variable citdl="String" doc="The name of the attribute." ilk="argument" name="attr" />
              <variable citdl="Anim" name="this" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="107" name="el" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getStyle()" line="108" name="val" />
              <variable attributes="__local__ private" citdl="this.patterns.offsetAttribute.exec()" line="114" name="a" />
              <variable attributes="__local__ private" line="115" name="pos" />
              <variable attributes="__local__ private" doc="top or left" line="116" name="box" />
            </scope>
            <scope doc="Returns the unit to use when none is supplied." ilk="function" line="134" lineend="140" name="getDefaultUnit" returns="String" signature="getDefaultUnit(attr)">
              <variable citdl="attr" doc="The name of the attribute." ilk="argument" name="attr" />
              <variable citdl="Anim" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Sets the actual values to be used during the animation.  Should only be needed for subclass use." ilk="function" line="148" lineend="184" name="setRuntimeAttribute" returns="Boolean" signature="setRuntimeAttribute(attr)">
              <variable citdl="Object" doc="The attribute object" ilk="argument" name="attr" />
              <variable citdl="Anim" name="this" />
              <variable attributes="__local__ private" line="149" name="start" />
              <variable attributes="__local__ private" citdl="attributes[attr][&apos;to&apos;]" line="150" name="end" />
              <variable attributes="__local__ private" citdl="this.attributes" line="151" name="attributes" />
              <scope attributes="__local__ private" ilk="function" line="155" lineend="157" name="isset" signature="isset(prop)">
                <variable ilk="argument" name="prop" />
              </scope>
            </scope>
            <scope doc="Constructor for Anim instance." ilk="function" line="197" lineend="445" name="init" signature="init(el, attributes, duration, method)">
              <variable ilk="argument" name="el" />
              <variable citdl="Object" doc="The attribute(s) to be animated.&#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.&#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).&#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
              <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
              <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
              <variable citdl="Anim" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" doc="PRIVATE: Whether or not the animation is running." line="204" name="isAnimated" />
              <variable attributes="__local__ private" citdl="Date" doc="PRIVATE: A Date object that is created when the animation begins." line="212" name="startTime" />
              <variable attributes="__local__ private" citdl="Number" doc="PRIVATE: The number of frames this animation was able to execute." line="220" name="actualFrames" />
              <scope attributes="__local__ private" ilk="class" line="340" lineend="351" name="onStart">
                <scope attributes="__local__ private __ctor__" ilk="function" line="340" lineend="351" name="onStart" signature="onStart()">
                  <variable citdl="onStart" name="this" />
                </scope>
                <variable citdl="Object" line="343" lineend="343" name="runtimeAttributes" />
              </scope>
              <scope attributes="__local__ private" doc="PRIVATE: Feeds the starting and ending values for each animated attribute to doMethod once per frame, then applies the resulting value to the attribute(s)." ilk="function" line="358" lineend="380" name="onTween" signature="onTween()">
                <variable attributes="__local__ private" citdl="Object" line="359" lineend="362" name="data">
                  <variable citdl="Date" line="360" name="duration" />
                  <variable citdl="this.currentFrame" line="361" name="currentFrame" />
                  <scope ilk="function" line="364" lineend="369" name="toString" signature="toString()">
                    <variable citdl="data" name="this" />
                  </scope>
                </variable>
                <variable attributes="__local__ private" citdl="this.runtimeAttributes" line="373" name="runtimeAttributes" />
              </scope>
              <scope attributes="__local__ private" ilk="function" line="382" lineend="402" name="onComplete" signature="onComplete()">
                <variable attributes="__local__ private" line="383" name="actual_duration" />
                <variable attributes="__local__ private" citdl="Object" line="385" lineend="389" name="data">
                  <variable citdl="actual_duration" line="386" name="duration" />
                  <variable citdl="actualFrames" line="387" name="frames" />
                  <variable citdl="actualFrames" line="388" name="fps" />
                  <scope ilk="function" line="391" lineend="397" name="toString" signature="toString()">
                    <variable citdl="data" name="this" />
                  </scope>
                </variable>
              </scope>
            </scope>
            <variable citdl="Object" doc="The collection of attributes to be animated.&#xA;Each attribute must have at least a &quot;to&quot; or &quot;by&quot; defined in order to animate.&#xA;If &quot;to&quot; is supplied, the animation will end with the attribute at that value.&#xA;If &quot;by&quot; is supplied, the animation will end at that value plus its starting value.&#xA;If both are supplied, &quot;to&quot; is used, and &quot;by&quot; is ignored.&#xA;Optional additional member include &quot;from&quot; (the value the attribute should start animating from, defaults to current value), and &quot;unit&quot; (the units to apply to the values)." line="240" name="attributes" />
            <variable citdl="Number" doc="The length of the animation.  Defaults to &quot;1&quot; (second)." line="247" name="duration" />
            <variable citdl="Function" doc="The method that will provide values to the attribute(s) during the animation.&#xA;Defaults to &quot;YAHOO.util.Easing.easeNone&quot;." line="255" name="method" />
            <variable citdl="Boolean" doc="Whether or not the duration should be treated as seconds.&#xA;Defaults to true." line="263" name="useSeconds" />
            <variable citdl="Number" doc="The location of the current animation on the timeline.&#xA;In time-based animations, this is used by AnimMgr to ensure the animation finishes on time." line="271" name="currentFrame" />
            <variable citdl="Number" doc="The total number of frames to be executed.&#xA;In time-based animations, this is used by AnimMgr to ensure the animation finishes on time." line="279" name="totalFrames" />
            <scope doc="Returns a reference to the animated element." ilk="function" line="287" lineend="287" name="getEl" returns="HTMLElement" signature="getEl()">
              <variable citdl="Anim" name="this" />
            </scope>
            <scope doc="Checks whether the element is currently animated." ilk="function" line="294" lineend="296" name="isAnimated" returns="Boolean" signature="isAnimated()">
              <variable citdl="Anim" name="this" />
            </scope>
            <scope doc="Returns the animation start time." ilk="function" line="303" lineend="305" name="getStartTime" returns="Date" signature="getStartTime()">
              <variable citdl="Anim" name="this" />
            </scope>
            <variable citdl="Object" line="307" lineend="307" name="runtimeAttributes" />
            <scope doc="Starts the animation by registering it with the animation manager." ilk="function" line="315" lineend="325" name="animate" returns="Boolean" signature="animate()">
              <variable citdl="Anim" name="this" />
            </scope>
            <scope doc="Stops the animation.  Normally called by AnimMgr when animation completes." ilk="function" line="332" lineend="338" name="stop" signature="stop(finish)">
              <variable citdl="Boolean" doc="(optional) If true, animation will jump to final frame." ilk="argument" name="finish" />
              <variable citdl="Anim" name="this" />
            </scope>
            <variable attributes="private" citdl="YAHOO.util.CustomEvent" doc="PRIVATE: Custom event that fires after onStart, useful in subclassing" line="408" name="_onStart" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Custom event that fires when animation begins&#xA;Listen via subscribe method (e.g. myAnim.onStart.subscribe(someFunction)" line="415" name="onStart" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Custom event that fires between each frame&#xA;Listen via subscribe method (e.g. myAnim.onTween.subscribe(someFunction)" line="422" name="onTween" />
            <variable attributes="private" citdl="YAHOO.util.CustomEvent" doc="PRIVATE: Custom event that fires after onTween" line="428" name="_onTween" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Custom event that fires when animation ends&#xA;Listen via subscribe method (e.g. myAnim.onComplete.subscribe(someFunction)" line="435" name="onComplete" />
            <variable attributes="private" citdl="YAHOO.util.CustomEvent" doc="PRIVATE: Custom event that fires after onComplete" line="440" name="_onComplete" />
          </scope>
          <variable citdl="Object" line="294" name="DragDrop">
            <variable citdl="Ext.dd.DragDrop.defaultPadding" line="294" name="defaultPadding" />
            <variable citdl="Ext.dd.DragDrop.constrainTo" line="295" name="constrainTo" />
          </variable>
          <variable citdl="Object" line="298" lineend="722" name="Dom">
            <scope doc="Returns an HTMLElement reference." ilk="function" line="138" lineend="158" name="get" returns="HTMLElement" signature="get(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="Array" doc="array of ID&apos;s and/or elements" line="149" name="collection" />
            </scope>
            <scope doc="Normalizes currentStyle and ComputedStyle." ilk="function" line="167" lineend="175" name="getStyle" returns="String" signature="getStyle(el, property)">
              <variable ilk="argument" name="el" />
              <variable citdl="String" doc="The style property whose value is returned." ilk="argument" name="property" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="170" lineend="172" name="f" returns="getStyle()" signature="f(element)">
                <variable ilk="argument" name="element" />
              </scope>
            </scope>
            <scope doc="Wrapper for setting style properties of HTMLElements.  Normalizes &quot;opacity&quot; across modern browsers." ilk="function" line="184" lineend="193" name="setStyle" signature="setStyle(el, property, val)">
              <variable ilk="argument" name="el" />
              <variable citdl="String" doc="The style property to be set." ilk="argument" name="property" />
              <variable citdl="String" doc="The value to apply to the given property." ilk="argument" name="val" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="187" lineend="190" name="f" signature="f(element)">
                <variable ilk="argument" name="element" />
              </scope>
            </scope>
            <scope doc="Gets the current position of an element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="201" lineend="267" name="getXY" returns="Array" signature="getXY(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="202" lineend="264" name="f" returns="pos" signature="f(el)">
                <variable ilk="argument" name="el" />
                <variable attributes="__local__ private" citdl="el.offsetParent" line="210" name="parentNode" />
                <variable attributes="__local__ private" citdl="Array" line="211" name="pos" />
                <variable attributes="__local__ private" citdl="el.getBoundingClientRect()" line="212" name="box" />
                <variable attributes="__local__ private" citdl="document" line="216" name="doc" />
                <variable attributes="__local__ private" citdl="Math.max()" line="226" name="scrollTop" />
                <variable attributes="__local__ private" citdl="Math.max()" line="227" name="scrollLeft" />
              </scope>
            </scope>
            <scope doc="Gets the current X position of an element based on page coordinates.  The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="275" lineend="281" name="getX" returns="String" signature="getX(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="276" lineend="278" name="f" returns="Y.Dom.getXY()[0]" signature="f(el)">
                <variable ilk="argument" name="el" />
              </scope>
            </scope>
            <scope doc="Gets the current Y position of an element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="289" lineend="295" name="getY" returns="String" signature="getY(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="290" lineend="292" name="f" returns="Y.Dom.getXY()[1]" signature="f(el)">
                <variable ilk="argument" name="el" />
              </scope>
            </scope>
            <scope doc="Set the position of an html element in page coordinates, regardless of how the element is positioned.&#xA;The element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="305" lineend="346" name="setXY" signature="setXY(el, pos, noRetry)">
              <variable ilk="argument" name="el" />
              <variable citdl="Array" doc="Contains X &amp; Y values for new position (coordinates are page-based)" ilk="argument" name="pos" />
              <variable citdl="Boolean" doc="By default we try and set the position a second time if the first fails" ilk="argument" name="noRetry" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="306" lineend="343" name="f" returns="Boolean" signature="f(el)">
                <variable ilk="argument" name="el" />
                <variable attributes="__local__ private" citdl="this.getStyle()" line="307" name="style_pos" />
                <variable attributes="__local__ private" citdl="this.getXY()" line="313" name="pageXY" />
                <variable attributes="__local__ private" citdl="Array" doc="assuming pixels; if not we will have to retry" line="320" name="delta" />
                <variable attributes="__local__ private" citdl="this.getXY()" line="334" name="newXY" />
              </scope>
            </scope>
            <scope doc="Set the X position of an html element in page coordinates, regardless of how the element is positioned.&#xA;The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="355" lineend="357" name="setX" signature="setX(el, x)">
              <variable ilk="argument" name="el" />
              <variable citdl="Number" doc="The value to use as the X coordinate for the element(s)." ilk="argument" name="x" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope doc="Set the Y position of an html element in page coordinates, regardless of how the element is positioned.&#xA;The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="366" lineend="368" name="setY" signature="setY(el, y)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="y" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope doc="Returns the region position of the given element.&#xA;The element must be part of the DOM tree to have a region (display:none or elements not appended return false)." ilk="function" line="377" lineend="384" name="getRegion" returns="Region" signature="getRegion(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="378" lineend="381" name="f" returns="region" signature="f(el)">
                <variable ilk="argument" name="el" />
                <variable attributes="__local__ private" citdl="Y.Region.getRegion" line="379" name="region" />
              </scope>
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Returns the width of the client (viewport)." ilk="function" line="392" lineend="394" name="getClientWidth" returns="Number" signature="getClientWidth()">
              <variable citdl="Dom" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Returns the height of the client (viewport)." ilk="function" line="402" lineend="404" name="getClientHeight" returns="Number" signature="getClientHeight()">
              <variable citdl="Dom" name="this" />
            </scope>
            <scope doc="Returns a array of HTMLElements with the given class.&#xA;For optimized performance, include a tag and/or root node when possible." ilk="function" line="415" lineend="418" name="getElementsByClassName" returns="Array" signature="getElementsByClassName(className, tag, root)">
              <variable citdl="String" doc="The class name to match against" ilk="argument" name="className" />
              <variable citdl="String" doc="(optional) The tag name of the elements being collected" ilk="argument" name="tag" />
              <variable ilk="argument" name="root" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="416" lineend="416" name="method" returns="Y.Dom.hasClass()" signature="method(el)">
                <variable ilk="argument" name="el" />
              </scope>
            </scope>
            <scope doc="Determines whether an HTMLElement has the given className." ilk="function" line="427" lineend="435" name="hasClass" returns="Boolean" signature="hasClass(el, className)">
              <variable ilk="argument" name="el" />
              <variable citdl="String" doc="the class name to search for" ilk="argument" name="className" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="RegExp" line="428" name="re" />
              <scope attributes="__local__ private" ilk="function" line="430" lineend="432" name="f" returns="re.test()" signature="f(el)">
                <variable ilk="argument" name="el" />
              </scope>
            </scope>
            <scope doc="Adds a class name to a given element or collection of elements." ilk="function" line="443" lineend="452" name="addClass" signature="addClass(el, className)">
              <variable ilk="argument" name="el" />
              <variable citdl="String" doc="the class name to add to the class attribute" ilk="argument" name="className" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="444" lineend="449" name="f" signature="f(el)">
                <variable ilk="argument" name="el" />
              </scope>
            </scope>
            <scope doc="Removes a class name from a given element or collection of elements." ilk="function" line="460" lineend="476" name="removeClass" signature="removeClass(el, className)">
              <variable ilk="argument" name="el" />
              <variable citdl="String" doc="the class name to remove from the class attribute" ilk="argument" name="className" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="RegExp" line="461" name="re" />
              <scope attributes="__local__ private" ilk="function" line="463" lineend="473" name="f" signature="f(el)">
                <variable ilk="argument" name="el" />
                <variable attributes="__local__ private" citdl="el[&apos;className&apos;]" doc="not present" line="467" name="c" />
              </scope>
            </scope>
            <scope doc="Replace a class with another class for a given element or collection of elements.&#xA;If no oldClassName is present, the newClassName is simply added." ilk="function" line="486" lineend="508" name="replaceClass" returns="Boolean" signature="replaceClass(el, oldClassName, newClassName)">
              <variable ilk="argument" name="el" />
              <variable citdl="String" doc="the class name to be replaced" ilk="argument" name="oldClassName" />
              <variable citdl="String" doc="the class name that will be replacing the old class name" ilk="argument" name="newClassName" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="RegExp" line="491" name="re" />
              <scope attributes="__local__ private" ilk="function" line="493" lineend="505" name="f" signature="f(el)">
                <variable ilk="argument" name="el" />
              </scope>
            </scope>
            <scope doc="Generates a unique ID" ilk="function" line="517" lineend="537" name="generateId" returns="String" signature="generateId(el, prefix)">
              <variable ilk="argument" name="el" />
              <variable citdl="String" doc="(optional) an optional prefix to use (defaults to &quot;yui-gen&quot;)." ilk="argument" name="prefix" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="521" lineend="534" name="f" returns="el.id" signature="f(el)">
                <variable ilk="argument" name="el" />
              </scope>
            </scope>
            <scope doc="Determines whether an HTMLElement is an ancestor of another HTML element in the DOM hierarchy." ilk="function" line="546" lineend="575" name="isAncestor" returns="Boolean" signature="isAncestor(haystack, needle)">
              <variable ilk="argument" name="haystack" />
              <variable ilk="argument" name="needle" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="550" lineend="572" name="f" returns="Boolean" signature="f(needle)">
                <variable ilk="argument" name="needle" />
                <variable attributes="__local__ private" citdl="needle.parentNode" doc="loop up and test each parent" line="558" name="parent" />
              </scope>
            </scope>
            <scope doc="Determines whether an HTMLElement is present in the current document." ilk="function" line="583" lineend="589" name="inDocument" returns="Boolean" signature="inDocument(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="584" lineend="586" name="f" returns="this.isAncestor()" signature="f(el)">
                <variable ilk="argument" name="el" />
              </scope>
            </scope>
            <scope doc="Returns a array of HTMLElements that pass the test applied by supplied boolean method.&#xA;For optimized performance, include a tag and/or root node when possible." ilk="function" line="601" lineend="627" name="getElementsBy" returns="Array" signature="getElementsBy(method, tag, root)">
              <variable citdl="Function" doc="- A boolean method for testing elements which receives the element as its only argument." ilk="argument" name="method" />
              <variable citdl="String" doc="(optional) The tag name of the elements being collected" ilk="argument" name="tag" />
              <variable ilk="argument" name="root" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="604" name="nodes" />
              <variable attributes="__local__ private" citdl="root.getElementsByTagName()" line="615" name="elements" />
            </scope>
            <scope doc="Returns an array of elements that have had the supplied method applied.&#xA;The method is called with the element(s) as the first arg, and the optional param as the second ( method(el, o) )." ilk="function" line="639" lineend="662" name="batch" returns="HTMLElement" signature="batch(el, method, o, override)">
              <variable ilk="argument" name="el" />
              <variable citdl="Function" doc="The method to apply to the element(s)" ilk="argument" name="method" />
              <variable citdl="Any" doc="(optional) An optional arg that is passed to the supplied method" ilk="argument" name="o" />
              <variable citdl="Boolean" doc="(optional) Whether or not to override the scope of &quot;method&quot; with &quot;o&quot;" ilk="argument" name="override" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="el" line="640" name="id" />
              <variable attributes="__local__ private" line="643" name="scope" />
              <variable attributes="__local__ private" citdl="Array" line="652" name="collection" />
            </scope>
            <scope doc="Returns the height of the document." ilk="function" line="669" lineend="674" name="getDocumentHeight" returns="Number" signature="getDocumentHeight()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" line="670" name="scrollHeight" />
              <variable attributes="__local__ private" citdl="Math.max()" line="672" name="h" />
            </scope>
            <scope doc="Returns the width of the document." ilk="function" line="681" lineend="685" name="getDocumentWidth" returns="Number" signature="getDocumentWidth()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" line="682" name="scrollWidth" />
              <variable attributes="__local__ private" citdl="Math.max()" line="683" name="w" />
            </scope>
            <scope doc="Returns the current height of the viewport." ilk="function" line="692" lineend="703" name="getViewportHeight" returns="Number" signature="getViewportHeight()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="self.innerHeight" line="693" name="height" />
              <variable attributes="__local__ private" citdl="document.compatMode" doc="Safari, Opera" line="694" name="mode" />
            </scope>
            <scope doc="Returns the current width of the viewport." ilk="function" line="711" lineend="721" name="getViewportWidth" returns="Number" signature="getViewportWidth()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="self.innerWidth" line="712" name="width" />
              <variable attributes="__local__ private" citdl="document.compatMode" doc="Safari" line="713" name="mode" />
            </scope>
          </variable>
          <variable citdl="Object" line="308" lineend="623" name="AnimMgr">
            <variable citdl="Number" line="308" name="fps" />
            <variable attributes="__local__ private" citdl="Number" doc="PRIVATE: Reference to the animation Interval." line="461" name="thread" />
            <variable attributes="__local__ private" citdl="Array" doc="PRIVATE: The current queue of registered animation objects." line="469" name="queue" />
            <variable attributes="__local__ private" citdl="Number" doc="PRIVATE: The number of active animations." line="477" name="tweenCount" />
            <variable citdl="Number" doc="Interval delay in milliseconds, defaults to fastest possible." line="494" name="delay" />
            <scope doc="Adds an animation instance to the animation queue.&#xA;All animation instances must be registered in order to animate." ilk="function" line="502" lineend="507" name="registerElement" signature="registerElement(tween)">
              <variable citdl="Object" doc="The Anim instance to be be registered" ilk="argument" name="tween" />
              <variable citdl="AnimMgr" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: removes an animation instance from the animation queue.&#xA;All animation instances must be registered in order to animate." ilk="function" line="517" lineend="528" name="unRegister" signature="unRegister(tween, index)">
              <variable citdl="Object" doc="The Anim instance to be be registered" ilk="argument" name="tween" />
              <variable citdl="Number" doc="The index of the Anim instance" ilk="argument" name="index" />
              <variable citdl="AnimMgr" name="this" />
            </scope>
            <scope doc="Starts the animation thread.&#xA;Only one thread can run at a time." ilk="function" line="535" lineend="539" name="start" signature="start()">
              <variable citdl="AnimMgr" name="this" />
            </scope>
            <scope doc="Stops the animation thread or a specific animation instance." ilk="function" line="547" lineend="564" name="stop" signature="stop(tween)">
              <variable citdl="Object" doc="A specific Anim instance to stop (optional)&#xA;If no instance given, Manager stops thread and all animations." ilk="argument" name="tween" />
              <variable citdl="AnimMgr" name="this" />
            </scope>
            <scope doc="Called per Interval to handle each animation frame." ilk="function" line="570" lineend="586" name="run" signature="run()">
              <variable citdl="AnimMgr" name="this" />
              <variable attributes="__local__ private" citdl="queue[i]" line="572" name="tween" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="588" lineend="595" name="getIndex" returns="Number" signature="getIndex(anim)">
              <variable ilk="argument" name="anim" />
              <variable citdl="AnimMgr" name="this" />
            </scope>
            <scope attributes="__local__ private" doc="PRIVATE: On the fly frame correction to keep animation on time." ilk="function" line="603" lineend="622" name="correctFrame" signature="correctFrame(tween)">
              <variable citdl="Object" doc="The Anim instance being corrected." ilk="argument" name="tween" />
              <variable citdl="AnimMgr" name="this" />
              <variable attributes="__local__ private" citdl="tween.totalFrames" line="604" name="frames" />
              <variable attributes="__local__ private" citdl="tween.currentFrame" line="605" name="frame" />
              <variable attributes="__local__ private" line="606" name="expected" />
              <variable attributes="__local__ private" line="607" name="elapsed" />
              <variable attributes="__local__ private" citdl="Number" line="608" name="tweak" />
            </scope>
          </variable>
          <variable citdl="YAHOO.lang" doc="* An alias for &lt;a href=&quot;YAHOO.lang.html&quot;&gt;YAHOO.lang&lt;/a&gt; *&#xA;@class YAHOO.util.Lang */" line="412" name="Lang" />
          <scope ilk="class" line="684" lineend="686" name="ColorAnim">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Anim subclass for color transitions.&#xA;&lt;p&gt;Usage: &lt;code&gt;var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: &apos;#FF0000&apos;, to: &apos;#FFFFFF&apos; } }, 1, Y.Easing.easeOut);&lt;/code&gt; Color values can be specified with either 112233, #112233,&#xA;[255,255,255], or rgb(255,255,255)&lt;/p&gt;" ilk="function" line="684" lineend="686" name="ColorAnim" signature="ColorAnim(el, attributes, duration, method)">
              <variable ilk="argument" name="el" />
              <variable citdl="Object" doc="The attribute(s) to be animated.&#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.&#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).&#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
              <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
              <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
              <variable citdl="ColorAnim" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="736" lineend="779" name="Region">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A region is a representation of an object on a grid.  It is defined&#xA;by the top, right, bottom, left extents, so is rectangular by default.  If&#xA;other shapes are required, this class could be extended to support it." ilk="function" line="736" lineend="779" name="Region" signature="Region(t, r, b, l)">
              <variable citdl="Number" doc="the top extent" ilk="argument" name="t" />
              <variable citdl="Number" doc="the right extent" ilk="argument" name="r" />
              <variable citdl="Number" doc="the bottom extent" ilk="argument" name="b" />
              <variable citdl="Number" doc="the left extent" ilk="argument" name="l" />
              <variable citdl="Region" name="this" />
            </scope>
            <variable citdl="Number" doc="The region&apos;s top extent" line="743" name="top" />
            <variable citdl="Number" doc="The region&apos;s right extent" line="757" name="right" />
            <variable citdl="Number" doc="The region&apos;s bottom extent" line="764" name="bottom" />
            <variable citdl="Number" doc="The region&apos;s left extent" line="771" name="left" />
            <scope doc="Returns true if this region contains the region passed in" ilk="function" line="788" lineend="794" name="contains" returns="Boolean" signature="contains(region)">
              <variable citdl="Region" doc="The region to evaluate" ilk="argument" name="region" />
              <variable citdl="Region" name="this" />
            </scope>
            <scope doc="Returns the area of the region" ilk="function" line="801" lineend="803" name="getArea" returns="Number" signature="getArea()">
              <variable citdl="Region" name="this" />
            </scope>
            <scope doc="Returns the region where the passed in region overlaps with this one" ilk="function" line="811" lineend="822" name="intersect" returns="Region" signature="intersect(region)">
              <variable citdl="Region" doc="The region that intersects" ilk="argument" name="region" />
              <variable citdl="Region" name="this" />
              <variable attributes="__local__ private" citdl="Math.max()" line="812" name="t" />
              <variable attributes="__local__ private" citdl="Math.min()" line="813" name="r" />
              <variable attributes="__local__ private" citdl="Math.min()" line="814" name="b" />
              <variable attributes="__local__ private" citdl="Math.max()" line="815" name="l" />
            </scope>
            <scope doc="Returns the region representing the smallest region that can contain both&#xA;the passed in region and this region." ilk="function" line="831" lineend="838" name="union" returns="Region" signature="union(region)">
              <variable citdl="Region" doc="The region that to create the union with" ilk="argument" name="region" />
              <variable citdl="Region" name="this" />
              <variable attributes="__local__ private" citdl="Math.min()" line="832" name="t" />
              <variable attributes="__local__ private" citdl="Math.max()" line="833" name="r" />
              <variable attributes="__local__ private" citdl="Math.max()" line="834" name="b" />
              <variable attributes="__local__ private" citdl="Math.min()" line="835" name="l" />
            </scope>
            <scope doc="toString" ilk="function" line="845" lineend="852" name="toString" signature="toString()">
              <variable citdl="Region" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns a region that is occupied by the DOM element" ilk="function" line="861" lineend="870" name="getRegion" returns="Region" signature="getRegion(el)">
              <variable citdl="HTMLElement" doc="The element" ilk="argument" name="el" />
              <variable citdl="Region" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getXY()" line="862" name="p" />
              <variable attributes="__local__ private" citdl="p[1]" line="864" name="t" />
              <variable attributes="__local__ private" citdl="p[0]" line="865" name="r" />
              <variable attributes="__local__ private" citdl="p[1]" line="866" name="b" />
              <variable attributes="__local__ private" citdl="p[0]" line="867" name="l" />
            </scope>
          </scope>
          <variable citdl="Object" doc="Singleton that determines how an animation proceeds from start to end." line="817" lineend="1130" name="Easing">
            <scope doc="Uniform speed between points." ilk="function" line="828" lineend="830" name="easeNone" returns="Number" signature="easeNone(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Begins slowly and accelerates towards end. (quadratic)" ilk="function" line="841" lineend="843" name="easeIn" returns="Number" signature="easeIn(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Begins quickly and decelerates towards end.  (quadratic)" ilk="function" line="854" lineend="856" name="easeOut" returns="Number" signature="easeOut(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Begins slowly and decelerates towards end. (quadratic)" ilk="function" line="867" lineend="873" name="easeBoth" returns="Number" signature="easeBoth(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Begins slowly and accelerates towards end. (quartic)" ilk="function" line="884" lineend="886" name="easeInStrong" returns="Number" signature="easeInStrong(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Begins quickly and decelerates towards end.  (quartic)" ilk="function" line="897" lineend="899" name="easeOutStrong" returns="Number" signature="easeOutStrong(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Begins slowly and decelerates towards end. (quartic)" ilk="function" line="910" lineend="916" name="easeBothStrong" returns="Number" signature="easeBothStrong(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Snap in elastic effect." ilk="function" line="930" lineend="950" name="elasticIn" returns="Number" signature="elasticIn(t, b, c, d, a, p)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Amplitude (optional)" ilk="argument" name="a" />
              <variable citdl="Number" doc="Period (optional)" ilk="argument" name="p" />
              <variable citdl="Easing" name="this" />
              <variable attributes="__local__ private" citdl="p" line="943" name="s" />
            </scope>
            <scope doc="Snap out elastic effect." ilk="function" line="963" lineend="983" name="elasticOut" returns="Number" signature="elasticOut(t, b, c, d, a, p)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Amplitude (optional)" ilk="argument" name="a" />
              <variable citdl="Number" doc="Period (optional)" ilk="argument" name="p" />
              <variable citdl="Easing" name="this" />
              <variable attributes="__local__ private" citdl="p" line="976" name="s" />
            </scope>
            <scope doc="Snap both elastic effect." ilk="function" line="996" lineend="1023" name="elasticBoth" returns="Number" signature="elasticBoth(t, b, c, d, a, p)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Amplitude (optional)" ilk="argument" name="a" />
              <variable citdl="Number" doc="Period (optional)" ilk="argument" name="p" />
              <variable citdl="Easing" name="this" />
              <variable attributes="__local__ private" citdl="p" line="1011" name="s" />
            </scope>
            <scope doc="Backtracks slightly, then reverses direction and moves to end." ilk="function" line="1036" lineend="1041" name="backIn" returns="Number" signature="backIn(t, b, c, d, s)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Overshoot (optional)" ilk="argument" name="s" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Overshoots end, then reverses and comes back to end." ilk="function" line="1053" lineend="1058" name="backOut" returns="Number" signature="backOut(t, b, c, d, s)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Overshoot (optional)" ilk="argument" name="s" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Backtracks slightly, then reverses direction, overshoots end,&#xA;then reverses and comes back to end." ilk="function" line="1071" lineend="1080" name="backBoth" returns="Number" signature="backBoth(t, b, c, d, s)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Overshoot (optional)" ilk="argument" name="s" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Bounce off of start." ilk="function" line="1091" lineend="1093" name="bounceIn" returns="Number" signature="bounceIn(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Bounces off end." ilk="function" line="1104" lineend="1113" name="bounceOut" returns="Number" signature="bounceOut(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Bounces off start and end." ilk="function" line="1124" lineend="1129" name="bounceBoth" returns="Number" signature="bounceBoth(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
          </variable>
          <scope classrefs="YAHOO.util.Region" ilk="class" line="885" lineend="905" name="Point">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A point is a region that is special in that it represents a single point on&#xA;the grid." ilk="function" line="885" lineend="905" name="Point" signature="Point(x, y)">
              <variable citdl="Number" doc="The X position of the point" ilk="argument" name="x" />
              <variable citdl="Number" doc="The Y position of the point" ilk="argument" name="y" />
              <variable citdl="Point" name="this" />
            </scope>
            <variable citdl="Number" doc="The X position of the point, which is also the right, left and index zero (for Dom.getXY symmetry)" line="897" name="right" />
            <variable citdl="Number" doc="The X position of the point, which is also the right, left and index zero (for Dom.getXY symmetry)" line="897" name="x" />
            <variable citdl="Number" doc="The X position of the point, which is also the right, left and index zero (for Dom.getXY symmetry)" line="897" name="left" />
            <variable citdl="Number" doc="The Y position of the point, which is also the top, bottom and index one (for Dom.getXY symmetry)" line="904" name="bottom" />
            <variable citdl="Number" doc="The Y position of the point, which is also the top, bottom and index one (for Dom.getXY symmetry)" line="904" name="top" />
            <variable citdl="Number" doc="The Y position of the point, which is also the top, bottom and index one (for Dom.getXY symmetry)" line="904" name="y" />
          </scope>
          <scope ilk="class" line="1156" lineend="1160" name="Motion">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Anim subclass for moving elements along a path defined by the &quot;points&quot;&#xA;member of &quot;attributes&quot;.  All &quot;points&quot; are arrays with x, y coordinates.&#xA;&lt;p&gt;Usage: &lt;code&gt;var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);&lt;/code&gt;&lt;/p&gt;" ilk="function" line="1156" lineend="1160" name="Motion" signature="Motion(el, attributes, duration, method)">
              <variable ilk="argument" name="el" />
              <variable citdl="Object" doc="The attribute(s) to be animated.&#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.&#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).&#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
              <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
              <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
              <variable citdl="Motion" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="1308" lineend="1312" name="Scroll">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Anim subclass for scrolling elements to a position defined by the &quot;scroll&quot;&#xA;member of &quot;attributes&quot;.  All &quot;scroll&quot; members are arrays with x, y scroll positions.&#xA;&lt;p&gt;Usage: &lt;code&gt;var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);&lt;/code&gt;&lt;/p&gt;" ilk="function" line="1308" lineend="1312" name="Scroll" signature="Scroll(el, attributes, duration, method)">
              <variable ilk="argument" name="el" />
              <variable citdl="Object" doc="The attribute(s) to be animated.&#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.&#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).&#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
              <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
              <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
              <variable citdl="Scroll" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="1330" lineend="1587" name="CustomEvent">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The CustomEvent class lets you define events for your application&#xA;that can be subscribed to by one or more independent component." ilk="function" line="1330" lineend="1415" name="CustomEvent" signature="CustomEvent(type, oScope, silent, signature)">
              <variable citdl="String" doc="The type of event, which is passed to the callback&#xA;when the event fires" ilk="argument" name="type" />
              <variable citdl="Object" doc="The context the event will fire from.  &quot;this&quot; will&#xA;refer to this object in the callback.  Default value:&#xA;the window object.  The listener can override this." ilk="argument" name="oScope" />
              <variable citdl="Boolean" doc="pass true to prevent the event from writing to&#xA;the debugsystem" ilk="argument" name="silent" />
              <variable citdl="Number" doc="the signature that the custom event subscriber&#xA;will receive. YAHOO.util.CustomEvent.LIST or&#xA;YAHOO.util.CustomEvent.FLAT.  The default is&#xA;YAHOO.util.CustomEvent.LIST." ilk="argument" name="signature" />
              <variable citdl="CustomEvent" name="this" />
              <variable attributes="__local__ private" citdl="String" line="1389" name="onsubscribeType" />
            </scope>
            <variable citdl="String" doc="The type of event, returned to subscribers when the event fires" line="1337" name="type" />
            <variable citdl="Object" doc="The scope the the event will fire from by default.  Defaults to the window&#xA;obj" line="1345" name="scope" />
            <variable citdl="Boolean" doc="By default all custom events are logged in the debug build, set silent&#xA;to true to disable debug outpu for this event." line="1353" name="silent" />
            <variable citdl="Number" doc="Custom events support two styles of arguments provided to the event&#xA;subscribers.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;YAHOO.util.CustomEvent.LIST:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;param1: event name&lt;/li&gt;&#xA;&lt;li&gt;param2: array of arguments sent to fire&lt;/li&gt;&#xA;&lt;li&gt;param3: &lt;optional&gt; a custom object supplied by the subscriber&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;YAHOO.util.CustomEvent.FLAT&#xA;&lt;ul&gt;&#xA;&lt;li&gt;param1: the first argument passed to fire.  If you need to&#xA;pass multiple parameters, use and array or object literal&lt;/li&gt;&#xA;&lt;li&gt;param2: &lt;optional&gt; a custom object supplied by the subscriber&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;" line="1377" name="signature" />
            <variable citdl="Array" doc="The subscribers to this event" line="1384" name="subscribers" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Custom events provide a custom event that fires whenever there is&#xA;a new subscriber to the event.  This provides an opportunity to&#xA;handle the case where there is a non-repeating event that has&#xA;already fired has a new subscriber." line="1412" name="subscribeEvent" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: Subscriber listener sigature constant.  The LIST type returns three&#xA;parameters: the event type, the array of args passed to fire, and&#xA;the optional custom object" line="1425" name="LIST" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: Subscriber listener sigature constant.  The FLAT type returns two&#xA;parameters: the first argument passed to fire and the optional&#xA;custom object" line="1435" name="FLAT" />
            <scope doc="Subscribes the caller to this event" ilk="function" line="1450" lineend="1456" name="subscribe" signature="subscribe(fn, obj, override)">
              <variable citdl="Function" doc="The function to execute" ilk="argument" name="fn" />
              <variable citdl="Object" doc="An object to be passed along when the event&#xA;fires" ilk="argument" name="obj" />
              <variable citdl="{boolean" doc="If true, the obj passed in becomes&#xA;the execution scope of the listener.&#xA;if an object, that object becomes the&#xA;the execution scope." ilk="argument" name="override" />
              <variable citdl="CustomEvent" name="this" />
            </scope>
            <scope doc="Unsubscribes subscribers." ilk="function" line="1470" lineend="1486" name="unsubscribe" returns="Boolean" signature="unsubscribe(fn, obj)">
              <variable citdl="Function" doc="The subscribed function to remove, if not supplied&#xA;all will be removed" ilk="argument" name="fn" />
              <variable citdl="Object" doc="The custom object passed to subscribe.  This is&#xA;optional, but if supplied will be used to&#xA;disambiguate multiple listeners that are the same&#xA;(e.g., you subscribe many object using a function&#xA;that lives on the prototype)" ilk="argument" name="obj" />
              <variable citdl="CustomEvent" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="1476" name="found" />
              <variable attributes="__local__ private" citdl="this.subscribers[i]" line="1478" name="s" />
            </scope>
            <scope doc="Notifies the subscribers.  The callback functions will be executed&#xA;from the scope specified when the event was created, and with the&#xA;following parameters:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The type of event&lt;/li&gt;&#xA;&lt;li&gt;All of the arguments fire() was executed with as an array&lt;/li&gt;&#xA;&lt;li&gt;The custom object (if any) that was passed into the subscribe()&#xA;method&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="function" line="1504" lineend="1549" name="fire" returns="Boolean" signature="fire()">
              <variable citdl="CustomEvent" name="this" />
              <variable attributes="__local__ private" citdl="this.subscribers.length" line="1505" name="len" />
              <variable attributes="__local__ private" line="1510" name="i" />
              <variable attributes="__local__ private" citdl="Array" line="1510" name="args" />
              <variable attributes="__local__ private" citdl="Boolean" line="1510" name="ret" />
              <variable attributes="__local__ private" citdl="args.length" line="1516" name="argslength" />
              <variable attributes="__local__ private" citdl="this.subscribers[i]" line="1522" name="s" />
              <variable attributes="__local__ private" citdl="s.getScope()" line="1527" name="scope" />
              <variable attributes="__local__ private" citdl="args[0]" line="1530" name="param" />
            </scope>
            <scope doc="Removes all listeners" ilk="function" line="1556" lineend="1562" name="unsubscribeAll" returns="Number" signature="unsubscribeAll()">
              <variable citdl="CustomEvent" name="this" />
            </scope>
            <scope attributes="private" doc="*/" ilk="function" line="1568" lineend="1577" name="_delete" signature="_delete(index)">
              <variable ilk="argument" name="index" />
              <variable citdl="CustomEvent" name="this" />
              <variable attributes="__local__ private" citdl="this.subscribers[index]" line="1569" name="s" />
            </scope>
            <scope doc="toString */" ilk="function" line="1582" lineend="1586" name="toString" returns="String" signature="toString()">
              <variable citdl="CustomEvent" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="1600" lineend="1628" name="Subscriber">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Stores the subscriber information to be used when the event fires." ilk="function" line="1600" lineend="1628" name="Subscriber" signature="Subscriber(fn, obj, override)">
              <variable citdl="Function" doc="The function to execute" ilk="argument" name="fn" />
              <variable citdl="Object" doc="An object to be passed along when the event fires" ilk="argument" name="obj" />
              <variable citdl="Boolean" doc="If true, the obj passed in becomes the execution&#xA;scope of the listener" ilk="argument" name="override" />
              <variable citdl="Subscriber" name="this" />
            </scope>
            <variable citdl="Function" doc="The callback that will be execute when the event fires" line="1607" name="fn" />
            <variable citdl="Object" doc="An optional custom object that will passed to the callback when&#xA;the event fires" line="1615" name="obj" />
            <variable citdl="Boolean" doc="The default execution scope for the event listener is defined when the&#xA;event is created (usually the object which contains the event).&#xA;By setting override to true, the execution scope becomes the custom&#xA;object passed in by the subscriber.  If override is an object, that&#xA;object becomes the scope." line="1626" name="override" />
            <scope doc="Returns the execution scope for this listener.  If override was set to true&#xA;the custom obj will be the scope.  If override is an object, that is the&#xA;scope, otherwise the default scope will be used." ilk="function" line="1638" lineend="1647" name="getScope" returns="defaultScope" signature="getScope(defaultScope)">
              <variable citdl="Object" doc="the scope to use if this listener does not&#xA;override it." ilk="argument" name="defaultScope" />
              <variable citdl="Subscriber" name="this" />
            </scope>
            <scope doc="Returns true if the fn and obj match this objects properties.&#xA;Used by the unsubscribe method to match the right subscriber." ilk="function" line="1659" lineend="1665" name="contains" returns="Boolean" signature="contains(fn, obj)">
              <variable citdl="Function" doc="the function to execute" ilk="argument" name="fn" />
              <variable citdl="Object" doc="an object to be passed along when the event fires" ilk="argument" name="obj" />
              <variable citdl="Subscriber" name="this" />
            </scope>
            <scope doc="toString */" ilk="function" line="1670" lineend="1673" name="toString" returns="String" signature="toString()">
              <variable citdl="Subscriber" name="this" />
            </scope>
          </scope>
          <scope doc="EventProvider is designed to be used with YAHOO.augment to wrap&#xA;CustomEvents in an interface that allows events to be subscribed to&#xA;and fired by name.  This makes it possible for implementing code to&#xA;subscribe to an event that either has not been created yet, or will&#xA;not be created at all." ilk="class" line="1684" lineend="1877" name="EventProvider">
            <scope attributes="__ctor__" doc="EventProvider is designed to be used with YAHOO.augment to wrap&#xA;CustomEvents in an interface that allows events to be subscribed to&#xA;and fired by name.  This makes it possible for implementing code to&#xA;subscribe to an event that either has not been created yet, or will&#xA;not be created at all." ilk="function" line="1684" lineend="1684" name="EventProvider" signature="EventProvider()">
              <variable citdl="EventProvider" name="this" />
            </scope>
            <variable attributes="private" citdl="Array" doc="PRIVATE: Private storage of custom events" line="1694" name="__yui_events" />
            <variable attributes="private" citdl="Array" doc="PRIVATE: Private storage of custom event subscribers" line="1702" name="__yui_subscribers" />
            <scope doc="Subscribe to a CustomEvent by event type" ilk="function" line="1716" lineend="1732" name="subscribe" signature="subscribe(p_type, p_fn, p_obj, p_override)">
              <variable citdl="String" doc="the type, or name of the event" ilk="argument" name="p_type" />
              <variable citdl="Function" doc="the function to exectute when the event fires" ilk="argument" name="p_fn" />
              <variable citdl="Object" doc="An object to be passed along when the event&#xA;fires" ilk="argument" name="p_obj" />
              <variable citdl="Boolean" doc="If true, the obj passed in becomes the&#xA;execution scope of the listener" ilk="argument" name="p_override" />
              <variable citdl="EventProvider" name="this" />
              <variable attributes="__local__ private" citdl="this.__yui_events[p_type]" line="1719" name="ce" />
              <variable attributes="__local__ private" citdl="this.__yui_subscribers" line="1725" name="subs" />
            </scope>
            <scope doc="Unsubscribes one or more listeners the from the specified event" ilk="function" line="1747" lineend="1755" name="unsubscribe" returns="Boolean" signature="unsubscribe(p_type, p_fn, p_obj)">
              <variable citdl="String" doc="The type, or name of the event" ilk="argument" name="p_type" />
              <variable citdl="Function" doc="The subscribed function to unsubscribe, if not&#xA;supplied, all subscribers will be removed." ilk="argument" name="p_fn" />
              <variable citdl="Object" doc="The custom object passed to subscribe.  This is&#xA;optional, but if supplied will be used to&#xA;disambiguate multiple listeners that are the same&#xA;(e.g., you subscribe many object using a function&#xA;that lives on the prototype)" ilk="argument" name="p_obj" />
              <variable citdl="EventProvider" name="this" />
              <variable attributes="__local__ private" citdl="this.__yui_events[p_type]" line="1749" name="ce" />
            </scope>
            <scope doc="Removes all listeners from the specified event" ilk="function" line="1762" lineend="1764" name="unsubscribeAll" returns="this.unsubscribe()" signature="unsubscribeAll(p_type)">
              <variable citdl="String" doc="The type, or name of the event" ilk="argument" name="p_type" />
              <variable citdl="EventProvider" name="this" />
            </scope>
            <scope doc="Creates a new custom event of the specified type.  If a custom event&#xA;by that name already exists, it will not be re-created.  In either&#xA;case the custom event is returned." ilk="function" line="1796" lineend="1827" name="createEvent" returns="CustomEvent" signature="createEvent(p_type, p_config)">
              <variable citdl="String" doc="the type, or name of the event" ilk="argument" name="p_type" />
              <variable citdl="Object" doc="optional config params.  Valid properties are:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;scope: defines the default execution scope.  If not defined&#xA;the default scope will be this instance.&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;silent: if true, the custom event will not generate log messages.&#xA;This is false by default.&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;onSubscribeCallback: specifies a callback to execute when the&#xA;event has a new subscriber.  This will fire immediately for&#xA;each queued subscriber if any exist prior to the creation of&#xA;the event.&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="argument" name="p_config" />
              <variable citdl="EventProvider" name="this" />
              <variable attributes="__local__ private" citdl="p_config" line="1799" name="opts" />
              <variable attributes="__local__ private" citdl="this.__yui_events" line="1800" name="events" />
              <variable attributes="__local__ private" citdl="opts.scope" line="1805" name="scope" />
              <variable attributes="__local__ private" citdl="opts.silent" line="1806" name="silent" />
              <variable attributes="__local__ private" citdl="YAHOO.util.CustomEvent" line="1809" name="ce" />
              <variable attributes="__local__ private" citdl="this.__yui_subscribers[p_type]" line="1817" name="qs" />
            </scope>
            <scope doc="Fire a custom event by name.  The callback functions will be executed&#xA;from the scope specified when the event was created, and with the&#xA;following parameters:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The first argument fire() was executed with&lt;/li&gt;&#xA;&lt;li&gt;The custom object (if any) that was passed into the subscribe()&#xA;method&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="function" line="1846" lineend="1860" name="fireEvent" returns="Boolean" signature="fireEvent(p_type, arg1, arg2, etc)">
              <variable citdl="String" doc="the type, or name of the event" ilk="argument" name="p_type" />
              <variable ilk="argument" name="arg1" />
              <variable ilk="argument" name="arg2" />
              <variable ilk="argument" name="etc" />
              <variable citdl="EventProvider" name="this" />
              <variable attributes="__local__ private" citdl="this.__yui_events[p_type]" line="1849" name="ce" />
              <variable attributes="__local__ private" citdl="Array" line="1852" name="args" />
            </scope>
            <scope doc="Returns true if the custom event of the provided type has been created&#xA;with createEvent." ilk="function" line="1868" lineend="1875" name="hasEvent" returns="Boolean" signature="hasEvent(type)">
              <variable citdl="String" doc="the type, or name of the event" ilk="argument" name="type" />
              <variable citdl="EventProvider" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="1900" lineend="1963" name="KeyListener">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: KeyListener is a utility that provides an easy interface for listening for&#xA;keydown/keyup events fired against DOM elements." ilk="function" line="1900" lineend="2043" name="KeyListener" signature="KeyListener(attachTo, keyData, handler, event)">
              <variable citdl="String" doc="The element or element ID to which the key&#xA;event should be attached" ilk="argument" name="attachTo" />
              <variable citdl="Object" doc="The object literal representing the key(s)&#xA;to detect. Possible attributes are&#xA;shift(boolean), alt(boolean), ctrl(boolean)&#xA;and keys(either an int or an array of ints&#xA;representing keycodes)." ilk="argument" name="keyData" />
              <variable citdl="Object" doc="An object literal representing the handler." ilk="argument" name="handler" />
              <variable citdl="String" doc="Optional. The event (keydown or keyup) to&#xA;listen for. Defaults automatically to keydown." ilk="argument" name="event" />
              <variable citdl="KeyListener" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.CustomEvent" doc="PRIVATE: The CustomEvent fired internally when a key is pressed" line="1919" name="keyEvent" />
              <scope attributes="__local__ private" doc="PRIVATE: Handles the key event when a key is pressed." ilk="function" line="1960" lineend="2000" name="handleKeyPress" signature="handleKeyPress(e, obj)">
                <variable citdl="DOMEvent" doc="The keypress DOM event" ilk="argument" name="e" />
                <variable citdl="Object" doc="The DOM event scope object" ilk="argument" name="obj" />
                <variable citdl="Object" line="1962" name="keyData">
                  <variable citdl="Boolean" line="1962" name="shift" />
                  <variable citdl="Boolean" line="1965" name="alt" />
                  <variable citdl="Boolean" line="1968" name="ctrl" />
                </variable>
                <variable attributes="__local__ private" citdl="keyData.keys[i]" doc="if we pass this, all modifiers match" line="1976" name="dataItem" />
                <variable attributes="__local__ private" line="1977" name="keyPressed" />
              </scope>
            </scope>
            <variable citdl="YAHOO.util.CustomEvent" doc="The CustomEvent fired when the KeyListener is enabled via the enable()&#xA;function" line="1930" name="enabledEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="The CustomEvent fired when the KeyListener is disabled via the&#xA;disable() function" line="1941" name="disabledEvent" />
            <scope doc="Enables the KeyListener by attaching the DOM event listeners to the&#xA;target DOM element" ilk="function" line="2007" lineend="2018" name="enable" signature="enable()">
              <variable citdl="KeyListener" name="this" />
            </scope>
            <variable citdl="Boolean" doc="Boolean indicating the enabled/disabled state of the Tooltip" line="2017" name="enabled" />
            <scope doc="Disables the KeyListener by removing the DOM event listeners from the&#xA;target DOM element" ilk="function" line="2025" lineend="2031" name="disable" signature="disable()">
              <variable citdl="KeyListener" name="this" />
            </scope>
            <scope doc="Returns a String representation of the object." ilk="function" line="2038" lineend="2041" name="toString" returns="String" signature="toString()">
              <variable citdl="KeyListener" name="this" />
            </scope>
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the DOM &quot;keydown&quot; event." line="2052" name="KEYDOWN" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the DOM &quot;keyup&quot; event." line="2061" name="KEYUP" />
          </scope>
        </variable>
        <scope attributes="__static__" doc="STATIC: Returns the namespace specified and creates it if it doesn&apos;t exist&#xA;&lt;pre&gt;&#xA;YAHOO.namespace(&quot;property.package&quot;);&#xA;YAHOO.namespace(&quot;YAHOO.property.package&quot;);&#xA;&lt;/pre&gt;&#xA;Either of the above would create YAHOO.property, then&#xA;YAHOO.property.package&#xA;&#xA;Be careful when naming packages. Reserved words may work in some browsers&#xA;and not others. For instance, the following will fail in Safari:&#xA;&lt;pre&gt;&#xA;YAHOO.namespace(&quot;really.long.nested.namespace&quot;);&#xA;&lt;/pre&gt;&#xA;This fails because &quot;long&quot; is a future reserved word in ECMAScript" ilk="function" line="73" lineend="87" name="namespace" returns="Object" signature="namespace()">
          <variable citdl="YAHOO" name="this" />
          <variable attributes="__local__ private" citdl="arguments" line="74" name="a" />
          <variable attributes="__local__ private" line="74" name="i" />
          <variable attributes="__local__ private" line="74" name="j" />
          <variable attributes="__local__ private" citdl="a[i].split()" line="74" name="d" />
          <variable attributes="__local__ private" citdl="YAHOO" line="74" name="o" />
        </scope>
        <scope attributes="__static__" doc="STATIC: Uses YAHOO.widget.Logger to output a log message, if the widget is&#xA;available." ilk="function" line="102" lineend="109" name="log" returns="Boolean" signature="log(msg, cat, src)">
          <variable citdl="String" doc="The message to log." ilk="argument" name="msg" />
          <variable citdl="String" doc="The log category for the message.  Default&#xA;categories are &quot;info&quot;, &quot;warn&quot;, &quot;error&quot;, time&quot;.&#xA;Custom categories can be used as well. (opt)" ilk="argument" name="cat" />
          <variable citdl="String" doc="The source of the the message (opt)" ilk="argument" name="src" />
          <variable citdl="YAHOO" name="this" />
          <variable attributes="__local__ private" citdl="YAHOO.widget.Logger" line="103" name="l" />
        </scope>
        <scope attributes="__static__" doc="STATIC: Initializes the global by creating the default namespaces and applying&#xA;any new configuration information that is detected." ilk="function" line="118" lineend="137" name="init" signature="init()">
          <variable citdl="YAHOO" name="this" />
          <variable attributes="__local__ private" line="121" name="i" />
          <variable attributes="__local__ private" citdl="Boolean" line="121" name="unique" />
          <variable attributes="__local__ private" citdl="YAHOO_config.listener" line="121" name="l" />
          <variable attributes="__local__ private" citdl="YAHOO.env.listeners" line="121" name="ls" />
        </scope>
        <scope attributes="__static__" doc="STATIC: Registers a module with the YAHOO object" ilk="function" line="153" lineend="176" name="register" signature="register(name, mainClass, data)">
          <variable citdl="String" doc="the name of the module (event, slider, etc)" ilk="argument" name="name" />
          <variable citdl="Function" doc="a reference to class in the module.  This&#xA;class will be tagged with the version info&#xA;so that it will be possible to identify the&#xA;version that is in use when multiple versions&#xA;have loaded" ilk="argument" name="mainClass" />
          <variable citdl="Object" doc="metadata object for the module.  Currently it&#xA;is expected to contain a &quot;version&quot; property&#xA;and a &quot;build&quot; property at minimum." ilk="argument" name="data" />
          <variable citdl="YAHOO" name="this" />
          <variable attributes="__local__ private" citdl="YAHOO.env.modules" line="154" name="mods" />
          <variable attributes="__local__ private" citdl="data.build" line="158" name="b" />
          <variable attributes="__local__ private" citdl="mods[name]" line="158" name="m" />
          <variable attributes="__local__ private" citdl="YAHOO.env.listeners" line="158" name="ls" />
          <variable attributes="__local__ private" citdl="data.version" line="158" name="v" />
        </scope>
        <variable citdl="Array" line="156" name="builds" />
        <variable citdl="Array" line="156" name="versions" />
        <variable attributes="__static__" citdl="Object" doc="STATIC: YAHOO.env is used to keep track of what is known about the YUI library and&#xA;the browsing environment" line="185" name="env" />
        <variable citdl="Object" doc="Provides the language utilites and extensions used by the library" line="230" lineend="404" name="lang">
          <scope doc="Determines whether or not the provided object is an array" ilk="function" line="237" lineend="243" name="isArray" returns="YAHOO.lang.isObject()" signature="isArray(obj)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="obj" />
            <variable citdl="lang" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is a boolean" ilk="function" line="251" lineend="253" name="isBoolean" signature="isBoolean(obj)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="obj" />
            <variable citdl="lang" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is a function" ilk="function" line="261" lineend="263" name="isFunction" signature="isFunction(obj)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="obj" />
            <variable citdl="lang" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is null" ilk="function" line="271" lineend="273" name="isNull" returns="Object" signature="isNull(obj)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="obj" />
            <variable citdl="lang" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is a legal number" ilk="function" line="281" lineend="283" name="isNumber" signature="isNumber(obj)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="obj" />
            <variable citdl="lang" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is of type object&#xA;or function" ilk="function" line="292" lineend="294" name="isObject" signature="isObject(obj)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="obj" />
            <variable citdl="lang" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is a string" ilk="function" line="302" lineend="304" name="isString" signature="isString(obj)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="obj" />
            <variable citdl="lang" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is undefined" ilk="function" line="312" lineend="314" name="isUndefined" signature="isUndefined(obj)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="obj" />
            <variable citdl="lang" name="this" />
          </scope>
          <scope doc="Determines whether or not the property was added&#xA;to the object instance.  Returns false if the property is not present&#xA;in the object, or was inherited from the prototype.&#xA;This abstraction is provided to enable hasOwnProperty for Safari 1.3.x.&#xA;There is a discrepancy between YAHOO.lang.hasOwnProperty and&#xA;Object.prototype.hasOwnProperty when the property is a primitive added to&#xA;both the instance AND prototype with the same value:&#xA;&lt;pre&gt;&#xA;var A = function() {};&#xA;A.prototype.foo = &apos;foo&apos;;&#xA;var a = new A();&#xA;a.foo = &apos;foo&apos;;&#xA;alert(a.hasOwnProperty(&apos;foo&apos;)); // true&#xA;alert(YAHOO.lang.hasOwnProperty(a, &apos;foo&apos;)); // false when using fallback&#xA;&lt;/pre&gt;" ilk="function" line="336" lineend="343" name="hasOwnProperty" signature="hasOwnProperty(obj, prop)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="obj" />
            <variable ilk="argument" name="prop" />
            <variable citdl="lang" name="this" />
          </scope>
          <scope attributes="__static__" doc="STATIC: Utility to set up the prototype, constructor and superclass properties to&#xA;support an inheritance strategy that can chain constructors and methods." ilk="function" line="358" lineend="373" name="extend" signature="extend(subc, superc, overrides)">
            <variable citdl="Function" doc="the object to modify" ilk="argument" name="subc" />
            <variable citdl="Function" doc="the object to inherit" ilk="argument" name="superc" />
            <variable citdl="Object" doc="additional properties/methods to add to the&#xA;subclass prototype.  These will override the&#xA;matching items obtained from the superclass&#xA;if present." ilk="argument" name="overrides" />
            <variable citdl="lang" name="this" />
            <scope attributes="__local__ private" classrefs="superc.prototype" ilk="class" line="359" name="F">
              <scope attributes="__local__ private __ctor__" ilk="function" line="359" lineend="359" name="F" signature="F()">
                <variable citdl="F" name="this" />
              </scope>
            </scope>
            <scope classrefs="F" ilk="class" line="361" name="subc">
              <variable citdl="superc.prototype" line="363" name="superclass" />
              <scope ilk="class" line="365" lineend="366" name="superc" />
            </scope>
          </scope>
          <scope attributes="__static__" doc="STATIC: Applies all prototype properties in the supplier to the receiver if the&#xA;receiver does not have these properties yet.  Optionally, one or more&#xA;methods/properties can be specified (as additional parameters).  This&#xA;option will overwrite the property if receiver has it already." ilk="function" line="390" lineend="403" name="augment" signature="augment(r, s)">
            <variable citdl="Function" doc="the object to receive the augmentation" ilk="argument" name="r" />
            <variable citdl="Function" doc="the object that supplies the properties to augment" ilk="argument" name="s" />
            <variable citdl="lang" name="this" />
            <variable attributes="__local__ private" citdl="arguments" line="391" name="a" />
            <variable attributes="__local__ private" line="391" name="i" />
            <variable attributes="__local__ private" citdl="s.prototype" line="391" name="sp" />
            <variable attributes="__local__ private" citdl="r.prototype" line="391" name="rp" />
            <variable attributes="__local__ private" line="391" name="p" />
          </scope>
        </variable>
        <variable attributes="__static__" citdl="YAHOO.lang.augment" doc="STATIC: An alias for &lt;a href=&quot;YAHOO.lang.html#augment&quot;&gt;YAHOO.lang.augment&lt;/a&gt;" line="426" name="augment" />
        <variable attributes="__static__" citdl="YAHOO.lang.extend" doc="STATIC: An alias for &lt;a href=&quot;YAHOO.lang.html#extend&quot;&gt;YAHOO.lang.extend&lt;/a&gt;" line="439" name="extend" />
      </variable>
      <variable citdl="Ext.EventObject.setEvent()" line="42" name="ev" />
      <variable attributes="private" citdl="Object" doc="regex cache" line="42" lineend="44" name="patterns">
        <variable line="701" name="color" />
        <variable line="702" name="rgb" />
        <variable line="703" name="hex" />
        <variable line="704" name="hex3" />
        <variable line="705" name="transparent" />
        <variable line="1175" name="points" />
      </variable>
      <variable citdl="delay" line="43" name="d" />
      <variable attributes="private" citdl="Number" line="43" name="idSeed" />
      <variable citdl="Date" line="44" name="t" />
      <variable attributes="private" citdl="navigator.userAgent.toLowerCase()" line="44" name="ua" />
      <variable citdl="newFn" line="45" name="fn" />
      <variable citdl="newScope" line="46" name="scope" />
      <scope attributes="private" ilk="function" line="47" lineend="64" name="toCamel" returns="property" signature="toCamel(property)">
        <variable ilk="argument" name="property" />
      </scope>
      <variable citdl="newArgs" line="47" name="args" />
      <variable citdl="setInterval()" line="49" name="id" />
      <variable attributes="private" line="56" name="isSafari" />
      <variable attributes="private" citdl="isIE" line="56" name="isBorderBox" />
      <variable attributes="private" line="56" name="isLinux" />
      <variable attributes="private" citdl="ua.indexOf()" line="56" name="isOpera" />
      <variable attributes="private" citdl="document.compatMode" line="56" name="isStrict" />
      <variable citdl="Object" line="56" name="window">
        <variable citdl="Object" line="56" name="location">
          <variable citdl="Object" line="56" name="href">
            <variable citdl="Object" line="56" name="toLowerCase()">
              <variable attributes="__local__ private" line="56" name="indexOf()" />
            </variable>
          </variable>
        </variable>
      </variable>
      <variable attributes="private" line="56" name="isWindows" />
      <variable attributes="private" line="56" name="isGecko" />
      <variable citdl="Object" line="56" name="document">
        <variable citdl="Object" line="39" name="body">
          <variable line="39" name="clientHeight" />
          <variable line="52" name="clientWidth" />
        </variable>
        <variable attributes="__local__ private" line="56" name="compatMode" />
      </variable>
      <variable attributes="private" citdl="ua.indexOf()" line="56" name="isIE7" />
      <variable attributes="private" citdl="window.location.href.toLowerCase().indexOf()" line="56" name="isSecure" />
      <variable attributes="private" citdl="ua.indexOf()" line="56" name="isIE" />
      <variable attributes="private" line="56" name="isMac" />
      <variable attributes="private" citdl="Ext.Element.prototype" line="64" name="supr" />
      <variable attributes="private" citdl="Array" doc="shims are shared among layer to keep from having 100 iframes" line="67" name="shims" />
      <variable citdl="Object" line="74" lineend="10" name="Ext">
        <scope doc="* Ext JS Library 1.1.1 * Copyright(c) 2006-2007, Ext JS,&#xA;LLC." ilk="function" line="9" lineend="63" name="XTemplate" signature="XTemplate()">
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="this.html" line="11" name="s" />
          <variable attributes="__local__ private" line="15" name="re" />
          <variable attributes="__local__ private" line="17" name="nameRe" />
          <variable attributes="__local__ private" line="18" name="ifRe" />
          <variable attributes="__local__ private" line="19" name="execRe" />
          <variable attributes="__local__ private" line="20" name="m" />
          <variable attributes="__local__ private" citdl="Number" line="20" name="id" />
          <variable attributes="__local__ private" citdl="Array" line="21" name="tpls" />
          <variable attributes="__local__ private" citdl="m[0].match()" line="24" name="m2" />
          <variable attributes="__local__ private" citdl="m[0].match()" line="25" name="m3" />
          <variable attributes="__local__ private" citdl="m[0].match()" line="26" name="m4" />
          <variable attributes="__local__ private" citdl="m3" line="27" name="exp" />
          <variable attributes="__local__ private" citdl="Function" line="27" name="exec" />
          <variable attributes="__local__ private" citdl="Function" line="27" name="fn" />
          <variable attributes="__local__ private" citdl="m2" line="28" name="name" />
          <scope ilk="function" line="143" lineend="146" name="from" returns="Ext.XTemplate" signature="from(el)">
            <variable ilk="argument" name="el" />
          </scope>
        </scope>
        <variable citdl="Boolean" doc="Notifies Element that fx methods are available" line="10" name="enableFx" />
        <scope doc="* These classes are private internal classes */" ilk="function" line="12" lineend="17" name="CenterLayoutRegion" signature="CenterLayoutRegion(mgr, config)">
          <variable ilk="argument" name="mgr" />
          <variable ilk="argument" name="config" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="* Private internal class for reading and applying state */" ilk="class" line="12" lineend="76" name="LayoutStateManager">
          <scope attributes="__ctor__" doc="* Private internal class for reading and applying state */" ilk="function" line="12" lineend="20" name="LayoutStateManager" signature="LayoutStateManager(layout)">
            <variable ilk="argument" name="layout" />
            <variable citdl="LayoutStateManager" name="this" />
          </scope>
          <variable citdl="Object" line="15" lineend="19" name="state">
            <scope ilk="class" line="15" lineend="28" name="Provider">
              <scope attributes="__ctor__" doc="Abstract base class for state provider implementations. This class provides methods&#xA;for encoding and decoding &lt;b&gt;typed&lt;/b&gt; variables including dates and defines the&#xA;Provider interface." ilk="function" line="15" lineend="28" name="Provider" signature="Provider()">
                <variable citdl="Provider" name="this" />
              </scope>
              <variable citdl="Object" line="26" lineend="26" name="state" />
            </scope>
            <variable citdl="Object" line="15" lineend="15" name="north" />
            <variable citdl="Object" line="16" lineend="16" name="south" />
            <variable citdl="Object" line="17" lineend="17" name="east" />
            <variable citdl="Object" line="18" lineend="18" name="west" />
            <variable citdl="Object" line="152" lineend="198" name="Manager">
              <scope doc="Configures the default state provider for your application" ilk="function" line="160" lineend="162" name="setProvider" signature="setProvider(stateProvider)">
                <variable citdl="Provider" doc="The state provider to set" ilk="argument" name="stateProvider" />
                <variable citdl="Manager" name="this" />
              </scope>
              <scope doc="Returns the current value for a key" ilk="function" line="170" lineend="172" name="get" returns="Mixed" signature="get(key, defaultValue)">
                <variable ilk="argument" name="key" />
                <variable citdl="Mixed" doc="The default value to return if the key lookup does not match" ilk="argument" name="defaultValue" />
                <variable citdl="Manager" name="this" />
              </scope>
              <scope doc="Sets the value for a key" ilk="function" line="179" lineend="181" name="set" signature="set(key, value)">
                <variable ilk="argument" name="key" />
                <variable citdl="Mixed" doc="The state data" ilk="argument" name="value" />
                <variable citdl="Manager" name="this" />
              </scope>
              <scope doc="Clears a value from the state" ilk="function" line="187" lineend="189" name="clear" signature="clear(key)">
                <variable ilk="argument" name="key" />
                <variable citdl="Manager" name="this" />
              </scope>
              <scope doc="Gets the currently configured state provider" ilk="function" line="195" lineend="197" name="getProvider" returns="Provider" signature="getProvider()">
                <variable citdl="Manager" name="this" />
              </scope>
            </variable>
            <scope ilk="class" line="225" lineend="233" name="CookieProvider">
              <scope attributes="__ctor__" doc="CONSTRUCTOR: The default Provider implementation which saves state via cookies.&#xA;&lt;br /&gt;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var cp = new Ext.state.CookieProvider({&#xA;path: &quot;/cgi-bin/&quot;,&#xA;expires: new Date(new Date().getTime()+(1000*60*60*24*30)); //30 days&#xA;domain: &quot;extjs.com&quot;&#xA;Ext.state.Manager.setProvider(cp);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="225" lineend="233" name="CookieProvider" signature="CookieProvider(config)">
                <variable citdl="Object" doc="The configuration object" ilk="argument" name="config" />
                <variable citdl="CookieProvider" name="this" />
              </scope>
              <variable citdl="String" line="227" name="path" />
              <variable citdl="Date" line="228" name="expires" />
              <variable doc="7 days" line="229" name="domain" />
              <variable citdl="Boolean" line="230" name="secure" />
              <variable citdl="this.readCookies()" line="232" name="state" />
            </scope>
          </variable>
          <scope ilk="function" line="23" lineend="56" name="init" signature="init(layout, provider)">
            <variable ilk="argument" name="layout" />
            <variable ilk="argument" name="provider" />
            <variable citdl="LayoutStateManager" name="this" />
            <variable attributes="__local__ private" citdl="provider.get()" line="25" name="state" />
            <variable attributes="__local__ private" citdl="layout.isUpdating()" line="27" name="wasUpdating" />
            <variable attributes="__local__ private" citdl="state[key]" line="33" name="rstate" />
            <variable attributes="__local__ private" citdl="layout.getRegion()" line="34" name="r" />
          </scope>
          <variable citdl="provider" line="24" name="provider" />
          <variable citdl="layout" line="52" name="layout" />
          <scope ilk="function" line="58" lineend="60" name="storeState" signature="storeState()">
            <variable citdl="LayoutStateManager" name="this" />
          </scope>
          <scope ilk="function" line="62" lineend="65" name="onRegionResized" signature="onRegionResized(region, newSize)">
            <variable ilk="argument" name="region" />
            <variable ilk="argument" name="newSize" />
            <variable citdl="LayoutStateManager" name="this" />
          </scope>
          <scope ilk="function" line="67" lineend="70" name="onRegionCollapsed" signature="onRegionCollapsed(region)">
            <variable ilk="argument" name="region" />
            <variable citdl="LayoutStateManager" name="this" />
          </scope>
          <scope ilk="function" line="72" lineend="75" name="onRegionExpanded" signature="onRegionExpanded(region)">
            <variable ilk="argument" name="region" />
            <variable citdl="LayoutStateManager" name="this" />
          </scope>
        </scope>
        <variable citdl="Object" line="12" name="lib">
          <variable citdl="Object" line="12" lineend="177" name="Dom">
            <scope ilk="function" line="14" lineend="16" name="getViewWidth" returns="full" signature="getViewWidth(full)">
              <variable ilk="argument" name="full" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="18" lineend="20" name="getViewHeight" returns="full" signature="getViewHeight(full)">
              <variable ilk="argument" name="full" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="22" lineend="25" name="getDocumentHeight" returns="Math.max()" signature="getDocumentHeight()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" doc="missing from prototype?" line="23" name="scrollHeight" />
            </scope>
            <scope ilk="function" line="27" lineend="30" name="getDocumentWidth" returns="Math.max()" signature="getDocumentWidth()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" doc="missing from prototype?" line="28" name="scrollWidth" />
            </scope>
            <scope ilk="function" line="32" lineend="43" name="getViewportHeight" returns="height" signature="getViewportHeight()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="self.innerHeight" doc="missing from prototype?" line="33" name="height" />
              <variable attributes="__local__ private" citdl="document.compatMode" line="34" name="mode" />
            </scope>
            <scope ilk="function" line="45" lineend="55" name="getViewportWidth" returns="width" signature="getViewportWidth()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="self.innerWidth" doc="missing from prototype?" line="46" name="width" />
              <variable attributes="__local__ private" citdl="document.compatMode" doc="Safari" line="47" name="mode" />
            </scope>
            <scope ilk="function" line="57" lineend="79" name="isAncestor" returns="Boolean" signature="isAncestor(p, c)">
              <variable ilk="argument" name="p" />
              <variable ilk="argument" name="c" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="c.parentNode" line="67" name="parent" />
            </scope>
            <scope ilk="function" line="81" lineend="83" name="getRegion" returns="Ext.lib.Region.getRegion()" signature="getRegion(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="85" lineend="87" name="getY" returns="this.getXY()[1]" signature="getY(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="89" lineend="91" name="getX" returns="this.getXY()[0]" signature="getX(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="93" lineend="156" name="getXY" returns="Array" signature="getXY(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="document.body" doc="this initially used Position.cumulativeOffset but it is not&#xA;accurate enough" line="94" name="bd" />
              <variable attributes="__local__ private" citdl="el.getBoundingClientRect()" doc="this initially used Position.cumulativeOffset but it is not&#xA;accurate enough" line="94" name="b" />
              <variable attributes="__local__ private" citdl="el" doc="this initially used Position.cumulativeOffset but it is not&#xA;accurate enough" line="94" name="p" />
              <variable attributes="__local__ private" citdl="fly()" doc="this initially used Position.cumulativeOffset but it is not&#xA;accurate enough" line="94" name="pe" />
              <variable attributes="__local__ private" citdl="fly().getScroll()" doc="this initially used Position.cumulativeOffset but it is not&#xA;accurate enough" line="94" name="scroll" />
              <variable attributes="__local__ private" citdl="Number" line="102" name="y" />
              <variable attributes="__local__ private" citdl="Number" line="102" name="x" />
              <variable attributes="__local__ private" citdl="fly().getStyle()" line="106" name="hasAbsolute" />
              <variable citdl="Object" line="106" name="fly()">
                <variable attributes="__local__ private" line="106" name="getStyle()" />
              </variable>
              <variable attributes="__local__ private" citdl="parseInt()" line="120" name="bt" />
              <variable attributes="__local__ private" citdl="parseInt()" line="121" name="bl" />
              <variable attributes="__local__ private" citdl="fly()" line="142" name="dbd" />
            </scope>
            <scope ilk="function" line="158" lineend="168" name="setXY" signature="setXY(el, xy)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="xy" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="el.translatePoints()" line="161" name="pts" />
            </scope>
            <scope ilk="function" line="170" lineend="172" name="setX" signature="setX(el, x)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="x" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="174" lineend="176" name="setY" signature="setY(el, y)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="y" />
              <variable citdl="Dom" name="this" />
            </scope>
          </variable>
          <variable citdl="Object" line="189" lineend="267" name="Event">
            <scope ilk="function" line="180" lineend="182" name="getPageX" returns="Event.pointerX()" signature="getPageX(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="184" lineend="186" name="getPageY" returns="Event.pointerY()" signature="getPageY(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="188" lineend="191" name="getXY" returns="Array" signature="getXY(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="193" lineend="195" name="getTarget" returns="Event.element()" signature="getTarget(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="197" lineend="203" name="resolveTextNode" returns="Node" signature="resolveTextNode(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="Event" name="this" />
            </scope>
            <variable citdl="Number" line="199" name="POLL_RETRYS" />
            <variable citdl="Number" line="200" name="POLL_INTERVAL" />
            <variable citdl="Number" line="201" name="EL" />
            <variable citdl="Number" line="202" name="TYPE" />
            <variable citdl="Number" line="203" name="FN" />
            <variable citdl="Number" line="204" name="WFN" />
            <scope ilk="function" line="205" lineend="217" name="getRelatedTarget" returns="this.resolveTextNode()" signature="getRelatedTarget(ev)">
              <variable ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="ev.relatedTarget" line="207" name="t" />
            </scope>
            <variable citdl="Number" line="205" name="OBJ" />
            <variable citdl="Number" line="206" name="ADJ_SCOPE" />
            <variable citdl="setInterval()" line="207" name="_interval" />
            <scope ilk="function" line="209" lineend="218" name="startInterval" signature="startInterval()">
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="this" line="211" name="self" />
              <scope attributes="__local__ private" ilk="function" line="212" lineend="214" name="callback" signature="callback()" />
            </scope>
            <scope ilk="function" line="219" lineend="221" name="on" signature="on(el, eventName, fn)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="eventName" />
              <variable ilk="argument" name="fn" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="223" lineend="225" name="un" signature="un(el, eventName, fn)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="eventName" />
              <variable ilk="argument" name="fn" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="227" lineend="229" name="purgeElement" signature="purgeElement(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="231" lineend="238" name="preventDefault" signature="preventDefault(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="232" lineend="256" name="addListener" returns="Boolean" signature="addListener(el, eventName, fn)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="eventName" />
              <variable ilk="argument" name="fn" />
              <variable citdl="Event" name="this" />
              <scope attributes="__local__ private" ilk="function" line="244" lineend="246" name="wrappedFn" returns="fn()" signature="wrappedFn(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <variable attributes="__local__ private" citdl="Array" line="248" name="li" />
              <variable attributes="__local__ private" citdl="listeners.length" line="250" name="index" />
            </scope>
            <scope ilk="function" line="240" lineend="247" name="stopPropagation" signature="stopPropagation(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="249" lineend="251" name="stopEvent" signature="stopEvent(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="253" lineend="266" name="onAvailable" signature="onAvailable(id, fn, scope)">
              <variable ilk="argument" name="id" />
              <variable ilk="argument" name="fn" />
              <variable ilk="argument" name="scope" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="Date" doc="no equiv" line="254" name="start" />
              <variable attributes="__local__ private" citdl="setInterval()" doc="no equiv" line="254" name="iid" />
              <scope attributes="__local__ private" ilk="function" line="255" lineend="264" name="f" signature="f()">
                <variable attributes="__local__ private" citdl="document.getElementById()" line="259" name="el" />
              </scope>
            </scope>
            <scope ilk="function" line="259" lineend="310" name="removeListener" returns="Boolean" signature="removeListener(el, eventName, fn)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="eventName" />
              <variable ilk="argument" name="fn" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" line="260" name="i" />
              <variable attributes="__local__ private" line="260" name="len" />
              <variable attributes="__local__ private" citdl="unloadListeners[i]" line="272" name="li" />
              <variable attributes="__local__ private" citdl="listeners[index]" line="285" name="cacheItem" />
              <variable attributes="__local__ private" citdl="arguments[3]" line="288" name="index" />
            </scope>
            <scope ilk="function" line="381" lineend="394" name="getTime" returns="ev.time" signature="getTime(ev)">
              <variable ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="Date" line="384" name="t" />
            </scope>
            <variable citdl="ex" line="388" name="lastError" />
            <scope ilk="function" line="423" lineend="436" name="getEvent" returns="ev" signature="getEvent(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="e" line="424" name="ev" />
              <variable attributes="__local__ private" citdl="this.getEvent.caller" line="426" name="c" />
            </scope>
            <scope ilk="function" line="439" lineend="442" name="getCharCode" returns="ev.charCode" signature="getCharCode(ev)">
              <variable ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="445" lineend="457" name="_getCacheIndex" returns="Number" signature="_getCacheIndex(el, eventName, fn)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="eventName" />
              <variable ilk="argument" name="fn" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="listeners[i]" line="447" name="li" />
            </scope>
            <variable citdl="Object" line="460" lineend="460" name="elCache" />
            <scope ilk="function" line="463" lineend="465" name="getEl" returns="document.getElementById()" signature="getEl(id)">
              <variable ilk="argument" name="id" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="468" lineend="469" name="clearCache" signature="clearCache()">
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="472" lineend="480" name="_load" signature="_load(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event" line="474" name="EU" />
            </scope>
            <scope ilk="function" line="483" lineend="541" name="_tryPreloadAttach" returns="Boolean" signature="_tryPreloadAttach()">
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" line="492" name="tryAgain" />
              <variable attributes="__local__ private" citdl="Array" line="498" name="notAvail" />
              <variable attributes="__local__ private" citdl="onAvailStack[i]" line="500" name="item" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="502" name="el" />
              <variable attributes="__local__ private" citdl="el" line="510" name="scope" />
            </scope>
            <variable citdl="Boolean" line="489" name="locked" />
            <scope ilk="function" line="561" lineend="591" name="getListeners" signature="getListeners(el, eventName)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="eventName" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="562" name="searchLists" />
              <variable attributes="__local__ private" citdl="Array" line="562" name="results" />
              <variable attributes="__local__ private" citdl="searchLists[j]" line="572" name="searchList" />
              <variable attributes="__local__ private" citdl="searchList[i]" line="575" name="l" />
            </scope>
            <scope ilk="function" line="594" lineend="636" name="_unload" signature="_unload(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="j" line="596" name="index" />
              <variable attributes="__local__ private" line="596" name="i" />
              <variable attributes="__local__ private" citdl="listeners.length" line="596" name="j" />
              <variable attributes="__local__ private" citdl="unloadListeners[i]" line="596" name="l" />
              <variable attributes="__local__ private" line="596" name="len" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event" line="596" name="EU" />
              <variable attributes="__local__ private" citdl="window" line="601" name="scope" />
            </scope>
            <scope ilk="function" line="639" lineend="648" name="getScroll" returns="Array" signature="getScroll()">
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="document.documentElement" line="640" name="dd" />
              <variable attributes="__local__ private" citdl="document.body" line="640" name="db" />
            </scope>
            <variable line="651" name="doAdd" />
            <variable line="667" name="doRemove" />
          </variable>
          <variable citdl="YAHOO.util.Region" line="226" name="Region">
            <scope ilk="function" line="488" lineend="497" name="getRegion" returns="Ext.lib.Region" signature="getRegion(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Region" name="this" />
              <variable attributes="__local__ private" citdl="Ext.lib.Dom.getXY()" line="489" name="p" />
              <variable attributes="__local__ private" citdl="p[1]" line="491" name="t" />
              <variable attributes="__local__ private" citdl="p[0]" line="492" name="r" />
              <variable attributes="__local__ private" citdl="p[1]" line="493" name="b" />
              <variable attributes="__local__ private" citdl="p[0]" line="494" name="l" />
            </scope>
          </variable>
          <variable citdl="YAHOO.util.Point" line="227" name="Point" />
          <variable citdl="Object" line="269" lineend="332" name="Ajax">
            <scope ilk="function" line="289" lineend="309" name="request" signature="request(method, uri, cb, data, options)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="uri" />
              <variable ilk="argument" name="cb" />
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="options" />
              <variable citdl="Ajax" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="290" lineend="296" name="o">
                <variable citdl="method" line="291" name="method" />
                <variable citdl="data" line="292" name="parameters" />
                <variable citdl="cb.timeout" line="293" name="timeout" />
                <variable citdl="createSuccess()" line="294" name="onSuccess" />
                <variable citdl="createFailure()" line="295" name="onFailure" />
                <variable citdl="options.headers" line="299" name="requestHeaders" />
                <variable citdl="String" line="303" name="contentType" />
                <variable citdl="options.xmlData" line="304" name="postBody" />
              </variable>
            </scope>
            <scope ilk="function" line="311" lineend="319" name="formRequest" signature="formRequest(form, uri, cb, data, isUpload, sslUri)">
              <variable ilk="argument" name="form" />
              <variable ilk="argument" name="uri" />
              <variable ilk="argument" name="cb" />
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="isUpload" />
              <variable ilk="argument" name="sslUri" />
              <variable citdl="Ajax" name="this" />
            </scope>
            <scope ilk="function" line="321" lineend="323" name="isCallInProgress" returns="Boolean" signature="isCallInProgress(trans)">
              <variable ilk="argument" name="trans" />
              <variable citdl="Ajax" name="this" />
            </scope>
            <scope ilk="function" line="325" lineend="327" name="abort" returns="Boolean" signature="abort(trans)">
              <variable ilk="argument" name="trans" />
              <variable citdl="Ajax" name="this" />
            </scope>
            <scope ilk="function" line="329" lineend="331" name="serializeForm" returns="Form.serialize()" signature="serializeForm(form)">
              <variable ilk="argument" name="form" />
              <variable citdl="Ajax" name="this" />
            </scope>
          </variable>
          <variable citdl="Object" line="336" lineend="423" name="Anim">
            <scope ilk="function" line="362" lineend="374" name="scroll" returns="anim" signature="scroll(el, args, duration, easing, cb, scope)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="cb" />
              <variable ilk="argument" name="scope" />
              <variable citdl="Anim" name="this" />
              <variable attributes="__local__ private" citdl="createAnim()" doc="not supported so scroll immediately?" line="364" name="anim" />
            </scope>
            <scope ilk="function" line="376" lineend="378" name="motion" returns="this.run()" signature="motion(el, args, duration, easing, cb, scope)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="cb" />
              <variable ilk="argument" name="scope" />
              <variable citdl="Anim" name="this" />
            </scope>
            <scope ilk="function" line="380" lineend="382" name="color" returns="this.run()" signature="color(el, args, duration, easing, cb, scope)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="cb" />
              <variable ilk="argument" name="scope" />
              <variable citdl="Anim" name="this" />
            </scope>
            <scope ilk="function" line="384" lineend="422" name="run" returns="anim" signature="run(el, args, duration, easing, cb, scope, type)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="cb" />
              <variable ilk="argument" name="scope" />
              <variable ilk="argument" name="type" />
              <variable citdl="Anim" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="385" lineend="385" name="o">
                <variable citdl="pts.left" line="397" name="left" />
                <variable citdl="pts.top" line="398" name="top" />
                <variable citdl="args.width.to" line="401" name="width" />
                <variable citdl="args.height.to" line="404" name="height" />
                <variable citdl="String()" line="407" name="opacity" />
              </variable>
              <variable attributes="__local__ private" citdl="Ext.fly()" line="389" name="e" />
              <variable attributes="__local__ private" citdl="e.translatePoints()" line="389" name="pts" />
              <variable attributes="__local__ private" line="389" name="by" />
              <variable attributes="__local__ private" citdl="e.getXY()" line="392" name="xy" />
              <variable attributes="__local__ private" citdl="createAnim()" line="414" name="anim" />
            </scope>
          </variable>
          <variable citdl="t" line="435" name="top" />
          <scope ilk="function" line="436" lineend="443" name="Region" signature="Region(t, r, b, l)">
            <variable ilk="argument" name="t" />
            <variable ilk="argument" name="r" />
            <variable ilk="argument" name="b" />
            <variable ilk="argument" name="l" />
            <variable citdl="lib" name="this" />
          </scope>
          <variable citdl="r" line="437" name="right" />
          <variable citdl="b" line="438" name="bottom" />
          <variable citdl="l" line="439" name="left" />
          <scope ilk="function" line="499" lineend="506" name="Point" signature="Point(x, y)">
            <variable ilk="argument" name="x" />
            <variable ilk="argument" name="y" />
            <variable citdl="lib" name="this" />
          </scope>
          <variable citdl="this.right" line="502" name="x" />
          <variable citdl="this.top" line="503" name="y" />
          <scope ilk="class" line="1165" lineend="486" name="Region">
            <scope ilk="function" line="446" lineend="452" name="contains" signature="contains(region)">
              <variable ilk="argument" name="region" />
              <variable citdl="Region" name="this" />
            </scope>
            <scope ilk="function" line="454" lineend="456" name="getArea" signature="getArea()">
              <variable citdl="Region" name="this" />
            </scope>
            <scope ilk="function" line="458" lineend="469" name="intersect" signature="intersect(region)">
              <variable ilk="argument" name="region" />
              <variable citdl="Region" name="this" />
              <variable attributes="__local__ private" citdl="Math.max()" line="459" name="t" />
              <variable attributes="__local__ private" citdl="Math.min()" line="460" name="r" />
              <variable attributes="__local__ private" citdl="Math.min()" line="461" name="b" />
              <variable attributes="__local__ private" citdl="Math.max()" line="462" name="l" />
            </scope>
            <scope ilk="function" line="470" lineend="477" name="union" returns="Ext.lib.Region" signature="union(region)">
              <variable ilk="argument" name="region" />
              <variable citdl="Region" name="this" />
              <variable attributes="__local__ private" citdl="Math.min()" line="471" name="t" />
              <variable attributes="__local__ private" citdl="Math.max()" line="472" name="r" />
              <variable attributes="__local__ private" citdl="Math.max()" line="473" name="b" />
              <variable attributes="__local__ private" citdl="Math.min()" line="474" name="l" />
            </scope>
            <scope ilk="function" line="479" lineend="485" name="adjust" returns="this" signature="adjust(t, l, b, r)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="l" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="r" />
              <variable citdl="Region" name="this" />
            </scope>
            <scope attributes="__ctor__" ilk="function" line="1165" lineend="1172" name="Region" signature="Region(t, r, b, l)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="r" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="l" />
              <variable citdl="Region" name="this" />
            </scope>
            <variable citdl="t" line="1166" name="top" />
            <variable citdl="r" line="1168" name="right" />
            <variable citdl="b" line="1169" name="bottom" />
            <variable citdl="l" line="1170" name="left" />
            <scope ilk="function" line="1217" lineend="1226" name="getRegion" returns="Ext.lib.Region" signature="getRegion(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Region" name="this" />
              <variable attributes="__local__ private" citdl="Ext.lib.Dom.getXY()" line="1218" name="p" />
              <variable attributes="__local__ private" citdl="p[1]" line="1220" name="t" />
              <variable attributes="__local__ private" citdl="p[0]" line="1221" name="r" />
              <variable attributes="__local__ private" citdl="p[1]" line="1222" name="b" />
              <variable attributes="__local__ private" citdl="p[0]" line="1223" name="l" />
            </scope>
          </scope>
          <scope classrefs="Ext.lib.Region" ilk="class" line="1228" lineend="1243" name="Point">
            <scope attributes="__ctor__" ilk="function" line="1228" lineend="1235" name="Point" signature="Point(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable citdl="Point" name="this" />
            </scope>
            <variable citdl="this.left" line="1233" name="right" />
            <variable citdl="this.right" line="1233" name="x" />
            <variable citdl="this[0]" line="1233" name="left" />
            <variable citdl="this[1]" line="1234" name="bottom" />
            <variable citdl="this.bottom" line="1234" name="top" />
            <variable citdl="this.top" line="1234" name="y" />
          </scope>
          <scope ilk="class" line="1292" lineend="1551" name="AnimBase">
            <scope attributes="__ctor__" ilk="function" line="1292" lineend="1296" name="AnimBase" signature="AnimBase(el, attributes, duration, method)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="attributes" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="method" />
              <variable citdl="AnimBase" name="this" />
            </scope>
            <scope ilk="function" line="1300" lineend="1304" name="toString" signature="toString()">
              <variable citdl="AnimBase" name="this" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="1301" name="el" />
              <variable attributes="__local__ private" citdl="el.id" line="1302" name="id" />
            </scope>
            <variable citdl="Object" line="1306" lineend="1311" name="patterns">
              <variable line="1307" name="noNegatives" />
              <variable line="1308" name="offsetAttribute" />
              <variable line="1309" name="defaultUnit" />
            </variable>
            <scope ilk="function" line="1314" lineend="1316" name="doMethod" returns="this.method()" signature="doMethod(attr, start, end)">
              <variable ilk="argument" name="attr" />
              <variable ilk="argument" name="start" />
              <variable ilk="argument" name="end" />
              <variable citdl="AnimBase" name="this" />
            </scope>
            <scope ilk="function" line="1319" lineend="1325" name="setAttribute" signature="setAttribute(attr, val, unit)">
              <variable ilk="argument" name="attr" />
              <variable ilk="argument" name="val" />
              <variable ilk="argument" name="unit" />
              <variable citdl="AnimBase" name="this" />
            </scope>
            <scope ilk="function" line="1328" lineend="1348" name="getAttribute" returns="val" signature="getAttribute(attr)">
              <variable ilk="argument" name="attr" />
              <variable citdl="AnimBase" name="this" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="1329" name="el" />
              <variable attributes="__local__ private" citdl="fly().getStyle()" line="1330" name="val" />
              <variable attributes="__local__ private" citdl="this.patterns.offsetAttribute.exec()" line="1336" name="a" />
              <variable attributes="__local__ private" line="1337" name="pos" />
              <variable attributes="__local__ private" line="1338" name="box" />
            </scope>
            <scope ilk="function" line="1351" lineend="1357" name="getDefaultUnit" returns="String" signature="getDefaultUnit(attr)">
              <variable ilk="argument" name="attr" />
              <variable citdl="AnimBase" name="this" />
            </scope>
            <scope ilk="function" line="1359" lineend="1368" name="animateX" signature="animateX(callback, scope)">
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="scope" />
              <variable citdl="AnimBase" name="this" />
              <scope attributes="__local__ private" ilk="function" line="1360" lineend="1365" name="f" signature="f()" />
            </scope>
            <scope ilk="function" line="1371" lineend="1407" name="setRuntimeAttribute" returns="Boolean" signature="setRuntimeAttribute(attr)">
              <variable ilk="argument" name="attr" />
              <variable citdl="AnimBase" name="this" />
              <variable attributes="__local__ private" line="1372" name="start" />
              <variable attributes="__local__ private" citdl="attributes[attr][&apos;to&apos;]" line="1373" name="end" />
              <variable attributes="__local__ private" citdl="this.attributes" line="1374" name="attributes" />
              <scope attributes="__local__ private" ilk="function" line="1378" lineend="1380" name="isset" signature="isset(prop)">
                <variable ilk="argument" name="prop" />
              </scope>
            </scope>
            <scope ilk="function" line="1410" lineend="1550" name="init" signature="init(el, attributes, duration, method)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="attributes" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="method" />
              <variable citdl="AnimBase" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="1412" name="isAnimated" />
              <variable attributes="__local__ private" citdl="Date" line="1415" name="startTime" />
              <variable attributes="__local__ private" citdl="Number" line="1418" name="actualFrames" />
              <scope attributes="__local__ private" ilk="class" line="1480" lineend="1491" name="onStart">
                <scope attributes="__local__ private __ctor__" ilk="function" line="1480" lineend="1491" name="onStart" signature="onStart()">
                  <variable citdl="onStart" name="this" />
                </scope>
                <variable citdl="Object" line="1483" lineend="1483" name="runtimeAttributes" />
              </scope>
              <scope attributes="__local__ private" ilk="function" line="1494" lineend="1516" name="onTween" signature="onTween()">
                <variable attributes="__local__ private" citdl="Object" line="1495" lineend="1498" name="data">
                  <variable citdl="Date" line="1496" name="duration" />
                  <variable citdl="this.currentFrame" line="1497" name="currentFrame" />
                  <scope ilk="function" line="1500" lineend="1505" name="toString" signature="toString()">
                    <variable citdl="data" name="this" />
                  </scope>
                </variable>
                <variable attributes="__local__ private" citdl="this.runtimeAttributes" line="1509" name="runtimeAttributes" />
              </scope>
              <scope attributes="__local__ private" ilk="function" line="1518" lineend="1538" name="onComplete" signature="onComplete()">
                <variable attributes="__local__ private" line="1519" name="actual_duration" />
                <variable attributes="__local__ private" citdl="Object" line="1521" lineend="1525" name="data">
                  <variable citdl="actual_duration" line="1522" name="duration" />
                  <variable citdl="actualFrames" line="1523" name="frames" />
                  <variable citdl="actualFrames" line="1524" name="fps" />
                  <scope ilk="function" line="1527" lineend="1533" name="toString" signature="toString()">
                    <variable citdl="data" name="this" />
                  </scope>
                </variable>
              </scope>
            </scope>
            <variable citdl="attributes" line="1424" name="attributes" />
            <variable citdl="duration" line="1427" name="duration" />
            <variable citdl="method" line="1430" name="method" />
            <variable citdl="Boolean" line="1433" name="useSeconds" />
            <variable citdl="Number" line="1436" name="currentFrame" />
            <variable citdl="Ext.lib.AnimMgr.fps" line="1439" name="totalFrames" />
            <scope ilk="function" line="1442" lineend="1444" name="getEl" returns="el" signature="getEl()">
              <variable citdl="AnimBase" name="this" />
            </scope>
            <scope ilk="function" line="1447" lineend="1449" name="isAnimated" returns="isAnimated" signature="isAnimated()">
              <variable citdl="AnimBase" name="this" />
            </scope>
            <scope ilk="function" line="1452" lineend="1454" name="getStartTime" returns="startTime" signature="getStartTime()">
              <variable citdl="AnimBase" name="this" />
            </scope>
            <variable citdl="Object" line="1456" lineend="1456" name="runtimeAttributes" />
            <scope ilk="function" line="1459" lineend="1469" name="animate" returns="Boolean" signature="animate()">
              <variable citdl="AnimBase" name="this" />
            </scope>
            <scope ilk="function" line="1472" lineend="1478" name="stop" signature="stop(finish)">
              <variable ilk="argument" name="finish" />
              <variable citdl="AnimBase" name="this" />
            </scope>
            <variable citdl="Ext.util.Event" line="1541" name="_onStart" />
            <variable citdl="Ext.util.Event" line="1542" name="onStart" />
            <variable citdl="Ext.util.Event" line="1543" name="onTween" />
            <variable citdl="Ext.util.Event" line="1544" name="_onTween" />
            <variable citdl="Ext.util.Event" line="1545" name="onComplete" />
            <variable citdl="Ext.util.Event" line="1546" name="_onComplete" />
          </scope>
          <scope ilk="function" line="1697" lineend="1699" name="ColorAnim" signature="ColorAnim(el, attributes, duration, method)">
            <variable ilk="argument" name="el" />
            <variable ilk="argument" name="attributes" />
            <variable ilk="argument" name="duration" />
            <variable ilk="argument" name="method" />
            <variable citdl="lib" name="this" />
          </scope>
          <variable citdl="Object" line="1809" lineend="1984" name="Easing">
            <scope ilk="function" line="1812" lineend="1814" name="easeNone" returns="c" signature="easeNone(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1817" lineend="1819" name="easeIn" returns="c" signature="easeIn(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1822" lineend="1824" name="easeOut" returns="c" signature="easeOut(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1827" lineend="1833" name="easeBoth" returns="c" signature="easeBoth(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1836" lineend="1838" name="easeInStrong" returns="c" signature="easeInStrong(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1841" lineend="1843" name="easeOutStrong" returns="c" signature="easeOutStrong(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1846" lineend="1852" name="easeBothStrong" returns="c" signature="easeBothStrong(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1856" lineend="1876" name="elasticIn" signature="elasticIn(t, b, c, d, a, p)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="p" />
              <variable citdl="Easing" name="this" />
              <variable attributes="__local__ private" citdl="p" line="1869" name="s" />
            </scope>
            <scope ilk="function" line="1879" lineend="1899" name="elasticOut" returns="a" signature="elasticOut(t, b, c, d, a, p)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="p" />
              <variable citdl="Easing" name="this" />
              <variable attributes="__local__ private" citdl="p" line="1892" name="s" />
            </scope>
            <scope ilk="function" line="1902" lineend="1929" name="elasticBoth" returns="a" signature="elasticBoth(t, b, c, d, a, p)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="p" />
              <variable citdl="Easing" name="this" />
              <variable attributes="__local__ private" citdl="p" line="1917" name="s" />
            </scope>
            <scope ilk="function" line="1933" lineend="1938" name="backIn" returns="c" signature="backIn(t, b, c, d, s)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable ilk="argument" name="s" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1941" lineend="1946" name="backOut" returns="c" signature="backOut(t, b, c, d, s)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable ilk="argument" name="s" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1949" lineend="1958" name="backBoth" returns="c" signature="backBoth(t, b, c, d, s)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable ilk="argument" name="s" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1961" lineend="1963" name="bounceIn" returns="c" signature="bounceIn(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1966" lineend="1975" name="bounceOut" returns="c" signature="bounceOut(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1978" lineend="1983" name="bounceBoth" returns="Ext.lib.Easing.bounceOut()" signature="bounceBoth(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
          </variable>
          <scope ilk="function" line="1987" lineend="1991" name="Motion" signature="Motion(el, attributes, duration, method)">
            <variable ilk="argument" name="el" />
            <variable ilk="argument" name="attributes" />
            <variable ilk="argument" name="duration" />
            <variable ilk="argument" name="method" />
            <variable citdl="lib" name="this" />
          </scope>
          <scope ilk="function" line="2118" lineend="2122" name="Scroll" signature="Scroll(el, attributes, duration, method)">
            <variable ilk="argument" name="el" />
            <variable ilk="argument" name="attributes" />
            <variable ilk="argument" name="duration" />
            <variable ilk="argument" name="method" />
            <variable citdl="lib" name="this" />
          </scope>
        </variable>
        <variable citdl="Object" doc="* These functions are only included in -debug files * */" line="12" lineend="536" name="debug">
          <scope ilk="function" line="13" lineend="430" name="init" signature="init()">
            <variable citdl="debug" name="this" />
            <variable attributes="__local__ private" citdl="Ext.ContentPanel" line="14" name="CP" />
            <variable attributes="__local__ private" citdl="Ext.get()" line="15" name="bd" />
            <variable attributes="__local__ private" citdl="Ext.LayoutDialog" doc="create the dialog" line="27" name="dlg" />
            <variable attributes="__local__ private" citdl="dlg.getLayout()" doc="build the layout" line="33" name="mainLayout" />
            <variable attributes="__local__ private" citdl="mainLayout.add()" doc="create the nested layouts" line="41" name="clayout" />
            <variable attributes="__local__ private" citdl="mainLayout.add()" line="47" name="ilayout" />
            <variable attributes="__local__ private" citdl="clayout.add()" line="67" name="scriptPanel" />
            <variable attributes="__local__ private" citdl="scriptPanel.el" line="68" name="sel" />
            <variable attributes="__local__ private" citdl="sel.child()" line="69" name="script" />
            <variable attributes="__local__ private" citdl="scriptPanel.toolbar" line="71" name="sctb" />
            <variable attributes="__local__ private" citdl="Ext.DomHelper.append()" line="96" name="trap" />
            <variable attributes="__local__ private" citdl="Ext.grid.PropertyGrid" line="105" name="stylesGrid" />
            <variable attributes="__local__ private" citdl="ilayout.add()" line="108" name="stylePanel" />
            <variable attributes="__local__ private" citdl="ilayout.main.getEl()" line="123" name="treeEl">
              <variable citdl="Object" line="301" name="dom">
                <variable citdl="Math.max()" line="301" name="scrollTop" />
              </variable>
            </variable>
            <variable attributes="__local__ private" citdl="ilayout.tbar" doc="create main inspector toolbar" line="125" name="tb" />
            <variable attributes="__local__ private" line="127" name="inspecting" />
            <variable attributes="__local__ private" line="127" name="inspectIgnore" />
            <scope attributes="__local__ private" ilk="function" line="129" lineend="133" name="inspectListener" signature="inspectListener(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="135" lineend="142" name="stopInspecting" signature="stopInspecting(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="144" lineend="148" name="stopInspectingEsc" signature="stopInspectingEsc(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
            </scope>
            <variable attributes="__local__ private" citdl="tb.addButton()" line="173" name="inspect" />
            <variable attributes="__local__ private" citdl="tb.addButton()" line="187" name="frameEl" />
            <variable attributes="__local__ private" citdl="tb.addButton()" line="200" name="reload" />
            <variable attributes="__local__ private" citdl="Ext.Toolbar" doc="Create the style toolbar" line="225" name="stb" />
            <variable attributes="__local__ private" citdl="stb.addButton()" line="235" name="swap" />
            <variable attributes="__local__ private" citdl="stb.addButton()" line="261" name="addStyle" />
            <variable attributes="__local__ private" citdl="stb.addButton()" line="274" name="showAll" />
            <variable attributes="__local__ private" citdl="Boolean" doc="tree related stuff" line="277" name="styles" />
            <variable attributes="__local__ private" citdl="root.appendChild()" doc="tree related stuff" line="277" name="hnode" />
            <variable attributes="__local__ private" line="278" name="nonSpace" />
            <variable attributes="__local__ private" citdl="Ext.util.Format.htmlEncode" line="279" name="html" />
            <variable attributes="__local__ private" citdl="Ext.util.Format.ellipsis" line="280" name="ellipsis" />
            <variable attributes="__local__ private" line="281" name="styleRe" />
            <scope attributes="__local__ private" ilk="function" line="283" lineend="305" name="findNode" returns="Boolean" signature="findNode(n)">
              <variable ilk="argument" name="n" />
              <variable attributes="__local__ private" citdl="n" line="287" name="p" />
              <variable attributes="__local__ private" citdl="Array" line="287" name="pn" />
              <variable attributes="__local__ private" citdl="hnode" line="291" name="cn" />
              <variable attributes="__local__ private" citdl="cn.ui.anchor" line="300" name="a" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="307" lineend="315" name="nodeTitle" returns="s" signature="nodeTitle(n)">
              <variable ilk="argument" name="n" />
              <variable attributes="__local__ private" citdl="n.tagName" line="308" name="s" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="317" lineend="371" name="onNodeSelect" signature="onNodeSelect(t, n, last)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="last" />
              <variable attributes="__local__ private" citdl="Object" line="321" lineend="321" name="props" />
              <variable attributes="__local__ private" citdl="n.htmlNode" line="331" name="dom" />
              <variable attributes="__local__ private" citdl="dom.style" line="334" name="s" />
              <variable attributes="__local__ private" line="336" name="m" />
              <variable attributes="__local__ private" citdl="Ext.debug.cssList" line="342" name="cl" />
              <variable attributes="__local__ private" citdl="Ext.fly()" line="343" name="fly" />
              <variable attributes="__local__ private" citdl="cl[i]" line="346" name="st" />
              <variable attributes="__local__ private" citdl="s[st]" line="347" name="v" />
            </scope>
            <variable attributes="__local__ private" citdl="String" doc="this is gonna be nasty" line="375" name="filterIds" />
            <variable attributes="__local__ private" citdl="stylesGrid.colModel.editors" line="376" name="eds" />
            <variable attributes="__local__ private" citdl="RegExp" line="385" name="filterRe" />
            <variable attributes="__local__ private" citdl="Ext.tree.TreeLoader" line="387" name="loader">
              <scope ilk="function" line="388" lineend="405" name="load" signature="load(n, cb)">
                <variable ilk="argument" name="n" />
                <variable ilk="argument" name="cb" />
                <variable citdl="loader" name="this" />
                <variable attributes="__local__ private" citdl="n.htmlNode" line="389" name="isBody" />
                <variable attributes="__local__ private" citdl="n.htmlNode.childNodes" line="390" name="cn" />
              </scope>
            </variable>
            <variable attributes="__local__ private" citdl="Ext.tree.TreePanel" line="414" name="tree" />
            <variable attributes="__local__ private" citdl="tree.setRootNode()" line="417" name="root" />
          </scope>
          <variable citdl="Ext.JsonView" line="426" name="console" />
          <variable citdl="dlg" line="429" name="dialog" />
          <scope ilk="function" line="432" lineend="440" name="show" signature="show()">
            <variable citdl="debug" name="this" />
            <variable attributes="__local__ private" citdl="Ext.debug" line="433" name="d" />
          </scope>
          <scope ilk="function" line="442" lineend="446" name="hide" signature="hide()">
            <variable citdl="debug" name="this" />
          </scope>
          <scope doc="Debugging function. Prints all arguments to a resizable, movable, scrolling region without&#xA;the need to include separate js or css. Double click it to hide it." ilk="function" line="456" lineend="465" name="log" signature="log(arg1, arg2, etc)">
            <variable citdl="Mixed" ilk="argument" name="arg1" />
            <variable citdl="Mixed" ilk="argument" name="arg2" />
            <variable citdl="Mixed" ilk="argument" name="etc" />
            <variable citdl="debug" name="this" />
            <variable attributes="__local__ private" citdl="String" line="458" name="m" />
            <variable attributes="__local__ private" citdl="Ext.debug.console" line="462" name="cn" />
          </scope>
          <scope doc="Applies the passed C#/DomHelper style format (e.g. &quot;The variable {0} is equal to {1}&quot;) before calling Ext.debug.log" ilk="function" line="475" lineend="477" name="logf" signature="logf(format, arg1, arg2, etc)">
            <variable citdl="String" ilk="argument" name="format" />
            <variable citdl="Mixed" ilk="argument" name="arg1" />
            <variable citdl="Mixed" ilk="argument" name="arg2" />
            <variable citdl="Mixed" ilk="argument" name="etc" />
            <variable citdl="debug" name="this" />
          </scope>
          <scope doc="Dumps an object to Ext.debug.log" ilk="function" line="484" lineend="507" name="dump" signature="dump(o)">
            <variable citdl="Object" ilk="argument" name="o" />
            <variable citdl="debug" name="this" />
            <variable attributes="__local__ private" citdl="Array" line="494" name="b" />
            <variable attributes="__local__ private" line="496" name="to" />
            <variable attributes="__local__ private" citdl="b.join()" line="501" name="s" />
          </scope>
          <variable citdl="Object" line="509" lineend="509" name="_timers" />
          <scope doc="Starts a timer." ilk="function" line="515" lineend="518" name="time" signature="time(name)">
            <variable citdl="String" doc="(optional)" ilk="argument" name="name" />
            <variable citdl="debug" name="this" />
          </scope>
          <scope doc="Ends a timer, returns the results (formatted &quot;{1} ms&quot;) and optionally prints them to Ext.print()" ilk="function" line="526" lineend="535" name="timeEnd" returns="v" signature="timeEnd(name, printResults)">
            <variable citdl="String" doc="(optional)" ilk="argument" name="name" />
            <variable citdl="Boolean" doc="(optional) false to stop printing the results to Ext.print" ilk="argument" name="printResults" />
            <variable citdl="debug" name="this" />
            <variable attributes="__local__ private" citdl="Date" line="527" name="t" />
            <variable attributes="__local__ private" citdl="String.format()" line="529" name="v" />
          </scope>
          <variable citdl="HtmlNode" doc="highly unusual class declaration" line="539" name="HtmlNode" />
          <variable citdl="String" line="545" name="n" />
          <variable citdl="String" line="545" name="v" />
          <scope doc="subclass for the standard layout panels" ilk="function" line="659" lineend="690" name="InnerLayout" signature="InnerLayout(id, w, cfg)">
            <variable ilk="argument" name="id" />
            <variable ilk="argument" name="w" />
            <variable ilk="argument" name="cfg" />
            <variable citdl="debug" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomHelper.append()" doc="console layout" line="661" name="el" />
            <variable attributes="__local__ private" citdl="Ext.BorderLayout" line="674" name="layout" />
            <variable attributes="__local__ private" citdl="layout.add()" line="680" name="tbPanel" />
            <variable attributes="__local__ private" citdl="tbPanel.resizeEl" line="687" name="mtbEl" />
          </scope>
          <variable citdl="layout.add()" line="683" name="main" />
          <variable citdl="Ext.Toolbar" line="685" name="tbar" />
          <variable citdl="Array" line="698" name="cssList" />
        </variable>
        <scope ilk="class" line="14" lineend="57" name="LayoutManager">
          <scope attributes="__ctor__" doc="Base class for layout managers." ilk="function" line="14" lineend="57" name="LayoutManager" signature="LayoutManager(container, config)">
            <variable ilk="argument" name="container" />
            <variable ilk="argument" name="config" />
            <variable citdl="LayoutManager" name="this" />
            <variable citdl="Object" line="19" name="document">
              <variable citdl="Object" line="19" name="body">
                <variable citdl="String" line="19" name="scroll" />
              </variable>
            </variable>
          </scope>
          <variable citdl="Ext.get()" line="16" name="el" />
          <variable citdl="this.el.id" line="23" name="id" />
          <variable citdl="Boolean" doc="Boolean */" line="26" name="monitorWindowResize" />
          <variable citdl="Object" line="27" lineend="27" name="regions" />
          <variable citdl="Boolean" line="55" name="updating" />
        </scope>
        <scope ilk="class" line="14" lineend="17" name="SplitLayoutRegion">
          <scope attributes="__ctor__" doc="Adds a splitbar and other (private) useful functionality to a {@link Ext.LayoutRegion}." ilk="function" line="14" lineend="17" name="SplitLayoutRegion" signature="SplitLayoutRegion(mgr, config, pos, cursor)">
            <variable ilk="argument" name="mgr" />
            <variable ilk="argument" name="config" />
            <variable ilk="argument" name="pos" />
            <variable ilk="argument" name="cursor" />
            <variable citdl="SplitLayoutRegion" name="this" />
          </scope>
          <variable citdl="cursor" line="15" name="cursor" />
        </scope>
        <variable citdl="Boolean" line="14" name="visible" />
        <variable citdl="Object" line="14" lineend="389" name="QuickTips">
          <variable citdl="Number" doc="The minimum width of the quick tip (defaults to 40)" line="193" name="minWidth" />
          <variable citdl="Number" doc="The maximum width of the quick tip (defaults to 300)" line="198" name="maxWidth" />
          <variable citdl="Boolean" doc="True to automatically use the element&apos;s DOM title value if available (defaults to false)" line="203" name="interceptTitles" />
          <variable citdl="Boolean" doc="True to have the quick tip follow the mouse as it moves over the target element (defaults to false)" line="208" name="trackMouse" />
          <variable citdl="Boolean" doc="True to hide the quick tip if the user clicks anywhere in the document (defaults to true)" line="213" name="hideOnClick" />
          <variable citdl="Number" doc="Delay in milliseconds before the quick tip displays after the mouse enters the target element (defaults to 500)" line="218" name="showDelay" />
          <variable citdl="Number" doc="Delay in milliseconds before the quick tip hides when autoHide = true (defaults to 200)" line="223" name="hideDelay" />
          <variable citdl="Boolean" doc="True to automatically hide the quick tip after the mouse exits the target element (defaults to true).&#xA;Used in conjunction with hideDelay." line="229" name="autoHide" />
          <variable citdl="Boolean" doc="True to automatically hide the quick tip after a set period of time, regardless of the user&apos;s actions&#xA;(defaults to true).  Used in conjunction with autoDismissDelay." line="235" name="autoDismiss" />
          <variable citdl="Number" doc="Delay in milliseconds before the quick tip hides when autoDismiss = true (defaults to 5000)" line="240" name="autoDismissDelay" />
          <variable citdl="Boolean" doc="True to turn on fade animation. Defaults to false (ClearType/scrollbar flicker issues in IE7)." line="245" name="animate" />
          <scope doc="Title text to display (defaults to &apos;&apos;).  This can be any valid HTML markup." ilk="function" line="269" lineend="309" name="init" signature="init()">
            <variable citdl="QuickTips" name="this" />
            <variable attributes="__local__ private" citdl="Ext.get()" line="290" name="d" />
          </scope>
          <scope doc="Configures a new quick tip instance and assigns it to a target element.  The following config options&#xA;are supported:&#xA;&lt;pre&gt;&#xA;Property    Type                   Description&#xA;----------  ---------------------  ------------------------------------------------------------------------&#xA;target      Element/String/Array   An Element, id or array of ids that this quick tip should be tied to&#xA;&lt;/ul&gt;" ilk="function" line="321" lineend="336" name="register" signature="register(config)">
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="QuickTips" name="this" />
            <variable attributes="__local__ private" citdl="config" line="322" name="cs" />
            <variable attributes="__local__ private" citdl="cs[i]" line="324" name="c" />
            <variable attributes="__local__ private" citdl="c.target" line="325" name="target" />
          </scope>
          <scope doc="Removes this quick tip from its element and destroys it." ilk="function" line="342" lineend="344" name="unregister" signature="unregister(el)">
            <variable citdl="String/HTMLElement/Element" doc="The element from which the quick tip is to be removed." ilk="argument" name="el" />
            <variable citdl="QuickTips" name="this" />
          </scope>
          <scope doc="Enable this quick tip." ilk="function" line="349" lineend="356" name="enable" signature="enable()">
            <variable citdl="QuickTips" name="this" />
          </scope>
          <scope doc="Disable this quick tip." ilk="function" line="361" lineend="370" name="disable" signature="disable()">
            <variable citdl="QuickTips" name="this" />
          </scope>
          <scope doc="Returns true if the quick tip is enabled, else false." ilk="function" line="375" lineend="377" name="isEnabled" signature="isEnabled()">
            <variable citdl="QuickTips" name="this" />
          </scope>
          <variable citdl="Object" doc="private" line="380" lineend="388" name="tagConfig">
            <variable citdl="String" line="381" name="namespace" />
            <variable citdl="String" line="382" name="attribute" />
            <variable citdl="String" line="383" name="width" />
            <variable citdl="String" line="384" name="target" />
            <variable citdl="String" line="385" name="title" />
            <variable citdl="String" line="386" name="hide" />
            <variable citdl="String" line="387" name="cls" />
          </variable>
          <variable citdl="Ext.QuickTips.register" doc="backwards compat" line="393" name="tips" />
        </variable>
        <variable citdl="Object" line="14" lineend="56" name="ComponentMgr">
          <scope doc="Registers a component." ilk="function" line="22" lineend="24" name="register" signature="register(c)">
            <variable citdl="Ext.Component" doc="The component" ilk="argument" name="c" />
            <variable citdl="ComponentMgr" name="this" />
          </scope>
          <scope doc="Unregisters a component." ilk="function" line="30" lineend="32" name="unregister" signature="unregister(c)">
            <variable citdl="Ext.Component" doc="The component" ilk="argument" name="c" />
            <variable citdl="ComponentMgr" name="this" />
          </scope>
          <scope doc="Returns a component by id" ilk="function" line="38" lineend="40" name="get" returns="all.get()" signature="get(id)">
            <variable citdl="String" doc="The component id" ilk="argument" name="id" />
            <variable citdl="ComponentMgr" name="this" />
          </scope>
          <scope doc="Registers a function that will be called when a specified component is added to ComponentMgr" ilk="function" line="48" lineend="55" name="onAvailable" signature="onAvailable(id, fn, scope)">
            <variable citdl="String" doc="The component id" ilk="argument" name="id" />
            <variable citdl="Funtction" doc="The callback function" ilk="argument" name="fn" />
            <variable citdl="Object" doc="The scope of the callback" ilk="argument" name="scope" />
            <variable citdl="ComponentMgr" name="this" />
          </scope>
        </variable>
        <variable citdl="config.minWidth" line="15" name="minWidth" />
        <variable citdl="Object" line="15" lineend="394" name="DomHelper">
          <variable citdl="Boolean" doc="Boolean */" line="200" name="useDom" />
          <scope doc="Returns the markup for the passed Element(s) config" ilk="function" line="207" lineend="209" name="markup" returns="String" signature="markup(o)">
            <variable citdl="Object" doc="The Dom object spec (and children)" ilk="argument" name="o" />
            <variable citdl="DomHelper" name="this" />
          </scope>
          <scope doc="Applies a style specification to an element" ilk="function" line="217" lineend="234" name="applyStyles" signature="applyStyles(el, styles)">
            <variable citdl="String/HTMLElement" doc="The element to apply styles to" ilk="argument" name="el" />
            <variable citdl="String/Object/Function" doc="A style specification string eg &quot;width:100px&quot;, or object in the form {width:&quot;100px&quot;}, or&#xA;a function which returns such a specification." ilk="argument" name="styles" />
            <variable citdl="DomHelper" name="this" />
            <variable attributes="__local__ private" line="221" name="re" />
            <variable attributes="__local__ private" line="222" name="matches" />
          </scope>
          <scope doc="Inserts an HTML fragment into the Dom" ilk="function" line="243" lineend="303" name="insertHtml" returns="HTMLElement" signature="insertHtml(where, el, html)">
            <variable citdl="String" doc="Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd." ilk="argument" name="where" />
            <variable citdl="HTMLElement" doc="The context element" ilk="argument" name="el" />
            <variable citdl="String" doc="The HTML fragmenet" ilk="argument" name="html" />
            <variable citdl="DomHelper" name="this" />
            <variable attributes="__local__ private" line="247" name="rs" />
            <variable attributes="__local__ private" citdl="el.ownerDocument.createRange()" line="268" name="range" />
            <variable attributes="__local__ private" citdl="range.createContextualFragment()" line="269" name="frag" />
          </scope>
          <scope doc="Creates new Dom element(s) and inserts them before el" ilk="function" line="312" lineend="314" name="insertBefore" returns="HTMLElement/Ext.Element" signature="insertBefore(el, o, returnElement)">
            <variable citdl="String/HTMLElement/Element" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object/String" doc="The Dom object spec (and children) or raw HTML blob" ilk="argument" name="o" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element" ilk="argument" name="returnElement" />
            <variable citdl="DomHelper" name="this" />
          </scope>
          <scope doc="Creates new Dom element(s) and inserts them after el" ilk="function" line="323" lineend="325" name="insertAfter" returns="HTMLElement/Ext.Element" signature="insertAfter(el, o, returnElement)">
            <variable citdl="String/HTMLElement/Element" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object" doc="The Dom object spec (and children)" ilk="argument" name="o" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element" ilk="argument" name="returnElement" />
            <variable citdl="DomHelper" name="this" />
          </scope>
          <scope doc="Creates new Dom element(s) and inserts them as the first child of el" ilk="function" line="334" lineend="336" name="insertFirst" returns="HTMLElement/Ext.Element" signature="insertFirst(el, o, returnElement)">
            <variable citdl="String/HTMLElement/Element" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object/String" doc="The Dom object spec (and children) or raw HTML blob" ilk="argument" name="o" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element" ilk="argument" name="returnElement" />
            <variable citdl="DomHelper" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="339" lineend="350" name="doInsert" returns="returnElement" signature="doInsert(el, o, returnElement, pos, sibling)">
            <variable ilk="argument" name="el" />
            <variable ilk="argument" name="o" />
            <variable ilk="argument" name="returnElement" />
            <variable ilk="argument" name="pos" />
            <variable ilk="argument" name="sibling" />
            <variable citdl="DomHelper" name="this" />
            <variable attributes="__local__ private" citdl="createDom()" line="341" name="newNode" />
            <variable attributes="__local__ private" citdl="createHtml()" line="346" name="html" />
          </scope>
          <scope doc="Creates new Dom element(s) and appends them to el" ilk="function" line="359" lineend="370" name="append" returns="HTMLElement/Ext.Element" signature="append(el, o, returnElement)">
            <variable citdl="String/HTMLElement/Element" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object/String" doc="The Dom object spec (and children) or raw HTML blob" ilk="argument" name="o" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element" ilk="argument" name="returnElement" />
            <variable citdl="DomHelper" name="this" />
            <variable attributes="__local__ private" citdl="createDom()" line="361" name="newNode" />
            <variable attributes="__local__ private" citdl="createHtml()" line="366" name="html" />
          </scope>
          <scope doc="Creates new Dom element(s) and overwrites the contents of el with them" ilk="function" line="379" lineend="383" name="overwrite" returns="HTMLElement/Ext.Element" signature="overwrite(el, o, returnElement)">
            <variable citdl="String/HTMLElement/Element" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object/String" doc="The Dom object spec (and children) or raw HTML blob" ilk="argument" name="o" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element" ilk="argument" name="returnElement" />
            <variable citdl="DomHelper" name="this" />
          </scope>
          <scope doc="Creates a new Ext.DomHelper.Template from the Dom object spec" ilk="function" line="390" lineend="393" name="createTemplate" returns="Ext.DomHelper.Template" signature="createTemplate(o)">
            <variable citdl="Object" doc="The Dom object spec (and children)" ilk="argument" name="o" />
            <variable citdl="DomHelper" name="this" />
            <variable attributes="__local__ private" citdl="createHtml()" line="391" name="html" />
          </scope>
        </variable>
        <scope ilk="class" line="16" lineend="102" name="BasicLayoutRegion">
          <scope attributes="__ctor__" doc="This class represents a lightweight region in a layout manager. This region does not move dom nodes&#xA;and does not have a titlebar, tabs or any other features. All it does is size and position&#xA;panels. To create a BasicLayoutRegion, add lightweight:true or basic:true to your regions config." ilk="function" line="16" lineend="102" name="BasicLayoutRegion" signature="BasicLayoutRegion(mgr, config, pos, skipConfig)">
            <variable ilk="argument" name="mgr" />
            <variable ilk="argument" name="config" />
            <variable ilk="argument" name="pos" />
            <variable ilk="argument" name="skipConfig" />
            <variable citdl="BasicLayoutRegion" name="this" />
          </scope>
          <variable citdl="mgr" line="17" name="mgr" />
          <variable citdl="pos" line="18" name="position" />
          <variable citdl="Object" line="19" lineend="93" name="events">
            <variable citdl="Boolean" doc="Fires before a panel is removed (or closed). To cancel the removal set &quot;e.cancel = true&quot; on the event argument." line="27" name="beforeremove" />
            <variable citdl="Boolean" doc="Fires when the layout for this region is changed." line="33" name="invalidated" />
            <variable citdl="Boolean" doc="Fires when this region is shown or hidden" line="40" name="visibilitychange" />
            <variable citdl="Boolean" doc="Fires when a panel is added." line="47" name="paneladded" />
            <variable citdl="Boolean" doc="Fires when a panel is removed." line="54" name="panelremoved" />
            <variable citdl="Boolean" doc="Fires when this region is collapsed." line="60" name="collapsed" />
            <variable citdl="Boolean" doc="Fires when this region is expanded." line="66" name="expanded" />
            <variable citdl="Boolean" doc="Fires when this region is slid into view." line="72" name="slideshow" />
            <variable citdl="Boolean" doc="Fires when this region slides out of view." line="78" name="slidehide" />
            <variable citdl="Boolean" doc="Fires when a panel is activated." line="85" name="panelactivated" />
            <variable citdl="Boolean" doc="Fires when the user resizes this region." line="92" name="resized" />
          </variable>
          <variable citdl="Ext.util.MixedCollection" doc="Ext.util.MixedCollection */" line="95" name="panels" />
          <variable citdl="this.getPanelId.createDelegate()" line="96" name="getKey" />
          <variable line="97" name="box" />
          <variable line="98" name="activePanel" />
        </scope>
        <variable citdl="config.minHeight" line="16" name="minHeight" />
        <variable citdl="Object" line="16" lineend="386" name="EventManager">
          <scope attributes="deprecated" doc="DEPRECATED: This is no longer needed and is deprecated. Places a simple wrapper around an event handler to override the browser event&#xA;object with a Ext.EventObject" ilk="function" line="191" lineend="196" name="wrap" returns="Function" signature="wrap(fn, scope, override)">
            <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
            <variable citdl="Object" doc="An object that becomes the scope of the handler" ilk="argument" name="scope" />
            <variable citdl="Boolean" doc="If true, the obj passed in becomes&#xA;the execution scope of the listener" ilk="argument" name="override" />
            <variable citdl="EventManager" name="this" />
          </scope>
          <scope doc="Appends an event handler to an element (shorthand for addListener)&#xA;el.on(&apos;click&apos;, this.onClick, this, {&#xA;single: true,&#xA;delay: 100,&#xA;stopEvent : true,&#xA;forumId: 4&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;el.on({&#xA;&apos;click&apos; : {&#xA;fn: this.onClick&#xA;scope: this,&#xA;delay: 100&#xA;&apos;mouseover&apos; : {&#xA;fn: this.onMouseOver&#xA;scope: this&#xA;&apos;mouseout&apos; : {&#xA;fn: this.onMouseOut&#xA;scope: this&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;el.on({&#xA;&apos;click&apos; : this.onClick,&#xA;&apos;mouseover&apos; : this.onMouseOver,&#xA;&apos;mouseout&apos; : this.onMouseOut&#xA;scope: this&#xA;});&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="262" lineend="280" name="addListener" returns="listen()" signature="addListener(element, eventName, fn, scope, options)">
            <variable citdl="String/HTMLElement" doc="The html element or id to assign the" ilk="argument" name="element" />
            <variable citdl="String" doc="The type of event to listen for" ilk="argument" name="eventName" />
            <variable ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The scope in which to execute the handler&#xA;function. The handler function&apos;s &quot;this&quot; context." ilk="argument" name="scope" />
            <variable citdl="Object" doc="(optional) An object containing handler configuration&#xA;properties. This may contain any of the following properties:&lt;ul&gt;&#xA;&lt;li&gt;scope {Object} The scope in which to execute the handler function. The handler function&apos;s &quot;this&quot; context.&lt;/li&gt;&#xA;&lt;li&gt;delegate {String} A simple selector to filter the target or look for a descendant of the target&lt;/li&gt;&#xA;&lt;li&gt;stopEvent {Boolean} True to stop the event. That is stop propagation, and prevent the default action.&lt;/li&gt;&#xA;&lt;li&gt;preventDefault {Boolean} True to prevent the default action&lt;/li&gt;&#xA;&lt;li&gt;stopPropagation {Boolean} True to prevent event propagation&lt;/li&gt;&#xA;&lt;li&gt;normalized {Boolean} False to pass a browser event to the handler function instead of an Ext.EventObject&lt;/li&gt;&#xA;&lt;li&gt;delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.&lt;/li&gt;&#xA;&lt;li&gt;single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.&lt;/li&gt;&#xA;&lt;li&gt;buffer {Number} Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed&#xA;by the specified number of milliseconds. If the event fires again within that time, the original&#xA;handler is &lt;em&gt;not&lt;/em&gt; invoked, but the new handler is scheduled in its place.&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;br&gt;&#xA;&lt;p&gt;&#xA;&lt;b&gt;Combining Options&lt;/b&gt;&lt;br&gt;&#xA;Using the options argument, it is possible to combine different types of listeners:&lt;br&gt;&#xA;&lt;br&gt;&#xA;A normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)&lt;div style=&quot;margin: 5px 20px 20px;&quot;&gt;&#xA;Code:&lt;pre&gt;&lt;code&gt;&#xA;&lt;p&gt;&#xA;&lt;b&gt;Attaching multiple handlers in 1 call&lt;/b&gt;&lt;br&gt;&#xA;The method also allows for a single argument to be passed which is a config object containing properties&#xA;which specify multiple handlers.&#xA;&lt;p&gt;&#xA;Code:&lt;pre&gt;&lt;code&gt;&#xA;&lt;p&gt;&#xA;Or a shorthand syntax:&lt;br&gt;&#xA;Code:&lt;pre&gt;&lt;code&gt;" ilk="argument" name="options" />
            <variable citdl="EventManager" name="this" />
            <variable attributes="__local__ private" citdl="eventName" line="264" name="o" />
          </scope>
          <scope doc="Removes an event handler" ilk="function" line="291" lineend="293" name="removeListener" returns="Boolean" signature="removeListener(element, eventName, fn)">
            <variable citdl="String/HTMLElement" doc="The id or html element to remove the&#xA;event from" ilk="argument" name="element" />
            <variable citdl="String" doc="The type of event" ilk="argument" name="eventName" />
            <variable citdl="Function" ilk="argument" name="fn" />
            <variable citdl="EventManager" name="this" />
          </scope>
          <scope doc="Fires when the document is ready (before onload and before images are loaded). Can be&#xA;accessed shorthanded Ext.onReady()." ilk="function" line="302" lineend="313" name="onDocumentReady" signature="onDocumentReady(fn, scope, options)">
            <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
            <variable citdl="Object" doc="An  object that becomes the scope of the handler" ilk="argument" name="scope" />
            <variable citdl="Boolean" ilk="argument" name="options" />
            <variable citdl="EventManager" name="this" />
          </scope>
          <scope doc="Fires when the window is resized and provides resize event buffering (50 milliseconds), passes new viewport width and height to handlers." ilk="function" line="321" lineend="336" name="onWindowResize" signature="onWindowResize(fn, scope, options)">
            <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
            <variable citdl="Object" doc="An object that becomes the scope of the handler" ilk="argument" name="scope" />
            <variable citdl="Boolean" ilk="argument" name="options" />
            <variable citdl="EventManager" name="this" />
          </scope>
          <scope doc="Fires when the user changes the active text size. Handler gets called with 2 params, the old size and the new size." ilk="function" line="344" lineend="359" name="onTextResize" signature="onTextResize(fn, scope, options)">
            <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
            <variable citdl="Object" doc="An object that becomes the scope of the handler" ilk="argument" name="scope" />
            <variable citdl="Boolean" ilk="argument" name="options" />
            <variable citdl="EventManager" name="this" />
            <variable attributes="__local__ private" citdl="Ext.Element" line="347" name="textEl">
              <variable citdl="Object" line="348" name="dom">
                <variable citdl="String" line="348" name="className" />
                <variable citdl="String" line="349" name="innerHTML" />
              </variable>
            </variable>
          </scope>
          <scope doc="Removes the passed window resize listener." ilk="function" line="366" lineend="370" name="removeResizeListener" signature="removeResizeListener(fn, scope)">
            <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
            <variable citdl="Object" doc="The scope of handler" ilk="argument" name="scope" />
            <variable citdl="EventManager" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="373" lineend="377" name="fireResize" signature="fireResize()">
            <variable citdl="EventManager" name="this" />
          </scope>
          <variable citdl="Boolean" doc="Url used for onDocumentReady with using SSL (defaults to Ext.SSL_SECURE_URL)" line="381" name="ieDeferSrc" />
          <variable citdl="Number" doc="The frequency, in milliseconds, to check for text resize events (defaults to 50)" line="385" name="textResizeInterval" />
          <variable citdl="pub.addListener" doc="Appends an event handler to an element (shorthand for addListener)&#xA;el.on(&apos;click&apos;, this.onClick, this, {&#xA;single: true,&#xA;delay: 100,&#xA;stopEvent : true,&#xA;forumId: 4&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;el.on({&#xA;&apos;click&apos; : {&#xA;fn: this.onClick&#xA;scope: this,&#xA;delay: 100&#xA;&apos;mouseover&apos; : {&#xA;fn: this.onMouseOver&#xA;scope: this&#xA;&apos;mouseout&apos; : {&#xA;fn: this.onMouseOut&#xA;scope: this&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;el.on({&#xA;&apos;click&apos; : this.onClick,&#xA;&apos;mouseover&apos; : this.onMouseOver,&#xA;&apos;mouseout&apos; : this.onMouseOut&#xA;scope: this&#xA;});&lt;/code&gt;&lt;/pre&gt;" line="451" name="on" />
          <variable citdl="pub.removeListener" line="452" name="un" />
          <variable citdl="Ext.util.Event" line="454" name="stoppedMouseDownEvent" />
        </variable>
        <scope ilk="class" line="17" lineend="46" name="DatePicker">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Simple date picker class." ilk="function" line="17" lineend="46" name="DatePicker" signature="DatePicker(config)">
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="DatePicker" name="this" />
            <variable attributes="__local__ private" citdl="this.disabledDates" line="38" name="dd" />
            <variable attributes="__local__ private" citdl="String" line="39" name="re" />
          </scope>
          <variable citdl="config" line="20" name="value" />
          <variable citdl="RegExp" line="44" name="disabledDatesRE" />
        </scope>
        <variable citdl="Object" line="17" name="menu">
          <variable citdl="Object" line="14" lineend="184" name="MenuMgr">
            <scope doc="Hides all menus that are currently visible" ilk="function" line="109" lineend="111" name="hideAll" signature="hideAll()">
              <variable citdl="MenuMgr" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="114" lineend="131" name="register" signature="register(menu)">
              <variable ilk="argument" name="menu" />
              <variable citdl="MenuMgr" name="this" />
              <variable attributes="__local__ private" citdl="menu.group" line="123" name="g" />
            </scope>
            <scope doc="Returns a {@link Ext.menu.Menu} object" ilk="function" line="138" lineend="148" name="get" returns="Ext.menu.Menu" signature="get(menu)">
              <variable citdl="String/Object" doc="The string menu id, an existing menu object reference, or a Menu config that will&#xA;be used to generate and return a new Menu instance." ilk="argument" name="menu" />
              <variable citdl="MenuMgr" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="151" lineend="162" name="unregister" signature="unregister(menu)">
              <variable ilk="argument" name="menu" />
              <variable citdl="MenuMgr" name="this" />
              <variable attributes="__local__ private" citdl="menu.group" line="157" name="g" />
            </scope>
            <scope doc="private" ilk="function" line="165" lineend="174" name="registerCheckable" signature="registerCheckable(menuItem)">
              <variable ilk="argument" name="menuItem" />
              <variable citdl="MenuMgr" name="this" />
              <variable attributes="__local__ private" citdl="menuItem.group" line="166" name="g" />
            </scope>
            <scope doc="private" ilk="function" line="177" lineend="183" name="unregisterCheckable" signature="unregisterCheckable(menuItem)">
              <variable ilk="argument" name="menuItem" />
              <variable citdl="MenuMgr" name="this" />
              <variable attributes="__local__ private" citdl="menuItem.group" line="178" name="g" />
            </scope>
          </variable>
          <scope ilk="class" line="17" lineend="29" name="DateItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A menu item that wraps the {@link Ext.DatPicker} component." ilk="function" line="17" lineend="29" name="DateItem" signature="DateItem(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="DateItem" name="this" />
            </scope>
            <variable citdl="this.component" doc="Ext.DatePicker */" line="20" name="picker" />
          </scope>
          <scope ilk="class" line="17" lineend="38" name="CheckItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Adds a menu item that contains a checkbox by default, but can also be part of a radio group." ilk="function" line="17" lineend="38" name="CheckItem" signature="CheckItem(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="CheckItem" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="17" lineend="37" name="DateMenu">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A menu containing a {@link Ext.menu.DateItem} component (which provides a date picker)." ilk="function" line="17" lineend="39" name="DateMenu" signature="DateMenu(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="DateMenu" name="this" />
              <variable attributes="__local__ private" citdl="Ext.menu.DateItem" line="20" name="di" />
            </scope>
            <variable citdl="Boolean" line="19" name="plain" />
            <variable citdl="DatePicker" doc="The {@link Ext.DatePicker} instance for this DateMenu" line="26" name="picker" />
          </scope>
          <scope ilk="class" line="17" lineend="19" name="Separator">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you will&#xA;add one of these by using &quot;-&quot; in you call to add() or in your items config rather than creating one directly." ilk="function" line="17" lineend="19" name="Separator" signature="Separator(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="Separator" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="17" lineend="20" name="TextItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Adds a static text string to a menu, usually used as either a heading or group separator." ilk="function" line="17" lineend="20" name="TextItem" signature="TextItem(text)">
              <variable citdl="String" doc="The text to display" ilk="argument" name="text" />
              <variable citdl="TextItem" name="this" />
            </scope>
            <variable citdl="String" line="18" name="text" />
          </scope>
          <scope ilk="class" line="17" lineend="25" name="ColorItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A menu item that wraps the {@link Ext.ColorPalette} component." ilk="function" line="17" lineend="25" name="ColorItem" signature="ColorItem(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="ColorItem" name="this" />
            </scope>
            <variable citdl="this.component" doc="Ext.ColorPalette */" line="20" name="palette" />
          </scope>
          <scope ilk="class" line="17" lineend="33" name="ColorMenu">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A menu containing a {@link Ext.menu.ColorItem} component (which provides a basic color picker)." ilk="function" line="17" lineend="33" name="ColorMenu" signature="ColorMenu(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="ColorMenu" name="this" />
              <variable attributes="__local__ private" citdl="Ext.menu.ColorItem" line="20" name="ci" />
            </scope>
            <variable citdl="Boolean" line="19" name="plain" />
            <variable citdl="ColorPalette" doc="The {@link Ext.ColorPalette} instance for this ColorMenu" line="26" name="palette" />
          </scope>
          <scope ilk="class" line="18" lineend="84" name="Menu">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A menu object.  This is the container to which you add all other menu items.  Menu can also serve a as a base class&#xA;when you want a specialzed menu based off of another component (like {@link Ext.menu.DateMenu} for example)." ilk="function" line="18" lineend="84" name="Menu" signature="Menu(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="Menu" name="this" />
              <variable attributes="__local__ private" citdl="this.items" line="79" name="mis" />
            </scope>
            <variable citdl="this.id" line="20" name="id" />
            <variable citdl="Ext.util.MixedCollection" line="80" name="items" />
          </scope>
          <scope ilk="class" line="18" lineend="21" name="Adapter">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A base utility class that adapts a non-menu component so that it can be wrapped by a menu item and added to a menu.&#xA;It provides basic rendering, activation management and enable/disable logic required to work in menus." ilk="function" line="18" lineend="21" name="Adapter" signature="Adapter(component, config)">
              <variable ilk="argument" name="component" />
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="Adapter" name="this" />
            </scope>
            <variable citdl="component" line="20" name="component" />
          </scope>
          <scope ilk="class" line="18" lineend="46" name="BaseItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The base class for all items that render into menus.  BaseItem provides default rendering, activated state&#xA;management and base configuration options shared by all menu components." ilk="function" line="18" lineend="46" name="BaseItem" signature="BaseItem(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="BaseItem" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="19" lineend="24" name="Item">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A base class for all menu items that require menu-related functionality (like sub-menus) and are not static&#xA;display items.  Item extends the base functionality of {@link Ext.menu.BaseItem} by adding menu-specific&#xA;activation and click handling." ilk="function" line="19" lineend="24" name="Item" signature="Item(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="Item" name="this" />
            </scope>
            <variable citdl="Ext.menu.MenuMgr.get()" line="22" name="menu" />
          </scope>
          <scope doc="MenuNav is a private utility class used internally by the&#xA;Menu" ilk="function" line="481" lineend="484" name="MenuNav" signature="MenuNav(menu)">
            <variable ilk="argument" name="menu" />
            <variable citdl="menu" name="this" />
          </scope>
          <variable citdl="this.menu" line="483" name="scope" />
          <variable citdl="menu" line="483" name="menu" />
        </variable>
        <variable citdl="Object" line="17" name="form">
          <scope doc="define the action interface" ilk="class" line="10" lineend="97" name="Action">
            <scope attributes="__ctor__" doc="define the action interface" ilk="function" line="10" lineend="13" name="Action" signature="Action(form, options)">
              <variable ilk="argument" name="form" />
              <variable ilk="argument" name="options" />
              <variable citdl="Action" name="this" />
            </scope>
            <variable citdl="form" line="11" name="form" />
            <variable citdl="options" line="12" name="options" />
            <variable citdl="String" line="15" name="CLIENT_INVALID" />
            <variable citdl="String" line="16" name="SERVER_INVALID" />
            <variable citdl="String" line="17" name="CONNECT_FAILURE" />
            <variable citdl="String" line="18" name="LOAD_FAILURE" />
            <variable citdl="String" line="21" name="type" />
            <variable citdl="undefined" line="22" name="failureType" />
            <variable citdl="undefined" line="23" name="response" />
            <variable citdl="undefined" line="24" name="result" />
            <scope doc="interface method" ilk="function" line="27" lineend="29" name="run" signature="run(options)">
              <variable ilk="argument" name="options" />
              <variable citdl="Action" name="this" />
            </scope>
            <scope doc="interface method" ilk="function" line="32" lineend="34" name="success" signature="success(response)">
              <variable ilk="argument" name="response" />
              <variable citdl="Action" name="this" />
            </scope>
            <scope doc="interface method" ilk="function" line="37" lineend="39" name="handleResponse" signature="handleResponse(response)">
              <variable ilk="argument" name="response" />
              <variable citdl="Action" name="this" />
            </scope>
            <scope doc="default connection failure" ilk="function" line="42" lineend="46" name="failure" signature="failure(response)">
              <variable ilk="argument" name="response" />
              <variable citdl="Action" name="this" />
            </scope>
            <scope ilk="function" line="48" lineend="55" name="processResponse" returns="this.result" signature="processResponse(response)">
              <variable ilk="argument" name="response" />
              <variable citdl="Action" name="this" />
            </scope>
            <scope doc="utility functions used internally" ilk="function" line="58" lineend="67" name="getUrl" returns="url" signature="getUrl(appendParams)">
              <variable ilk="argument" name="appendParams" />
              <variable citdl="Action" name="this" />
              <variable attributes="__local__ private" citdl="this.options.url" line="59" name="url" />
              <variable attributes="__local__ private" citdl="this.getParams()" line="61" name="p" />
            </scope>
            <scope ilk="function" line="69" lineend="71" name="getMethod" signature="getMethod()">
              <variable citdl="Action" name="this" />
            </scope>
            <scope ilk="function" line="73" lineend="86" name="getParams" returns="p" signature="getParams()">
              <variable citdl="Action" name="this" />
              <variable attributes="__local__ private" citdl="this.form.baseParams" line="74" name="bp" />
              <variable attributes="__local__ private" citdl="this.options.params" line="75" name="p" />
            </scope>
            <scope ilk="function" line="88" lineend="96" name="createCallback" signature="createCallback()">
              <variable citdl="Action" name="this" />
            </scope>
            <scope ilk="function" line="99" lineend="101" name="Submit" signature="Submit(form, options)">
              <variable ilk="argument" name="form" />
              <variable ilk="argument" name="options" />
              <variable citdl="Action" name="this" />
            </scope>
            <scope ilk="function" line="161" lineend="164" name="Load" signature="Load(form, options)">
              <variable ilk="argument" name="form" />
              <variable ilk="argument" name="options" />
              <variable citdl="Action" name="this" />
            </scope>
            <variable citdl="this.form.reader" line="163" name="reader" />
            <variable citdl="Object" line="203" lineend="206" name="ACTION_TYPES">
              <variable citdl="Ext.form.Action.Load" line="204" name="load" />
              <variable citdl="Ext.form.Action.Submit" line="205" name="submit" />
            </variable>
          </scope>
          <variable citdl="Object" doc="All these messages and functions are configurable" line="14" lineend="89" name="VTypes">
            <scope doc="The function used to validate email addresses" ilk="function" line="27" lineend="29" name="email" returns="email.test()" signature="email(v)">
              <variable ilk="argument" name="v" />
              <variable citdl="VTypes" name="this" />
            </scope>
            <variable citdl="String" doc="The error text to display when the email validation function returns false" line="34" name="emailText" />
            <variable citdl="RegExp" doc="The keystroke filter mask to be applied on email input" line="39" name="emailMask" />
            <scope doc="The function used to validate URLs" ilk="function" line="45" lineend="47" name="url" returns="url.test()" signature="url(v)">
              <variable ilk="argument" name="v" />
              <variable citdl="VTypes" name="this" />
            </scope>
            <variable citdl="String" doc="The error text to display when the url validation function returns false" line="52" name="urlText" />
            <scope doc="The function used to validate alpha values" ilk="function" line="58" lineend="60" name="alpha" returns="alpha.test()" signature="alpha(v)">
              <variable ilk="argument" name="v" />
              <variable citdl="VTypes" name="this" />
            </scope>
            <variable citdl="String" doc="The error text to display when the alpha validation function returns false" line="65" name="alphaText" />
            <variable citdl="RegExp" doc="The keystroke filter mask to be applied on alpha input" line="70" name="alphaMask" />
            <scope doc="The function used to validate alphanumeric values" ilk="function" line="76" lineend="78" name="alphanum" returns="alphanum.test()" signature="alphanum(v)">
              <variable ilk="argument" name="v" />
              <variable citdl="VTypes" name="this" />
            </scope>
            <variable citdl="String" doc="The error text to display when the alphanumeric validation function returns false" line="83" name="alphanumText" />
          </variable>
          <scope ilk="class" line="16" lineend="19" name="Layout">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Creates a container for layout and rendering of fields in an {@link Ext.form.Form}." ilk="function" line="16" lineend="19" name="Layout" signature="Layout(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="Layout" name="this" />
            </scope>
            <variable citdl="Array" line="18" name="stack" />
          </scope>
          <scope ilk="class" line="16" lineend="39" name="Form">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Adds the ability to dynamically render forms with JavaScript to {@link Ext.form.BasicForm}." ilk="function" line="16" lineend="39" name="Form" signature="Form(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="Form" name="this" />
            </scope>
            <variable citdl="this.url" line="18" name="url" />
            <variable citdl="Ext.form.Layout" line="22" name="root" />
            <variable citdl="this.root" line="24" name="active" />
            <variable citdl="Array" doc="Array of all the buttons that have been added to this form via {@link addButton}" line="29" name="buttons" />
          </scope>
          <scope ilk="class" line="17" lineend="31" name="DateField">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides a date input field with a {@link Ext.DatePicker} dropdown and automatic date validation." ilk="function" line="17" lineend="31" name="DateField" signature="DateField(config)">
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="DateField" name="this" />
              <variable attributes="__local__ private" citdl="this.disabledDates" line="23" name="dd" />
              <variable attributes="__local__ private" citdl="String" line="24" name="re" />
            </scope>
            <variable citdl="this.parseDate()" line="19" name="minValue" />
            <variable citdl="this.parseDate()" line="20" name="maxValue" />
            <variable citdl="RegExp" line="21" name="ddMatch" />
          </scope>
          <scope ilk="class" line="17" lineend="28" name="Checkbox">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Single checkbox field.  Can be used as a direct replacement for traditional checkbox fields." ilk="function" line="17" lineend="28" name="Checkbox" signature="Checkbox(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="Checkbox" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="17" lineend="53" name="BasicForm">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Supplies the functionality to do &quot;actions&quot; on forms and initialize Ext.form.Field types on existing markup." ilk="function" line="17" lineend="53" name="BasicForm" signature="BasicForm(el, config)">
              <variable citdl="String/HTMLElement/Ext.Element" doc="The form element or its id" ilk="argument" name="el" />
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="BasicForm" name="this" />
            </scope>
            <variable citdl="Ext.util.MixedCollection" doc="* The Ext.form.Field items in this form." line="25" name="items" />
          </scope>
          <scope ilk="class" line="17" lineend="19" name="Field">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Base class for form fields that provides default event handling, sizing, value handling and other functionality." ilk="function" line="17" lineend="19" name="Field" signature="Field(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="Field" name="this" />
            </scope>
            <variable citdl="Object" doc="anything other than normal should be considered experimental" line="496" lineend="528" name="msgFx">
              <variable citdl="Object" line="497" lineend="505" name="normal">
                <scope ilk="function" line="498" lineend="500" name="show" signature="show(msgEl, f)">
                  <variable ilk="argument" name="msgEl" />
                  <variable ilk="argument" name="f" />
                  <variable citdl="normal" name="this" />
                </scope>
                <scope ilk="function" line="502" lineend="504" name="hide" signature="hide(msgEl, f)">
                  <variable ilk="argument" name="msgEl" />
                  <variable ilk="argument" name="f" />
                  <variable citdl="normal" name="this" />
                </scope>
              </variable>
              <variable citdl="Object" line="507" lineend="515" name="slide">
                <scope ilk="function" line="508" lineend="510" name="show" signature="show(msgEl, f)">
                  <variable ilk="argument" name="msgEl" />
                  <variable ilk="argument" name="f" />
                  <variable citdl="slide" name="this" />
                </scope>
                <scope ilk="function" line="512" lineend="514" name="hide" signature="hide(msgEl, f)">
                  <variable ilk="argument" name="msgEl" />
                  <variable ilk="argument" name="f" />
                  <variable citdl="slide" name="this" />
                </scope>
              </variable>
              <variable citdl="Object" line="517" lineend="527" name="slideRight">
                <scope ilk="function" line="518" lineend="522" name="show" signature="show(msgEl, f)">
                  <variable ilk="argument" name="msgEl" />
                  <variable ilk="argument" name="f" />
                  <variable citdl="slideRight" name="this" />
                </scope>
                <scope ilk="function" line="524" lineend="526" name="hide" signature="hide(msgEl, f)">
                  <variable ilk="argument" name="msgEl" />
                  <variable ilk="argument" name="f" />
                  <variable citdl="slideRight" name="this" />
                </scope>
              </variable>
            </variable>
          </scope>
          <scope ilk="class" line="17" lineend="19" name="NumberField">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Numeric text field that provides automatic keystroke filtering and numeric validation." ilk="function" line="17" lineend="19" name="NumberField" signature="NumberField(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="NumberField" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="17" lineend="105" name="ComboBox">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A combobox control with support for autocomplete, remote-loading, paging and many other features." ilk="function" line="17" lineend="105" name="ComboBox" signature="ComboBox(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="ComboBox" name="this" />
              <variable attributes="__local__ private" citdl="Ext.getDom()" line="62" name="s" />
              <variable attributes="__local__ private" citdl="Array" line="68" name="d" />
              <variable attributes="__local__ private" citdl="s.options" line="68" name="opts" />
              <variable attributes="__local__ private" citdl="opts[i]" line="70" name="o" />
              <variable attributes="__local__ private" line="71" name="value" />
            </scope>
            <variable citdl="Boolean" line="61" name="allowDomMove" />
            <variable citdl="s.name" line="64" name="hiddenName" />
            <variable citdl="String" line="67" name="mode" />
            <variable citdl="value" line="73" name="value" />
            <variable citdl="Ext.data.SimpleStore" line="81" name="store" />
            <variable citdl="String" line="82" name="valueField" />
            <variable citdl="String" line="83" name="displayField" />
            <variable citdl="Boolean" line="87" name="target" />
            <variable citdl="Ext.DomHelper.insertBefore()" line="88" name="el" />
            <variable citdl="Number" line="96" name="selectedIndex" />
            <variable citdl="Number" line="99" name="queryDelay" />
            <variable citdl="Number" line="102" name="minChars" />
          </scope>
          <scope ilk="class" line="18" lineend="29" name="TextArea">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Multiline text field.  Can be used as a direct replacement for traditional textarea fields, plus adds&#xA;support for auto-sizing." ilk="function" line="18" lineend="29" name="TextArea" signature="TextArea(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="TextArea" name="this" />
            </scope>
            <variable citdl="this.minHeight" line="24" name="growMin" />
            <variable citdl="this.maxHeight" line="27" name="growMax" />
          </scope>
          <scope ilk="class" line="18" lineend="20" name="Radio">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Single radio field.  Same as Checkbox, but provided as a convenience for automatically setting the input type.&#xA;Radio grouping is handled automatically by the browser if you give each radio in a group the same name." ilk="function" line="18" lineend="20" name="Radio" signature="Radio()">
              <variable citdl="Radio" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="18" lineend="31" name="TextField">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Basic text field.  Can be used as a direct replacement for traditional text inputs, or as the base&#xA;class for more sophisticated input controls (like {@link Ext.form.TextArea} and {@link Ext.form.ComboBox})." ilk="function" line="18" lineend="31" name="TextField" signature="TextField(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="TextField" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="31" lineend="34" name="TriggerField">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides a convenient wrapper for TextFields that adds a clickable trigger button (looks like a combobox by default).&#xA;The trigger has no default action, so you must assign a function to implement the trigger click handler by&#xA;overriding {@link #onTriggerClick}. You can create a TriggerField directly, as it renders exactly like a combobox&#xA;for which you can provide a custom implementation.  For example:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var trigger = new Ext.form.TriggerField();&#xA;trigger.onTriggerClick = myTriggerFn;&#xA;trigger.applyTo(&apos;my-field&apos;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;However, in general you will most likely want to use TriggerField as the base class for a reusable component.&#xA;{@link Ext.form.DateField} and {@link Ext.form.ComboBox} are perfect examples of this." ilk="function" line="31" lineend="34" name="TriggerField" signature="TriggerField(config)">
              <variable citdl="Object" doc="Configuration options (valid {@Ext.form.TextField} config options will also be applied&#xA;to the base TextField)" ilk="argument" name="config" />
              <variable citdl="TriggerField" name="this" />
            </scope>
            <variable citdl="Boolean" line="32" name="mimicing" />
          </scope>
          <scope ilk="class" line="137" lineend="139" name="Column">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Creates a column container for layout and rendering of fields in an {@link Ext.form.Form}." ilk="function" line="137" lineend="139" name="Column" signature="Column(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="Column" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="170" lineend="172" name="FieldSet">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Creates a fieldset container for layout and rendering of fields in an {@link Ext.form.Form}." ilk="function" line="170" lineend="172" name="FieldSet" signature="FieldSet(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="FieldSet" name="this" />
            </scope>
          </scope>
          <variable citdl="Ext.extend()" doc="TwinTriggerField is not a public class to be used directly." line="258" name="TwinTriggerField" />
        </variable>
        <variable citdl="Object" line="17" name="grid">
          <scope doc="* Ext JS Library 1.1.1 * Copyright(c) 2006-2007, Ext JS,&#xA;LLC." ilk="function" line="9" lineend="22" name="AbstractGridView" signature="AbstractGridView()">
            <variable citdl="grid" name="this" />
          </scope>
          <scope doc="private This is a support class used internally by the Grid&#xA;components" ilk="function" line="11" lineend="22" name="GridDragZone" signature="GridDragZone(grid, config)">
            <variable ilk="argument" name="grid" />
            <variable ilk="argument" name="config" />
            <variable citdl="grid" name="this" />
          </scope>
          <scope doc="private This is a support class used internally by the Grid&#xA;components" ilk="function" line="11" lineend="22" name="SplitDragZone" signature="SplitDragZone(grid, hd, hd2)">
            <variable ilk="argument" name="grid" />
            <variable ilk="argument" name="hd" />
            <variable ilk="argument" name="hd2" />
            <variable citdl="grid" name="this" />
          </scope>
          <scope doc="private This is a support class used internally by the Grid&#xA;components" ilk="function" line="11" lineend="14" name="GridEditor" signature="GridEditor(field, config)">
            <variable ilk="argument" name="field" />
            <variable ilk="argument" name="config" />
            <variable citdl="grid" name="this" />
          </scope>
          <scope doc="private This is a support class used internally by the Grid&#xA;components" ilk="function" line="11" lineend="21" name="HeaderDragZone" signature="HeaderDragZone(grid, hd, hd2)">
            <variable ilk="argument" name="grid" />
            <variable ilk="argument" name="hd" />
            <variable ilk="argument" name="hd2" />
            <variable citdl="grid" name="this" />
          </scope>
          <variable citdl="Ext.data.Record.create()" doc="* Ext JS Library 1.1.1 * Copyright(c) 2006-2007, Ext JS,&#xA;LLC." line="11" name="PropertyRecord" />
          <variable citdl="Object" line="12" lineend="20" name="events">
            <variable citdl="Boolean" line="13" name="beforerowremoved" />
            <variable citdl="Boolean" line="14" name="beforerowsinserted" />
            <variable citdl="Boolean" line="15" name="beforerefresh" />
            <variable citdl="Boolean" line="16" name="rowremoved" />
            <variable citdl="Boolean" line="17" name="rowsinserted" />
            <variable citdl="Boolean" line="18" name="rowupdated" />
            <variable citdl="Boolean" line="19" name="refresh" />
          </variable>
          <variable citdl="grid.getView()" line="12" name="view" />
          <scope ilk="function" line="13" lineend="23" name="PropertyStore" signature="PropertyStore(grid, source)">
            <variable ilk="argument" name="grid" />
            <variable ilk="argument" name="source" />
            <variable citdl="grid" name="this" />
          </scope>
          <variable citdl="String" line="14" name="ddGroup" />
          <variable citdl="this.view.resizeProxy" line="14" name="proxy" />
          <scope ilk="class" line="16" lineend="21" name="GridView">
            <scope attributes="__ctor__" doc="{Object} config */" ilk="function" line="16" lineend="21" name="GridView" signature="GridView(config)">
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="GridView" name="this" />
            </scope>
            <variable line="18" name="el" />
          </scope>
          <scope ilk="class" line="16" lineend="50" name="CellSelectionModel">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This class provides the basic implementation for cell selection in a grid." ilk="function" line="16" lineend="50" name="CellSelectionModel" signature="CellSelectionModel(config)">
              <variable citdl="Object" doc="The object containing the configuration of this model." ilk="argument" name="config" />
              <variable citdl="CellSelectionModel" name="this" />
            </scope>
            <variable line="19" name="selection" />
          </scope>
          <scope ilk="class" line="16" lineend="19" name="AbstractSelectionModel">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Abstract base class for grid SelectionModels.  It provides the interface that should be&#xA;implemented by descendant classes.  This class should not be directly instantiated." ilk="function" line="16" lineend="19" name="AbstractSelectionModel" signature="AbstractSelectionModel()">
              <variable citdl="AbstractSelectionModel" name="this" />
            </scope>
            <variable citdl="Boolean" line="17" name="locked" />
          </scope>
          <scope doc="@class Ext.grid.RowSelectionModel&#xA;It supports multiple selections and keyboard selection/navigation. &lt;br&gt;&lt;br&gt;&#xA;@constructor" ilk="function" line="17" lineend="59" name="RowSelectionModel" signature="RowSelectionModel(config)">
            <variable citdl="Object" ilk="argument" name="config" />
            <variable citdl="grid" name="this" />
          </scope>
          <variable citdl="Ext.data.Store" line="17" name="store" />
          <scope ilk="class" line="19" lineend="80" name="EditorGrid">
            <scope attributes="__ctor__" doc="Class for creating and editable grid." ilk="function" line="19" lineend="80" name="EditorGrid" signature="EditorGrid(container, config)">
              <variable citdl="String/HTMLElement/Ext.Element" doc="The element into which this grid will be rendered -&#xA;The container MUST have some type of size defined for the grid to fill. The container will be&#xA;automatically set to position relative if it isn&apos;t already." ilk="argument" name="container" />
              <variable ilk="argument" name="config" />
              <variable citdl="EditorGrid" name="this" />
            </scope>
            <variable citdl="Ext.grid.CellSelectionModel" line="24" name="selModel" />
            <variable line="27" name="activeEditor" />
          </scope>
          <variable citdl="grid" line="19" name="grid" />
          <variable citdl="document.createElement()" line="20" name="ddel" />
          <variable citdl="Ext.util.MixedCollection" line="21" name="selections" />
          <variable citdl="String" line="21" name="className" />
          <variable citdl="Boolean" line="21" name="scroll" />
          <variable citdl="Boolean" line="23" name="last" />
          <variable citdl="Boolean" line="24" name="lastActive" />
          <scope ilk="class" line="31" lineend="113" name="ColumnModel">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This is the default implementation of a ColumnModel used by the Grid. It defines&#xA;the columns in the grid.&#xA;&lt;br&gt;Usage:&lt;br&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var colModel = new Ext.grid.ColumnModel([&#xA;{header: &quot;Ticker&quot;, width: 60, sortable: true, locked: true},&#xA;{header: &quot;Company Name&quot;, width: 150, sortable: true},&#xA;{header: &quot;Market Cap.&quot;, width: 100, sortable: true},&#xA;{header: &quot;$ Sales&quot;, width: 100, sortable: true, renderer: money},&#xA;{header: &quot;Employees&quot;, width: 100, sortable: true, resizable: false}&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&#xA;The config options listed for this class are options which may appear in each&#xA;individual column definition." ilk="function" line="31" lineend="113" name="ColumnModel" signature="ColumnModel(config)">
              <variable citdl="Object" doc="An Array of column config objects. See this class&apos;s&#xA;config objects for details." ilk="argument" name="config" />
              <variable citdl="ColumnModel" name="this" />
              <variable attributes="__local__ private" citdl="config[i]" line="42" name="c" />
            </scope>
            <variable citdl="config" doc="The config passed into the constructor" line="35" name="config" />
            <variable citdl="Object" line="36" lineend="36" name="lookup" />
            <variable citdl="Number" doc="The width of columns which have no width specified (defaults to 100)" line="62" name="defaultWidth" />
            <variable citdl="Boolean" doc="Default sortable of columns which have no sortable specified (defaults to false)" line="68" name="defaultSortable" />
            <scope ilk="function" line="480" lineend="485" name="defaultRenderer" returns="value" signature="defaultRenderer(value)">
              <variable ilk="argument" name="value" />
              <variable citdl="ColumnModel" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="39" lineend="287" name="Grid">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This class represents the primary interface of a component based grid control.&#xA;&lt;br&gt;&lt;br&gt;Usage:&lt;pre&gt;&lt;code&gt;&#xA;var grid = new Ext.grid.Grid(&quot;my-container-id&quot;, {&#xA;ds: myDataStore,&#xA;cm: myColModel,&#xA;selModel: mySelectionModel,&#xA;autoSizeColumns: true,&#xA;monitorWindowResize: false,&#xA;trackMouseOver: true&#xA;});&#xA;// set any options&#xA;grid.render();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;b&gt;Common Problems:&lt;/b&gt;&lt;br/&gt;&#xA;- Grid does not resize properly when going smaller: Setting overflow hidden on the container&#xA;element will correct this&lt;br/&gt;&#xA;- If you get el.style[camel]= NaNpx or -2px or something related, be certain you have given your container element&#xA;dimensions. The grid adapts to your container&apos;s size, if your container has no size defined then the results&#xA;are unpredictable.&lt;br/&gt;&#xA;- Do not render the grid into an element with display:none. Try using visibility:hidden. Otherwise there is no way for the&#xA;grid to calculate dimensions/offsets.&lt;br/&gt;" ilk="function" line="39" lineend="287" name="Grid" signature="Grid(container, config)">
              <variable citdl="String/HTMLElement/Ext.Element" doc="The element into which this grid will be rendered -&#xA;The container MUST have some type of size defined for the grid to fill. The container will be&#xA;automatically set to position relative if it isn&apos;t already." ilk="argument" name="container" />
              <variable citdl="Object" doc="A config object that sets properties on this grid." ilk="argument" name="config" />
              <variable citdl="Grid" name="this" />
            </scope>
            <variable citdl="Ext.get()" doc="initialize the container" line="41" name="container" />
            <variable citdl="this.container.id" line="46" name="id" />
            <variable citdl="this.ds" line="51" name="dataSource" />
            <variable citdl="this.cm" line="55" name="colModel" />
            <variable citdl="this.sm" line="59" name="selModel" />
          </scope>
          <variable citdl="Boolean" line="58" name="locked" />
          <scope doc="private This is a support class used internally by the Grid&#xA;components" ilk="class" line="59" lineend="77" name="HeaderDropZone">
            <variable citdl="grid" line="12" name="grid" />
            <variable citdl="grid.getView()" line="13" name="view" />
            <scope attributes="__ctor__" doc="private This is a support class used internally by the Grid&#xA;components" ilk="function" line="59" lineend="77" name="HeaderDropZone" signature="HeaderDropZone(grid, hd, hd2)">
              <variable ilk="argument" name="grid" />
              <variable ilk="argument" name="hd" />
              <variable ilk="argument" name="hd2" />
              <variable citdl="HeaderDropZone" name="this" />
              <variable citdl="Object" line="69" name="proxyBottom">
                <scope ilk="function" line="69" lineend="72" name="hide" signature="hide()">
                  <variable citdl="proxyBottom" name="this" />
                </scope>
              </variable>
            </scope>
            <variable citdl="Ext.DomHelper.append()" doc="split the proxies so they don&apos;t interfere with mouse events" line="65" name="proxyTop" />
            <variable citdl="Ext.DomHelper.append()" line="68" name="proxyBottom" />
            <variable citdl="this.proxyBottom.hide" line="69" name="hide" />
            <variable citdl="String" line="73" name="ddGroup" />
          </scope>
          <scope ilk="function" line="74" lineend="98" name="PropertyColumnModel" signature="PropertyColumnModel(grid, store)">
            <variable ilk="argument" name="grid" />
            <variable ilk="argument" name="store" />
            <variable citdl="grid" name="this" />
            <variable attributes="__local__ private" citdl="Ext.grid" line="76" name="g" />
            <variable attributes="__local__ private" citdl="Ext.form" line="89" name="f" />
          </scope>
          <variable citdl="Ext.DomHelper.append()" line="87" name="bselect" />
          <variable citdl="Object" line="90" lineend="95" name="editors">
            <variable citdl="g.GridEditor" line="91" name="date" />
            <variable citdl="g.GridEditor" line="92" name="string" />
            <variable citdl="g.GridEditor" line="93" name="number" />
            <variable citdl="g.GridEditor" line="94" name="boolean" />
          </variable>
          <variable citdl="this.renderCell.createDelegate()" line="96" name="renderCellDelegate" />
          <variable citdl="this.renderProp.createDelegate()" line="97" name="renderPropDelegate" />
          <scope ilk="function" line="158" lineend="181" name="PropertyGrid" signature="PropertyGrid(container, config)">
            <variable ilk="argument" name="container" />
            <variable ilk="argument" name="config" />
            <variable citdl="grid" name="this" />
            <variable attributes="__local__ private" citdl="Ext.grid.PropertyStore" line="160" name="store" />
            <variable attributes="__local__ private" citdl="Ext.grid.PropertyColumnModel" line="162" name="cm" />
          </scope>
          <variable line="174" name="lastEditRow" />
          <variable citdl="this.customEditors" line="180" name="customEditors" />
          <variable citdl="Object" line="206" name="GridView">
            <scope ilk="function" line="206" lineend="209" name="ColumnDragZone" signature="ColumnDragZone(grid, hd)">
              <variable ilk="argument" name="grid" />
              <variable ilk="argument" name="hd" />
              <variable citdl="GridView" name="this" />
            </scope>
          </variable>
          <variable citdl="Ext.grid.ColumnModel" doc="Alias for backwards compatibility" line="488" name="DefaultColumnModel" />
        </variable>
        <scope ilk="class" line="18" lineend="66" name="Editor">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: A base editor field that handles displaying/hiding on demand and has some built-in sizing and event handling logic." ilk="function" line="18" lineend="66" name="Editor" signature="Editor(field, config)">
            <variable citdl="Ext.form.Field" doc="The Field object (or descendant)" ilk="argument" name="field" />
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="Editor" name="this" />
          </scope>
          <variable citdl="field" line="20" name="field" />
        </scope>
        <scope ilk="class" line="18" lineend="249" name="Toolbar">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Basic Toolbar class." ilk="function" line="18" lineend="29" name="Toolbar" signature="Toolbar(container, buttons, config)">
            <variable citdl="String/HTMLElement/Element" doc="The id or element that will contain the toolbar" ilk="argument" name="container" />
            <variable citdl="Array" doc="(optional) array of button configs or elements to add" ilk="argument" name="buttons" />
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="Toolbar" name="this" />
          </scope>
          <variable citdl="buttons" line="25" name="buttons" />
          <scope doc="private" ilk="function" line="33" lineend="49" name="render" signature="render(ct)">
            <variable ilk="argument" name="ct" />
            <variable citdl="Toolbar" name="this" />
            <variable attributes="__local__ private" citdl="Number" line="41" name="autoId" />
          </scope>
          <variable citdl="Ext.get()" line="34" name="el" />
          <variable citdl="this.el.child()" line="40" name="tr" />
          <variable citdl="Ext.util.MixedCollection" line="44" name="items" />
          <scope doc="Adds element(s) to the toolbar -- this function takes a variable number of&#xA;arguments of mixed type and adds them to the toolbar." ilk="function" line="69" lineend="93" name="add" signature="add()">
            <variable citdl="Toolbar" name="this" />
            <variable attributes="__local__ private" citdl="arguments" line="70" name="a" />
            <variable attributes="__local__ private" citdl="a.length" line="70" name="l" />
            <variable attributes="__local__ private" citdl="a[i]" line="72" name="el" />
          </scope>
          <scope doc="Returns the Element for this toolbar." ilk="function" line="99" lineend="101" name="getEl" returns="Ext.Element" signature="getEl()">
            <variable citdl="Toolbar" name="this" />
          </scope>
          <scope doc="Adds a separator" ilk="function" line="107" lineend="109" name="addSeparator" returns="Ext.Toolbar.Item" signature="addSeparator()">
            <variable citdl="Toolbar" name="this" />
          </scope>
          <scope doc="Adds a spacer element" ilk="function" line="115" lineend="117" name="addSpacer" returns="Ext.Toolbar.Spacer" signature="addSpacer()">
            <variable citdl="Toolbar" name="this" />
          </scope>
          <scope doc="Adds a fill element that forces subsequent additions to the right side of the toolbar" ilk="function" line="123" lineend="125" name="addFill" returns="Ext.Toolbar.Fill" signature="addFill()">
            <variable citdl="Toolbar" name="this" />
          </scope>
          <scope doc="Adds any standard HTML element to the toolbar" ilk="function" line="132" lineend="134" name="addElement" returns="Ext.Toolbar.Item" signature="addElement(el)">
            <variable citdl="String/HTMLElement/Element" doc="The element or id of the element to add" ilk="argument" name="el" />
            <variable citdl="Toolbar" name="this" />
          </scope>
          <scope doc="Adds any Toolbar.Item or subclass" ilk="function" line="141" lineend="146" name="addItem" returns="Ext.Toolbar.Item" signature="addItem(item)">
            <variable citdl="Ext.Toolbar.Item" ilk="argument" name="item" />
            <variable citdl="Toolbar" name="this" />
            <variable attributes="__local__ private" citdl="this.nextBlock()" line="142" name="td" />
          </scope>
          <scope doc="Adds a button (or buttons). See {@link Ext.Toolbar.Button} for more info on the config." ilk="function" line="153" lineend="171" name="addButton" returns="Ext.Toolbar.Button/Array" signature="addButton(config)">
            <variable citdl="Object/Array" doc="A button config or array of configs" ilk="argument" name="config" />
            <variable citdl="Toolbar" name="this" />
            <variable attributes="__local__ private" citdl="Array" line="155" name="buttons" />
            <variable attributes="__local__ private" citdl="config" line="161" name="b" />
            <variable attributes="__local__ private" citdl="this.nextBlock()" line="167" name="td" />
          </scope>
          <scope doc="Adds text to the toolbar" ilk="function" line="178" lineend="180" name="addText" returns="Ext.Toolbar.Item" signature="addText(text)">
            <variable citdl="String" doc="The text to add" ilk="argument" name="text" />
            <variable citdl="Toolbar" name="this" />
          </scope>
          <scope doc="Inserts any {@link Ext.Toolbar.Item}/{@link Ext.Toolbar.Button} at the specified index." ilk="function" line="188" lineend="204" name="insertButton" returns="Ext.Toolbar.Button/Item" signature="insertButton(index, item)">
            <variable citdl="Number" doc="The index where the item is to be inserted" ilk="argument" name="index" />
            <variable ilk="argument" name="item" />
            <variable citdl="Toolbar" name="this" />
            <variable attributes="__local__ private" citdl="Array" line="190" name="buttons" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="199" name="td" />
          </scope>
          <scope doc="Adds a new element to the toolbar from the passed {@link Ext.DomHelper} config." ilk="function" line="211" lineend="218" name="addDom" returns="Ext.Toolbar.Item" signature="addDom(config, returnEl)">
            <variable citdl="Object" ilk="argument" name="config" />
            <variable ilk="argument" name="returnEl" />
            <variable citdl="Toolbar" name="this" />
            <variable attributes="__local__ private" citdl="this.nextBlock()" line="212" name="td" />
            <variable attributes="__local__ private" citdl="Ext.Toolbar.Item" line="214" name="ti" />
          </scope>
          <scope doc="Adds a dynamically rendered Ext.form field (TextField, ComboBox, etc). Note: the field should not have&#xA;been rendered yet. For a field that has already been rendered, use {@link #addElement}." ilk="function" line="226" lineend="233" name="addField" returns="Ext.ToolbarItem" signature="addField(field)">
            <variable citdl="Ext.form.Field" ilk="argument" name="field" />
            <variable citdl="Toolbar" name="this" />
            <variable attributes="__local__ private" citdl="this.nextBlock()" line="227" name="td" />
            <variable attributes="__local__ private" citdl="Ext.Toolbar.Item" line="229" name="ti" />
          </scope>
          <scope doc="private" ilk="function" line="236" lineend="240" name="nextBlock" returns="td" signature="nextBlock()">
            <variable citdl="Toolbar" name="this" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="237" name="td" />
          </scope>
          <scope doc="private" ilk="function" line="243" lineend="248" name="destroy" signature="destroy()">
            <variable citdl="Toolbar" name="this" />
          </scope>
          <scope ilk="class" line="258" lineend="339" name="Item">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The base class that other classes should extend in order to get some basic common toolbar item functionality." ilk="function" line="258" lineend="262" name="Item" signature="Item(el)">
              <variable citdl="HTMLElement" ilk="argument" name="el" />
              <variable citdl="Item" name="this" />
            </scope>
            <variable citdl="Ext.getDom()" line="259" name="el" />
            <variable citdl="Ext.id()" line="260" name="id" />
            <variable citdl="Boolean" line="261" name="hidden" />
            <scope doc="Get this item&apos;s HTML Element" ilk="function" line="270" lineend="272" name="getEl" returns="HTMLElement" signature="getEl()">
              <variable citdl="Item" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="275" lineend="278" name="render" signature="render(td)">
              <variable ilk="argument" name="td" />
              <variable citdl="Item" name="this" />
            </scope>
            <variable citdl="td" line="276" name="td" />
            <scope doc="Removes and destroys this item." ilk="function" line="283" lineend="285" name="destroy" signature="destroy()">
              <variable citdl="Item" name="this" />
            </scope>
            <scope doc="Shows this item." ilk="function" line="290" lineend="293" name="show" signature="show()">
              <variable citdl="Item" name="this" />
            </scope>
            <variable citdl="String" line="292" name="display" />
            <scope doc="Hides this item." ilk="function" line="298" lineend="301" name="hide" signature="hide()">
              <variable citdl="Item" name="this" />
            </scope>
            <scope doc="Convenience function for boolean show/hide." ilk="function" line="307" lineend="313" name="setVisible" signature="setVisible(visible)">
              <variable citdl="Boolean" doc="true to show/false to hide" ilk="argument" name="visible" />
              <variable citdl="Item" name="this" />
            </scope>
            <scope doc="Try to focus this item." ilk="function" line="318" lineend="320" name="focus" signature="focus()">
              <variable citdl="Item" name="this" />
            </scope>
            <scope doc="Disables this item." ilk="function" line="325" lineend="329" name="disable" signature="disable()">
              <variable citdl="Item" name="this" />
            </scope>
            <variable citdl="Boolean" line="327" name="disabled" />
            <scope doc="Enables this item." ilk="function" line="334" lineend="338" name="enable" signature="enable()">
              <variable citdl="Item" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="349" lineend="353" name="Separator">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A simple toolbar separator class" ilk="function" line="349" lineend="353" name="Separator" signature="Separator()">
              <variable citdl="Separator" name="this" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="350" name="s" />
            </scope>
          </scope>
          <scope ilk="class" line="367" lineend="371" name="Spacer">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A simple element that adds extra horizontal space to a toolbar." ilk="function" line="367" lineend="371" name="Spacer" signature="Spacer()">
              <variable citdl="Spacer" name="this" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="368" name="s" />
            </scope>
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A simple element that adds a greedy (100% width) horizontal space to a toolbar." line="391" name="Fill" />
          <scope ilk="class" line="401" lineend="406" name="TextItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A simple class that renders text directly into a toolbar." ilk="function" line="401" lineend="406" name="TextItem" signature="TextItem(text)">
              <variable citdl="String" ilk="argument" name="text" />
              <variable citdl="TextItem" name="this" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="402" name="s" />
            </scope>
          </scope>
          <scope ilk="class" line="421" lineend="423" name="Button">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A button that renders into a toolbar." ilk="function" line="421" lineend="423" name="Button" signature="Button(config)">
              <variable citdl="Object" doc="A standard {@link Ext.Button} config object" ilk="argument" name="config" />
              <variable citdl="Button" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="481" lineend="483" name="SplitButton">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A menu button that renders into a toolbar." ilk="function" line="481" lineend="483" name="SplitButton" signature="SplitButton(config)">
              <variable citdl="Object" doc="A standard {@link Ext.SplitButton} config object" ilk="argument" name="config" />
              <variable citdl="SplitButton" name="this" />
            </scope>
          </scope>
          <variable citdl="Ext.Toolbar.SplitButton" doc="backwards compat" line="516" name="MenuButton" />
        </scope>
        <scope ilk="class" line="18" lineend="171" name="Shadow">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Simple class that can provide a shadow effect for any element.  Note that the element MUST be absolutely positioned,&#xA;and the shadow does not provide any shimming.  This should be used only in simple cases -- for more advanced&#xA;functionality that can also provide the same shadow effect, see the {@link Ext.Layer} class." ilk="function" line="18" lineend="68" name="Shadow" signature="Shadow(config)">
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="Shadow" name="this" />
            <variable attributes="__local__ private" citdl="Object" line="23" lineend="23" name="a">
              <variable citdl="Number" line="23" name="h" />
              <variable citdl="Number" line="27" name="w" />
              <variable citdl="a.t" line="28" name="l" />
              <variable citdl="o" line="28" name="t" />
            </variable>
            <variable attributes="__local__ private" citdl="this.offset" line="23" name="o" />
            <variable attributes="__local__ private" citdl="Math.floor()" line="24" name="rad" />
          </scope>
          <variable citdl="this.defaultMode" line="21" name="mode" />
          <variable citdl="a" line="67" name="adjusts" />
          <variable citdl="Number" doc="The shadow display mode.  Supports the following options:&lt;br /&gt;&#xA;sides: Shadow displays on both sides and bottom only&lt;br /&gt;&#xA;frame: Shadow displays equally on all four sides&lt;br /&gt;&#xA;drop: Traditional bottom-right drop shadow (default)" line="82" name="offset" />
          <variable citdl="String" doc="private" line="85" name="defaultMode" />
          <scope doc="Displays the shadow under the target element" ilk="function" line="91" lineend="110" name="show" signature="show(target)">
            <variable ilk="argument" name="target" />
            <variable citdl="Shadow" name="this" />
          </scope>
          <variable citdl="Ext.Shadow.Pool.pull()" line="94" name="el" />
          <variable citdl="String" line="101" name="filter" />
          <variable citdl="String" line="109" name="display" />
          <scope doc="Returns true if the shadow is visible, else false" ilk="function" line="115" lineend="117" name="isVisible" returns="this.el" signature="isVisible()">
            <variable citdl="Shadow" name="this" />
          </scope>
          <scope doc="Direct alignment when values are already available. Show must be called at least once before&#xA;calling this method to ensure it is initialized." ilk="function" line="127" lineend="148" name="realign" signature="realign(l, t, w, h)">
            <variable ilk="argument" name="l" />
            <variable ilk="argument" name="t" />
            <variable ilk="argument" name="w" />
            <variable ilk="argument" name="h" />
            <variable citdl="Shadow" name="this" />
            <variable attributes="__local__ private" citdl="this.adjusts" line="131" name="a" />
            <variable attributes="__local__ private" citdl="this.el.dom" line="131" name="d" />
            <variable attributes="__local__ private" citdl="d.style" line="131" name="s" />
            <variable attributes="__local__ private" citdl="Number" line="132" name="iea" />
            <variable attributes="__local__ private" citdl="sh" line="135" name="shs" />
            <variable attributes="__local__ private" line="135" name="sw" />
            <variable attributes="__local__ private" line="135" name="sh" />
            <variable attributes="__local__ private" citdl="sw" line="135" name="sws" />
            <variable attributes="__local__ private" citdl="d.childNodes" line="140" name="cn" />
            <variable attributes="__local__ private" citdl="Math.max()" line="141" name="sww" />
          </scope>
          <scope doc="Hides this shadow" ilk="function" line="153" lineend="159" name="hide" signature="hide()">
            <variable citdl="Shadow" name="this" />
          </scope>
          <scope doc="Adjust the z-index of this shadow" ilk="function" line="165" lineend="170" name="setZIndex" signature="setZIndex(z)">
            <variable ilk="argument" name="z" />
            <variable citdl="Shadow" name="this" />
          </scope>
          <variable citdl="z" line="166" name="zIndex" />
          <variable citdl="Object" line="174" lineend="192" name="Pool">
            <scope ilk="function" line="180" lineend="187" name="pull" returns="sh" signature="pull()">
              <variable citdl="Pool" name="this" />
              <variable attributes="__local__ private" citdl="p.shift()" line="181" name="sh" />
            </scope>
            <scope ilk="function" line="189" lineend="191" name="push" signature="push(sh)">
              <variable ilk="argument" name="sh" />
              <variable citdl="Pool" name="this" />
            </scope>
          </variable>
        </scope>
        <variable citdl="Object" line="18" name="dd">
          <variable citdl="Object" line="15" lineend="128" name="Registry">
            <scope doc="Register a drag drop element&#xA;Value      Description&lt;br /&gt;&#xA;---------  ------------------------------------------&lt;br /&gt;&#xA;handles    Array of DOM nodes that trigger dragging&lt;br /&gt;&#xA;for the element being registered&lt;br /&gt;&#xA;isHandle   True if the element passed in triggers&lt;br /&gt;&#xA;dragging itself, else false&#xA;&lt;/pre&gt;" ilk="function" line="49" lineend="65" name="register" signature="register(el, data)">
              <variable ilk="argument" name="el" />
              <variable citdl="Object" doc="(optional) A custom data object that will be passed between the elements that are involved&#xA;in drag drop operations.  You can populate this object with any arbitrary properties that your own code&#xA;knows how to interpret, plus there are some specific properties known to the Registry that should be&#xA;populated in the data object (if applicable):&#xA;&lt;pre&gt;" ilk="argument" name="data" />
              <variable citdl="Registry" name="this" />
              <variable attributes="__local__ private" citdl="data.handles" line="60" name="hs" />
            </scope>
            <scope doc="Unregister a drag drop element" ilk="function" line="71" lineend="83" name="unregister" signature="unregister(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Registry" name="this" />
              <variable attributes="__local__ private" citdl="getId()" line="72" name="id" />
              <variable attributes="__local__ private" citdl="elements[id]" line="73" name="data" />
              <variable attributes="__local__ private" citdl="data.handles" line="77" name="hs" />
            </scope>
            <scope doc="Returns the handle registered for a DOM Node by id" ilk="function" line="90" lineend="95" name="getHandle" returns="Object" signature="getHandle(id)">
              <variable citdl="String/HTMLElement" doc="The DOM node or id to look up" ilk="argument" name="id" />
              <variable citdl="Registry" name="this" />
            </scope>
            <scope doc="Returns the handle that is registered for the DOM node that is the target of the event" ilk="function" line="102" lineend="105" name="getHandleFromEvent" returns="Object" signature="getHandleFromEvent(e)">
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Registry" name="this" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event.getTarget()" line="103" name="t" />
            </scope>
            <scope doc="Returns a custom data object that is registered for a DOM node by id" ilk="function" line="112" lineend="117" name="getTarget" returns="Object" signature="getTarget(id)">
              <variable citdl="String/HTMLElement" doc="The DOM node or id to look up" ilk="argument" name="id" />
              <variable citdl="Registry" name="this" />
            </scope>
            <scope doc="Returns a custom data object that is registered for the DOM node that is the target of the event" ilk="function" line="124" lineend="127" name="getTargetFromEvent" returns="Object" signature="getTargetFromEvent(e)">
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Registry" name="this" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event.getTarget()" line="125" name="t" />
            </scope>
          </variable>
          <variable citdl="Object" line="15" lineend="177" name="ScrollManager">
            <scope doc="Registers new overflow element(s) to auto scroll" ilk="function" line="109" lineend="118" name="register" signature="register(el)">
              <variable citdl="String/HTMLElement/Element/Array" doc="The id of or the element to be scrolled or an array of either" ilk="argument" name="el" />
              <variable citdl="ScrollManager" name="this" />
            </scope>
            <scope doc="Unregisters overflow element(s) so they are no longer scrolled" ilk="function" line="124" lineend="133" name="unregister" signature="unregister(el)">
              <variable citdl="String/HTMLElement/Element/Array" doc="The id of or the element to be removed or an array of either" ilk="argument" name="el" />
              <variable citdl="ScrollManager" name="this" />
            </scope>
            <variable citdl="Number" doc="The number of pixels from the edge of a container the pointer needs to be to&#xA;trigger scrolling (defaults to 25)" line="140" name="thresh" />
            <variable citdl="Number" doc="The number of pixels to scroll in each scroll increment (defaults to 50)" line="146" name="increment" />
            <variable citdl="Number" doc="The frequency of scrolls in milliseconds (defaults to 500)" line="152" name="frequency" />
            <variable citdl="Boolean" doc="True to animate the scroll (defaults to true)" line="158" name="animate" />
            <variable citdl="Number" doc="The animation duration in seconds -&#xA;MUST BE less than Ext.dd.ScrollManager.frequency! (defaults to .4)" line="165" name="animDuration" />
            <scope doc="Manually trigger a cache refresh." ilk="function" line="170" lineend="176" name="refreshCache" signature="refreshCache()">
              <variable citdl="ScrollManager" name="this" />
            </scope>
          </variable>
          <scope ilk="class" line="16" lineend="168" name="StatusProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A specialized drag proxy that supports a drop status icon, {@link Ext.Layer} styles and auto-repair.  This is the&#xA;default drag proxy used by all Ext.dd components." ilk="function" line="16" lineend="30" name="StatusProxy" signature="StatusProxy(config)">
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <variable citdl="this.id" line="18" name="id" />
            <variable citdl="Ext.Layer" line="27" name="el" />
            <variable citdl="Ext.get()" line="28" name="ghost" />
            <variable citdl="this.dropNotAllowed" line="29" name="dropStatus" />
            <variable citdl="String" doc="The CSS class to apply to the status element when drop is allowed (defaults to &quot;x-dd-drop-ok&quot;)." line="37" name="dropAllowed" />
            <variable citdl="String" doc="The CSS class to apply to the status element when drop is not allowed (defaults to &quot;x-dd-drop-nodrop&quot;)." line="42" name="dropNotAllowed" />
            <scope doc="Updates the proxy&apos;s visual element to indicate the status of whether or not drop is allowed&#xA;over the current target element." ilk="function" line="49" lineend="55" name="setStatus" signature="setStatus(cssClass)">
              <variable citdl="String" doc="The css class for the new drop status indicator image" ilk="argument" name="cssClass" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Resets the status indicator to the default dropNotAllowed value" ilk="function" line="61" lineend="67" name="reset" signature="reset(clearGhost)">
              <variable citdl="Boolean" doc="True to also remove all content from the ghost, false to preserve it" ilk="argument" name="clearGhost" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <variable citdl="String" line="62" name="className" />
            <scope doc="Updates the contents of the ghost element" ilk="function" line="73" lineend="81" name="update" signature="update(html)">
              <variable citdl="String" doc="The html that will replace the current innerHTML of the ghost element" ilk="argument" name="html" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Returns the underlying proxy {@link Ext.Layer}" ilk="function" line="87" lineend="89" name="getEl" returns="Ext.Layer" signature="getEl()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Returns the ghost element" ilk="function" line="95" lineend="97" name="getGhost" returns="Ext.Element" signature="getGhost()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Hides the proxy" ilk="function" line="103" lineend="108" name="hide" signature="hide(clear)">
              <variable citdl="Boolean" doc="True to reset the status and clear the ghost contents, false to preserve them" ilk="argument" name="clear" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Stops the repair animation if it&apos;s currently running" ilk="function" line="113" lineend="117" name="stop" signature="stop()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Displays this proxy" ilk="function" line="122" lineend="124" name="show" signature="show()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Force the Layer to sync its shadow and shim positions to the element" ilk="function" line="129" lineend="131" name="sync" signature="sync()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Causes the proxy to return to its position of origin via an animation.  Should be called after an&#xA;invalid drop operation by the item being dragged." ilk="function" line="140" lineend="157" name="repair" signature="repair(xy, callback, scope)">
              <variable citdl="Array" doc="The XY position of the element ([x, y])" ilk="argument" name="xy" />
              <variable citdl="Function" doc="The function to call after the repair is complete" ilk="argument" name="callback" />
              <variable citdl="Object" doc="The scope in which to execute the callback" ilk="argument" name="scope" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <variable citdl="callback" line="141" name="callback" />
            <variable citdl="scope" line="142" name="scope" />
            <variable citdl="this.el.shift()" line="153" name="anim" />
            <scope doc="private" ilk="function" line="160" lineend="167" name="afterRepair" signature="afterRepair()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="17" lineend="31" name="DragSource">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A simple class that provides the basic implementation needed to make any element draggable." ilk="function" line="17" lineend="31" name="DragSource" signature="DragSource(el, config)">
              <variable citdl="String/HTMLElement/Element" doc="The container element" ilk="argument" name="el" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="DragSource" name="this" />
            </scope>
            <variable citdl="Ext.get()" line="18" name="el" />
            <variable citdl="Object" line="19" lineend="19" name="dragData" />
            <variable citdl="Ext.dd.StatusProxy" line="24" name="proxy" />
            <variable citdl="Boolean" line="30" name="dragging" />
          </scope>
          <scope ilk="class" line="18" lineend="30" name="DropTarget">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A simple class that provides the basic implementation needed to make any element a drop target that can have&#xA;draggable items dropped onto it.  The drop has no effect until an implementation of notifyDrop is provided." ilk="function" line="18" lineend="30" name="DropTarget" signature="DropTarget(el, config)">
              <variable citdl="String/HTMLElement/Element" doc="The container element" ilk="argument" name="el" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="DropTarget" name="this" />
            </scope>
            <variable citdl="Ext.get()" line="19" name="el" />
          </scope>
          <scope ilk="class" line="18" lineend="23" name="DragZone">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This class provides a container DD instance that proxies for multiple child node sources.&lt;br /&gt;&#xA;By default, this class requires that draggable child nodes are registered with {@link Ext.dd.Registry}." ilk="function" line="18" lineend="23" name="DragZone" signature="DragZone(el, config)">
              <variable citdl="String/HTMLElement/Element" doc="The container element" ilk="argument" name="el" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="DragZone" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="18" lineend="20" name="DropZone">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This class provides a container DD instance that proxies for multiple child node targets.&lt;br /&gt;&#xA;By default, this class requires that child nodes accepting drop are registered with {@link Ext.dd.Registry}." ilk="function" line="18" lineend="20" name="DropZone" signature="DropZone(el, config)">
              <variable citdl="String/HTMLElement/Element" doc="The container element" ilk="argument" name="el" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="DropZone" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="66" lineend="1155" name="DragDrop">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Defines the interface and base operation of items that that can be&#xA;dragged or can be drop targets.  It was designed to be extended, overriding&#xA;the event handlers for startDrag, onDrag, onDragOver and onDragOut.&#xA;Up to three html elements can be associated with a DragDrop instance:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;linked element: the element that is passed into the constructor.&#xA;This is the element which defines the boundaries for interaction with&#xA;other DragDrop objects.&lt;/li&gt;&#xA;&lt;li&gt;handle element(s): The drag operation only occurs if the element that&#xA;was clicked matches a handle element.  By default this is the linked&#xA;element, but there are times that you will want only a portion of the&#xA;linked element to initiate the drag operation, and the setHandleElId()&#xA;method provides a way to define this.&lt;/li&gt;&#xA;&lt;li&gt;drag element: this represents the element that would be moved along&#xA;with the cursor during a drag operation.  By default, this is the linked&#xA;element itself as in {@link Ext.dd.DD}.  setDragElId() lets you define&#xA;a separate element that would be moved, as in {@link Ext.dd.DDProxy}.&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;This class should not be instantiated until the onload event to ensure that&#xA;the associated elements are available.&#xA;The following would define a DragDrop obj that would interact with any&#xA;other DragDrop obj in the &quot;group1&quot; group:&#xA;&lt;pre&gt;&#xA;dd = new Ext.dd.DragDrop(&quot;div1&quot;, &quot;group1&quot;);&#xA;&lt;/pre&gt;&#xA;Since none of the event handlers have been implemented, nothing would&#xA;actually happen if you were to run the code above.  Normally you would&#xA;override this class or one of the default implementations, but you can&#xA;also override the methods you want on an instance of the class...&#xA;&lt;pre&gt;&#xA;dd.onDragDrop = function(e, id) {&#xA;&amp;nbsp;&amp;nbsp;alert(&quot;dd was dropped on &quot; + id);&#xA;}&#xA;&lt;/pre&gt;" ilk="function" line="66" lineend="70" name="DragDrop" signature="DragDrop(id, sGroup, config)">
              <variable citdl="String" doc="of the element that is linked to this instance" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DragDrop:&#xA;padding, isTarget, maintainOffset, primaryButtonOnly" ilk="argument" name="config" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="String" doc="The id of the element associated with this object.  This is what we&#xA;refer to as the &quot;linked element&quot; because the size and position of&#xA;this element is used to determine when the drag and drop objects have&#xA;interacted." line="82" name="id" />
            <variable citdl="Object" doc="Configuration attributes passed into the constructor" line="89" name="config" />
            <variable attributes="private" citdl="String" doc="PRIVATE: The id of the element that will be dragged.  By default this is same&#xA;as the linked element , but could be changed to another element. Ex:&#xA;Ext.dd.DDProxy" line="99" name="dragElId" />
            <variable attributes="private" citdl="String" doc="PRIVATE: the id of the element that initiates the drag operation.  By default&#xA;this is the linked element, but could be changed to be a child of this&#xA;element.  This lets us do things like only starting the drag when the&#xA;header element within the linked html element is clicked." line="110" name="handleElId" />
            <variable citdl="String" doc="An associative array of HTML tags that will be ignored if clicked." line="117" lineend="603" name="invalidHandleTypes">
              <variable citdl="String" line="603" name="A" />
            </variable>
            <variable citdl="String" doc="An associative array of ids for elements that will be ignored if clicked" line="124" lineend="604" name="invalidHandleIds" />
            <variable citdl="Array" doc="An indexted array of css class names for elements that will be ignored&#xA;if clicked." line="132" name="invalidHandleClasses" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The linked element&apos;s absolute X position at the time the drag was&#xA;started" line="141" name="startPageX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The linked element&apos;s absolute X position at the time the drag was&#xA;started" line="150" name="startPageY" />
            <variable citdl="String" doc="The group defines a logical collection of DragDrop objects that are&#xA;related.  Instances only get events when interacting with other&#xA;DragDrop object in the same group.  This lets us define multiple&#xA;groups using a single DragDrop subclass if we want." line="160" lineend="581" name="groups" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Individual drag/drop instances can be locked.  This will prevent&#xA;onmousedown start drag." line="169" name="locked" />
            <scope doc="Lock this instance" ilk="function" line="175" lineend="175" name="lock" signature="lock()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Unlock this instace" ilk="function" line="181" lineend="181" name="unlock" signature="unlock()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="Boolean" doc="By default, all insances can be a drop target.  This can be disabled by&#xA;setting isTarget to false." line="189" name="isTarget" />
            <variable citdl="Array" doc="The padding configured for this drag and drop object for calculating&#xA;the drop zone intersection with this object." line="197" name="padding" />
            <variable attributes="private" citdl="Ext.getDom()" doc="PRIVATE: Cached reference to the linked element" line="204" name="_domRef" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Internal typeof flag" line="211" name="__ygDragDrop" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Set to true when horizontal contraints are applied" line="219" name="constrainX" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Set to true when vertical contraints are applied" line="227" name="constrainY" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The left constraint" line="235" name="minX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The right constraint" line="243" name="maxX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The up constraint" line="252" name="minY" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The down constraint" line="260" name="maxY" />
            <variable citdl="Boolean" doc="Maintain offsets when we resetconstraints.  Set to true when you want&#xA;the position of the element relative to its parent to stay the same&#xA;when the page changes" line="270" name="maintainOffset" />
            <variable citdl="Array" doc="Array of pixel locations the element will snap to if we specified a&#xA;horizontal graduation/interval.  This array is generated automatically&#xA;when you define a tick interval." line="279" name="xTicks" />
            <variable citdl="Array" doc="Array of pixel locations the element will snap to if we specified a&#xA;vertical graduation/interval.  This array is generated automatically&#xA;when you define a tick interval." line="288" name="yTicks" />
            <variable citdl="Boolean" doc="By default the drag and drop instance will only respond to the primary&#xA;button click (left button for a right-handed mouse).  Set to true to&#xA;allow drag and drop to start with any mouse click that is propogated&#xA;by the browser" line="298" name="primaryButtonOnly" />
            <variable citdl="Boolean" doc="The availabe property is false until the linked dom element is accessible." line="305" name="available" />
            <variable citdl="Boolean" doc="By default, drags can only be initiated if the mousedown occurs in the&#xA;region the linked element is.  This is done in part to work around a&#xA;bug in some browsers that mis-report the mousedown if the previous&#xA;mouseup happened outside of the window.  This property is set to true&#xA;if outer handles are defined." line="318" name="hasOuterHandles" />
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the startDrag event" ilk="function" line="325" lineend="325" name="b4StartDrag" signature="b4StartDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called after a drag/drop object is clicked&#xA;and the drag or mousedown time thresholds have beeen met." ilk="function" line="334" lineend="334" name="startDrag" signature="startDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDrag event" ilk="function" line="341" lineend="341" name="b4Drag" signature="b4Drag(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called during the onMouseMove event while dragging an&#xA;object." ilk="function" line="349" lineend="349" name="onDrag" signature="onDrag(e)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this element fist begins hovering over&#xA;another DragDrop obj" ilk="function" line="360" lineend="360" name="onDragEnter" signature="onDragEnter(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this is hovering over.  In INTERSECT mode, an array of one or more&#xA;dragdrop items being hovered over." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDragOver event" ilk="function" line="367" lineend="367" name="b4DragOver" signature="b4DragOver(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this element is hovering over another&#xA;DragDrop obj" ilk="function" line="378" lineend="378" name="onDragOver" signature="onDragOver(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this is hovering over.  In INTERSECT mode, an array of dd items&#xA;being hovered over." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDragOut event" ilk="function" line="385" lineend="385" name="b4DragOut" signature="b4DragOut(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when we are no longer hovering over an element" ilk="function" line="395" lineend="395" name="onDragOut" signature="onDragOut(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this was hovering over.  In INTERSECT mode, an array of dd items&#xA;that the mouse is no longer over." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDragDrop event" ilk="function" line="402" lineend="402" name="b4DragDrop" signature="b4DragDrop(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this item is dropped on another DragDrop&#xA;obj" ilk="function" line="413" lineend="413" name="onDragDrop" signature="onDragDrop(e, id)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this was dropped on.  In INTERSECT mode, an array of dd items this&#xA;was dropped on." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this item is dropped on an area with no&#xA;drop target" ilk="function" line="421" lineend="421" name="onInvalidDrop" signature="onInvalidDrop(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the endDrag event" ilk="function" line="428" lineend="428" name="b4EndDrag" signature="b4EndDrag(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Fired when we are done dragging the object" ilk="function" line="435" lineend="435" name="endDrag" signature="endDrag(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code executed immediately before the onMouseDown event" ilk="function" line="443" lineend="443" name="b4MouseDown" signature="b4MouseDown(e)">
              <variable citdl="Event" doc="the mousedown event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Event handler that fires when a drag/drop obj gets a mousedown" ilk="function" line="450" lineend="450" name="onMouseDown" signature="onMouseDown(e)">
              <variable citdl="Event" doc="the mousedown event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Event handler that fires when a drag/drop obj gets a mouseup" ilk="function" line="457" lineend="457" name="onMouseUp" signature="onMouseUp(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Override the onAvailable method to do what is needed after the initial&#xA;position was determined." ilk="function" line="464" lineend="465" name="onAvailable" signature="onAvailable()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="Object" doc="* Provides default constraint padding to &quot;constrainTo&quot;&#xA;elements (defaults to {left: 0, right:0, top:0, bottom:0})." line="471" lineend="471" name="defaultPadding">
              <variable citdl="Number" line="471" name="top" />
              <variable citdl="Number" line="471" name="right" />
              <variable citdl="Number" line="471" name="bottom" />
              <variable citdl="Number" line="471" name="left" />
            </variable>
            <scope doc="* Initializes the drag drop object&apos;s constraints to restrict&#xA;movement to a certain element." ilk="function" line="498" lineend="525" name="constrainTo" signature="constrainTo(constrainTo, pad, inContent)">
              <variable ilk="argument" name="constrainTo" />
              <variable ilk="argument" name="pad" />
              <variable ilk="argument" name="inContent" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Ext.get().getBox()" line="503" name="b" />
              <variable attributes="__local__ private" citdl="Ext.get()" line="504" name="ce" />
              <variable attributes="__local__ private" citdl="ce.getScroll()" line="505" name="s" />
              <variable attributes="__local__ private" line="506" lineend="511" name="c">
                <variable citdl="s.top" line="508" name="y" />
                <variable citdl="s.left" line="508" name="x" />
                <variable citdl="Ext.lib.Dom.getViewHeight()" line="508" name="height" />
                <variable citdl="Ext.lib.Dom.getViewWidth()" line="508" name="width" />
              </variable>
              <variable attributes="__local__ private" citdl="ce.dom" line="506" name="cd" />
              <variable attributes="__local__ private" citdl="b.y" line="515" name="topSpace" />
              <variable attributes="__local__ private" citdl="b.x" line="516" name="leftSpace" />
            </scope>
            <scope doc="Returns a reference to the linked element" ilk="function" line="532" lineend="538" name="getEl" returns="HTMLElement" signature="getEl()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Returns a reference to the actual element to drag.  By default this is&#xA;the same as the html element, but it can be assigned to another&#xA;element. An example of this can be found in Ext.dd.DDProxy" ilk="function" line="547" lineend="549" name="getDragEl" returns="HTMLElement" signature="getDragEl()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Sets up the DragDrop object.  Must be called in the constructor of any&#xA;Ext.dd.DragDrop subclass" ilk="function" line="559" lineend="563" name="init" signature="init(id, sGroup, config)">
              <variable doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related items" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="configuration attributes" ilk="argument" name="config" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Initializes Targeting functionality only... the object does not&#xA;get a mousedown handler." ilk="function" line="573" lineend="610" name="initTarget" signature="initTarget(id, sGroup, config)">
              <variable doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related items" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="configuration attributes" ilk="argument" name="config" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="Ext.dd.DDM" doc="create a local reference to the drag and drop manager" line="579" name="DDM" />
            <scope doc="Applies the configuration parameters that were passed into the constructor.&#xA;This is supposed to happen at each level through the inheritance chain.  So&#xA;a DDProxy implentation will execute apply config on DDProxy, DD, and&#xA;DragDrop in order to get all of the parameters that are available in&#xA;each object." ilk="function" line="620" lineend="629" name="applyConfig" signature="applyConfig()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Executed when the linked element is available" ilk="function" line="636" lineend="640" name="handleOnAvailable" signature="handleOnAvailable()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Configures the padding for the target zone in px.  Effectively expands&#xA;(or reduces) the virtual object size for targeting calculations.&#xA;Supports css-style shorthand; if only one parameter is passed, all sides&#xA;will have that padding, and if only two are passed, the top and bottom&#xA;will have the first param, the left and right the second." ilk="function" line="654" lineend="663" name="setPadding" signature="setPadding(iTop, iRight, iBot, iLeft)">
              <variable citdl="Number" doc="Top pad" ilk="argument" name="iTop" />
              <variable citdl="Number" doc="Right pad" ilk="argument" name="iRight" />
              <variable citdl="Number" doc="Bot pad" ilk="argument" name="iBot" />
              <variable citdl="Number" doc="Left pad" ilk="argument" name="iLeft" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Stores the initial placement of the linked element." ilk="function" line="671" lineend="691" name="setInitPosition" signature="setInitPosition(diffX, diffY)">
              <variable citdl="Number" doc="the X offset, default 0" ilk="argument" name="diffX" />
              <variable citdl="Number" doc="the Y offset, default 0" ilk="argument" name="diffY" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="672" name="el" />
              <variable attributes="__local__ private" citdl="diffX" line="678" name="dx" />
              <variable attributes="__local__ private" citdl="diffY" line="679" name="dy" />
              <variable attributes="__local__ private" citdl="Dom.getXY()" line="681" name="p" />
            </scope>
            <variable citdl="p[0]" line="683" name="initPageX" />
            <variable citdl="p[1]" line="684" name="initPageY" />
            <variable citdl="p[0]" line="686" name="lastPageX" />
            <variable citdl="p[1]" line="687" name="lastPageY" />
            <scope attributes="private" doc="PRIVATE: Sets the start position of the element.  This is set when the obj&#xA;is initialized, the reset when a drag is started." ilk="function" line="700" lineend="706" name="setStartPosition" signature="setStartPosition(pos)">
              <variable doc="current position (from previous lookup)" ilk="argument" name="pos" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="pos" line="701" name="p" />
            </scope>
            <variable line="702" name="deltaSetXY" />
            <scope doc="Add this instance to a group of related drag/drop objects.  All&#xA;instances belong to at least one group, and can belong to as many&#xA;groups as needed." ilk="function" line="715" lineend="718" name="addToGroup" signature="addToGroup(sGroup)">
              <variable citdl="String" doc="the name of the group" ilk="argument" name="sGroup" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Remove&apos;s this instance from the supplied interaction group" ilk="function" line="725" lineend="731" name="removeFromGroup" signature="removeFromGroup(sGroup)">
              <variable citdl="String" doc="The group to drop" ilk="argument" name="sGroup" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Allows you to specify that an element other than the linked element&#xA;will be moved with the cursor during a drag" ilk="function" line="739" lineend="741" name="setDragElId" signature="setDragElId(id)">
              <variable citdl="String" doc="the id of the element that will be used to initiate the drag" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Allows you to specify a child of the linked element that should be&#xA;used to initiate the drag operation.  An example of this would be if&#xA;you have a content div with text and links.  Clicking anywhere in the&#xA;content area would normally start the drag operation.  Use this method&#xA;to specify that an element inside of the content div is the element&#xA;that starts the drag operation." ilk="function" line="754" lineend="760" name="setHandleElId" signature="setHandleElId(id)">
              <variable citdl="String" doc="the id of the element that will be used to&#xA;initiate the drag." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Allows you to set an element outside of the linked element as a drag&#xA;handle" ilk="function" line="768" lineend="777" name="setOuterHandleElId" signature="setOuterHandleElId(id)">
              <variable doc="the id of the element that will be used to initiate the drag" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Remove all drag and drop hooks for this element" ilk="function" line="783" lineend="788" name="unreg" signature="unreg()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope ilk="function" line="790" lineend="792" name="destroy" signature="destroy()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Returns true if this instance is locked, or the drag drop mgr is locked&#xA;(meaning that all drag/drop is disabled on the page.)" ilk="function" line="801" lineend="803" name="isLocked" returns="Boolean" signature="isLocked()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Fired when this object is clicked" ilk="function" line="812" lineend="843" name="handleMouseDown" signature="handleMouseDown(e, oDD)">
              <variable citdl="Event" ilk="argument" name="e" />
              <variable citdl="Ext.dd.DragDrop" doc="the clicked dd object (this dd obj)" ilk="argument" name="oDD" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Ext.lib.Point" line="823" name="pt" />
            </scope>
            <scope ilk="function" line="845" lineend="850" name="clickValidator" signature="clickValidator(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="e.getTarget()" line="846" name="target" />
            </scope>
            <scope doc="Allows you to specify a tag name that should not start a drag operation&#xA;when clicked.  This is designed to facilitate embedding links within a&#xA;drag handle that do something other than start the drag." ilk="function" line="859" lineend="862" name="addInvalidHandleType" signature="addInvalidHandleType(tagName)">
              <variable citdl="String" doc="the type of element to exclude" ilk="argument" name="tagName" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="tagName.toUpperCase()" line="860" name="type" />
            </scope>
            <scope doc="Lets you to specify an element id for a child of a drag handle&#xA;that should not initiate a drag" ilk="function" line="870" lineend="875" name="addInvalidHandleId" signature="addInvalidHandleId(id)">
              <variable citdl="String" doc="the element id of the element you wish to ignore" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Lets you specify a css class of elements that will not initiate a drag" ilk="function" line="882" lineend="884" name="addInvalidHandleClass" signature="addInvalidHandleClass(cssClass)">
              <variable citdl="String" doc="the class of the elements you wish to ignore" ilk="argument" name="cssClass" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Unsets an excluded tag name set by addInvalidHandleType" ilk="function" line="891" lineend="895" name="removeInvalidHandleType" signature="removeInvalidHandleType(tagName)">
              <variable citdl="String" doc="the type of element to unexclude" ilk="argument" name="tagName" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="tagName.toUpperCase()" line="892" name="type" />
            </scope>
            <scope doc="Unsets an invalid handle id" ilk="function" line="902" lineend="907" name="removeInvalidHandleId" signature="removeInvalidHandleId(id)">
              <variable citdl="String" doc="the id of the element to re-enable" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Unsets an invalid css class" ilk="function" line="915" lineend="921" name="removeInvalidHandleClass" signature="removeInvalidHandleClass(cssClass)">
              <variable citdl="String" doc="the class of the element(s) you wish to&#xA;re-enable" ilk="argument" name="cssClass" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Checks the tag exclusion list to see if this click should be ignored" ilk="function" line="929" lineend="949" name="isValidHandleChild" returns="Boolean" signature="isValidHandleChild(node)">
              <variable citdl="HTMLElement" doc="the HTMLElement to evaluate" ilk="argument" name="node" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="931" name="valid" />
              <variable attributes="__local__ private" citdl="node.nodeName.toUpperCase()" doc="var n = (node.nodeName == &quot;#text&quot;) ? node.parentNode : node;" line="933" name="nodeName" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Create the array of horizontal tick marks if an interval was specified&#xA;in setXConstraint()." ilk="function" line="957" lineend="978" name="setXTicks" signature="setXTicks(iStartX, iTickSize)">
              <variable ilk="argument" name="iStartX" />
              <variable ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="961" lineend="961" name="tickMap" />
            </scope>
            <variable citdl="iTickSize" line="959" name="xTickSize" />
            <scope attributes="private" doc="PRIVATE: Create the array of vertical tick marks if an interval was specified in&#xA;setYConstraint()." ilk="function" line="986" lineend="1007" name="setYTicks" signature="setYTicks(iStartY, iTickSize)">
              <variable ilk="argument" name="iStartY" />
              <variable ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="990" lineend="990" name="tickMap" />
            </scope>
            <variable citdl="iTickSize" line="988" name="yTickSize" />
            <scope doc="By default, the element can be dragged any place on the screen.  Use&#xA;this method to limit the horizontal travel of the element.  Pass in&#xA;0,0 for the parameters if you want to lock the drag to the y axis." ilk="function" line="1021" lineend="1030" name="setXConstraint" signature="setXConstraint(iLeft, iRight, iTickSize)">
              <variable citdl="Number" doc="the number of pixels the element can move to the left" ilk="argument" name="iLeft" />
              <variable citdl="Number" doc="the number of pixels the element can move to the&#xA;right" ilk="argument" name="iRight" />
              <variable citdl="Number" doc="optional parameter for specifying that the&#xA;element&#xA;should move iTickSize pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="iLeft" line="1022" name="leftConstraint" />
            <variable citdl="iRight" line="1023" name="rightConstraint" />
            <scope doc="Clears any constraints applied to this instance.  Also clears ticks&#xA;since they can&apos;t exist independent of a constraint at this time." ilk="function" line="1037" lineend="1041" name="clearConstraints" signature="clearConstraints()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Clears any tick interval defined for this instance" ilk="function" line="1047" lineend="1052" name="clearTicks" signature="clearTicks()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="By default, the element can be dragged any place on the screen.  Set&#xA;this to limit the vertical travel of the element.  Pass in 0,0 for the&#xA;parameters if you want to lock the drag to the x axis." ilk="function" line="1064" lineend="1074" name="setYConstraint" signature="setYConstraint(iUp, iDown, iTickSize)">
              <variable citdl="Number" doc="the number of pixels the element can move up" ilk="argument" name="iUp" />
              <variable citdl="Number" doc="the number of pixels the element can move down" ilk="argument" name="iDown" />
              <variable citdl="Number" doc="optional parameter for specifying that the&#xA;element should move iTickSize pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="iUp" line="1065" name="topConstraint" />
            <variable citdl="iDown" line="1066" name="bottomConstraint" />
            <scope doc="resetConstraints must be called if you manually reposition a dd element." ilk="function" line="1081" lineend="1108" name="resetConstraints" signature="resetConstraints()">
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" doc="figure out how much this thing has moved" line="1087" name="dx" />
              <variable attributes="__local__ private" line="1088" name="dy" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Normally the drag element is moved pixel by pixel, but we can specify&#xA;that it move a number of pixels at a time.  This method resolves the&#xA;location when we have it set up like this." ilk="function" line="1120" lineend="1144" name="getTick" returns="Number" signature="getTick(val, tickArray)">
              <variable citdl="Number" doc="where we want to place the object" ilk="argument" name="val" />
              <variable citdl="Array" doc="sorted array of valid points" ilk="argument" name="tickArray" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="i" line="1132" name="next" />
              <variable attributes="__local__ private" citdl="val" line="1134" name="diff1" />
              <variable attributes="__local__ private" citdl="tickArray[next]" line="1135" name="diff2" />
            </scope>
            <scope doc="toString method" ilk="function" line="1151" lineend="1153" name="toString" returns="String" signature="toString()">
              <variable citdl="DragDrop" name="this" />
            </scope>
          </scope>
          <variable citdl="Object" line="1178" lineend="2441" name="DragDropMgr">
            <variable attributes="private __static__" citdl="String" doc="PRIVATE STATIC: Two dimensional Array of registered DragDrop objects.  The first&#xA;dimension is the DragDrop item group, the second the DragDrop&#xA;object." line="1193" lineend="2184" name="ids" />
            <variable attributes="private __static__" citdl="String" doc="PRIVATE STATIC: Array of element ids defined as drag handles.  Used to determine&#xA;if the element that generated the mousedown event is actually the&#xA;handle and not the html element itself." line="1204" lineend="1204" name="handleIds" />
            <variable attributes="private __static__" citdl="DragDrop" doc="PRIVATE STATIC: the DragDrop object that is currently being dragged&#xA;**/" line="1213" name="dragCurrent" />
            <variable attributes="private __static__" citdl="Array" doc="PRIVATE STATIC: the DragDrop object(s) that are being hovered over" line="1222" lineend="1751" name="dragOvers" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: the X distance between the cursor and the object being dragged" line="1231" name="deltaX" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: the Y distance between the cursor and the object being dragged" line="1240" name="deltaY" />
            <variable attributes="__static__" citdl="Boolean" doc="STATIC: Flag to determine if we should prevent the default behavior of the&#xA;events we define. By default this is true, but this can be set to&#xA;false if you need the default behavior (not recommended)" line="1250" name="preventDefault" />
            <variable attributes="__static__" citdl="Boolean" doc="STATIC: Flag to determine if we should stop the propagation of the events&#xA;we generate. This is true by default but you may want to set it to&#xA;false if the html element contains other features that require the&#xA;mouse click." line="1261" name="stopPropagation" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Internal flag that is set to true when drag and drop has been&#xA;intialized" line="1270" name="initalized" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: All drag and drop can be disabled." line="1278" name="locked" />
            <scope attributes="private __static__" doc="PRIVATE STATIC: Called the first time an element is registered." ilk="function" line="1286" lineend="1288" name="init" signature="init()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <variable citdl="Boolean" line="1287" name="initialized" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: In point mode, drag and drop interaction is defined by the&#xA;location of the cursor during the drag/drop" line="1297" name="POINT" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: In intersect mode, drag and drop interactio nis defined by the&#xA;overlap of two or more drag and drop objects." line="1306" name="INTERSECT" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: The current drag and drop mode.  Default: POINT" line="1314" name="mode" />
            <scope attributes="private __static__" doc="PRIVATE STATIC: Runs method on all drag and drop objects" ilk="function" line="1322" lineend="1332" name="_execOnAll" signature="_execOnAll(sMethod, args)">
              <variable ilk="argument" name="sMethod" />
              <variable ilk="argument" name="args" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.ids[i][j]" line="1325" name="oDD" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Drag and drop initialization.  Sets up the global event handlers" ilk="function" line="1340" lineend="1351" name="_onLoad" signature="_onLoad()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Reset constraints on all drag and drop objs" ilk="function" line="1359" lineend="1361" name="_onResize" signature="_onResize(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Lock all drag and drop functionality" ilk="function" line="1368" lineend="1368" name="lock" signature="lock()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Unlock all drag and drop functionality" ilk="function" line="1375" lineend="1375" name="unlock" signature="unlock()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Is drag and drop locked?" ilk="function" line="1383" lineend="1383" name="isLocked" returns="Boolean" signature="isLocked()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Location cache that is set for all drag drop objects when a drag is&#xA;initiated, cleared when the drag is finished." line="1392" lineend="1392" name="locationCache" />
            <variable attributes="__static__" citdl="Boolean" doc="STATIC: Set useCache to false if you want to force object the lookup of each&#xA;drag and drop linked element constantly during a drag." line="1401" name="useCache" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: The number of pixels that the mouse needs to move after the&#xA;mousedown before the drag is initiated.  Default=3;" line="1410" name="clickPixelThresh" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: The number of milliseconds after the mousedown event to initiate the&#xA;drag if we don&apos;t get a mouseup event. Default=1000" line="1419" name="clickTimeThresh" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Flag that indicates that either the drag pixel threshold or the&#xA;mousdown time threshold has been met" line="1429" name="dragThreshMet" />
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Timeout used for the click time threshold" line="1438" name="clickTimeout" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: The X position of the mousedown event stored for later use when a&#xA;drag threshold is met." line="1448" name="startX" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: The Y position of the mousedown event stored for later use when a&#xA;drag threshold is met." line="1458" name="startY" />
            <scope attributes="__static__" doc="STATIC: Each DragDrop instance must be registered with the DragDropMgr.&#xA;This is executed in DragDrop.init()" ilk="function" line="1468" lineend="1475" name="regDragDrop" signature="regDragDrop(oDD, sGroup)">
              <variable citdl="DragDrop" doc="the DragDrop object to register" ilk="argument" name="oDD" />
              <variable citdl="String" doc="the name of the group this element belongs to" ilk="argument" name="sGroup" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Removes the supplied dd instance from the supplied group. Executed&#xA;by DragDrop.removeFromGroup, so don&apos;t call this function directly." ilk="function" line="1484" lineend="1493" name="removeDDFromGroup" signature="removeDDFromGroup(oDD, sGroup)">
              <variable ilk="argument" name="oDD" />
              <variable ilk="argument" name="sGroup" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.ids[sGroup]" line="1489" name="obj" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Unregisters a drag and drop item.  This is executed in&#xA;DragDrop.unreg, use that method instead of calling this directly." ilk="function" line="1502" lineend="1509" name="_remove" signature="_remove(oDD)">
              <variable ilk="argument" name="oDD" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Each DragDrop handle element must be registered.  This is done&#xA;automatically when executing DragDrop.setHandleElId()" ilk="function" line="1520" lineend="1525" name="regHandle" signature="regHandle(sDDId, sHandleId)">
              <variable citdl="String" doc="the DragDrop id this element is a handle for" ilk="argument" name="sDDId" />
              <variable citdl="String" doc="the id of the element that is the drag&#xA;handle" ilk="argument" name="sHandleId" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Utility function to determine if a given element has been&#xA;registered as a drag drop item." ilk="function" line="1536" lineend="1538" name="isDragDrop" returns="Boolean" signature="isDragDrop(id)">
              <variable citdl="String" doc="the element id to check" ilk="argument" name="id" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the drag and drop instances that are in all groups the&#xA;passed in instance belongs to." ilk="function" line="1549" lineend="1564" name="getRelated" returns="Array" signature="getRelated(p_oDD, bTargetsOnly)">
              <variable citdl="DragDrop" doc="the obj to get related data for" ilk="argument" name="p_oDD" />
              <variable citdl="Boolean" doc="if true, only return targetable objs" ilk="argument" name="bTargetsOnly" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="1550" name="oDDs" />
              <variable attributes="__local__ private" citdl="this.ids[i][j]" line="1553" name="dd" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns true if the specified dd target is a legal target for&#xA;the specifice drag obj" ilk="function" line="1576" lineend="1585" name="isLegalTarget" returns="Boolean" signature="isLegalTarget(oDD, oTargetDD)">
              <variable ilk="argument" name="oDD" />
              <variable ilk="argument" name="oTargetDD" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.getRelated()" line="1577" name="targets" />
            </scope>
            <scope attributes="__static__" doc="STATIC: My goal is to be able to transparently determine if an object is&#xA;typeof DragDrop, and the exact subclass of DragDrop.  typeof&#xA;returns &quot;object&quot;, oDD.constructor.toString() always returns&#xA;&quot;DragDrop&quot; and not the name of the subclass.  So for now it just&#xA;evaluates a well-known variable in DragDrop." ilk="function" line="1598" lineend="1600" name="isTypeOfDD" returns="Boolean" signature="isTypeOfDD(oDD)">
              <variable ilk="argument" name="oDD" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Utility function to determine if a given element has been&#xA;registered as a drag drop handle for the given Drag Drop object." ilk="function" line="1611" lineend="1614" name="isHandle" returns="Boolean" signature="isHandle(sDDId, sHandleId)">
              <variable ilk="argument" name="sDDId" />
              <variable ilk="argument" name="sHandleId" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the DragDrop instance for a given id" ilk="function" line="1623" lineend="1630" name="getDDById" returns="DragDrop" signature="getDDById(id)">
              <variable citdl="String" doc="the id of the DragDrop object" ilk="argument" name="id" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Fired after a registered DragDrop object gets the mousedown event.&#xA;Sets up the events required to track the object being dragged" ilk="function" line="1641" lineend="1666" name="handleMouseDown" signature="handleMouseDown(e, oDD)">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
              <variable doc="the DragDrop object being dragged" ilk="argument" name="oDD" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="oDD.getEl()" line="1649" name="el" />
            </scope>
            <variable citdl="e.getTarget()" line="1645" name="currentTarget" />
            <scope attributes="__static__" doc="STATIC: Fired when either the drag pixel threshol or the mousedown hold&#xA;time threshold has been met." ilk="function" line="1676" lineend="1683" name="startDrag" signature="startDrag(x, y)">
              <variable citdl="Number" doc="the X position of the original mousedown" ilk="argument" name="x" />
              <variable citdl="Number" doc="the Y position of the original mousedown" ilk="argument" name="y" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Internal function to handle the mouseup event.  Will be invoked&#xA;from the context of the document." ilk="function" line="1693" lineend="1712" name="handleMouseUp" signature="handleMouseUp(e)">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Utility to stop event propagation and event default, if these&#xA;features are turned on." ilk="function" line="1721" lineend="1729" name="stopEvent" signature="stopEvent(e)">
              <variable citdl="Event" doc="the event as returned by this.getEvent()" ilk="argument" name="e" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Internal function to clean up event handlers after the drag&#xA;operation is complete" ilk="function" line="1739" lineend="1752" name="stopDrag" signature="stopDrag(e)">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Internal function to handle the mousemove event.  Will be invoked&#xA;from the context of the html element." ilk="function" line="1768" lineend="1801" name="handleMouseMove" returns="Boolean" signature="handleMouseMove(e)">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="Math.abs()" line="1782" name="diffX" />
              <variable attributes="__local__ private" citdl="Math.abs()" line="1783" name="diffY" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Iterates over all of the DragDrop elements to find ones we are&#xA;hovering over or dropping on" ilk="function" line="1812" lineend="1937" name="fireEvents" signature="fireEvents(e, isDrop)">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
              <variable citdl="Boolean" doc="is this a drop op or a mouseover op?" ilk="argument" name="isDrop" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.dragCurrent" line="1813" name="dc" />
              <variable attributes="__local__ private" citdl="e.getPoint()" line="1821" name="pt" />
              <variable attributes="__local__ private" citdl="Array" doc="cache the previous dragOver array" line="1824" name="oldOvers" />
              <variable attributes="__local__ private" citdl="Array" line="1826" name="outEvts" />
              <variable attributes="__local__ private" citdl="Array" line="1827" name="overEvts" />
              <variable attributes="__local__ private" citdl="Array" line="1828" name="dropEvts" />
              <variable attributes="__local__ private" citdl="Array" line="1829" name="enterEvts" />
              <variable attributes="__local__ private" citdl="this.dragOvers[i]" line="1835" name="ddo" />
              <variable attributes="__local__ private" citdl="this.ids[sGroup][i]" line="1856" name="oDD" />
              <variable attributes="__local__ private" citdl="Number" doc="fire dragout events" line="1906" name="len" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Helper function for getting the best match from the list of drag&#xA;and drop objects returned by the drag and drop events when we are&#xA;in INTERSECT mode.  It returns either the first object that the&#xA;cursor is over, or the object that has the greatest overlap with&#xA;the dragged element." ilk="function" line="1951" lineend="1984" name="getBestMatch" returns="DragDrop" signature="getBestMatch(dds)">
              <variable citdl="Array" doc="The array of drag and drop objects&#xA;targeted" ilk="argument" name="dds" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="dds[0]" line="1952" name="winner" />
              <variable attributes="__local__ private" citdl="dds.length" doc="} else if (dds.length == 1) {" line="1959" name="len" />
              <variable attributes="__local__ private" citdl="dds[i]" line="1966" name="dd" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Refreshes the cache of the top-left and bottom-right points of the&#xA;drag and drop objects in the specified group(s).  This is in the&#xA;format that is stored in the drag and drop instance, so typical&#xA;usage is:&#xA;&lt;code&gt;&#xA;Ext.dd.DragDropMgr.refreshCache(ddinstance.groups);&#xA;&lt;/code&gt;&#xA;Alternatively:&#xA;&lt;code&gt;&#xA;Ext.dd.DragDropMgr.refreshCache({group1:true, group2:true});&#xA;&lt;/code&gt;" ilk="function" line="2004" lineend="2026" name="refreshCache" signature="refreshCache(groups)">
              <variable citdl="Object" doc="an associative array of groups to refresh" ilk="argument" name="groups" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.ids[sGroup][i]" line="2010" name="oDD" />
              <variable attributes="__local__ private" citdl="this.getLocation()" doc="if (this.isTypeOfDD(oDD) &amp;&amp; oDD.isTarget) {" line="2014" name="loc" />
            </scope>
            <scope attributes="__static__" doc="STATIC: This checks to make sure an element exists and is in the DOM.  The&#xA;main purpose is to handle cases where innerHTML is used to remove&#xA;drag and drop objects from the DOM.  IE provides an &apos;unspecified&#xA;error&apos; when trying to access the offsetParent of such an element" ilk="function" line="2038" lineend="2054" name="verifyEl" returns="Boolean" signature="verifyEl(el)">
              <variable citdl="HTMLElement" doc="the element to check" ilk="argument" name="el" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="el.offsetParent" line="2040" name="parent" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns a Region object containing the drag and drop element&apos;s position&#xA;and size, including the padding configured for it" ilk="function" line="2067" lineend="2093" name="getLocation" returns="Ext.lib.Region" signature="getLocation(oDD)">
              <variable citdl="DragDrop" doc="the drag and drop object to get the&#xA;location for" ilk="argument" name="oDD" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="oDD.getEl()" line="2072" name="el" />
              <variable attributes="__local__ private" citdl="y1" line="2072" name="y2" />
              <variable attributes="__local__ private" citdl="Ext.lib.Dom.getXY()" line="2072" name="pos" />
              <variable attributes="__local__ private" citdl="x1" line="2072" name="l" />
              <variable attributes="__local__ private" citdl="pos[1]" line="2072" name="y1" />
              <variable attributes="__local__ private" citdl="x2" line="2072" name="r" />
              <variable attributes="__local__ private" citdl="y1" line="2072" name="t" />
              <variable attributes="__local__ private" citdl="x1" line="2072" name="x2" />
              <variable attributes="__local__ private" citdl="pos[0]" line="2072" name="x1" />
              <variable attributes="__local__ private" citdl="y2" line="2072" name="b" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Checks the cursor location to see if it over the target" ilk="function" line="2104" lineend="2152" name="isOverTarget" returns="Boolean" signature="isOverTarget(pt, oTarget, intersect)">
              <variable citdl="Ext.lib.Point" doc="The point to evaluate" ilk="argument" name="pt" />
              <variable citdl="DragDrop" doc="the DragDrop object we are inspecting" ilk="argument" name="oTarget" />
              <variable ilk="argument" name="intersect" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.locationCache[oTarget.id]" doc="use cache if available" line="2106" name="loc" />
              <variable attributes="__local__ private" citdl="this.dragCurrent" doc="dragged element." line="2124" name="dc" />
              <variable attributes="__local__ private" citdl="dc.getTargetCoord()" doc="need to consider constraints and ticks as well." line="2136" name="pos" />
              <variable attributes="__local__ private" citdl="dc.getDragEl()" line="2138" name="el" />
              <variable attributes="__local__ private" citdl="Ext.lib.Region" line="2142" name="curRegion" />
              <variable attributes="__local__ private" citdl="curRegion.intersect()" line="2144" name="overlap" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: unload event handler" ilk="function" line="2160" lineend="2162" name="_onUnload" signature="_onUnload(e, me)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="me" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Cleans up the drag and drop events and objects." ilk="function" line="2170" lineend="2185" name="unregAll" signature="unregAll()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <variable citdl="Object" line="2183" lineend="2193" name="elementCache" />
            <scope attributes="deprecated private __static__" doc="DEPRECATED PRIVATE STATIC: Get the wrapper for the DOM element specified" ilk="function" line="2204" lineend="2211" name="getElWrapper" returns="Ext.dd.DDM.ElementWrapper" signature="getElWrapper(id)">
              <variable citdl="String" doc="the id of the element to get" ilk="argument" name="id" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.elementCache[id]" line="2205" name="oWrapper" />
            </scope>
            <variable line="2208" name="elementCache[id]" />
            <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the actual DOM element" ilk="function" line="2221" lineend="2223" name="getElement" returns="Object" signature="getElement(id)">
              <variable citdl="String" doc="the id of the elment to get" ilk="argument" name="id" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the style property for the DOM element (i.e.,&#xA;document.getElById(id).style)" ilk="function" line="2234" lineend="2237" name="getCss" returns="Object" signature="getCss(id)">
              <variable citdl="String" doc="the id of the elment to get" ilk="argument" name="id" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="Ext.getDom()" line="2235" name="el" />
            </scope>
            <scope ilk="class" line="2246" lineend="2262" name="ElementWrapper">
              <scope attributes="__ctor__ deprecated private" doc="DEPRECATED PRIVATE: Inner class for cached elements" ilk="function" line="2246" lineend="2262" name="ElementWrapper" signature="ElementWrapper(el)">
                <variable ilk="argument" name="el" />
                <variable citdl="ElementWrapper" name="this" />
              </scope>
              <variable citdl="el" doc="The element" line="2251" name="el" />
              <variable citdl="this.el" doc="The element id" line="2256" name="id" />
              <variable citdl="this.el" doc="A reference to the style property" line="2261" name="css" />
            </scope>
            <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the X position of an html element" ilk="function" line="2273" lineend="2275" name="getPosX" returns="Number" signature="getPosX(el)">
              <variable doc="the element for which to get the position" ilk="argument" name="el" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the Y position of an html element" ilk="function" line="2285" lineend="2287" name="getPosY" returns="Number" signature="getPosY(el)">
              <variable doc="the element for which to get the position" ilk="argument" name="el" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Swap two nodes.  In IE, we use the native method, for others we&#xA;emulate the IE behavior" ilk="function" line="2297" lineend="2313" name="swapNode" signature="swapNode(n1, n2)">
              <variable doc="the first node to swap" ilk="argument" name="n1" />
              <variable doc="the other node to swap" ilk="argument" name="n2" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="n2.parentNode" line="2301" name="p" />
              <variable attributes="__local__ private" citdl="n2.nextSibling" line="2302" name="s" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Returns the current scroll position" ilk="function" line="2321" lineend="2333" name="getScroll" signature="getScroll()">
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="document.body" line="2322" name="db" />
              <variable attributes="__local__ private" citdl="dde.scrollTop" line="2322" name="t" />
              <variable attributes="__local__ private" citdl="document.documentElement" line="2322" name="dde" />
              <variable attributes="__local__ private" citdl="dde.scrollLeft" line="2322" name="l" />
            </scope>
            <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the specified element style property" ilk="function" line="2344" lineend="2346" name="getStyle" returns="String" signature="getStyle(el, styleProp)">
              <variable citdl="HTMLElement" doc="the element" ilk="argument" name="el" />
              <variable citdl="String" doc="the style property" ilk="argument" name="styleProp" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Gets the scrollTop" ilk="function" line="2354" lineend="2354" name="getScrollTop" returns="Number" signature="getScrollTop()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Gets the scrollLeft" ilk="function" line="2362" lineend="2362" name="getScrollLeft" returns="Number" signature="getScrollLeft()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Sets the x/y position of an element to the location of the&#xA;target element." ilk="function" line="2372" lineend="2375" name="moveToEl" signature="moveToEl(moveEl, targetEl)">
              <variable citdl="HTMLElement" doc="The element to move" ilk="argument" name="moveEl" />
              <variable citdl="HTMLElement" doc="The position reference element" ilk="argument" name="targetEl" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="Ext.lib.Dom.getXY()" line="2373" name="aCoord" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Numeric array sort function" ilk="function" line="2382" lineend="2382" name="numericSort" signature="numericSort(a, b)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Internal counter" line="2390" name="_timeoutCount" />
            <scope attributes="private __static__" doc="PRIVATE STATIC: Trying to make the load order less important.  Without this we get&#xA;an error if this file is loaded before the Event Utility." ilk="function" line="2399" lineend="2412" name="_addListeners" signature="_addListeners()">
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="Ext.dd.DDM" line="2400" name="DDM" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Recursively searches the immediate parent and all child nodes for&#xA;the handle element in order to determine wheter or not it was&#xA;clicked." ilk="function" line="2422" lineend="2439" name="handleWasClicked" returns="Boolean" signature="handleWasClicked(node, id)">
              <variable doc="the html element to inspect" ilk="argument" name="node" />
              <variable ilk="argument" name="id" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="node.parentNode" doc="check to see if this is a text node child of the one we want" line="2427" name="p" />
            </scope>
          </variable>
          <variable citdl="Ext.dd.DragDropMgr" doc="shorter alias, save a few bytes" line="2446" name="DDM" />
          <scope ilk="class" line="2463" lineend="2467" name="DD">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A DragDrop implementation where the linked element follows the&#xA;mouse cursor during a drag." ilk="function" line="2463" lineend="2467" name="DD" signature="DD(id, sGroup, config)">
              <variable citdl="String" doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop items" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DD:&#xA;scroll" ilk="argument" name="config" />
              <variable citdl="DD" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="2759" lineend="2764" name="DDProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A DragDrop implementation that inserts an empty, bordered div into&#xA;the document that follows the cursor during drag operations.  At the time of&#xA;the click, the frame div is resized to the dimensions of the linked html&#xA;element, and moved to the exact location of the linked element.&#xA;&#xA;References to the &quot;frame&quot; element refer to the single proxy element that&#xA;was created to be dragged in place of all DDProxy elements on the&#xA;page." ilk="function" line="2759" lineend="2764" name="DDProxy" signature="DDProxy(id, sGroup, config)">
              <variable citdl="String" doc="the id of the linked html element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DDProxy in addition to those in DragDrop:&#xA;resizeFrame, centerFrame, dragElId" ilk="argument" name="config" />
              <variable citdl="DDProxy" name="this" />
            </scope>
            <variable attributes="__static__" citdl="String" doc="STATIC: The default drag frame div id" line="2772" name="dragElId" />
          </scope>
          <scope ilk="class" line="2952" lineend="2956" name="DDTarget">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A DragDrop implementation that does not move, but can be a drop&#xA;target.  You would get the same result by simply omitting implementation&#xA;for the event callbacks, but this way we reduce the processing cost of the&#xA;event listener and the callbacks." ilk="function" line="2952" lineend="2956" name="DDTarget" signature="DDTarget(id, sGroup, config)">
              <variable citdl="String" doc="the id of the element that is a drop target" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DDTarget in addition to those in&#xA;DragDrop:&#xA;none" ilk="argument" name="config" />
              <variable citdl="DDTarget" name="this" />
            </scope>
          </scope>
        </variable>
        <scope ilk="class" line="19" lineend="25" name="PagingToolbar">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: A specialized toolbar that is bound to a {@link Ext.data.Store} and provides automatic paging controls." ilk="function" line="19" lineend="25" name="PagingToolbar" signature="PagingToolbar(el, ds, config)">
            <variable ilk="argument" name="el" />
            <variable ilk="argument" name="ds" />
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="PagingToolbar" name="this" />
          </scope>
          <variable citdl="ds" line="21" name="ds" />
          <variable citdl="Number" line="22" name="cursor" />
        </scope>
        <scope ilk="class" line="19" lineend="41" name="BoxComponent">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Base class for any visual {@link Ext.Component} that uses a box container.  BoxComponent provides automatic box&#xA;model adjustments for sizing and positioning and will work correctly withnin the Component rendering model.  All&#xA;container classes should subclass BoxComponent so that they will work consistently when nested within other Ext&#xA;layout containers." ilk="function" line="19" lineend="41" name="BoxComponent" signature="BoxComponent(config)">
            <variable citdl="Ext.Element/String/Object" doc="The configuration options." ilk="argument" name="config" />
            <variable citdl="BoxComponent" name="this" />
          </scope>
        </scope>
        <scope ilk="class" line="20" lineend="100" name="LoadMask">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: A simple utility class for generically masking elements while loading data.  If the element being masked has&#xA;an underlying {@link Ext.data.Store}, the masking will be automatically synchronized with the store&apos;s loading&#xA;process and the mask element will be cached for reuse.  For all other elements, this mask will replace the&#xA;element&apos;s UpdateManager load indicator and will be destroyed after the initial load." ilk="function" line="20" lineend="36" name="LoadMask" signature="LoadMask(el, config)">
            <variable citdl="String/HTMLElement/Ext.Element" doc="The element or DOM node, or its id" ilk="argument" name="el" />
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="LoadMask" name="this" />
            <variable attributes="__local__ private" citdl="this.el.getUpdateManager()" line="29" name="um" />
          </scope>
          <variable citdl="Ext.get()" line="21" name="el" />
          <variable citdl="Boolean" line="27" name="removeMask" />
          <variable citdl="String" doc="True to create a single-use mask that is automatically destroyed after loading (useful for page loads),&#xA;False to persist the mask element reference for multiple uses (e.g., for paged data widgets).  Defaults to false." line="48" name="msg" />
          <variable citdl="String" doc="The CSS class to apply to the loading message element (defaults to &quot;x-mask-loading&quot;)" line="53" name="msgCls" />
          <variable citdl="Boolean" doc="Read-only. True if the mask is currently disabled so that it will not be displayed (defaults to false)" line="59" name="disabled" />
          <scope doc="Disables the mask to prevent it from being displayed" ilk="function" line="64" lineend="66" name="disable" signature="disable()">
            <variable citdl="LoadMask" name="this" />
          </scope>
          <scope doc="Enables the mask so that it can be displayed" ilk="function" line="71" lineend="73" name="enable" signature="enable()">
            <variable citdl="LoadMask" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="76" lineend="78" name="onLoad" signature="onLoad()">
            <variable citdl="LoadMask" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="81" lineend="85" name="onBeforeLoad" signature="onBeforeLoad()">
            <variable citdl="LoadMask" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="88" lineend="99" name="destroy" signature="destroy()">
            <variable citdl="LoadMask" name="this" />
            <variable attributes="__local__ private" citdl="this.el.getUpdateManager()" line="94" name="um" />
          </scope>
        </scope>
        <scope ilk="class" line="22" lineend="31" name="SplitButton">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: A split button that provides a built-in dropdown arrow that can fire an event separately from the default&#xA;click event of the button.  Typically this would be used to display a dropdown menu that provides additional&#xA;options to the primary button action, but any custom handler can provide the arrowclick implementation." ilk="function" line="22" lineend="31" name="SplitButton" signature="SplitButton(renderTo, config)">
            <variable citdl="String/HTMLElement/Element" doc="The element to append the button to" ilk="argument" name="renderTo" />
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="SplitButton" name="this" />
          </scope>
        </scope>
        <variable citdl="Object" line="25" name="util">
          <scope doc="* Ext JS Library 1.1.1 * Copyright(c) 2006-2007, Ext JS,&#xA;LLC." ilk="class" line="9" lineend="92" name="TaskRunner">
            <scope attributes="__ctor__" doc="* Ext JS Library 1.1.1 * Copyright(c) 2006-2007, Ext JS,&#xA;LLC." ilk="function" line="9" lineend="92" name="TaskRunner" signature="TaskRunner(interval)">
              <variable ilk="argument" name="interval" />
              <variable citdl="TaskRunner" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="11" name="tasks" />
              <variable attributes="__local__ private" citdl="Array" line="11" name="removeQueue" />
              <variable attributes="__local__ private" citdl="Number" line="12" name="id" />
              <variable attributes="__local__ private" citdl="Boolean" line="13" name="running" />
              <scope attributes="__local__ private" ilk="function" line="15" lineend="19" name="stopThread" signature="stopThread()" />
              <scope attributes="__local__ private" ilk="function" line="21" lineend="26" name="startThread" signature="startThread()" />
              <scope attributes="__local__ private" ilk="function" line="28" lineend="33" name="removeTask" signature="removeTask(task)">
                <variable ilk="argument" name="task" />
              </scope>
              <scope attributes="__local__ private" ilk="function" line="35" lineend="62" name="runTasks" signature="runTasks()">
                <variable attributes="__local__ private" citdl="Date" line="46" name="now" />
                <variable attributes="__local__ private" citdl="tasks[i]" line="48" name="t" />
                <variable attributes="__local__ private" citdl="now" line="49" name="itime" />
                <variable attributes="__local__ private" citdl="t.run.apply()" line="51" name="rt" />
              </scope>
            </scope>
            <scope doc="Queues a new task." ilk="function" line="68" lineend="75" name="start" returns="task" signature="start(task)">
              <variable citdl="Object" ilk="argument" name="task" />
              <variable citdl="TaskRunner" name="this" />
            </scope>
            <scope ilk="function" line="77" lineend="80" name="stop" returns="task" signature="stop(task)">
              <variable ilk="argument" name="task" />
              <variable citdl="TaskRunner" name="this" />
            </scope>
            <scope ilk="function" line="82" lineend="91" name="stopAll" signature="stopAll()">
              <variable citdl="TaskRunner" name="this" />
            </scope>
          </scope>
          <variable citdl="Object" line="14" lineend="172" name="Format">
            <scope doc="Truncate a string and add an ellipsis (&apos;...&apos;) to the end if it exceeds the specified length" ilk="function" line="23" lineend="28" name="ellipsis" returns="String" signature="ellipsis(value, len)">
              <variable citdl="String" doc="The string to truncate" ilk="argument" name="value" />
              <variable ilk="argument" name="len" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Checks a reference and converts it to empty string if it is undefined" ilk="function" line="35" lineend="37" name="undef" returns="Mixed" signature="undef(value)">
              <variable citdl="Mixed" doc="Reference to check" ilk="argument" name="value" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Convert certain characters (&amp;, &lt;, &gt;, and &apos;) to their HTML character equivalents for literal display in web pages." ilk="function" line="44" lineend="46" name="htmlEncode" returns="String" signature="htmlEncode(value)">
              <variable citdl="String" doc="The string to encode" ilk="argument" name="value" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Convert certain characters (&amp;, &lt;, &gt;, and &apos;) from their HTML character equivalents." ilk="function" line="53" lineend="55" name="htmlDecode" returns="String" signature="htmlDecode(value)">
              <variable citdl="String" doc="The string to decode" ilk="argument" name="value" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Trims any whitespace from either side of a string" ilk="function" line="62" lineend="64" name="trim" returns="String" signature="trim(value)">
              <variable citdl="String" doc="The text to trim" ilk="argument" name="value" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Returns a substring from within an original string" ilk="function" line="73" lineend="75" name="substr" returns="String" signature="substr(value, start, length)">
              <variable citdl="String" doc="The original text" ilk="argument" name="value" />
              <variable citdl="Number" doc="The start index of the substring" ilk="argument" name="start" />
              <variable citdl="Number" doc="The length of the substring" ilk="argument" name="length" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Converts a string to all lower case letters" ilk="function" line="82" lineend="84" name="lowercase" returns="String" signature="lowercase(value)">
              <variable citdl="String" doc="The text to convert" ilk="argument" name="value" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Converts a string to all upper case letters" ilk="function" line="91" lineend="93" name="uppercase" returns="String" signature="uppercase(value)">
              <variable citdl="String" doc="The text to convert" ilk="argument" name="value" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Converts the first character only of a string to upper case" ilk="function" line="100" lineend="102" name="capitalize" returns="String" signature="capitalize(value)">
              <variable citdl="String" doc="The text to convert" ilk="argument" name="value" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="105" lineend="113" name="call" returns="eval().call()" signature="call(value, fn)">
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="fn" />
              <variable citdl="Format" name="this" />
              <variable attributes="__local__ private" citdl="Array.prototype.slice.call()" line="107" name="args" />
            </scope>
            <scope doc="Format a number as US currency" ilk="function" line="120" lineend="132" name="usMoney" returns="String" signature="usMoney(v)">
              <variable ilk="argument" name="v" />
              <variable citdl="Format" name="this" />
              <variable attributes="__local__ private" citdl="v.split()" line="124" name="ps" />
              <variable attributes="__local__ private" citdl="ps[0]" line="125" name="whole" />
              <variable attributes="__local__ private" citdl="ps[1]" line="126" name="sub" />
              <variable attributes="__local__ private" line="127" name="r" />
            </scope>
            <scope doc="Parse a value into a formatted date using the specified format pattern." ilk="function" line="140" lineend="148" name="date" returns="String" signature="date(v, format)">
              <variable ilk="argument" name="v" />
              <variable citdl="String" doc="(optional) Any valid date format string (defaults to &apos;m/d/Y&apos;)" ilk="argument" name="format" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Returns a date rendering function that can be reused to apply a date format multiple times efficiently" ilk="function" line="155" lineend="159" name="dateRenderer" returns="Function" signature="dateRenderer(format)">
              <variable citdl="String" doc="Any valid date format string" ilk="argument" name="format" />
              <variable citdl="Format" name="this" />
            </scope>
            <variable doc="private" line="162" name="stripTagsRE" />
            <scope doc="Strips all HTML tags" ilk="function" line="169" lineend="171" name="stripTags" returns="String" signature="stripTags(v)">
              <variable ilk="argument" name="v" />
              <variable citdl="Format" name="this" />
            </scope>
          </variable>
          <variable citdl="Object" line="14" lineend="162" name="CSS">
            <scope doc="Very simple dynamic creation of stylesheets from a text blob of rules.  The text will wrapped in a style&#xA;tag and appended to the HEAD of the document." ilk="function" line="29" lineend="52" name="createStyleSheet" returns="StyleSheet" signature="createStyleSheet(cssText, id)">
              <variable citdl="String" doc="The text containing the css rules" ilk="argument" name="cssText" />
              <variable citdl="String" doc="An id to add to the stylesheet for later removal" ilk="argument" name="id" />
              <variable citdl="CSS" name="this" />
              <variable attributes="__local__ private" citdl="rules.styleSheet" line="30" name="ss" />
              <variable attributes="__local__ private" citdl="doc.getElementsByTagName()[0]" line="31" name="head" />
              <variable attributes="__local__ private" citdl="doc.createElement()" line="32" name="rules" />
            </scope>
            <scope doc="Removes a style or link tag by id" ilk="function" line="58" lineend="63" name="removeStyleSheet" signature="removeStyleSheet(id)">
              <variable citdl="String" doc="The id of the tag" ilk="argument" name="id" />
              <variable citdl="CSS" name="this" />
              <variable attributes="__local__ private" citdl="doc.getElementById()" line="59" name="existing" />
            </scope>
            <scope doc="Dynamically swaps an existing stylesheet reference for a new one" ilk="function" line="70" lineend="78" name="swapStyleSheet" signature="swapStyleSheet(id, url)">
              <variable citdl="String" doc="The id of an existing link tag to remove" ilk="argument" name="id" />
              <variable citdl="String" doc="The href of the new stylesheet to include" ilk="argument" name="url" />
              <variable citdl="CSS" name="this" />
              <variable attributes="__local__ private" citdl="doc.createElement()" line="72" name="ss" />
            </scope>
            <scope doc="Refresh the rule cache if you have dynamically added stylesheets" ilk="function" line="84" lineend="86" name="refreshCache" returns="Object" signature="refreshCache()">
              <variable citdl="CSS" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="89" lineend="99" name="cacheStyleSheet" signature="cacheStyleSheet(ss)">
              <variable ilk="argument" name="ss" />
              <variable citdl="CSS" name="this" />
              <variable citdl="Object" line="91" lineend="91" name="rules" />
              <variable attributes="__local__ private" citdl="ss.cssRules" doc="try catch for cross domain access issue" line="94" name="ssRules" />
            </scope>
            <scope doc="Gets all css rules for the document" ilk="function" line="106" lineend="117" name="getRules" returns="Object" signature="getRules(refreshCache)">
              <variable citdl="Boolean" doc="true to refresh the internal cache" ilk="argument" name="refreshCache" />
              <variable citdl="CSS" name="this" />
              <variable citdl="Object" line="108" lineend="108" name="rules" />
              <variable attributes="__local__ private" citdl="doc.styleSheets" line="109" name="ds" />
            </scope>
            <scope doc="Gets an an individual CSS rule by selector(s)" ilk="function" line="125" lineend="136" name="getRule" returns="CSSRule" signature="getRule(selector, refreshCache)">
              <variable citdl="String/Array" doc="The CSS selector or an array of selectors to try. The first selector that is found is returned." ilk="argument" name="selector" />
              <variable citdl="Boolean" doc="true to refresh the internal cache if you have recently updated any rules or added styles dynamically" ilk="argument" name="refreshCache" />
              <variable citdl="CSS" name="this" />
              <variable attributes="__local__ private" citdl="this.getRules()" line="126" name="rs" />
            </scope>
            <scope doc="Updates a rule property" ilk="function" line="146" lineend="161" name="updateRule" returns="Boolean" signature="updateRule(selector, property, value)">
              <variable citdl="String/Array" doc="If it&apos;s an array it tries each selector until it finds one. Stops immediately once one is found." ilk="argument" name="selector" />
              <variable citdl="String" doc="The css property" ilk="argument" name="property" />
              <variable citdl="String" doc="The new value for the property" ilk="argument" name="value" />
              <variable citdl="CSS" name="this" />
              <variable attributes="__local__ private" citdl="this.getRule()" line="148" name="rule" />
            </scope>
          </variable>
          <variable citdl="Object" line="15" lineend="47" name="TextMetrics">
            <scope doc="Measures the size of the specified text" ilk="function" line="27" lineend="34" name="measure" returns="Object" signature="measure(el, text, fixedWidth)">
              <variable citdl="String/HTMLElement" doc="The element, dom node or id from which to copy existing CSS styles&#xA;that can affect the size of the rendered text" ilk="argument" name="el" />
              <variable citdl="String" doc="The text to measure" ilk="argument" name="text" />
              <variable citdl="Number" doc="(optional) If the text will be multiline, you have to set a fixed width&#xA;in order to accurately measure the text height" ilk="argument" name="fixedWidth" />
              <variable citdl="TextMetrics" name="this" />
            </scope>
            <scope doc="Return a unique TextMetrics instance that can be bound directly to an element and reused.  This reduces&#xA;the overhead of multiple calls to initialize the style properties on each measurement." ilk="function" line="44" lineend="46" name="createInstance" returns="Ext.util.TextMetrics.Instance" signature="createInstance(el, fixedWidth)">
              <variable citdl="String/HTMLElement" doc="The element, dom node or id that the instance will be bound to" ilk="argument" name="el" />
              <variable citdl="Number" doc="(optional) If the text will be multiline, you have to set a fixed width&#xA;in order to accurately measure the text height" ilk="argument" name="fixedWidth" />
              <variable citdl="TextMetrics" name="this" />
            </scope>
            <scope ilk="function" line="50" lineend="118" name="Instance" returns="instance" signature="Instance(bindTo, fixedWidth)">
              <variable ilk="argument" name="bindTo" />
              <variable ilk="argument" name="fixedWidth" />
              <variable citdl="TextMetrics" name="this" />
              <variable attributes="__local__ private" citdl="Ext.Element" line="51" name="ml">
                <variable citdl="Object" line="100" name="dom">
                  <variable citdl="Object" line="100" name="style">
                    <variable citdl="String" line="100" name="width" />
                  </variable>
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="Object" line="61" lineend="113" name="instance">
                <scope doc="Returns the size of the specified text based on the internal element&apos;s style and width properties" ilk="function" line="67" lineend="72" name="getSize" returns="Object" signature="getSize(text)">
                  <variable citdl="String" doc="The text to measure" ilk="argument" name="text" />
                  <variable citdl="instance" name="this" />
                  <variable attributes="__local__ private" citdl="ml.getSize()" line="69" name="s" />
                </scope>
                <scope doc="Binds this TextMetrics instance to an element from which to copy existing CSS styles&#xA;that can affect the size of the rendered text" ilk="function" line="79" lineend="83" name="bind" signature="bind(el)">
                  <variable citdl="String/HTMLElement" doc="The element, dom node or id" ilk="argument" name="el" />
                  <variable citdl="instance" name="this" />
                </scope>
                <scope doc="Sets a fixed width on the internal measurement element.  If the text will be multiline, you have&#xA;to set a fixed width in order to accurately measure the text height." ilk="function" line="90" lineend="92" name="setFixedWidth" signature="setFixedWidth(width)">
                  <variable citdl="Number" doc="The width to set on the element" ilk="argument" name="width" />
                  <variable citdl="instance" name="this" />
                </scope>
                <scope doc="Returns the measured width of the specified text" ilk="function" line="99" lineend="102" name="getWidth" returns="Number" signature="getWidth(text)">
                  <variable citdl="String" doc="The text to measure" ilk="argument" name="text" />
                  <variable citdl="instance" name="this" />
                </scope>
                <scope doc="Returns the measured height of the specified text.  For multiline text, be sure to call&#xA;{@link #setFixedWidth} if necessary." ilk="function" line="110" lineend="112" name="getHeight" returns="Number" signature="getHeight(text)">
                  <variable citdl="String" doc="The text to measure" ilk="argument" name="text" />
                  <variable citdl="instance" name="this" />
                </scope>
              </variable>
            </scope>
          </variable>
          <scope ilk="class" line="21" lineend="62" name="MixedCollection">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A Collection class that maintains both numeric indexes and keys and exposes events." ilk="function" line="21" lineend="62" name="MixedCollection" signature="MixedCollection(allowFunctions, keyFn)">
              <variable citdl="Boolean" doc="True if the addAll function should add function references to the&#xA;collection (defaults to false)" ilk="argument" name="allowFunctions" />
              <variable citdl="Function" doc="A function that can accept an item of the type(s) stored in this MixedCollection&#xA;and return the key value for that item.  This is used when available to look up the key on items that&#xA;were passed without an explicit key parameter to a MixedCollection method.  Passing this parameter is&#xA;equivalent to providing an implementation for the {@link #getKey} method." ilk="argument" name="keyFn" />
              <variable citdl="MixedCollection" name="this" />
            </scope>
            <variable citdl="Array" line="22" name="items" />
            <variable citdl="Object" line="23" lineend="23" name="map" />
            <variable citdl="Array" line="24" name="keys" />
            <variable citdl="Number" line="25" name="length" />
            <variable citdl="allowFunctions" line="57" name="allowFunctions" />
            <variable citdl="keyFn" line="59" name="getKey" />
          </scope>
          <scope ilk="class" line="21" lineend="30" name="DelayedTask">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides a convenient method of performing setTimeout where a new&#xA;timeout cancels the old timeout. An example would be performing validation on a keypress.&#xA;You can use this class to buffer&#xA;the keypress events for a certain number of milliseconds, and perform only if they stop&#xA;for that amount of time." ilk="function" line="21" lineend="62" name="DelayedTask" signature="DelayedTask(fn, scope, args)">
              <variable citdl="Function" doc="(optional) The default function to timeout" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The default scope of that timeout" ilk="argument" name="scope" />
              <variable citdl="Array" doc="(optional) The default Array of arguments" ilk="argument" name="args" />
              <variable citdl="DelayedTask" name="this" />
              <variable attributes="__local__ private" line="22" name="t" />
              <variable attributes="__local__ private" line="22" name="id" />
              <variable attributes="__local__ private" line="22" name="d" />
              <scope attributes="__local__ private" ilk="function" line="24" lineend="31" name="call" signature="call()">
                <variable attributes="__local__ private" citdl="Date" line="25" name="now" />
              </scope>
            </scope>
            <scope doc="Cancels any pending timeout and queues a new one" ilk="function" line="39" lineend="51" name="delay" signature="delay(delay, newFn, newScope, newArgs)">
              <variable citdl="Number" doc="The milliseconds to delay" ilk="argument" name="delay" />
              <variable citdl="Function" doc="(optional) Overrides function passed to constructor" ilk="argument" name="newFn" />
              <variable citdl="Object" doc="(optional) Overrides scope passed to constructor" ilk="argument" name="newScope" />
              <variable citdl="Array" doc="(optional) Overrides args passed to constructor" ilk="argument" name="newArgs" />
              <variable citdl="DelayedTask" name="this" />
            </scope>
            <scope doc="Cancel the last queued timeout" ilk="function" line="56" lineend="61" name="cancel" signature="cancel()">
              <variable citdl="DelayedTask" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="25" lineend="193" name="Observable">
            <scope attributes="__ctor__" doc="Abstract base class that provides a common interface for publishing events. Subclasses are expected to&#xA;to have a property &quot;events&quot; with all the events defined.&lt;br&gt;&#xA;For example:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;Employee = function(name){&#xA;this.name = name;&#xA;this.addEvents({&#xA;&quot;fired&quot; : true,&#xA;&quot;quit&quot; : true&#xA;});&#xA;Ext.extend(Employee, Ext.util.Observable);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="25" lineend="30" name="Observable" signature="Observable()">
              <variable citdl="Observable" name="this" />
            </scope>
            <scope doc="Fires the specified event with the passed parameters (minus the event name)." ilk="function" line="38" lineend="45" name="fireEvent" returns="Boolean" signature="fireEvent()">
              <variable citdl="Observable" name="this" />
              <variable attributes="__local__ private" citdl="this.events[arguments[0].toLowerCase()]" line="39" name="ce" />
            </scope>
            <variable doc="private" line="48" name="filterOptRe" />
            <scope doc="Appends an event handler to this component&#xA;&lt;pre&gt;&lt;code&gt;&#xA;el.on(&apos;click&apos;, this.onClick, this, {&#xA;single: true,&#xA;delay: 100,&#xA;forumId: 4&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;el.on({&#xA;&apos;click&apos;: {&#xA;fn: this.onClick,&#xA;scope: this,&#xA;delay: 100&#xA;&apos;mouseover&apos;: {&#xA;fn: this.onMouseOver,&#xA;scope: this&#xA;&apos;mouseout&apos;: {&#xA;fn: this.onMouseOut,&#xA;scope: this&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;el.on({&#xA;&apos;click&apos;: this.onClick,&#xA;&apos;mouseover&apos;: this.onMouseOver,&#xA;&apos;mouseout&apos;: this.onMouseOut,&#xA;scope: this&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="109" lineend="134" name="addListener" signature="addListener(eventName, fn, scope, o)">
              <variable citdl="String" doc="The type of event to listen for" ilk="argument" name="eventName" />
              <variable ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope in which to execute the handler&#xA;function. The handler function&apos;s &quot;this&quot; context." ilk="argument" name="scope" />
              <variable ilk="argument" name="o" />
              <variable citdl="Observable" name="this" />
              <variable attributes="__local__ private" citdl="this.events[eventName]" line="128" name="ce" />
            </scope>
            <scope doc="Removes a listener" ilk="function" line="142" lineend="147" name="removeListener" signature="removeListener(eventName, fn, scope)">
              <variable citdl="String" doc="The type of event to listen for" ilk="argument" name="eventName" />
              <variable ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope (this object) for the handler" ilk="argument" name="scope" />
              <variable citdl="Observable" name="this" />
              <variable attributes="__local__ private" citdl="this.events[eventName.toLowerCase()]" line="143" name="ce" />
            </scope>
            <scope doc="Removes all listeners for this object" ilk="function" line="152" lineend="158" name="purgeListeners" signature="purgeListeners()">
              <variable citdl="Observable" name="this" />
            </scope>
            <scope ilk="function" line="160" lineend="171" name="relayEvents" signature="relayEvents(o, events)">
              <variable ilk="argument" name="o" />
              <variable ilk="argument" name="events" />
              <variable citdl="Observable" name="this" />
              <scope attributes="__local__ private" ilk="function" line="161" lineend="165" name="createHandler" returns="this.fireEvent.apply()" signature="createHandler(ename)">
                <variable ilk="argument" name="ename" />
              </scope>
              <variable attributes="__local__ private" citdl="events[i]" line="167" name="ename" />
            </scope>
            <scope doc="Used to define events on this Observable" ilk="function" line="177" lineend="182" name="addEvents" signature="addEvents(o)">
              <variable ilk="argument" name="o" />
              <variable citdl="Observable" name="this" />
            </scope>
            <variable citdl="Object" line="179" lineend="179" name="events" />
            <scope doc="Checks to see if this object has any listeners for a specified event" ilk="function" line="189" lineend="192" name="hasListener" returns="Boolean" signature="hasListener(eventName)">
              <variable citdl="String" doc="The name of the event to check for" ilk="argument" name="eventName" />
              <variable citdl="Observable" name="this" />
              <variable attributes="__local__ private" citdl="this.events[eventName]" line="190" name="e" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Starts capture on the specified Observable. All events will be passed&#xA;to the supplied function with the event name + standard signature of the event&#xA;&lt;b&gt;before&lt;/b&gt; the event is fired. If the supplied function returns false,&#xA;the event will not fire." ilk="function" line="223" lineend="225" name="capture" signature="capture(o, fn, scope)">
              <variable citdl="Observable" doc="The Observable to capture" ilk="argument" name="o" />
              <variable citdl="Function" doc="The function to call" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope (this object) for the fn" ilk="argument" name="scope" />
              <variable citdl="Observable" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Removes &lt;b&gt;all&lt;/b&gt; added captures from the Observable." ilk="function" line="232" lineend="234" name="releaseCapture" signature="releaseCapture(o)">
              <variable citdl="Observable" doc="The Observable to release" ilk="argument" name="o" />
              <variable citdl="Observable" name="this" />
            </scope>
          </scope>
          <scope doc="@class Ext.util.ClickRepeater&#xA;@extends Ext.util.Observable&#xA;A wrapper class which can be applied to any element. Fires a &quot;click&quot; event while the&#xA;mouse is pressed. The interval between firings may be specified in the config but&#xA;defaults to 10 milliseconds.&#xA;Optionally, a CSS class may be applied to the element during the time it is pressed.&#xA;@cfg {String/HTMLElement/Element} el The element to act as a button.&#xA;@cfg {Number} delay The initial delay before the repeating event begins firing.&#xA;Similar to an autorepeat key delay.&#xA;@cfg {Number} interval The interval between firings of the &quot;click&quot; event. Default 10 ms.&#xA;@cfg {String} pressClass A CSS class name to be applied to the element while pressed.&#xA;@cfg {Boolean} accelerate True if autorepeating should start slowly and accelerate.&#xA;&quot;interval&quot; and &quot;delay&quot; are ignored. &quot;immediate&quot; is honored.&#xA;@cfg {Boolean} preventDefault True to prevent the default click event&#xA;@cfg {Boolean} stopDefault True to stop the default click event&#xA;@history&#xA;2007-02-02 jvs Original code contributed by Nige &quot;Animal&quot; White&#xA;2007-02-02 jvs Renamed to ClickRepeater&#xA;2007-02-03 jvs Modifications for FF Mac and Safari&#xA;@constructor&#xA;@param {String/HTMLElement/Element} el The element to listen on&#xA;@param {Object} config" ilk="function" line="39" lineend="84" name="ClickRepeater" signature="ClickRepeater(el, config)">
            <variable ilk="argument" name="el" />
            <variable ilk="argument" name="config" />
            <variable citdl="util" name="this" />
          </scope>
          <variable citdl="Ext.get()" line="40" name="el" />
          <scope ilk="class" line="261" lineend="343" name="Event">
            <scope attributes="__ctor__" ilk="function" line="261" lineend="265" name="Event" signature="Event(obj, name)">
              <variable ilk="argument" name="obj" />
              <variable ilk="argument" name="name" />
              <variable citdl="Event" name="this" />
            </scope>
            <variable citdl="name" line="262" name="name" />
            <variable citdl="Object" line="263" name="obj" />
            <variable citdl="Array" line="264" name="listeners" />
            <scope ilk="function" line="268" lineend="291" name="addListener" signature="addListener(fn, scope, options)">
              <variable ilk="argument" name="fn" />
              <variable ilk="argument" name="scope" />
              <variable ilk="argument" name="options" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="options" line="269" name="o" />
              <variable attributes="__local__ private" citdl="Object" line="272" lineend="272" name="l">
                <variable citdl="scope" line="272" name="scope" />
                <variable citdl="o" line="272" name="options" />
                <variable citdl="fn" line="272" name="fn" />
                <variable citdl="h" line="283" name="fireFn" />
              </variable>
              <variable attributes="__local__ private" citdl="fn" line="273" name="h" />
            </scope>
            <scope ilk="function" line="293" lineend="303" name="findListener" returns="Number" signature="findListener(fn, scope)">
              <variable ilk="argument" name="fn" />
              <variable ilk="argument" name="scope" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="this.listeners" line="295" name="ls" />
              <variable attributes="__local__ private" citdl="ls[i]" line="297" name="l" />
            </scope>
            <scope ilk="function" line="305" lineend="307" name="isListening" returns="this.findListener()" signature="isListening(fn, scope)">
              <variable ilk="argument" name="fn" />
              <variable ilk="argument" name="scope" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="309" lineend="321" name="removeListener" returns="Boolean" signature="removeListener(fn, scope)">
              <variable ilk="argument" name="fn" />
              <variable ilk="argument" name="scope" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" line="310" name="index" />
            </scope>
            <scope ilk="function" line="323" lineend="325" name="clearListeners" signature="clearListeners()">
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="327" lineend="342" name="fire" returns="Boolean" signature="fire()">
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" line="328" name="scope" />
              <variable attributes="__local__ private" citdl="this.listeners" line="328" name="ls" />
              <variable attributes="__local__ private" citdl="ls.length" line="328" name="len" />
              <variable attributes="__local__ private" citdl="Array.prototype.slice.call()" line="331" name="args" />
              <variable attributes="__local__ private" citdl="ls[i]" line="333" name="l" />
            </scope>
            <variable citdl="Boolean" line="330" name="firing" />
          </scope>
        </variable>
        <scope ilk="class" line="26" lineend="41" name="ColorPalette">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Simple color palette class for choosing colors.  The palette can be rendered to any container.&lt;br /&gt;&#xA;Here&apos;s an example of typical usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var cp = new Ext.ColorPalette({value:&apos;993300&apos;});  // initial selected color&#xA;cp.render(&apos;my-div&apos;);&#xA;cp.on(&apos;select&apos;, function(palette, selColor){&#xA;// do something with selColor&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="26" lineend="41" name="ColorPalette" signature="ColorPalette(config)">
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="ColorPalette" name="this" />
          </scope>
        </scope>
        <scope ilk="class" line="26" lineend="208" name="Template">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Represents an HTML fragment template. Templates can be precompiled for greater performance.&#xA;For a list of available format functions, see {@link Ext.util.Format}.&lt;br /&gt;&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var t = new Ext.Template(&#xA;&apos;&amp;lt;div name=&quot;{id}&quot;&amp;gt;&apos;,&#xA;&apos;&amp;lt;span class=&quot;{cls}&quot;&amp;gt;{name:trim} {value:ellipsis(10)}&amp;lt;/span&amp;gt;&apos;,&#xA;&apos;&amp;lt;/div&amp;gt;&apos;&#xA;t.append(&apos;some-element&apos;, {id: &apos;myid&apos;, cls: &apos;myclass&apos;, name: &apos;foo&apos;, value: &apos;bar&apos;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;For more information see this blog post with examples: &lt;a href=&quot;http://www.jackslocum.com/yui/2006/10/06/domhelper-create-elements-using-dom-html-fragments-or-templates/&quot;&gt;DomHelper - Create Elements using DOM, HTML fragments and Templates&lt;/a&gt;." ilk="function" line="26" lineend="35" name="Template" signature="Template(html)">
            <variable citdl="String/Array" doc="The HTML fragment or an array of fragments to join(&quot;&quot;) or multiple arguments to join(&quot;&quot;)" ilk="argument" name="html" />
            <variable citdl="Template" name="this" />
          </scope>
          <variable citdl="html" doc="@private*/" line="33" name="html" />
          <scope doc="Returns an HTML fragment of this template with the specified values applied." ilk="function" line="42" lineend="73" name="applyTemplate" returns="String" signature="applyTemplate(values)">
            <variable citdl="Object" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
            <variable citdl="Template" name="this" />
            <variable attributes="__local__ private" citdl="this.disableFormats" line="46" name="useF" />
            <variable attributes="__local__ private" citdl="this" line="47" name="tpl" />
            <variable attributes="__local__ private" citdl="Ext.util.Format" line="47" name="fm" />
            <scope attributes="__local__ private" ilk="function" line="48" lineend="71" name="fn" returns="values[name]" signature="fn(m, name, format, args)">
              <variable ilk="argument" name="m" />
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="format" />
              <variable ilk="argument" name="args" />
              <variable attributes="__local__ private" doc="quoted reversed for jsmin" line="57" name="re" />
            </scope>
          </scope>
          <scope doc="Sets the HTML used as the template and optionally compiles it." ilk="function" line="81" lineend="88" name="set" returns="Ext.Template" signature="set(html, compile)">
            <variable citdl="String" ilk="argument" name="html" />
            <variable citdl="Boolean" doc="(optional) True to compile the template (defaults to undefined)" ilk="argument" name="compile" />
            <variable citdl="Template" name="this" />
          </scope>
          <variable line="83" name="compiled" />
          <variable citdl="Boolean" doc="True to disable format functions (defaults to false)" line="94" name="disableFormats" />
          <variable citdl="RegExp" doc="The regular expression used to match template variables" line="101" name="re" />
          <scope doc="Compiles the template into an internal function, eliminating the RegEx overhead." ilk="function" line="107" lineend="139" name="compile" returns="Ext.Template" signature="compile()">
            <variable citdl="Template" name="this" />
            <variable attributes="__local__ private" citdl="Ext.util.Format" line="108" name="fm" />
            <variable attributes="__local__ private" citdl="this.disableFormats" line="109" name="useF" />
            <variable attributes="__local__ private" citdl="Ext.isGecko" line="110" name="sep" />
            <scope attributes="__local__ private" ilk="function" line="111" lineend="124" name="fn" returns="String" signature="fn(m, name, format, args)">
              <variable ilk="argument" name="m" />
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="format" />
              <variable ilk="argument" name="args" />
            </scope>
            <variable attributes="__local__ private" citdl="String" line="125" name="body" />
          </scope>
          <scope doc="private function used to call members" ilk="function" line="142" lineend="144" name="call" returns="this[fnName]()" signature="call(fnName, value, allValues)">
            <variable ilk="argument" name="fnName" />
            <variable ilk="argument" name="value" />
            <variable ilk="argument" name="allValues" />
            <variable citdl="Template" name="this" />
          </scope>
          <scope doc="Applies the supplied values to the template and inserts the new node(s) as the first child of el." ilk="function" line="153" lineend="155" name="insertFirst" returns="HTMLElement/Ext.Element" signature="insertFirst(el, values, returnElement)">
            <variable citdl="String/HTMLElement/Ext.Element" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element (defaults to undefined)" ilk="argument" name="returnElement" />
            <variable citdl="Template" name="this" />
          </scope>
          <scope doc="Applies the supplied values to the template and inserts the new node(s) before el." ilk="function" line="164" lineend="166" name="insertBefore" returns="HTMLElement/Ext.Element" signature="insertBefore(el, values, returnElement)">
            <variable citdl="String/HTMLElement/Ext.Element" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element (defaults to undefined)" ilk="argument" name="returnElement" />
            <variable citdl="Template" name="this" />
          </scope>
          <scope doc="Applies the supplied values to the template and inserts the new node(s) after el." ilk="function" line="175" lineend="177" name="insertAfter" returns="HTMLElement/Ext.Element" signature="insertAfter(el, values, returnElement)">
            <variable citdl="String/HTMLElement/Ext.Element" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element (defaults to undefined)" ilk="argument" name="returnElement" />
            <variable citdl="Template" name="this" />
          </scope>
          <scope doc="Applies the supplied values to the template and appends the new node(s) to el." ilk="function" line="186" lineend="188" name="append" returns="HTMLElement/Ext.Element" signature="append(el, values, returnElement)">
            <variable citdl="String/HTMLElement/Ext.Element" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element (defaults to undefined)" ilk="argument" name="returnElement" />
            <variable citdl="Template" name="this" />
          </scope>
          <scope ilk="function" line="190" lineend="194" name="doInsert" returns="returnEl" signature="doInsert(where, el, values, returnEl)">
            <variable ilk="argument" name="where" />
            <variable ilk="argument" name="el" />
            <variable ilk="argument" name="values" />
            <variable ilk="argument" name="returnEl" />
            <variable citdl="Template" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomHelper.insertHtml()" line="192" name="newNode" />
          </scope>
          <scope doc="Applies the supplied values to the template and overwrites the content of el with the new node(s)." ilk="function" line="203" lineend="207" name="overwrite" returns="HTMLElement/Ext.Element" signature="overwrite(el, values, returnElement)">
            <variable citdl="String/HTMLElement/Ext.Element" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element (defaults to undefined)" ilk="argument" name="returnElement" />
            <variable citdl="Template" name="this" />
          </scope>
          <scope attributes="__static__" doc="STATIC: Creates a template from the passed element&apos;s value (&lt;i&gt;display:none&lt;/i&gt; textarea, preferred) or innerHTML." ilk="function" line="224" lineend="227" name="from" returns="Ext.Template" signature="from(el)">
            <variable citdl="String/HTMLElement" doc="A DOM element or its id" ilk="argument" name="el" />
            <variable citdl="Template" name="this" />
          </scope>
        </scope>
        <variable citdl="Boolean" line="26" name="isReady" />
        <variable citdl="Object" line="26" name="data">
          <scope doc="* Ext JS Library 1.1.1 * Copyright(c) 2006-2007, Ext JS,&#xA;LLC." ilk="class" line="9" lineend="101" name="Field">
            <scope attributes="__ctor__" doc="* Ext JS Library 1.1.1 * Copyright(c) 2006-2007, Ext JS,&#xA;LLC." ilk="function" line="9" lineend="93" name="Field" signature="Field(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="Field" name="this" />
              <variable attributes="__local__ private" citdl="Ext.data.SortTypes" line="19" name="st" />
              <variable attributes="__local__ private" doc="define once" line="40" name="stripRe" />
              <variable attributes="__local__ private" citdl="this.dateFormat" line="45" name="dateFormat" />
              <variable attributes="__local__ private" line="45" name="cv" />
              <scope attributes="__local__ private" ilk="function" line="72" lineend="87" name="cv" returns="parsed" signature="cv(v)">
                <variable ilk="argument" name="v" />
                <variable attributes="__local__ private" citdl="Date.parse()" line="85" name="parsed" />
              </scope>
            </scope>
            <variable citdl="String" line="16" name="type" />
            <variable citdl="st[this.sortType]" line="22" name="sortType" />
            <variable citdl="cv" line="91" name="convert" />
            <variable line="96" name="dateFormat" />
            <variable citdl="String" line="97" name="defaultValue" />
            <variable line="98" name="mapping" />
            <variable citdl="String" line="100" name="sortDir" />
          </scope>
          <scope doc="Base class for reading structured data from a data source." ilk="class" line="11" lineend="19" name="DataReader">
            <scope attributes="__ctor__" doc="Base class for reading structured data from a data source." ilk="function" line="11" lineend="15" name="DataReader" signature="DataReader(meta, recordType)">
              <variable ilk="argument" name="meta" />
              <variable ilk="argument" name="recordType" />
              <variable citdl="DataReader" name="this" />
            </scope>
            <variable citdl="meta" line="12" name="meta" />
            <variable citdl="recordType" line="13" name="recordType" />
          </scope>
          <variable citdl="Object" doc="Defines the default sorting (casting?) comparison functions used when sorting data." line="15" lineend="95" name="SortTypes">
            <scope doc="Default sort that does nothing" ilk="function" line="21" lineend="23" name="none" returns="Mixed" signature="none(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <variable citdl="RegExp" doc="The regular expression used to strip tags" line="30" name="stripTagsRE" />
            <scope doc="Strips all HTML tags to sort on text only" ilk="function" line="37" lineend="39" name="asText" returns="String" signature="asText(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <scope doc="Strips all HTML tags to sort on text only - Case insensitive" ilk="function" line="46" lineend="48" name="asUCText" returns="String" signature="asUCText(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <scope doc="Case insensitive string" ilk="function" line="55" lineend="57" name="asUCString" returns="String" signature="asUCString(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <scope doc="Date sorting" ilk="function" line="64" lineend="72" name="asDate" returns="Number" signature="asDate(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <scope doc="Float sorting" ilk="function" line="79" lineend="83" name="asFloat" returns="Number" signature="asFloat(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
              <variable attributes="__local__ private" citdl="parseFloat()" line="80" name="val" />
            </scope>
            <scope doc="Integer sorting" ilk="function" line="90" lineend="94" name="asInt" returns="Number" signature="asInt(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
              <variable attributes="__local__ private" citdl="parseInt()" line="91" name="val" />
            </scope>
          </variable>
          <scope ilk="class" line="16" lineend="19" name="MemoryProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: An implementation of Ext.data.DataProxy that simply passes the data specified in its constructor&#xA;to the Reader when its load method is called." ilk="function" line="16" lineend="19" name="MemoryProxy" signature="MemoryProxy(data)">
              <variable citdl="Object" doc="The data object which the Reader uses to construct a block of Ext.data.Records." ilk="argument" name="data" />
              <variable citdl="MemoryProxy" name="this" />
            </scope>
            <variable citdl="data" line="18" name="data" />
          </scope>
          <scope ilk="class" line="17" lineend="102" name="Tree">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Represents a tree data structure and bubbles all the events for its nodes. The nodes&#xA;in the tree have most standard DOM functionality." ilk="function" line="17" lineend="102" name="Tree" signature="Tree(root)">
              <variable citdl="Node" doc="(optional) The root node" ilk="argument" name="root" />
              <variable citdl="Tree" name="this" />
            </scope>
            <variable citdl="Object" line="18" lineend="18" name="nodeHash" />
            <variable citdl="Node" doc="The root node for this tree" line="23" name="root" />
          </scope>
          <scope ilk="class" line="19" lineend="23" name="SimpleStore">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Small helper class to make creating Stores from Array data easier." ilk="function" line="19" lineend="29" name="SimpleStore" signature="SimpleStore(config)">
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="SimpleStore" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="21" lineend="49" name="DataProxy">
            <scope attributes="__ctor__" doc="This class is an abstract base class for implementations which provide retrieval of&#xA;unformatted data objects.&lt;br&gt;&#xA;&lt;p&gt;&#xA;DataProxy implementations are usually used in conjunction with an implementation of Ext.data.DataReader&#xA;(of the appropriate type which knows how to parse the data object) to provide a block of&#xA;{@link Ext.data.Records} to an {@link Ext.data.Store}.&lt;br&gt;&#xA;&lt;p&gt;&#xA;Custom implementations must implement the load method as described in&#xA;{@link Ext.data.HttpProxy#load}." ilk="function" line="21" lineend="49" name="DataProxy" signature="DataProxy()">
              <variable citdl="DataProxy" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="25" lineend="145" name="Store">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Store class encapsulates a client side cache of {@link Ext.data.Record} objects which provide input data&#xA;for widgets such as the Ext.grid.Grid, or the Ext.form.ComboBox.&lt;br&gt;&#xA;&lt;p&gt;&#xA;A Store object uses an implementation of {@link Ext.data.DataProxy} to access a data object unless you call loadData() directly and pass in your data. The Store object&#xA;has no knowledge of the format of the data returned by the Proxy.&lt;br&gt;&#xA;&lt;p&gt;&#xA;A Store object uses its configured implementation of {@link Ext.data.DataReader} to create {@link Ext.data.Record}&#xA;instances from the data object. These records are cached and made available through accessor functions." ilk="function" line="25" lineend="145" name="Store" signature="Store(config)">
              <variable citdl="Object" doc="A config object containing the objects needed for the Store to access data,&#xA;and read the data into Records." ilk="argument" name="config" />
              <variable citdl="Store" name="this" />
              <variable citdl="Object" line="27" name="data">
                <scope ilk="function" line="27" lineend="29" name="getKey" returns="o.id" signature="getKey(o)">
                  <variable ilk="argument" name="o" />
                  <variable citdl="data" name="this" />
                </scope>
              </variable>
            </scope>
            <variable citdl="Ext.util.MixedCollection" line="26" name="data" />
            <variable citdl="Object" line="30" lineend="30" name="baseParams" />
            <variable citdl="Object" doc="private" line="32" lineend="37" name="paramNames">
              <variable citdl="String" line="33" name="start" />
              <variable citdl="String" line="34" name="limit" />
              <variable citdl="String" line="35" name="sort" />
              <variable citdl="String" line="36" name="dir" />
            </variable>
            <variable citdl="config.data" line="40" name="inlineData" />
            <variable citdl="this.reader.recordType" line="48" name="recordType" />
            <variable citdl="this.onMetaChange.createDelegate()" line="51" name="onMetaChange" />
            <variable citdl="this.recordType.prototype.fields" line="56" name="fields" />
            <variable citdl="Array" line="58" name="modified" />
            <variable citdl="Object" line="137" lineend="137" name="sortToggle" />
          </scope>
          <scope ilk="class" line="26" lineend="28" name="JsonStore">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Small helper class to make creating Stores for JSON data easier. &lt;br/&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var store = new Ext.data.JsonStore({&#xA;url: &apos;get-images.php&apos;,&#xA;root: &apos;images&apos;,&#xA;fields: [&apos;name&apos;, &apos;url&apos;, {name:&apos;size&apos;, type: &apos;float&apos;}, {name:&apos;lastmod&apos;, type:&apos;date&apos;}]&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;b&gt;Note: Although they are not listed, this class inherits all of the config options of Store,&#xA;JsonReader and HttpProxy (unless inline data is provided).&lt;/b&gt;" ilk="function" line="26" lineend="31" name="JsonStore" signature="JsonStore(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="JsonStore" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="26" lineend="31" name="HttpProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: An implementation of {@link Ext.data.DataProxy} that reads a data object from an {@link Ext.data.Connection} object&#xA;configured to reference a certain URL.&lt;br&gt;&lt;br&gt;&#xA;&lt;p&gt;&#xA;&lt;em&gt;Note that this class cannot be used to retrieve data from a domain other than the domain&#xA;from which the running page was served.&lt;br&gt;&lt;br&gt;&#xA;&lt;p&gt;&#xA;For cross-domain access to remote data, use an {@link Ext.data.ScriptTagProxy}.&lt;/em&gt;&lt;br&gt;&lt;br&gt;&#xA;&lt;p&gt;&#xA;Be aware that to enable the browser to parse an XML document, the server must set&#xA;the Content-Type header in the HTTP response to &quot;text/xml&quot;." ilk="function" line="26" lineend="31" name="HttpProxy" signature="HttpProxy(conn)">
              <variable citdl="Object" doc="Connection config options to add to each request (e.g. {url: &apos;foo.php&apos;} or&#xA;an {@link Ext.data.Connection} object.  If a Connection config is passed, the singleton {@link Ext.Ajax} object&#xA;will be used to make the request." ilk="argument" name="conn" />
              <variable citdl="HttpProxy" name="this" />
            </scope>
            <variable citdl="conn" doc="is conn a conn config or a real conn?" line="29" name="conn" />
            <variable line="30" name="useAjax" />
          </scope>
          <scope ilk="class" line="28" lineend="231" name="Record">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Instances of this class encapsulate both record &lt;em&gt;definition&lt;/em&gt; information, and record&#xA;&lt;em&gt;value&lt;/em&gt; information for use in {@link Ext.data.Store} objects, or any code which needs&#xA;to access Records cached in an {@link Ext.data.Store} object.&lt;br&gt;&#xA;&lt;p&gt;&#xA;Constructors for this class are generated by passing an Array of field definition objects to {@link #create}.&#xA;Instances are usually only created by {@link Ext.data.Reader} implementations when processing unformatted data&#xA;objects.&lt;br&gt;&#xA;&lt;p&gt;&#xA;Record objects generated by this constructor inherit all the methods of Ext.data.Record listed below." ilk="function" line="28" lineend="31" name="Record" signature="Record(data, id)">
              <variable citdl="Array" doc="An associative Array of data values keyed by the field name." ilk="argument" name="data" />
              <variable citdl="Object" doc="(Optional) The id of the record. This id should be unique, and is used by the&#xA;{@link Ext.data.Store} object which owns the Record to index its collection of Records. If&#xA;not specified an integer id is generated." ilk="argument" name="id" />
              <variable citdl="Record" name="this" />
            </scope>
            <variable line="29" name="id" />
            <variable citdl="data" line="30" name="data" />
            <scope attributes="__static__" doc="STATIC: Generate a constructor for a specific record layout.&#xA;var TopicRecord = Ext.data.Record.create(&#xA;{name: &apos;title&apos;, mapping: &apos;topic_title&apos;},&#xA;{name: &apos;author&apos;, mapping: &apos;username&apos;},&#xA;{name: &apos;totalPosts&apos;, mapping: &apos;topic_replies&apos;, type: &apos;int&apos;},&#xA;{name: &apos;lastPost&apos;, mapping: &apos;post_time&apos;, type: &apos;date&apos;},&#xA;{name: &apos;lastPoster&apos;, mapping: &apos;user2&apos;},&#xA;{name: &apos;excerpt&apos;, mapping: &apos;post_text&apos;}&#xA;var myNewRecord = new TopicRecord({&#xA;title: &apos;Do my job please&apos;,&#xA;author: &apos;noobie&apos;,&#xA;totalPosts: 1,&#xA;lastPost: new Date(),&#xA;lastPoster: &apos;Animal&apos;,&#xA;excerpt: &apos;No way dude!&apos;&#xA;});&#xA;myStore.add(myNewRecord);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="85" lineend="101" name="create" returns="f" signature="create(o)">
              <variable citdl="Array" doc="An Array of field definition objects which specify field names, and optionally,&#xA;data types, and a mapping for an {@link Ext.data.Reader} to extract the field&apos;s value from a data object.&#xA;Each field definition object may contain the following properties: &lt;ul&gt;&#xA;&lt;li&gt;&lt;b&gt;name&lt;/b&gt; : String&lt;p style=&quot;margin-left:1em&quot;&gt;The name by which the field is referenced within the Record. This is referenced by,&#xA;for example the &lt;em&gt;dataIndex&lt;/em&gt; property in column definition objects passed to {@link Ext.grid.ColumnModel}&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;mapping&lt;/b&gt; : String&lt;p style=&quot;margin-left:1em&quot;&gt;(Optional) A path specification for use by the {@link Ext.data.Reader} implementation&#xA;that is creating the Record to access the data value from the data object. If an {@link Ext.data.JsonReader}&#xA;is being used, then this is a string containing the javascript expression to reference the data relative to&#xA;the record item&apos;s root. If an {@link Ext.data.XmlReader} is being used, this is an {@link Ext.DomQuery} path&#xA;to the data item relative to the record element. If the mapping expression is the same as the field name,&#xA;this may be omitted.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;type&lt;/b&gt; : String&lt;p style=&quot;margin-left:1em&quot;&gt;(Optional) The data type for conversion to displayable value. Possible values are&#xA;&lt;ul&gt;&lt;li&gt;auto (Default, implies no conversion)&lt;/li&gt;&#xA;&lt;li&gt;string&lt;/li&gt;&#xA;&lt;li&gt;int&lt;/li&gt;&#xA;&lt;li&gt;float&lt;/li&gt;&#xA;&lt;li&gt;boolean&lt;/li&gt;&#xA;&lt;li&gt;date&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;sortType&lt;/b&gt; : Mixed&lt;p style=&quot;margin-left:1em&quot;&gt;(Optional) A member of {@link Ext.data.SortTypes}.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;sortDir&lt;/b&gt; : String&lt;p style=&quot;margin-left:1em&quot;&gt;(Optional) Initial direction to sort. &quot;ASC&quot; or &quot;DESC&quot;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;convert&lt;/b&gt; : Function&lt;p style=&quot;margin-left:1em&quot;&gt;(Optional) A function which converts the value provided&#xA;by the Reader into an object that will be stored in the Record. It is passed the&#xA;following parameters:&lt;ul&gt;&#xA;&lt;li&gt;&lt;b&gt;v&lt;/b&gt; : Mixed&lt;p style=&quot;margin-left:1em&quot;&gt;The data value as read by the Reader.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;dateFormat&lt;/b&gt; : String&lt;p style=&quot;margin-left:1em&quot;&gt;(Optional) A format String for the Date.parseDate function.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;br&gt;usage:&lt;br&gt;&lt;pre&gt;&lt;code&gt;" ilk="argument" name="o" />
              <variable citdl="Record" name="this" />
              <scope attributes="__local__ private" ilk="function" line="86" lineend="88" name="f" signature="f()">
                <scope ilk="function" line="97" lineend="99" name="getField" returns="p.fields.get()" signature="getField(name)">
                  <variable ilk="argument" name="name" />
                </scope>
              </scope>
              <variable attributes="__local__ private" citdl="f.prototype" line="90" name="p" />
            </scope>
            <variable citdl="Number" line="103" name="AUTO_ID" />
            <variable citdl="String" line="104" name="EDIT" />
            <variable citdl="String" line="105" name="REJECT" />
            <variable citdl="String" line="106" name="COMMIT" />
            <variable citdl="Boolean" doc="Readonly flag - true if this record has been modified." line="113" name="dirty" />
            <variable citdl="Boolean" line="114" name="editing" />
            <variable line="115" name="error" />
            <variable citdl="Object" line="116" lineend="157" name="modified" />
            <scope doc="private" ilk="function" line="119" lineend="121" name="join" signature="join(store)">
              <variable ilk="argument" name="store" />
              <variable citdl="Record" name="this" />
            </scope>
            <variable citdl="store" line="120" name="store" />
            <scope doc="Set the named field to the specified value." ilk="function" line="128" lineend="143" name="set" signature="set(name, value)">
              <variable citdl="String" doc="The name of the field to set." ilk="argument" name="name" />
              <variable citdl="Object" doc="The value to set the field to." ilk="argument" name="value" />
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Get the value of the named field." ilk="function" line="150" lineend="152" name="get" returns="Object" signature="get(name)">
              <variable citdl="String" doc="The name of the field to get the value of." ilk="argument" name="name" />
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="155" lineend="158" name="beginEdit" signature="beginEdit()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="161" lineend="164" name="cancelEdit" signature="cancelEdit()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="167" lineend="172" name="endEdit" signature="endEdit()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Usually called by the {@link Ext.data.Store} which owns the Record.&#xA;Rejects all changes made to the Record since either creation, or the last commit operation.&#xA;Modified fields are reverted to their original values.&#xA;&lt;p&gt;&#xA;Developers should subscribe to the {@link Ext.data.Store#update} event to have their code notified&#xA;of reject operations." ilk="function" line="182" lineend="195" name="reject" signature="reject()">
              <variable citdl="Record" name="this" />
              <variable attributes="__local__ private" citdl="this.modified" line="183" name="m" />
            </scope>
            <scope doc="Usually called by the {@link Ext.data.Store} which owns the Record.&#xA;Commits all changes made to the Record since either creation, or the last commit operation.&#xA;&lt;p&gt;&#xA;Developers should subscribe to the {@link Ext.data.Store#update} event to have their code notified&#xA;of commit operations." ilk="function" line="204" lineend="211" name="commit" signature="commit()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="214" lineend="216" name="hasError" returns="this.error" signature="hasError()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="219" lineend="221" name="clearError" signature="clearError()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Creates a copy of this record." ilk="function" line="228" lineend="230" name="copy" returns="Record" signature="copy(newId)">
              <variable ilk="argument" name="newId" />
              <variable citdl="Record" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="30" lineend="61" name="Connection">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The class encapsulates a connection to the page&apos;s originating domain, allowing requests to be made&#xA;either to a configured URL, or to a URL specified at request time.&lt;br&gt;&lt;br&gt;&#xA;&lt;p&gt;&#xA;Requests made by this class are asynchronous, and will return immediately. No data from&#xA;the server will be available to the statement immediately following the {@link #request} call.&#xA;To process returned data, use a callback in the request options object, or an event listener.&lt;/p&gt;&lt;br&gt;&#xA;&lt;p&gt;&#xA;Note: If you are doing a file upload, you will not get a normal response object sent back to&#xA;your callback or event handler.  Since the upload is handled via in IFRAME, there is no XMLHttpRequest.&#xA;The response object is created using the innerHTML of the IFRAME&apos;s document as the responseText&#xA;property and, if present, the IFRAME&apos;s XML document as the responseXML property.&lt;/p&gt;&lt;br&gt;&#xA;This means that a valid XML or HTML document must be returned. If JSON data is required, it is suggested&#xA;that it be placed either inside a &amp;lt;textarea&gt; in an HTML document and retrieved from the responseText&#xA;using a regex, or inside a CDATA section in an XML document and retrieved from the responseXML using&#xA;standard DOM methods." ilk="function" line="30" lineend="61" name="Connection" signature="Connection(config)">
              <variable citdl="Object" doc="a configuration object." ilk="argument" name="config" />
              <variable citdl="Connection" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="41" lineend="43" name="ArrayReader">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Data reader class to create an Array of Ext.data.Record objects from an Array.&#xA;Each element of that Array represents a row of data fields. The&#xA;fields are pulled into a Record object using as a subscript, the &lt;em&gt;mapping&lt;/em&gt; property&#xA;of the field definition if it exists, or the field&apos;s ordinal position in the definition.&lt;br&gt;&#xA;&lt;p&gt;&#xA;Example code:.&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var RecordDef = Ext.data.Record.create([&#xA;{name: &apos;name&apos;, mapping: 1},         // &quot;mapping&quot; only needed if an &quot;id&quot; field is present which&#xA;{name: &apos;occupation&apos;, mapping: 2}    // precludes using the ordinal position as the index.&#xA;]);&#xA;var myReader = new Ext.data.ArrayReader({&#xA;id: 0                     // The subscript within row Array that provides an ID for the Record (optional)&#xA;}, RecordDef);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&#xA;This would consume an Array like this:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;[ [1, &apos;Bill&apos;, &apos;Gardener&apos;], [2, &apos;Ben&apos;, &apos;Horticulturalist&apos;] ]&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="41" lineend="43" name="ArrayReader" signature="ArrayReader(meta, recordType)">
              <variable citdl="Object" doc="Metadata configuration options." ilk="argument" name="meta" />
              <variable citdl="Object" doc="Either an Array of field definition objects&#xA;as specified to {@link Ext.data.Record#create},&#xA;or an {@link Ext.data.Record} object&#xA;created using {@link Ext.data.Record#create}." ilk="argument" name="recordType" />
              <variable citdl="ArrayReader" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="47" lineend="51" name="ScriptTagProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: An implementation of Ext.data.DataProxy that reads a data object from a URL which may be in a domain&#xA;other than the originating domain of the running page.&lt;br&gt;&lt;br&gt;&#xA;&lt;p&gt;&#xA;&lt;em&gt;Note that if you are retrieving data from a page that is in a domain that is NOT the same as the originating domain&#xA;of the running page, you must use this class, rather than DataProxy.&lt;/em&gt;&lt;br&gt;&lt;br&gt;&#xA;&lt;p&gt;&#xA;The content passed back from a server resource requested by a ScriptTagProxy is executable JavaScript&#xA;source code that is used as the source inside a &amp;lt;script&gt; tag.&lt;br&gt;&lt;br&gt;&#xA;&lt;p&gt;&#xA;In order for the browser to process the returned data, the server must wrap the data object&#xA;with a call to a callback function, the name of which is passed as a parameter by the ScriptTagProxy.&#xA;Below is a Java example for a servlet which returns data for either a ScriptTagProxy, or an HttpProxy&#xA;depending on whether the callback name was passed:&#xA;&lt;p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;boolean scriptTag = false;&#xA;String cb = request.getParameter(&quot;callback&quot;);&#xA;if (cb != null) {&#xA;scriptTag = true;&#xA;response.setContentType(&quot;text/javascript&quot;);&#xA;} else {&#xA;response.setContentType(&quot;application/x-json&quot;);&#xA;Writer out = response.getWriter();&#xA;if (scriptTag) {&#xA;out.write(cb + &quot;(&quot;);&#xA;out.print(dataBlock.toJsonString());&#xA;if (scriptTag) {&#xA;out.write(&quot;);&quot;);&#xA;&lt;/pre&gt;&lt;/code&gt;" ilk="function" line="47" lineend="51" name="ScriptTagProxy" signature="ScriptTagProxy(config)">
              <variable citdl="Object" doc="A configuration object." ilk="argument" name="config" />
              <variable citdl="ScriptTagProxy" name="this" />
            </scope>
            <variable citdl="document.getElementsByTagName()[0]" line="50" name="head" />
            <variable citdl="Number" line="53" name="TRANS_ID" />
          </scope>
          <scope ilk="class" line="47" lineend="50" name="JsonReader">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Data reader class to create an Array of Ext.data.Record objects from a JSON response&#xA;based on mappings in a provided Ext.data.Record constructor.&#xA;&lt;p&gt;&#xA;Example code:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var RecordDef = Ext.data.Record.create([&#xA;{name: &apos;name&apos;, mapping: &apos;name&apos;},     // &quot;mapping&quot; property not needed if it&apos;s the same as &quot;name&quot;&#xA;{name: &apos;occupation&apos;}                 // This field will use &quot;occupation&quot; as the mapping.&#xA;]);&#xA;var myReader = new Ext.data.JsonReader({&#xA;totalProperty: &quot;results&quot;,    // The property which contains the total dataset size (optional)&#xA;root: &quot;rows&quot;,                // The property which contains an Array of row objects&#xA;id: &quot;id&quot;                     // The property within each row object that provides an ID for the record (optional)&#xA;}, RecordDef);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&#xA;This would consume a JSON file like this:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;{ &apos;results&apos;: 2, &apos;rows&apos;: [&#xA;{ &apos;id&apos;: 1, &apos;name&apos;: &apos;Bill&apos;, occupation: &apos;Gardener&apos; },&#xA;{ &apos;id&apos;: 2, &apos;name&apos;: &apos;Ben&apos;, occupation: &apos;Horticulturalist&apos; } ]&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="47" lineend="50" name="JsonReader" signature="JsonReader(meta, recordType)">
              <variable citdl="Object" doc="Metadata configuration options" ilk="argument" name="meta" />
              <variable citdl="Object" doc="Either an Array of field definition objects,&#xA;or an {@link Ext.data.Record} object created using {@link Ext.data.Record#create}." ilk="argument" name="recordType" />
              <variable citdl="JsonReader" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="62" lineend="65" name="XmlReader">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Data reader class to create an Array of {@link Ext.data.Record} objects from an XML document&#xA;based on mappings in a provided Ext.data.Record constructor.&lt;br&gt;&lt;br&gt;&#xA;&lt;p&gt;&#xA;&lt;em&gt;Note that in order for the browser to parse a returned XML document, the Content-Type&#xA;header in the HTTP response must be set to &quot;text/xml&quot;.&lt;/em&gt;&#xA;&lt;p&gt;&#xA;Example code:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var RecordDef = Ext.data.Record.create([&#xA;{name: &apos;name&apos;, mapping: &apos;name&apos;},     // &quot;mapping&quot; property not needed if it&apos;s the same as &quot;name&quot;&#xA;{name: &apos;occupation&apos;}                 // This field will use &quot;occupation&quot; as the mapping.&#xA;]);&#xA;var myReader = new Ext.data.XmlReader({&#xA;totalRecords: &quot;results&quot;, // The element which contains the total dataset size (optional)&#xA;record: &quot;row&quot;,           // The repeated element which contains row information&#xA;id: &quot;id&quot;                 // The element within the row that provides an ID for the record (optional)&#xA;}, RecordDef);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&#xA;This would consume an XML file like this:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;&amp;lt;?xml?&gt;&#xA;&amp;lt;dataset&gt;&#xA;&amp;lt;results&gt;2&amp;lt;/results&gt;&#xA;&amp;lt;row&gt;&#xA;&amp;lt;id&gt;1&amp;lt;/id&gt;&#xA;&amp;lt;name&gt;Bill&amp;lt;/name&gt;&#xA;&amp;lt;occupation&gt;Gardener&amp;lt;/occupation&gt;&#xA;&amp;lt;/row&gt;&#xA;&amp;lt;row&gt;&#xA;&amp;lt;id&gt;2&amp;lt;/id&gt;&#xA;&amp;lt;name&gt;Ben&amp;lt;/name&gt;&#xA;&amp;lt;occupation&gt;Horticulturalist&amp;lt;/occupation&gt;&#xA;&amp;lt;/row&gt;&#xA;&amp;lt;/dataset&gt;&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="62" lineend="65" name="XmlReader" signature="XmlReader(meta, recordType)">
              <variable citdl="Object" doc="Metadata configuration options" ilk="argument" name="meta" />
              <variable citdl="Mixed" doc="The definition of the data record type to produce.  This can be either a valid&#xA;Record subclass created with {@link Ext.data.Record#create}, or an array of objects with which to call&#xA;Ext.data.Record.create.  See the {@link Ext.data.Record} class for more details." ilk="argument" name="recordType" />
              <variable citdl="XmlReader" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="162" lineend="185" name="Node">
            <scope attributes="__ctor__" doc="{Object} attributes The attributes/config for the node */" ilk="function" line="162" lineend="285" name="Node" signature="Node(attributes)">
              <variable citdl="Object" doc="The attributes/config for the node" ilk="argument" name="attributes" />
              <variable citdl="Node" name="this" />
              <variable citdl="Object" line="182" name="childNodes">
                <scope doc="indexOf is a must" ilk="function" line="182" lineend="187" name="indexOf" returns="Number" signature="indexOf(o)">
                  <variable ilk="argument" name="o" />
                  <variable citdl="childNodes" name="this" />
                </scope>
              </variable>
            </scope>
            <variable citdl="Object" doc="The attributes supplied for the node. You can use this property to access any custom attributes you supplied." line="167" name="attributes" />
            <variable citdl="this.attributes.leaf" line="168" name="leaf" />
            <variable citdl="this.attributes.id" doc="The node id. @type String" line="172" name="id" />
            <variable citdl="Array" doc="All child nodes of this node. @type Array" line="180" name="childNodes" />
            <variable doc="The parent node for this node. @type Node" line="192" name="parentNode" />
            <variable doc="The first direct child node of this node, or null if this node has no child nodes. @type Node" line="196" name="firstChild" />
            <variable doc="The last direct child node of this node, or null if this node has no child nodes. @type Node" line="200" name="lastChild" />
            <variable doc="The node immediately preceding this node in the tree, or null if there is no sibling node. @type Node" line="204" name="previousSibling" />
            <variable doc="The node immediately following this node in the tree, or null if there is no sibling node. @type Node" line="208" name="nextSibling" />
            <variable citdl="this.attributes.listeners" line="283" name="listeners" />
          </scope>
        </variable>
        <scope ilk="function" line="27" lineend="62" name="Layer" signature="Layer(config, existingEl)">
          <variable ilk="argument" name="config" />
          <variable ilk="argument" name="existingEl" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="Ext.DomHelper" line="29" name="dh" />
          <variable attributes="__local__ private" citdl="cp" line="30" name="pel" />
          <variable attributes="__local__ private" citdl="config.parentEl" line="30" name="cp" />
          <variable attributes="__local__ private" citdl="config.dh" line="35" name="o" />
        </scope>
        <scope ilk="class" line="29" lineend="218" name="CompositeElement">
          <scope attributes="__ctor__" doc="Standard composite class. Creates a Ext.Element for every element in the collection.&#xA;&lt;br&gt;&lt;br&gt;&#xA;&lt;b&gt;NOTE: Although they are not listed, this class supports all of the set/update methods of Ext.Element. All Ext.Element&#xA;actions will be performed on all the elements in this collection.&lt;/b&gt;&#xA;&lt;br&gt;&lt;br&gt;&#xA;All methods return &lt;i&gt;this&lt;/i&gt; and can be chained.&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var els = Ext.select(&quot;#some-el div.some-class&quot;, true);&#xA;// or select directly from an existing element&#xA;var el = Ext.get(&apos;some-el&apos;);&#xA;el.select(&apos;div.some-class&apos;, true);&#xA;els.setWidth(100); // all elements become 100 width&#xA;els.hide(true); // all elements fade out and hide&#xA;// or&#xA;els.setWidth(100).hide(true);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="29" lineend="32" name="CompositeElement" signature="CompositeElement(els)">
            <variable ilk="argument" name="els" />
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <variable citdl="Array" line="30" name="elements" />
          <variable citdl="Boolean" line="34" name="isComposite" />
          <scope ilk="function" line="35" lineend="46" name="addElements" returns="this" signature="addElements(els)">
            <variable ilk="argument" name="els" />
            <variable citdl="CompositeElement" name="this" />
            <variable attributes="__local__ private" citdl="this.elements" line="40" name="yels" />
            <variable attributes="__local__ private" citdl="yels.length" line="41" name="index" />
          </scope>
          <scope doc="Clears this composite and adds the elements returned by the passed selector." ilk="function" line="53" lineend="57" name="fill" returns="CompositeElement" signature="fill(els)">
            <variable citdl="String/Array" doc="A string CSS selector, an array of elements or an element" ilk="argument" name="els" />
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <scope doc="Filters this composite to only elements that match the passed selector." ilk="function" line="64" lineend="73" name="filter" returns="CompositeElement" signature="filter(selector)">
            <variable citdl="String" doc="A string CSS selector" ilk="argument" name="selector" />
            <variable citdl="CompositeElement" name="this" />
            <variable attributes="__local__ private" citdl="Array" line="65" name="els" />
          </scope>
          <scope ilk="function" line="75" lineend="81" name="invoke" returns="this" signature="invoke(fn, args)">
            <variable ilk="argument" name="fn" />
            <variable ilk="argument" name="args" />
            <variable citdl="CompositeElement" name="this" />
            <variable attributes="__local__ private" citdl="this.elements" line="76" name="els" />
          </scope>
          <scope doc="Adds elements to this composite." ilk="function" line="87" lineend="96" name="add" returns="CompositeElement" signature="add(els)">
            <variable citdl="String/Array" doc="A string CSS selector, an array of elements or an element" ilk="argument" name="els" />
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <scope doc="Calls the passed function passing (el, this, index) for each element in this composite." ilk="function" line="103" lineend="111" name="each" returns="CompositeElement" signature="each(fn, scope)">
            <variable citdl="Function" doc="The function to call" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The &lt;i&gt;this&lt;/i&gt; object (defaults to the element)" ilk="argument" name="scope" />
            <variable citdl="CompositeElement" name="this" />
            <variable attributes="__local__ private" citdl="this.elements" line="104" name="els" />
          </scope>
          <scope doc="Returns the Element object at the specified index" ilk="function" line="118" lineend="120" name="item" returns="Ext.Element" signature="item(index)">
            <variable citdl="Number" ilk="argument" name="index" />
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <scope doc="Returns the first Element" ilk="function" line="126" lineend="128" name="first" returns="Ext.Element" signature="first()">
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <scope doc="Returns the last Element" ilk="function" line="134" lineend="136" name="last" returns="Ext.Element" signature="last()">
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <scope doc="Returns the number of elements in this composite" ilk="function" line="142" lineend="144" name="getCount" returns="this.elements.length" signature="getCount()">
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <scope doc="Returns true if this composite contains the passed element" ilk="function" line="150" lineend="152" name="contains" returns="this.indexOf()" signature="contains(el)">
            <variable ilk="argument" name="el" />
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <scope doc="Returns true if this composite contains the passed element" ilk="function" line="158" lineend="160" name="indexOf" returns="this.elements.indexOf()" signature="indexOf(el)">
            <variable ilk="argument" name="el" />
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <scope doc="Removes the specified element(s)." ilk="function" line="170" lineend="190" name="removeElement" returns="CompositeElement" signature="removeElement(el, removeDom)">
            <variable citdl="Mixed" doc="The id of an element, the Element itself, the index of the element in this composite&#xA;or an array of any of those." ilk="argument" name="el" />
            <variable citdl="Boolean" doc="(optional) True to also remove the element from the document" ilk="argument" name="removeDom" />
            <variable citdl="CompositeElement" name="this" />
            <variable attributes="__local__ private" line="177" name="index" />
            <variable attributes="__local__ private" citdl="this.elements[index]" line="180" name="d" />
          </scope>
          <scope doc="Replaces the specified element with the passed element." ilk="function" line="200" lineend="210" name="replaceElement" returns="CompositeElement" signature="replaceElement(el, replacement, domReplace)">
            <variable citdl="String/HTMLElement/Element/Number" doc="The id of an element, the Element itself, the index of the element in this composite&#xA;to replace." ilk="argument" name="el" />
            <variable citdl="String/HTMLElement/Element" doc="The id of an element or the Element itself." ilk="argument" name="replacement" />
            <variable citdl="Boolean" doc="(Optional) True to remove and replace the element in the document too." ilk="argument" name="domReplace" />
            <variable citdl="CompositeElement" name="this" />
            <variable attributes="__local__ private" line="201" name="index" />
          </scope>
          <scope doc="Removes all elements." ilk="function" line="215" lineend="217" name="clear" signature="clear()">
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <scope ilk="function" line="220" lineend="226" name="createCall" returns="this.invoke()" signature="createCall(proto, fnName)">
            <variable ilk="argument" name="proto" />
            <variable ilk="argument" name="fnName" />
            <variable citdl="CompositeElement" name="this" />
          </scope>
        </scope>
        <scope ilk="class" line="29" lineend="40" name="apply">
          <scope attributes="__ctor__" doc="Ext core utilities and functions." ilk="function" line="29" lineend="40" name="apply" returns="Object" signature="apply(o, c, defaults)">
            <variable ilk="argument" name="o" />
            <variable ilk="argument" name="c" />
            <variable citdl="Object" doc="A different object that will also be applied for default values" ilk="argument" name="defaults" />
            <variable citdl="apply" name="this" />
          </scope>
        </scope>
        <scope ilk="class" line="32" lineend="97" name="ContentPanel">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: A basic ContentPanel element." ilk="function" line="32" lineend="97" name="ContentPanel" signature="ContentPanel(el, config, content)">
            <variable citdl="String/HTMLElement/Ext.Element" doc="The container element for this panel" ilk="argument" name="el" />
            <variable citdl="String/Object" doc="A string to set only the title or a config object" ilk="argument" name="config" />
            <variable citdl="String" doc="(optional) Set the HTML content for this panel" ilk="argument" name="content" />
            <variable citdl="ContentPanel" name="this" />
          </scope>
          <variable citdl="Ext.get()" line="37" name="el" />
          <variable citdl="Boolean" line="50" name="closable" />
          <variable citdl="Boolean" line="51" name="loaded" />
          <variable citdl="Boolean" line="52" name="active" />
          <variable citdl="config" line="54" name="title" />
          <variable citdl="Ext.get()" line="59" name="resizeEl" />
        </scope>
        <scope ilk="class" line="32" lineend="56" name="MasterTemplate">
          <scope attributes="__ctor__" doc="Provides a template that can have child templates. The syntax is:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var t = new Ext.MasterTemplate(&#xA;&apos;&amp;lt;select name=&quot;{name}&quot;&amp;gt;&apos;,&#xA;&apos;&amp;lt;tpl name=&quot;options&quot;&amp;gt;&amp;lt;option value=&quot;{value:trim}&quot;&amp;gt;{text:ellipsis(10)}&amp;lt;/option&amp;gt;&amp;lt;/tpl&amp;gt;&apos;,&#xA;&apos;&amp;lt;/select&amp;gt;&apos;&#xA;t.add(&apos;options&apos;, {value: &apos;foo&apos;, text: &apos;bar&apos;});&#xA;// or you can add multiple child elements in one shot&#xA;t.addAll(&apos;options&apos;, [&#xA;{value: &apos;foo&apos;, text: &apos;bar&apos;},&#xA;{value: &apos;foo2&apos;, text: &apos;bar2&apos;},&#xA;{value: &apos;foo3&apos;, text: &apos;bar3&apos;}&#xA;]);&#xA;// then append, applying the master template values&#xA;t.append(&apos;my-form&apos;, {name: &apos;my-select&apos;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;A name attribute for the child template is not required if you have only one child&#xA;template or you want to refer to them by index." ilk="function" line="32" lineend="56" name="MasterTemplate" signature="MasterTemplate()">
            <variable citdl="MasterTemplate" name="this" />
            <variable attributes="__local__ private" citdl="Object" line="35" lineend="35" name="st" />
            <variable attributes="__local__ private" line="36" name="m" />
            <variable attributes="__local__ private" citdl="this.subTemplateRe" line="36" name="re" />
            <variable attributes="__local__ private" citdl="Number" line="38" name="subIndex" />
            <variable attributes="__local__ private" citdl="m[1]" line="40" name="name" />
            <variable attributes="__local__ private" citdl="m[2]" line="40" name="content" />
          </scope>
          <variable citdl="this.html" line="34" name="originalHtml" />
          <variable citdl="name" line="42" name="name" />
          <variable citdl="subIndex" line="43" name="index" />
          <variable citdl="Array" line="44" name="buffer" />
          <variable citdl="Ext.Template" line="45" name="tpl" />
          <variable citdl="subIndex" line="54" name="subCount" />
          <variable citdl="st" line="55" name="subs" />
          <scope attributes="__static__" doc="STATIC: Creates a template from the passed element&apos;s value (display:none textarea, preferred) or innerHTML. e.g.&#xA;var tpl = Ext.MasterTemplate.from(&apos;element-id&apos;);" ilk="function" line="144" lineend="147" name="from" returns="Ext.MasterTemplate" signature="from(el, config)">
            <variable citdl="String/HTMLElement" ilk="argument" name="el" />
            <variable citdl="Object" ilk="argument" name="config" />
            <variable citdl="MasterTemplate" name="this" />
          </scope>
        </scope>
        <scope ilk="class" line="32" lineend="71" name="Button">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Simple Button class&#xA;an {@link Ext.util.ClickRepeater} config object (defaults to false)." ilk="function" line="32" lineend="71" name="Button" signature="Button(renderTo, config)">
            <variable citdl="String/HTMLElement/Element" doc="The element to append the button to" ilk="argument" name="renderTo" />
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="Button" name="this" />
          </scope>
          <variable citdl="Ext.menu.MenuMgr.get()" line="65" name="menu" />
        </scope>
        <variable citdl="Ext.getDom()" line="32" name="dom" />
        <scope ilk="class" line="33" lineend="136" name="SplitBar">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Creates draggable splitter bar functionality from two elements (element to be dragged and element to be resized).&#xA;&lt;br&gt;&lt;br&gt;&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var split = new Ext.SplitBar(&quot;elementToDrag&quot;, &quot;elementToSize&quot;,&#xA;Ext.SplitBar.HORIZONTAL, Ext.SplitBar.LEFT);&#xA;split.setAdapter(new Ext.SplitBar.AbsoluteLayoutAdapter(&quot;container&quot;));&#xA;split.minSize = 100;&#xA;split.maxSize = 600;&#xA;split.animate = true;&#xA;split.on(&apos;moved&apos;, splitterMoved);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;Ext.SplitBar.TOP or Ext.SplitBar.BOTTOM for vertical. (By default, this is determined automatically by the initial&#xA;position of the SplitBar)." ilk="function" line="33" lineend="136" name="SplitBar" signature="SplitBar(dragElement, resizingElement, orientation, placement, existingProxy)">
            <variable citdl="String/HTMLElement/Ext.Element" doc="The element to be dragged and act as the SplitBar." ilk="argument" name="dragElement" />
            <variable citdl="String/HTMLElement/Ext.Element" doc="The element to be resized based on where the SplitBar element is dragged" ilk="argument" name="resizingElement" />
            <variable citdl="Number" doc="(optional) Either Ext.SplitBar.HORIZONTAL or Ext.SplitBar.VERTICAL. (Defaults to HORIZONTAL)" ilk="argument" name="orientation" />
            <variable citdl="Number" doc="(optional) Either Ext.SplitBar.LEFT or Ext.SplitBar.RIGHT for horizontal or" ilk="argument" name="placement" />
            <variable ilk="argument" name="existingProxy" />
            <variable citdl="SplitBar" name="this" />
          </scope>
          <variable citdl="Ext.get()" doc="*/" line="36" name="el" />
          <variable citdl="String" line="37" name="unselectable" />
          <variable citdl="Ext.get()" doc="*/" line="39" name="resizingEl" />
          <variable attributes="private" citdl="Number" doc="PRIVATE: The orientation of the split. Either Ext.SplitBar.HORIZONTAL or Ext.SplitBar.VERTICAL. (Defaults to HORIZONTAL)&#xA;Note: If this is changed after creating the SplitBar, the placement property must be manually updated" line="47" name="orientation" />
          <variable citdl="Number" doc="The minimum size of the resizing element. (Defaults to 0)" line="53" name="minSize" />
          <variable citdl="Number" doc="The maximum size of the resizing element. (Defaults to 2000)" line="59" name="maxSize" />
          <variable citdl="Boolean" doc="Whether to animate the transition to the new size" line="65" name="animate" />
          <variable citdl="Boolean" doc="Whether to create a transparent shim that overlays the page when dragging, enables dragging across iframes." line="71" name="useShim" />
          <variable doc="*/" line="74" name="shim" />
          <variable citdl="Ext.SplitBar.createProxy()" doc="*/" line="78" name="proxy" />
          <variable citdl="Ext.dd.DDProxy" doc="*/" line="83" name="dd" />
          <variable citdl="this.onStartProxyDrag.createDelegate()" doc="*/" line="86" name="b4StartDrag" />
          <variable citdl="this.onEndProxyDrag.createDelegate()" doc="*/" line="89" name="endDrag" />
          <variable citdl="Object" doc="*/" line="92" lineend="92" name="dragSpecs" />
          <variable attributes="private" citdl="Ext.SplitBar.BasicLayoutAdapter" doc="The adapter to use to positon and resize elements */" line="97" name="adapter" />
          <variable citdl="placement" doc="*/" line="102" name="placement" />
          <scope attributes="private" doc="static Create our own proxy element element. So it will be&#xA;the same same size on all browsers, we won&apos;t use borders." ilk="function" line="288" lineend="295" name="createProxy" returns="proxy.dom" signature="createProxy(dir)">
            <variable ilk="argument" name="dir" />
            <variable citdl="SplitBar" name="this" />
            <variable attributes="__local__ private" citdl="Ext.Element" line="289" name="proxy" />
            <variable attributes="__local__ private" citdl="String" line="291" name="cls" />
          </scope>
          <scope ilk="class" line="302" lineend="350" name="BasicLayoutAdapter">
            <scope attributes="__ctor__" doc="Default Adapter. It assumes the splitter and resizing element are not positioned&#xA;elements and only gets/sets the width of the element. Generally used for table based layouts." ilk="function" line="302" lineend="303" name="BasicLayoutAdapter" signature="BasicLayoutAdapter()">
              <variable citdl="BasicLayoutAdapter" name="this" />
            </scope>
            <scope doc="do nothing for now" ilk="function" line="307" lineend="309" name="init" signature="init(s)">
              <variable ilk="argument" name="s" />
              <variable citdl="BasicLayoutAdapter" name="this" />
            </scope>
            <scope doc="Called before drag operations to get the current size of the resizing element." ilk="function" line="314" lineend="320" name="getElementSize" returns="s.resizingEl.getHeight()" signature="getElementSize(s)">
              <variable citdl="Ext.SplitBar" doc="The SplitBar using this adapter" ilk="argument" name="s" />
              <variable citdl="BasicLayoutAdapter" name="this" />
            </scope>
            <scope doc="Called after drag operations to set the size of the resizing element." ilk="function" line="328" lineend="349" name="setElementSize" signature="setElementSize(s, newSize, onComplete)">
              <variable citdl="Ext.SplitBar" doc="The SplitBar using this adapter" ilk="argument" name="s" />
              <variable citdl="Number" doc="The new size to set" ilk="argument" name="newSize" />
              <variable citdl="Function" doc="A function to be invoked when resizing is complete" ilk="argument" name="onComplete" />
              <variable citdl="BasicLayoutAdapter" name="this" />
            </scope>
          </scope>
          <scope doc="*@class Ext.SplitBar.AbsoluteLayoutAdapter" ilk="class" line="360" lineend="395" name="AbsoluteLayoutAdapter">
            <scope attributes="__ctor__" doc="*@class Ext.SplitBar.AbsoluteLayoutAdapter" ilk="function" line="360" lineend="363" name="AbsoluteLayoutAdapter" signature="AbsoluteLayoutAdapter(container)">
              <variable citdl="String/HTMLElement/Ext.Element" doc="The container that wraps around the absolute positioned content. If it&apos;s&#xA;document.body, make sure you assign an id to the body element." ilk="argument" name="container" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
            </scope>
            <scope ilk="function" line="366" lineend="368" name="init" signature="init(s)">
              <variable ilk="argument" name="s" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
            </scope>
            <scope ilk="function" line="370" lineend="372" name="getElementSize" returns="this.basic.getElementSize()" signature="getElementSize(s)">
              <variable ilk="argument" name="s" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
            </scope>
            <scope ilk="function" line="374" lineend="376" name="setElementSize" signature="setElementSize(s, newSize, onComplete)">
              <variable ilk="argument" name="s" />
              <variable ilk="argument" name="newSize" />
              <variable ilk="argument" name="onComplete" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
            </scope>
            <scope ilk="function" line="378" lineend="394" name="moveSplitter" signature="moveSplitter(s)">
              <variable ilk="argument" name="s" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
              <variable attributes="__local__ private" citdl="Ext.SplitBar" line="379" name="yes" />
            </scope>
          </scope>
          <variable citdl="Ext.SplitBar.BasicLayoutAdapter" line="361" name="basic" />
          <variable citdl="Ext.get()" line="362" name="container" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Orientation constant - Create a vertical SplitBar" line="402" name="VERTICAL" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Orientation constant - Create a horizontal SplitBar" line="409" name="HORIZONTAL" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Placement constant - The resizing element is to the left of the splitter element" line="416" name="LEFT" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Placement constant - The resizing element is to the right of the splitter element" line="423" name="RIGHT" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Placement constant - The resizing element is positioned above the splitter element" line="430" name="TOP" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Placement constant - The resizing element is positioned under splitter element" line="437" name="BOTTOM" />
        </scope>
        <scope ilk="class" line="34" lineend="153" name="KeyNav">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: &lt;p&gt;Provides a convenient wrapper for normalized keyboard navigation.  KeyNav allows you to bind&#xA;navigation keys to function calls that will get called when the keys are pressed, providing an easy&#xA;way to implement custom navigation schemes for any UI component.&lt;/p&gt;&#xA;&lt;p&gt;The following are all of the possible keys that can be implemented: enter, left, right, up, down, tab, esc,&#xA;pageUp, pageDown, del, home, end.  Usage:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var nav = new Ext.KeyNav(&quot;my-element&quot;, {&#xA;&quot;left&quot; : function(e){&#xA;this.moveLeft(e.ctrlKey);&#xA;&quot;right&quot; : function(e){&#xA;this.moveRight(e.ctrlKey);&#xA;&quot;enter&quot; : function(e){&#xA;this.save();&#xA;scope : this&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="34" lineend="41" name="KeyNav" signature="KeyNav(el, config)">
            <variable citdl="String/HTMLElement/Ext.Element" doc="The element to bind to" ilk="argument" name="el" />
            <variable citdl="Object" doc="The config" ilk="argument" name="config" />
            <variable citdl="KeyNav" name="this" />
          </scope>
          <variable citdl="Ext.get()" line="35" name="el" />
          <variable citdl="Boolean" line="38" name="disabled" />
          <variable citdl="String" doc="The method to call on the {@link Ext.EventObject} after this KeyNav intercepts a key.  Valid values are&#xA;{@link Ext.EventObject#stopEvent}, {@link Ext.EventObject#preventDefault} and&#xA;{@link Ext.EventObject#stopPropagation} (defaults to &apos;stopEvent&apos;)" line="55" name="defaultEventAction" />
          <variable citdl="Boolean" doc="Handle the keydown event instead of keypress (defaults to false).  KeyNav automatically does this for IE since&#xA;IE does not propagate special keys on keypress, but setting this to true will force other browsers to also&#xA;handle keydown instead of keypress." line="62" name="forceKeyDown" />
          <scope doc="private" ilk="function" line="65" lineend="74" name="prepareEvent" signature="prepareEvent(e)">
            <variable ilk="argument" name="e" />
            <variable citdl="KeyNav" name="this" />
            <variable attributes="__local__ private" citdl="e.getKey()" line="66" name="k" />
            <variable attributes="__local__ private" citdl="this.keyToHandler[k]" line="67" name="h" />
          </scope>
          <scope doc="private" ilk="function" line="77" lineend="85" name="relay" signature="relay(e)">
            <variable ilk="argument" name="e" />
            <variable citdl="KeyNav" name="this" />
            <variable attributes="__local__ private" citdl="e.getKey()" line="78" name="k" />
            <variable attributes="__local__ private" citdl="this.keyToHandler[k]" line="79" name="h" />
          </scope>
          <scope doc="private" ilk="function" line="88" lineend="90" name="doRelay" returns="h.call()" signature="doRelay(e, h, hname)">
            <variable ilk="argument" name="e" />
            <variable ilk="argument" name="h" />
            <variable ilk="argument" name="hname" />
            <variable citdl="KeyNav" name="this" />
          </scope>
          <variable citdl="Boolean" doc="possible handlers" line="93" name="enter" />
          <variable citdl="Boolean" line="94" name="left" />
          <variable citdl="Boolean" line="95" name="right" />
          <variable citdl="Boolean" line="96" name="up" />
          <variable citdl="Boolean" line="97" name="down" />
          <variable citdl="Boolean" line="98" name="tab" />
          <variable citdl="Boolean" line="99" name="esc" />
          <variable citdl="Boolean" line="100" name="pageUp" />
          <variable citdl="Boolean" line="101" name="pageDown" />
          <variable citdl="Boolean" line="102" name="del" />
          <variable citdl="Boolean" line="103" name="home" />
          <variable citdl="Boolean" line="104" name="end" />
          <variable citdl="Object" doc="quick lookup hash" line="107" lineend="120" name="keyToHandler" />
          <scope doc="Enable this KeyNav" ilk="function" line="125" lineend="137" name="enable" signature="enable()">
            <variable citdl="KeyNav" name="this" />
          </scope>
          <scope doc="Disable this KeyNav" ilk="function" line="142" lineend="152" name="disable" signature="disable()">
            <variable citdl="KeyNav" name="this" />
          </scope>
        </scope>
        <variable citdl="String" line="35" name="tag" />
        <variable citdl="Object" line="35" lineend="501" name="MessageBox">
          <scope doc="Returns a reference to the underlying {@link Ext.BasicDialog} element" ilk="function" line="98" lineend="154" name="getDialog" returns="Ext.BasicDialog" signature="getDialog()">
            <variable citdl="MessageBox" name="this" />
            <variable citdl="Object" line="123" lineend="123" name="buttons" />
            <variable attributes="__local__ private" citdl="this.buttonText" line="124" name="bt" />
            <variable attributes="__local__ private" citdl="progressEl.dom.firstChild" line="149" name="pf" />
          </scope>
          <scope doc="Updates the message box body text" ilk="function" line="162" lineend="180" name="updateText" returns="Ext.MessageBox" signature="updateText(text)">
            <variable citdl="String" doc="(optional) Replaces the message box element&apos;s innerHTML with the specified string (defaults to&#xA;the XHTML-compliant non-breaking space character &apos;&amp;amp;#160;&apos;)" ilk="argument" name="text" />
            <variable citdl="MessageBox" name="this" />
            <variable attributes="__local__ private" citdl="Math.max()" line="168" name="w" />
          </scope>
          <scope doc="Updates a progress-style message box&apos;s text and progress bar.  Only relevant on message boxes&#xA;initiated via {@link Ext.MessageBox#progress} or by calling {@link Ext.MessageBox#show} with progress: true." ilk="function" line="189" lineend="195" name="updateProgress" returns="Ext.MessageBox" signature="updateProgress(value, text)">
            <variable citdl="Number" doc="Any number between 0 and 1 (e.g., .5)" ilk="argument" name="value" />
            <variable citdl="String" doc="(optional) If defined, the message box&apos;s body text is replaced with the specified string (defaults to undefined)" ilk="argument" name="text" />
            <variable citdl="MessageBox" name="this" />
          </scope>
          <scope doc="Returns true if the message box is currently displayed" ilk="function" line="201" lineend="203" name="isVisible" returns="Boolean" signature="isVisible()">
            <variable citdl="MessageBox" name="this" />
          </scope>
          <scope doc="Hides the message box if it is displayed" ilk="function" line="208" lineend="212" name="hide" signature="hide()">
            <variable citdl="MessageBox" name="this" />
          </scope>
          <scope doc="Displays a new message box, or reinitializes an existing message box, based on the config options&#xA;passed in. All functions (e.g. prompt, alert, etc) on MessageBox call this function internally.&#xA;The following config object properties are supported:&#xA;&lt;pre&gt;&#xA;Property    Type             Description&#xA;----------  ---------------  ------------------------------------------------------------------------------------&#xA;animEl            String/Element   An id or Element from which the message box should animate as it opens and&#xA;closes (defaults to undefined)&#xA;buttons           Object/Boolean   A button config object (e.g., Ext.MessageBox.OKCANCEL or {ok:&apos;Foo&apos;,&#xA;cancel:&apos;Bar&apos;}), or false to not show any buttons (defaults to false)&#xA;closable          Boolean          False to hide the top-right close button (defaults to true).  Note that&#xA;progress and wait dialogs will ignore this property and always hide the&#xA;close button as they can only be closed programmatically.&#xA;cls               String           A custom CSS class to apply to the message box element&#xA;defaultTextHeight Number           The default height in pixels of the message box&apos;s multiline textarea if&#xA;displayed (defaults to 75)&#xA;fn                Function         A callback function to execute after closing the dialog.  The arguments to the&#xA;function will be btn (the name of the button that was clicked, if applicable,&#xA;e.g. &quot;ok&quot;), and text (the value of the active text field, if applicable).&#xA;Progress and wait dialogs will ignore this option since they do not respond to&#xA;user actions and can only be closed programmatically, so any required function&#xA;should be called by the same code after it closes the dialog.&#xA;icon              String           A CSS class that provides a background image to be used as an icon for&#xA;the dialog (e.g., Ext.MessageBox.WARNING or &apos;custom-class&apos;, defaults to &apos;&apos;)&#xA;maxWidth          Number           The maximum width in pixels of the message box (defaults to 600)&#xA;minWidth          Number           The minimum width in pixels of the message box (defaults to 100)&#xA;modal             Boolean          False to allow user interaction with the page while the message box is&#xA;displayed (defaults to true)&#xA;msg               String           A string that will replace the existing message box body text (defaults&#xA;to the XHTML-compliant non-breaking space character &apos;&amp;#160;&apos;)&#xA;multiline         Boolean          True to prompt the user to enter multi-line text (defaults to false)&#xA;progress          Boolean          True to display a progress bar (defaults to false)&#xA;progressText      String           The text to display inside the progress bar if progress = true (defaults to &apos;&apos;)&#xA;prompt            Boolean          True to prompt the user to enter single-line text (defaults to false)&#xA;proxyDrag         Boolean          True to display a lightweight proxy while dragging (defaults to false)&#xA;title             String           The title text&#xA;value             String           The string value to set into the active textbox element if displayed&#xA;wait              Boolean          True to display a progress bar (defaults to false)&#xA;width             Number           The width of the dialog in pixels&#xA;&lt;/pre&gt;&#xA;&#xA;Example usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;Ext.Msg.show({&#xA;title: &apos;Address&apos;,&#xA;msg: &apos;Please enter your address:&apos;,&#xA;width: 300,&#xA;buttons: Ext.MessageBox.OKCANCEL,&#xA;multiline: true,&#xA;fn: saveAddress,&#xA;animEl: &apos;addAddressBtn&apos;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="271" lineend="326" name="show" returns="Ext.MessageBox" signature="show(options)">
            <variable ilk="argument" name="options" />
            <variable citdl="MessageBox" name="this" />
            <variable attributes="__local__ private" citdl="this.getDialog()" line="275" name="d" />
            <variable attributes="__local__ private" citdl="opt.buttons" line="302" name="bs" />
            <variable attributes="__local__ private" citdl="buttons[&quot;ok&quot;]" line="303" name="db" />
          </scope>
          <scope doc="Displays a message box with a progress bar.  This message box has no buttons and is not closeable by&#xA;the user.  You are responsible for updating the progress bar as needed via {@link Ext.MessageBox#updateProgress}&#xA;and closing the message box when the process is complete." ilk="function" line="336" lineend="346" name="progress" returns="Ext.MessageBox" signature="progress(title, msg)">
            <variable citdl="String" doc="The title bar text" ilk="argument" name="title" />
            <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
            <variable citdl="MessageBox" name="this" />
          </scope>
          <scope doc="Displays a standard read-only message box with an OK button (comparable to the basic JavaScript Window.alert).&#xA;If a callback function is passed it will be called after the user clicks the button, and the&#xA;id of the button that was clicked will be passed as the only parameter to the callback&#xA;(could also be the top-right close button)." ilk="function" line="359" lineend="368" name="alert" returns="Ext.MessageBox" signature="alert(title, msg, fn, scope)">
            <variable citdl="String" doc="The title bar text" ilk="argument" name="title" />
            <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
            <variable citdl="Function" doc="(optional) The callback function invoked after the message box is closed" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The scope of the callback function" ilk="argument" name="scope" />
            <variable citdl="MessageBox" name="this" />
          </scope>
          <scope doc="Displays a message box with an infinitely auto-updating progress bar.  This can be used to block user&#xA;interaction while waiting for a long-running process to complete that does not have defined intervals.&#xA;You are responsible for closing the message box when the process is complete." ilk="function" line="378" lineend="396" name="wait" returns="Ext.MessageBox" signature="wait(msg, title)">
            <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
            <variable citdl="String" doc="(optional) The title bar text" ilk="argument" name="title" />
            <variable citdl="MessageBox" name="this" />
          </scope>
          <scope doc="Displays a confirmation message box with Yes and No buttons (comparable to JavaScript&apos;s Window.confirm).&#xA;If a callback function is passed it will be called after the user clicks either button, and the id of the&#xA;button that was clicked will be passed as the only parameter to the callback (could also be the top-right close button)." ilk="function" line="408" lineend="417" name="confirm" returns="Ext.MessageBox" signature="confirm(title, msg, fn, scope)">
            <variable citdl="String" doc="The title bar text" ilk="argument" name="title" />
            <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
            <variable citdl="Function" doc="(optional) The callback function invoked after the message box is closed" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The scope of the callback function" ilk="argument" name="scope" />
            <variable citdl="MessageBox" name="this" />
          </scope>
          <scope doc="Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to&#xA;JavaScript&apos;s Window.prompt).  The prompt can be a single-line or multi-line textbox.  If a callback function&#xA;is passed it will be called after the user clicks either button, and the id of the button that was clicked&#xA;(could also be the top-right close button) and the text that was entered will be passed as the two&#xA;parameters to the callback." ilk="function" line="433" lineend="445" name="prompt" returns="Ext.MessageBox" signature="prompt(title, msg, fn, scope, multiline)">
            <variable citdl="String" doc="The title bar text" ilk="argument" name="title" />
            <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
            <variable citdl="Function" doc="(optional) The callback function invoked after the message box is closed" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The scope of the callback function" ilk="argument" name="scope" />
            <variable citdl="Boolean/Number" doc="(optional) True to create a multiline textbox using the defaultTextHeight&#xA;property, or the height in pixels to create the textbox (defaults to false / single-line)" ilk="argument" name="multiline" />
            <variable citdl="MessageBox" name="this" />
          </scope>
          <variable citdl="Object" doc="Button config that displays a single OK button" line="451" lineend="451" name="OK">
            <variable citdl="Boolean" line="451" name="ok" />
          </variable>
          <variable citdl="Object" doc="Button config that displays Yes and No buttons" line="456" lineend="456" name="YESNO">
            <variable citdl="Boolean" line="456" name="yes" />
            <variable citdl="Boolean" line="456" name="no" />
          </variable>
          <variable citdl="Object" doc="Button config that displays OK and Cancel buttons" line="461" lineend="461" name="OKCANCEL">
            <variable citdl="Boolean" line="461" name="cancel" />
            <variable citdl="Boolean" line="461" name="ok" />
          </variable>
          <variable citdl="Object" doc="Button config that displays Yes, No and Cancel buttons" line="466" lineend="466" name="YESNOCANCEL">
            <variable citdl="Boolean" line="466" name="cancel" />
            <variable citdl="Boolean" line="466" name="yes" />
            <variable citdl="Boolean" line="466" name="no" />
          </variable>
          <variable citdl="Number" doc="The default height in pixels of the message box&apos;s multiline textarea if displayed (defaults to 75)" line="472" name="defaultTextHeight" />
          <variable citdl="Number" doc="The maximum width in pixels of the message box (defaults to 600)" line="477" name="maxWidth" />
          <variable citdl="Number" doc="The minimum width in pixels of the message box (defaults to 100)" line="482" name="minWidth" />
          <variable citdl="Number" doc="The minimum width in pixels of the message box if it is a progress-style dialog.  This is useful&#xA;for setting a different minimum width than text-only dialogs may need (defaults to 250)" line="488" name="minProgressWidth" />
          <variable citdl="Object" doc="An object containing the default button text strings that can be overriden for localized language support.&#xA;Supported properties are: ok, cancel, yes and no.&#xA;Customize the default text like so: Ext.MessageBox.buttonText.yes = &quot;S&#239;&#191;&#189;&quot;;" line="495" lineend="500" name="buttonText">
            <variable citdl="String" line="496" name="ok" />
            <variable citdl="String" line="497" name="cancel" />
            <variable citdl="String" line="498" name="yes" />
            <variable citdl="String" line="499" name="no" />
          </variable>
        </variable>
        <variable citdl="String" line="35" name="cls" />
        <variable citdl="Object" line="35" name="tree">
          <scope ilk="function" line="10" lineend="13" name="TreeDragZone" signature="TreeDragZone(tree, config)">
            <variable ilk="argument" name="tree" />
            <variable ilk="argument" name="config" />
            <variable citdl="tree" name="this" />
          </scope>
          <scope ilk="function" line="11" lineend="19" name="TreeDropZone" signature="TreeDropZone(tree, config)">
            <variable ilk="argument" name="tree" />
            <variable ilk="argument" name="config" />
            <variable citdl="tree" name="this" />
          </scope>
          <variable citdl="Boolean" line="12" name="allowParentInsert" />
          <variable citdl="Boolean" line="13" name="allowContainerDrop" />
          <scope ilk="class" line="14" lineend="35" name="DefaultSelectionModel">
            <scope attributes="__ctor__" doc="The default single selection for a TreePanel." ilk="function" line="14" lineend="35" name="DefaultSelectionModel" signature="DefaultSelectionModel()">
              <variable citdl="DefaultSelectionModel" name="this" />
            </scope>
            <variable line="15" name="selNode" />
          </scope>
          <scope doc="The TreeNode UI implementation is separate from the&#xA;tree implementation. Unless you are customizing the tree UI,&#xA;you should never have to use this directly." ilk="class" line="14" lineend="501" name="TreeNodeUI">
            <scope attributes="__ctor__" doc="The TreeNode UI implementation is separate from the&#xA;tree implementation. Unless you are customizing the tree UI,&#xA;you should never have to use this directly." ilk="function" line="14" lineend="19" name="TreeNodeUI" signature="TreeNodeUI(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <variable citdl="Node" line="15" name="node" />
            <variable citdl="Boolean" line="16" name="rendered" />
            <variable citdl="Boolean" line="17" name="animating" />
            <variable citdl="Ext.BLANK_IMAGE_URL" line="18" name="emptyIcon" />
            <scope ilk="function" line="22" lineend="26" name="removeChild" signature="removeChild(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="28" lineend="30" name="beforeLoad" signature="beforeLoad()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="32" lineend="34" name="afterLoad" signature="afterLoad()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="36" lineend="40" name="onTextChange" signature="onTextChange(node, text, oldText)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="text" />
              <variable ilk="argument" name="oldText" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <variable citdl="String" line="38" name="innerHTML" />
            <scope ilk="function" line="42" lineend="49" name="onDisableChange" signature="onDisableChange(node, state)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="state" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <variable citdl="state" line="43" name="disabled" />
            <scope ilk="function" line="51" lineend="59" name="onSelectedChange" signature="onSelectedChange(state)">
              <variable ilk="argument" name="state" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="61" lineend="78" name="onMove" signature="onMove(tree, node, oldParent, newParent, index, refNode)">
              <variable ilk="argument" name="tree" />
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="oldParent" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="refNode" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="newParent.ui.getContainer()" line="64" name="targetNode" />
              <variable attributes="__local__ private" citdl="refNode" line="70" name="insertBefore" />
            </scope>
            <variable citdl="buf.join()" line="62" name="childIndent" />
            <variable citdl="document.createElement()" doc="target not rendered" line="66" name="holder" />
            <scope ilk="function" line="80" lineend="84" name="addClass" signature="addClass(cls)">
              <variable ilk="argument" name="cls" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="86" lineend="90" name="removeClass" signature="removeClass(cls)">
              <variable ilk="argument" name="cls" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="92" lineend="97" name="remove" signature="remove()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="99" lineend="101" name="fireEvent" returns="this.node.fireEvent.apply()" signature="fireEvent()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="103" lineend="145" name="initEvents" signature="initEvents()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="Ext.EventManager" line="105" name="E" />
              <variable attributes="__local__ private" citdl="this.anchor" line="106" name="a" />
              <variable attributes="__local__ private" citdl="Ext.fly()" line="108" name="el" />
              <variable attributes="__local__ private" citdl="Ext.fly()" line="124" name="icon" />
              <variable attributes="__local__ private" citdl="this.node.getOwnerTree()" line="136" name="ot" />
              <variable attributes="__local__ private" citdl="ot.enableDD" line="137" name="dd" />
            </scope>
            <scope ilk="function" line="147" lineend="149" name="getDDHandles" returns="Array" signature="getDDHandles()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="151" lineend="155" name="hide" signature="hide()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <variable citdl="String" line="153" name="display" />
            <scope ilk="function" line="157" lineend="161" name="show" signature="show()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="163" lineend="169" name="onContextMenu" signature="onContextMenu(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="171" lineend="194" name="onClick" signature="onClick(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="196" lineend="208" name="onDblClick" signature="onDblClick(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="210" lineend="214" name="onCheckChange" signature="onCheckChange()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.checkbox.checked" line="211" name="checked" />
            </scope>
            <variable citdl="checked" line="212" name="checked" />
            <scope ilk="function" line="216" lineend="220" name="ecClick" signature="ecClick(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="222" lineend="224" name="startDrop" signature="startDrop()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <variable citdl="Boolean" line="223" name="dropping" />
            <scope doc="delayed drop so the click event doesn&apos;t get fired on a drop" ilk="function" line="227" lineend="231" name="endDrop" signature="endDrop()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="233" lineend="236" name="expand" signature="expand()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="238" lineend="250" name="focus" signature="focus()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.node.getOwnerTree().getTreeEl().dom" line="244" name="noscroll" />
              <variable attributes="__local__ private" citdl="noscroll.scrollLeft" line="245" name="l" />
            </scope>
            <scope ilk="function" line="252" lineend="257" name="toggleCheck" signature="toggleCheck(value)">
              <variable ilk="argument" name="value" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.checkbox" line="253" name="cb" />
            </scope>
            <scope ilk="function" line="259" lineend="263" name="blur" signature="blur()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="265" lineend="285" name="animExpand" signature="animExpand(callback)">
              <variable ilk="argument" name="callback" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="Ext.get()" line="266" name="ct" />
            </scope>
            <scope ilk="function" line="287" lineend="293" name="highlight" signature="highlight()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.node.getOwnerTree()" line="288" name="tree" />
            </scope>
            <scope ilk="function" line="295" lineend="298" name="collapse" signature="collapse()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="300" lineend="316" name="animCollapse" signature="animCollapse(callback)">
              <variable ilk="argument" name="callback" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="Ext.get()" line="301" name="ct" />
            </scope>
            <scope ilk="function" line="318" lineend="320" name="getContainer" returns="this.ctNode" signature="getContainer()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="322" lineend="324" name="getEl" returns="this.wrap" signature="getEl()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="326" lineend="328" name="appendDDGhost" signature="appendDDGhost(ghostNode)">
              <variable ilk="argument" name="ghostNode" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="330" lineend="332" name="getDDRepairXY" returns="Ext.lib.Dom.getXY()" signature="getDDRepairXY()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="334" lineend="336" name="onRender" signature="onRender()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="338" lineend="373" name="render" signature="render(bulkRender)">
              <variable ilk="argument" name="bulkRender" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="n.attributes" line="339" name="a">
                <variable citdl="Object" line="361" name="qtipCfg">
                  <variable citdl="Ext.id()" line="361" name="target" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="this.node" line="339" name="n" />
              <variable attributes="__local__ private" citdl="n.parentNode" line="340" name="targetNode" />
            </scope>
            <scope ilk="function" line="375" lineend="411" name="renderElements" signature="renderElements(n, a, targetNode, bulkRender)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="targetNode" />
              <variable ilk="argument" name="bulkRender" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" line="379" name="cb" />
              <variable attributes="__local__ private" citdl="a.href" line="380" name="href" />
              <variable attributes="__local__ private" citdl="Array" line="389" name="buf" />
              <variable attributes="__local__ private" citdl="this.elNode.childNodes" line="400" name="cs" />
              <variable attributes="__local__ private" citdl="Number" line="404" name="index" />
            </scope>
            <variable citdl="n.parentNode" doc="add some indent caching, this helps performance when&#xA;rendering a large tree" line="377" name="indentMarkup" />
            <variable citdl="Ext.DomHelper.insertHtml()" line="393" name="wrap" />
            <variable citdl="this.wrap.childNodes[0]" line="398" name="elNode" />
            <variable citdl="this.wrap.childNodes[1]" line="399" name="ctNode" />
            <variable citdl="cs[0]" line="401" name="indentNode" />
            <variable citdl="cs[1]" line="402" name="ecNode" />
            <variable citdl="cs[2]" line="403" name="iconNode" />
            <variable citdl="cs[3]" line="406" name="checkbox" />
            <variable citdl="cs[index]" line="409" name="anchor" />
            <variable citdl="cs[index].firstChild" line="410" name="textNode" />
            <scope ilk="function" line="413" lineend="415" name="getAnchor" returns="this.anchor" signature="getAnchor()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="417" lineend="419" name="getTextEl" returns="this.textNode" signature="getTextEl()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="421" lineend="423" name="getIconEl" returns="this.iconNode" signature="getIconEl()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="425" lineend="427" name="isChecked" returns="this.checkbox" signature="isChecked()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="429" lineend="466" name="updateExpandIcon" signature="updateExpandIcon()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.node" line="431" name="n" />
              <variable attributes="__local__ private" citdl="String" line="431" name="c2" />
              <variable attributes="__local__ private" citdl="String" line="431" name="c1" />
              <variable attributes="__local__ private" citdl="n.isLast()" line="432" name="cls" />
              <variable attributes="__local__ private" citdl="n.hasChildNodes()" line="433" name="hasChild" />
              <variable attributes="__local__ private" citdl="String" line="460" name="ecc" />
            </scope>
            <variable citdl="Boolean" line="446" name="wasLeaf" />
            <variable citdl="c1" line="450" name="c1" />
            <variable citdl="c2" line="450" name="c2" />
            <variable citdl="ecc" line="462" name="className" />
            <variable citdl="ecc" line="463" name="ecc" />
            <scope ilk="function" line="468" lineend="485" name="getChildIndent" returns="this.childIndent" signature="getChildIndent()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="470" name="buf" />
              <variable attributes="__local__ private" citdl="this.node" line="471" name="p" />
            </scope>
            <scope ilk="function" line="487" lineend="500" name="renderIndent" signature="renderIndent()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="String" line="489" name="indent" />
              <variable attributes="__local__ private" citdl="this.node.parentNode" line="490" name="p" />
            </scope>
          </scope>
          <variable citdl="Boolean" line="14" name="appendOnly" />
          <scope ilk="class" line="15" lineend="116" name="TreeFilter">
            <scope attributes="__ctor__" doc="Note this class is experimental and doesn&apos;t update the indent (lines) or expand collapse icons of the nodes" ilk="function" line="15" lineend="19" name="TreeFilter" signature="TreeFilter(tree, config)">
              <variable citdl="TreePanel" ilk="argument" name="tree" />
              <variable citdl="Object" doc="(optional)" ilk="argument" name="config" />
              <variable citdl="TreeFilter" name="this" />
            </scope>
            <variable citdl="tree" line="16" name="tree" />
            <variable citdl="Object" line="17" lineend="114" name="filtered" />
            <variable citdl="Boolean" line="22" name="clearBlank" />
            <variable citdl="Boolean" line="23" name="reverse" />
            <variable citdl="Boolean" line="24" name="autoClear" />
            <variable citdl="Boolean" line="25" name="remove" />
            <scope doc="Filter the data by a specific attribute." ilk="function" line="34" lineend="56" name="filter" signature="filter(value, attr, startNode)">
              <variable citdl="String/RegExp" doc="Either string that the attribute value&#xA;should start with or a RegExp to test against the attribute" ilk="argument" name="value" />
              <variable citdl="String" doc="(optional) The attribute passed in your node&apos;s attributes collection. Defaults to &quot;text&quot;." ilk="argument" name="attr" />
              <variable citdl="TreeNode" doc="(optional) The node to start the filter at." ilk="argument" name="startNode" />
              <variable citdl="TreeFilter" name="this" />
              <variable attributes="__local__ private" line="36" name="f" />
              <variable attributes="__local__ private" citdl="value.length" line="38" name="vlen" />
              <scope attributes="__local__ private" doc="regex?" ilk="function" line="49" lineend="51" name="f" returns="value.test()" signature="f(n)">
                <variable ilk="argument" name="n" />
              </scope>
            </scope>
            <scope doc="Filter by a function. The passed function will be called with each&#xA;node in the tree (or from the startNode). If the function returns true, the node is kept&#xA;otherwise it is filtered. If a node is filtered, its children are also filtered." ilk="function" line="65" lineend="97" name="filterBy" signature="filterBy(fn, scope, startNode)">
              <variable citdl="Function" doc="The filter function" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to the current node)" ilk="argument" name="scope" />
              <variable ilk="argument" name="startNode" />
              <variable citdl="TreeFilter" name="this" />
              <variable attributes="__local__ private" citdl="this.reverse" line="70" name="rv" />
              <variable attributes="__local__ private" citdl="this.filtered" line="70" name="af" />
              <scope attributes="__local__ private" ilk="function" line="71" lineend="85" name="f" returns="Boolean" signature="f(n)">
                <variable ilk="argument" name="n" />
                <variable attributes="__local__ private" citdl="fn.call()" line="78" name="m" />
              </scope>
              <variable attributes="__local__ private" citdl="af[id]" line="90" name="n" />
            </scope>
            <scope doc="Clears the current filter. Note: with the &quot;remove&quot; option&#xA;set a filter cannot be cleared." ilk="function" line="103" lineend="115" name="clear" signature="clear()">
              <variable citdl="TreeFilter" name="this" />
              <variable attributes="__local__ private" citdl="this.tree" line="104" name="t" />
              <variable attributes="__local__ private" citdl="this.filtered" line="105" name="af" />
              <variable attributes="__local__ private" citdl="af[id]" line="108" name="n" />
            </scope>
          </scope>
          <scope ilk="class" line="16" lineend="36" name="AsyncTreeNode">
            <scope attributes="__ctor__" doc="{Object/String} attributes The attributes/config for the&#xA;node or just a string with the text for the node */" ilk="function" line="16" lineend="36" name="AsyncTreeNode" signature="AsyncTreeNode(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="AsyncTreeNode" name="this" />
            </scope>
            <variable citdl="Boolean" line="17" name="loaded" />
            <variable citdl="Boolean" line="18" name="loading" />
          </scope>
          <variable citdl="tree" line="16" name="tree" />
          <variable citdl="String" line="17" name="lastInsertClass" />
          <scope ilk="class" line="18" lineend="31" name="TreeEditor">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides editor functionality for inline tree node editing.  Any valid {@link Ext.form.Field} can be used&#xA;as the editor field." ilk="function" line="18" lineend="31" name="TreeEditor" signature="TreeEditor(tree, config)">
              <variable citdl="TreePanel" ilk="argument" name="tree" />
              <variable citdl="Object" doc="Either a prebuilt {@link Ext.form.Field} instance or a Field config object" ilk="argument" name="config" />
              <variable citdl="TreeEditor" name="this" />
              <variable attributes="__local__ private" citdl="config.events" line="20" name="field" />
            </scope>
            <variable citdl="tree" line="23" name="tree" />
          </scope>
          <variable citdl="Object" line="18" lineend="18" name="dragOverData" />
          <scope ilk="class" line="23" lineend="71" name="TreeSorter">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides sorting of nodes in a TreePanel" ilk="function" line="23" lineend="55" name="TreeSorter" signature="TreeSorter(tree, config)">
              <variable citdl="TreePanel" ilk="argument" name="tree" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="TreeSorter" name="this" />
              <variable attributes="__local__ private" citdl="this.dir" line="29" name="dsc" />
              <variable attributes="__local__ private" citdl="this.property" line="30" name="p" />
              <variable attributes="__local__ private" citdl="this.sortType" line="31" name="sortType" />
              <variable attributes="__local__ private" citdl="this.folderSort" line="32" name="fs" />
              <variable attributes="__local__ private" citdl="this.caseSensitive" line="33" name="cs" />
              <variable attributes="__local__ private" citdl="this.leafAttr" line="34" name="leafAttr" />
            </scope>
            <variable attributes="__local__ private" line="33" name="caseSensitive" />
            <scope ilk="function" line="36" lineend="54" name="sortFn" returns="Number" signature="sortFn(n1, n2)">
              <variable ilk="argument" name="n1" />
              <variable ilk="argument" name="n2" />
              <variable citdl="TreeSorter" name="this" />
              <variable attributes="__local__ private" citdl="sortType" line="45" name="v1" />
              <variable attributes="__local__ private" citdl="sortType" line="46" name="v2" />
            </scope>
            <scope ilk="function" line="58" lineend="60" name="doSort" signature="doSort(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeSorter" name="this" />
            </scope>
            <scope ilk="function" line="62" lineend="64" name="compareNodes" signature="compareNodes(n1, n2)">
              <variable ilk="argument" name="n1" />
              <variable ilk="argument" name="n2" />
              <variable citdl="TreeSorter" name="this" />
            </scope>
            <scope ilk="function" line="66" lineend="70" name="updateSort" signature="updateSort(tree, node)">
              <variable ilk="argument" name="tree" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeSorter" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="32" lineend="150" name="TreeNode">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: is to use the cls or iconCls attributes and add the icon via a CSS background image." ilk="function" line="32" lineend="150" name="TreeNode" signature="TreeNode(attributes)">
              <variable citdl="Object/String" doc="The attributes/config for the node or just a string with the text for the node" ilk="argument" name="attributes" />
              <variable citdl="TreeNode" name="this" />
              <variable attributes="__local__ private" citdl="this.attributes.uiProvider" line="143" name="uiClass" />
            </scope>
            <variable citdl="Boolean" line="37" name="childrenRendered" />
            <variable citdl="Boolean" line="38" name="rendered" />
            <variable citdl="attributes.expanded" line="40" name="expanded" />
            <variable citdl="attributes.isTarget" line="41" name="isTarget" />
            <variable citdl="attributes.draggable" line="42" name="draggable" />
            <variable citdl="attributes.allowChildren" line="43" name="allowChildren" />
            <variable citdl="String" doc="Read-only. The text for this node. To change it use setText()." line="49" name="text" />
            <variable citdl="Boolean" doc="True if this node is disabled." line="54" name="disabled" />
            <variable citdl="TreeNodeUI" doc="Read-only. The UI for this node" line="149" name="ui" />
          </scope>
          <scope ilk="class" line="35" lineend="221" name="TreePanel">
            <scope attributes="__ctor__" doc="{Object} config */" ilk="function" line="35" lineend="221" name="TreePanel" signature="TreePanel(el, config)">
              <variable citdl="String/HTMLElement/Element" doc="The container element" ilk="argument" name="el" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="TreePanel" name="this" />
            </scope>
            <variable citdl="Ext.get()" line="38" name="el" />
            <variable citdl="this.el.id" doc="Read-only. The id of the container element becomes this TreePanel&apos;s id." line="43" name="id" />
          </scope>
          <scope ilk="class" line="37" lineend="70" name="TreeLoader">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A TreeLoader provides for lazy loading of an {@link Ext.tree.TreeNode}&apos;s child&#xA;nodes from a specified URL. The response must be a javascript Array definition&#xA;who&apos;s elements are node definition objects. eg:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;[{ &apos;id&apos;: 1, &apos;text&apos;: &apos;A folder Node&apos;, &apos;leaf&apos;: false },&#xA;{ &apos;id&apos;: 2, &apos;text&apos;: &apos;A leaf Node&apos;, &apos;leaf&apos;: true }]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;br&gt;&lt;br&gt;&#xA;A server request is sent, and child nodes are loaded only when a node is expanded.&#xA;The loading node&apos;s id is passed to the server under the parameter name &quot;node&quot; to&#xA;enable the server to produce the correct child nodes.&#xA;&lt;br&gt;&lt;br&gt;&#xA;To pass extra parameters, an event handler may be attached to the &quot;beforeload&quot;&#xA;event, and the parameters specified in the TreeLoader&apos;s baseParams property:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;myTreeLoader.on(&quot;beforeload&quot;, function(treeLoader, node) {&#xA;this.baseParams.category = node.attributes.category;&#xA;}, this);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;&#xA;This would pass an HTTP parameter called &quot;category&quot; to the server containing&#xA;the value of the Node&apos;s &quot;category&quot; attribute." ilk="function" line="37" lineend="70" name="TreeLoader" signature="TreeLoader(config)">
              <variable citdl="Object" doc="A config object containing config properties." ilk="argument" name="config" />
              <variable citdl="TreeLoader" name="this" />
            </scope>
            <variable citdl="Object" line="38" lineend="38" name="baseParams" />
            <variable citdl="String" line="39" name="requestMethod" />
          </scope>
          <scope ilk="class" line="202" lineend="214" name="MultiSelectionModel">
            <scope attributes="__ctor__" doc="Multi selection for a TreePanel." ilk="function" line="202" lineend="214" name="MultiSelectionModel" signature="MultiSelectionModel()">
              <variable citdl="MultiSelectionModel" name="this" />
            </scope>
            <variable citdl="Array" line="203" name="selNodes" />
            <variable citdl="Object" line="204" lineend="204" name="selMap" />
          </scope>
          <scope ilk="function" line="503" lineend="505" name="RootTreeNodeUI" signature="RootTreeNodeUI()">
            <variable citdl="tree" name="this" />
          </scope>
        </variable>
        <scope ilk="class" line="37" lineend="44" name="ReaderLayout">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: This is a pre-built layout that represents a classic, 5-pane application.  It consists of a header, a primary&#xA;center region containing two nested regions (a top one for a list view and one for item preview below),&#xA;and regions on either side that can be used for navigation, application commands, informational displays, etc.&#xA;The setup and configuration work exactly the same as it does for a {@link Ext.BorderLayout} - this class simply&#xA;expedites the setup of the overall layout and regions for this common application style.&#xA;Example:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var reader = new Ext.ReaderLayout();&#xA;var CP = Ext.ContentPanel;  // shortcut for adding&#xA;reader.beginUpdate();&#xA;reader.add(&quot;north&quot;, new CP(&quot;north&quot;, &quot;North&quot;));&#xA;reader.add(&quot;west&quot;, new CP(&quot;west&quot;, {title: &quot;West&quot;}));&#xA;reader.add(&quot;east&quot;, new CP(&quot;east&quot;, {title: &quot;East&quot;}));&#xA;reader.regions.listView.add(new CP(&quot;listView&quot;, &quot;List&quot;));&#xA;reader.regions.preview.add(new CP(&quot;preview&quot;, &quot;Preview&quot;));&#xA;reader.endUpdate();&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="37" lineend="103" name="ReaderLayout" signature="ReaderLayout(config, renderTo)">
            <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
            <variable ilk="argument" name="renderTo" />
            <variable citdl="ReaderLayout" name="this" />
            <variable attributes="__local__ private" citdl="config" line="38" name="c" />
            <variable attributes="__local__ private" citdl="Ext.BorderLayout" line="95" name="inner" />
          </scope>
          <variable citdl="Object" line="38" lineend="38" name="size" />
          <variable citdl="inner.getRegion()" line="101" name="preview" />
          <variable citdl="inner.getRegion()" line="102" name="listView" />
        </scope>
        <scope ilk="function" line="38" lineend="49" name="NorthLayoutRegion" signature="NorthLayoutRegion(mgr, config)">
          <variable ilk="argument" name="mgr" />
          <variable ilk="argument" name="config" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="config.initialSize" line="45" name="size" />
        </scope>
        <scope ilk="class" line="38" lineend="46" name="LayoutRegion">
          <scope attributes="__ctor__" doc="This class represents a region in a layout manager." ilk="function" line="38" lineend="68" name="LayoutRegion" signature="LayoutRegion(mgr, config, pos)">
            <variable ilk="argument" name="mgr" />
            <variable ilk="argument" name="config" />
            <variable ilk="argument" name="pos" />
            <variable citdl="LayoutRegion" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomHelper" line="40" name="dh" />
          </scope>
          <variable citdl="dh.append()" doc="Ext.Element */" line="42" name="el" />
          <variable citdl="dh.append()" doc="Ext.Element */" line="48" name="titleEl" />
          <variable citdl="this.titleEl.dom.firstChild" doc="HTMLElement */" line="51" name="titleTextEl" />
          <variable citdl="Ext.get()" line="52" name="tools" />
          <variable citdl="this.createTool()" line="53" name="closeBtn" />
          <variable citdl="Boolean" line="59" name="visible" />
          <variable citdl="Boolean" line="60" name="collapsed" />
        </scope>
        <scope ilk="class" line="40" lineend="154" name="UpdateManager">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides AJAX-style update for Element object.&lt;br&gt;&lt;br&gt;&#xA;Usage:&lt;br&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// Get it from a Ext.Element object&#xA;var el = Ext.get(&quot;foo&quot;);&#xA;var mgr = el.getUpdateManager();&#xA;mgr.update(&quot;http://myserver.com/index.php&quot;, &quot;param1=1&amp;amp;param2=2&quot;);&#xA;...&#xA;mgr.formUpdate(&quot;myFormId&quot;, &quot;http://myserver.com/index.php&quot;);&#xA;&lt;br&gt;&#xA;// or directly (returns the same UpdateManager instance)&#xA;var mgr = new Ext.UpdateManager(&quot;myElementId&quot;);&#xA;mgr.startAutoRefresh(60, &quot;http://myserver.com/index.php&quot;);&#xA;mgr.on(&quot;update&quot;, myFcnNeedsToKnow);&#xA;&lt;br&gt;&#xA;// short handed call directly from the element object&#xA;Ext.get(&quot;foo&quot;).load({&#xA;url: &quot;bar.php&quot;,&#xA;scripts:true,&#xA;params: &quot;for=bar&quot;,&#xA;text: &quot;Loading Foo...&quot;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="40" lineend="154" name="UpdateManager" returns="el.updateManager" signature="UpdateManager(el, forceNew)">
            <variable citdl="String/HTMLElement/Ext.Element" doc="The element to update" ilk="argument" name="el" />
            <variable citdl="Boolean" doc="(optional) By default the constructor checks to see if the passed element already has an UpdateManager and if it does it returns the same instance. This will skip that check (useful for extending this class)." ilk="argument" name="forceNew" />
            <variable citdl="UpdateManager" name="this" />
            <variable attributes="__local__ private" citdl="Ext.UpdateManager.defaults" line="80" name="d" />
          </scope>
          <variable citdl="Ext.Element" doc="The Element object" line="49" name="el" />
          <variable citdl="String" doc="Cached url to use for refreshes. Overwritten every time update() is called unless &quot;discardUrl&quot; param is set to true." line="54" name="defaultUrl" />
          <variable citdl="String" doc="Blank page URL to use with SSL file uploads (Defaults to Ext.UpdateManager.defaults.sslBlankUrl or &quot;about:blank&quot;)." line="85" name="sslBlankUrl" />
          <variable citdl="Boolean" doc="Whether to append unique parameter on get request to disable caching (Defaults to Ext.UpdateManager.defaults.disableCaching or false)." line="90" name="disableCaching" />
          <variable citdl="String" doc="Text for loading indicator (Defaults to Ext.UpdateManager.defaults.indicatorText or &apos;&amp;lt;div class=&quot;loading-indicator&quot;&amp;gt;Loading...&amp;lt;/div&amp;gt;&apos;)." line="95" name="indicatorText" />
          <variable citdl="String" doc="Whether to show indicatorText when loading (Defaults to Ext.UpdateManager.defaults.showLoadIndicator or true)." line="100" name="showLoadIndicator" />
          <variable citdl="Number" doc="Timeout for requests or form posts in seconds (Defaults to Ext.UpdateManager.defaults.timeout or 30 seconds)." line="105" name="timeout" />
          <variable citdl="Boolean" doc="True to process scripts in the output (Defaults to Ext.UpdateManager.defaults.loadScripts (false))." line="111" name="loadScripts" />
          <variable doc="Transaction object of current executing transaction" line="116" name="transaction" />
          <variable attributes="private" doc="*/" line="121" name="autoRefreshProcId" />
          <variable citdl="Function" doc="Delegate for refresh() prebound to &quot;this&quot;, use myUpdater.refreshDelegate.createCallback(arg1, arg2) to bind arguments" line="126" name="refreshDelegate" />
          <variable citdl="Function" doc="Delegate for update() prebound to &quot;this&quot;, use myUpdater.updateDelegate.createCallback(arg1, arg2) to bind arguments" line="131" name="updateDelegate" />
          <variable citdl="Function" doc="Delegate for formUpdate() prebound to &quot;this&quot;, use myUpdater.formUpdateDelegate.createCallback(arg1, arg2) to bind arguments" line="136" name="formUpdateDelegate" />
          <variable attributes="private" citdl="this.processSuccess.createDelegate()" doc="*/" line="140" name="successDelegate" />
          <variable attributes="private" citdl="this.processFailure.createDelegate()" doc="*/" line="144" name="failureDelegate" />
          <variable citdl="Ext.UpdateManager.BasicRenderer" doc="The renderer for this UpdateManager. Defaults to {@link Ext.UpdateManager.BasicRenderer}." line="150" name="renderer" />
          <variable citdl="Object" doc="The defaults collection enables customizing the default properties of UpdateManager" line="406" lineend="439" name="defaults">
            <variable citdl="Number" doc="Timeout for requests or form posts in seconds (Defaults 30 seconds)." line="411" name="timeout" />
            <variable citdl="Boolean" doc="True to process scripts by default (Defaults to false)." line="417" name="loadScripts" />
            <variable citdl="String" doc="Blank page URL to use with SSL file uploads (Defaults to &quot;javascript:false&quot;)." line="423" name="sslBlankUrl" />
            <variable citdl="Boolean" doc="Whether to append unique parameter on get request to disable caching (Defaults to false)." line="428" name="disableCaching" />
            <variable citdl="Boolean" doc="Whether to show indicatorText when loading (Defaults to true)." line="433" name="showLoadIndicator" />
            <variable citdl="String" doc="Text for loading indicator (Defaults to &apos;&amp;lt;div class=&quot;loading-indicator&quot;&amp;gt;Loading...&amp;lt;/div&amp;gt;&apos;)." line="438" name="indicatorText" />
          </variable>
          <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Static convenience method. This method is deprecated in favor of el.load({url:&apos;foo.php&apos;, ...}).&#xA;*Usage:&#xA;&lt;pre&gt;&lt;code&gt;Ext.UpdateManager.updateElement(&quot;my-div&quot;, &quot;stuff.php&quot;);&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="453" lineend="457" name="updateElement" signature="updateElement(el, url, params, options)">
            <variable citdl="String/HTMLElement/Ext.Element" doc="The element to update" ilk="argument" name="el" />
            <variable citdl="String" doc="The url" ilk="argument" name="url" />
            <variable citdl="String/Object" doc="(optional) Url encoded param string or an object of name/value pairs" ilk="argument" name="params" />
            <variable citdl="Object" doc="(optional) A config object with any of the UpdateManager properties you want to set - for example: {disableCaching:true, indicatorText: &quot;Loading data...&quot;}" ilk="argument" name="options" />
            <variable citdl="UpdateManager" name="this" />
            <variable attributes="__local__ private" citdl="Ext.get().getUpdateManager()" line="454" name="um" />
          </scope>
          <variable citdl="Ext.UpdateManager.updateElement" doc="alias for backwards compat" line="459" name="update" />
          <scope ilk="class" line="464" lineend="479" name="BasicRenderer">
            <scope attributes="__ctor__" doc="Default Content renderer. Updates the elements innerHTML with the responseText." ilk="function" line="464" lineend="464" name="BasicRenderer" signature="BasicRenderer()">
              <variable citdl="BasicRenderer" name="this" />
            </scope>
            <scope doc="This is called when the transaction is completed and it&apos;s time to update the element - The BasicRenderer&#xA;updates the elements innerHTML with the responseText - To perform a custom render (i.e. XML or JSON processing),&#xA;create an object with a &quot;render(el, response)&quot; method and pass it to setRenderer on the UpdateManager." ilk="function" line="476" lineend="478" name="render" signature="render(el, response, updateManager, callback)">
              <variable citdl="Ext.Element" doc="The element being rendered" ilk="argument" name="el" />
              <variable citdl="Object" doc="The YUI Connect response object" ilk="argument" name="response" />
              <variable citdl="UpdateManager" doc="The calling update manager" ilk="argument" name="updateManager" />
              <variable citdl="Function" doc="A callback that will need to be called if loadScripts is true on the UpdateManager" ilk="argument" name="callback" />
              <variable citdl="BasicRenderer" name="this" />
            </scope>
          </scope>
        </scope>
        <variable citdl="Ext.SplitBar.TOP" line="41" name="placement" />
        <variable citdl="config.constrain" line="41" name="constrain" />
        <variable citdl="Ext.SplitBar.VERTICAL" line="42" name="orientation" />
        <variable citdl="Ext.Element.VISIBILITY" line="42" name="visibilityMode" />
        <scope ilk="class" line="44" lineend="128" name="View">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Create a &quot;View&quot; for an element based on a data model or UpdateManager and the supplied DomHelper template.&#xA;This class also supports single and multi selection modes. &lt;br&gt;&#xA;Create a data model bound view:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var store = new Ext.data.Store(...);&#xA;var view = new Ext.View(&quot;my-element&quot;,&#xA;&apos;&amp;lt;div id=&quot;{0}&quot;&amp;gt;{2} - {1}&amp;lt;/div&amp;gt;&apos;, // auto create template&#xA;singleSelect: true,&#xA;selectedClass: &quot;ydataview-selected&quot;,&#xA;store: store&#xA;});&#xA;// listen for node click?&#xA;view.on(&quot;click&quot;, function(vw, index, node, e){&#xA;alert(&apos;Node &quot;&apos; + node.id + &apos;&quot; at index: &apos; + index + &quot; was clicked.&quot;);&#xA;});&#xA;// load XML data&#xA;dataModel.load(&quot;foobar.xml&quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;For an example of creating a JSON/UpdateManager view, see {@link Ext.JsonView}.&#xA;&lt;br&gt;&lt;br&gt;&#xA;&lt;b&gt;Note: The root of your template must be a single node. Table/row implementations may work but are not supported due to&#xA;IE&quot;s limited insertion support with tables and Opera&quot;s faulty event bubbling.&lt;/b&gt;" ilk="function" line="44" lineend="128" name="View" signature="View(container, tpl, config)">
            <variable citdl="String/HTMLElement/Element" doc="The container element where the view is to be rendered." ilk="argument" name="container" />
            <variable citdl="String/DomHelper.Template" doc="The rendering template or a string to create a template with" ilk="argument" name="tpl" />
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="View" name="this" />
          </scope>
          <variable citdl="Ext.get()" line="45" name="el" />
          <variable citdl="Ext.DomHelper.Template" doc="The template used by this View" line="54" name="tpl" />
          <variable citdl="Array" line="121" name="selections" />
          <variable citdl="Array" line="122" name="nodes" />
          <variable citdl="Ext.CompositeElementLite" line="123" name="cmp" />
        </scope>
        <variable citdl="this.dom.id" line="44" name="id" />
        <scope ilk="class" line="47" lineend="107" name="TabPanel">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: A lightweight tab container.&#xA;&lt;br&gt;&lt;br&gt;&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// basic tabs 1, built from existing content&#xA;var tabs = new Ext.TabPanel(&quot;tabs1&quot;);&#xA;tabs.addTab(&quot;script&quot;, &quot;View Script&quot;);&#xA;tabs.addTab(&quot;markup&quot;, &quot;View Markup&quot;);&#xA;tabs.activate(&quot;script&quot;);&#xA;// more advanced tabs, built from javascript&#xA;var jtabs = new Ext.TabPanel(&quot;jtabs&quot;);&#xA;jtabs.addTab(&quot;jtabs-1&quot;, &quot;Normal Tab&quot;, &quot;My content was added during construction.&quot;);&#xA;// set up the UpdateManager&#xA;var tab2 = jtabs.addTab(&quot;jtabs-2&quot;, &quot;Ajax Tab 1&quot;);&#xA;var updater = tab2.getUpdateManager();&#xA;updater.setDefaultUrl(&quot;ajax1.htm&quot;);&#xA;tab2.on(&apos;activate&apos;, updater.refresh, updater, true);&#xA;// Use setUrl for Ajax loading&#xA;var tab3 = jtabs.addTab(&quot;jtabs-3&quot;, &quot;Ajax Tab 2&quot;);&#xA;tab3.setUrl(&quot;ajax2.htm&quot;, null, true);&#xA;// Disabled tab&#xA;var tab4 = jtabs.addTab(&quot;tabs1-5&quot;, &quot;Disabled Tab&quot;, &quot;Can&apos;t see me cause I&apos;m disabled&quot;);&#xA;tab4.disable();&#xA;jtabs.activate(&quot;jtabs-1&quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="47" lineend="107" name="TabPanel" signature="TabPanel(container, config)">
            <variable citdl="String/HTMLElement/Ext.Element" doc="The id, DOM element or Ext.Element container where this TabPanel is to be rendered." ilk="argument" name="container" />
            <variable citdl="Object/Boolean" doc="Config object to set any properties for this TabPanel, or true to render the tabs on the bottom." ilk="argument" name="config" />
            <variable citdl="TabPanel" name="this" />
          </scope>
          <variable citdl="Ext.Element" doc="The container element for this TabPanel." line="52" name="el" />
          <variable citdl="config" line="55" name="tabPosition" />
          <variable citdl="Ext.get()" line="61" name="bodyEl" />
          <variable citdl="Ext.get()" line="64" name="stripWrap" />
          <variable citdl="Ext.get()" line="65" name="stripEl" />
          <variable citdl="Ext.get()" line="66" name="stripBody" />
          <variable citdl="Array" line="77" name="items" />
          <variable line="81" name="active" />
          <variable citdl="this.activate.createDelegate()" line="82" name="activateDelegate" />
          <variable citdl="this.el.getPadding()" line="103" name="cpad" />
          <variable citdl="Number" line="104" name="hiddenCount" />
          <scope doc="*/" ilk="function" line="716" lineend="721" name="createStrip" returns="strip" signature="createStrip(container)">
            <variable ilk="argument" name="container" />
            <variable citdl="TabPanel" name="this" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="717" name="strip" />
          </scope>
          <scope doc="*/" ilk="function" line="723" lineend="727" name="createStripList" returns="strip.firstChild.firstChild.firstChild.firstChild" signature="createStripList(strip)">
            <variable ilk="argument" name="strip" />
            <variable citdl="TabPanel" name="this" />
          </scope>
          <scope doc="*/" ilk="function" line="729" lineend="735" name="createBody" returns="body" signature="createBody(container)">
            <variable ilk="argument" name="container" />
            <variable citdl="TabPanel" name="this" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="730" name="body" />
          </scope>
          <scope doc="*/" ilk="function" line="737" lineend="746" name="createItemBody" returns="body" signature="createItemBody(bodyEl, id)">
            <variable ilk="argument" name="bodyEl" />
            <variable ilk="argument" name="id" />
            <variable citdl="TabPanel" name="this" />
            <variable attributes="__local__ private" citdl="Ext.getDom()" line="738" name="body" />
          </scope>
          <scope doc="*/" ilk="function" line="748" lineend="775" name="createStripElements" signature="createStripElements(stripEl, text, closable)">
            <variable ilk="argument" name="stripEl" />
            <variable ilk="argument" name="text" />
            <variable ilk="argument" name="closable" />
            <variable citdl="TabPanel" name="this" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="749" name="td" />
            <variable attributes="__local__ private" citdl="this.closeTpl.overwrite()" line="760" name="el" />
            <variable attributes="__local__ private" citdl="el.getElementsByTagName()[0]" line="761" name="close" />
            <variable attributes="__local__ private" citdl="el.getElementsByTagName()[0]" line="762" name="inner" />
          </scope>
          <variable citdl="Ext.Template" line="758" name="closeTpl" />
          <variable citdl="Ext.Template" line="769" name="tabTpl" />
        </scope>
        <variable citdl="config.zindex" line="48" name="zindex" />
        <scope ilk="class" line="51" lineend="83" name="JsonView">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Shortcut class to create a JSON + {@link Ext.UpdateManager} template view. Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var view = new Ext.JsonView(&quot;my-element&quot;,&#xA;&apos;&amp;lt;div id=&quot;{id}&quot;&amp;gt;{foo} - {bar}&amp;lt;/div&amp;gt;&apos;, // auto create template&#xA;{ multiSelect: true, jsonRoot: &quot;data&quot; }&#xA;// listen for node click?&#xA;view.on(&quot;click&quot;, function(vw, index, node, e){&#xA;alert(&apos;Node &quot;&apos; + node.id + &apos;&quot; at index: &apos; + index + &quot; was clicked.&quot;);&#xA;});&#xA;// direct load of JSON data&#xA;view.load(&quot;foobar.php&quot;);&#xA;// Example from my blog list&#xA;var tpl = new Ext.Template(&#xA;&apos;&amp;lt;div class=&quot;entry&quot;&amp;gt;&apos; +&#xA;&apos;&amp;lt;a class=&quot;entry-title&quot; href=&quot;{link}&quot;&amp;gt;{title}&amp;lt;/a&amp;gt;&apos; +&#xA;&quot;&amp;lt;h4&amp;gt;{date} by {author} | {comments} Comments&amp;lt;/h4&amp;gt;{description}&quot; +&#xA;&quot;&amp;lt;/div&amp;gt;&amp;lt;hr /&amp;gt;&quot;&#xA;var moreView = new Ext.JsonView(&quot;entry-list&quot;, tpl, {&#xA;jsonRoot: &quot;posts&quot;&#xA;});&#xA;moreView.on(&quot;beforerender&quot;, this.sortEntries, this);&#xA;moreView.load({&#xA;url: &quot;/blog/get-posts.php&quot;,&#xA;params: &quot;allposts=true&quot;,&#xA;text: &quot;Loading Blog Entries...&quot;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="51" lineend="83" name="JsonView" signature="JsonView(container, tpl, config)">
            <variable citdl="String/HTMLElement/Element" doc="The container element where the view is to be rendered." ilk="argument" name="container" />
            <variable citdl="Template" doc="The rendering template" ilk="argument" name="tpl" />
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="JsonView" name="this" />
            <variable attributes="__local__ private" citdl="this.el.getUpdateManager()" line="54" name="um" />
          </scope>
        </scope>
        <variable citdl="config.shadowOffset" line="51" name="shadowOffset" />
        <scope ilk="class" line="55" lineend="218" name="KeyMap">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Handles mapping keys to actions for an element. One key map can be used for multiple actions.&#xA;The constructor accepts the same config object as defined by {@link #addBinding}.&#xA;If you bind a callback function to a KeyMap, anytime the KeyMap handles an expected key&#xA;combination it will call the function with this signature (if the match is a multi-key&#xA;combination the callback will still be called only once): (String key, Ext.EventObject e)&#xA;A KeyMap can also handle a string representation of keys.&lt;br /&gt;&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// map one key by key code&#xA;var map = new Ext.KeyMap(&quot;my-element&quot;, {&#xA;key: 13, // or Ext.EventObject.ENTER&#xA;fn: myHandler,&#xA;scope: myObject&#xA;});&#xA;// map multiple keys to one action by string&#xA;var map = new Ext.KeyMap(&quot;my-element&quot;, {&#xA;key: &quot;a\r\n\t&quot;,&#xA;fn: myHandler,&#xA;scope: myObject&#xA;});&#xA;// map multiple keys to multiple actions by strings and array of codes&#xA;var map = new Ext.KeyMap(&quot;my-element&quot;, [&#xA;key: [10,13],&#xA;fn: function(){ alert(&quot;Return was pressed&quot;); }&#xA;}, {&#xA;key: &quot;abc&quot;,&#xA;fn: function(){ alert(&apos;a, b or c was pressed&apos;); }&#xA;}, {&#xA;key: &quot;\t&quot;,&#xA;ctrl:true,&#xA;shift:true,&#xA;fn: function(){ alert(&apos;Control + shift + tab was pressed.&apos;); }&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;b&gt;Note: A KeyMap starts enabled&lt;/b&gt;" ilk="function" line="55" lineend="63" name="KeyMap" signature="KeyMap(el, config, eventName)">
            <variable citdl="String/HTMLElement/Ext.Element" doc="The element to bind to" ilk="argument" name="el" />
            <variable citdl="Object" doc="The config (see {@link #addBinding})" ilk="argument" name="config" />
            <variable citdl="String" doc="(optional) The event to bind to (defaults to &quot;keydown&quot;)" ilk="argument" name="eventName" />
            <variable citdl="KeyMap" name="this" />
          </scope>
          <variable citdl="Ext.get()" line="56" name="el" />
          <variable citdl="eventName" line="57" name="eventName" />
          <variable citdl="Array" line="58" name="bindings" />
          <variable citdl="Boolean" doc="True to stop the event from bubbling and prevent the default browser action if the&#xA;key was handled by the KeyMap (defaults to false)" line="71" name="stopEvent" />
          <scope doc="Add a new binding to this KeyMap. The following config object properties are supported:&#xA;&lt;pre&gt;&#xA;Property    Type             Description&#xA;----------  ---------------  ----------------------------------------------------------------------&#xA;key         String/Array     A single keycode or an array of keycodes to handle&#xA;shift       Boolean          True to handle key only when shift is pressed (defaults to false)&#xA;ctrl        Boolean          True to handle key only when ctrl is pressed (defaults to false)&#xA;alt         Boolean          True to handle key only when alt is pressed (defaults to false)&#xA;fn          Function         The function to call when KeyMap finds the expected key combination&#xA;scope       Object           The scope of the callback function&#xA;&lt;/pre&gt;&#xA;&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// Create a KeyMap&#xA;var map = new Ext.KeyMap(document, {&#xA;key: Ext.EventObject.ENTER,&#xA;fn: handleKey,&#xA;scope: this&#xA;});&#xA;//Add a new binding to the existing KeyMap later&#xA;map.addBinding({&#xA;key: &apos;abc&apos;,&#xA;shift: true,&#xA;fn: handleKey,&#xA;scope: this&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="105" lineend="151" name="addBinding" signature="addBinding(config)">
            <variable citdl="Object/Array" doc="A single KeyMap config or an array of configs" ilk="argument" name="config" />
            <variable citdl="KeyMap" name="this" />
            <variable attributes="__local__ private" citdl="config.ctrl" line="117" name="ctrl" />
            <variable attributes="__local__ private" citdl="config.shift" line="117" name="shift" />
            <variable attributes="__local__ private" citdl="config.scope" line="117" name="scope" />
            <variable attributes="__local__ private" citdl="config.alt" line="117" name="alt" />
            <variable attributes="__local__ private" citdl="config.key" line="117" name="keyCode" />
            <variable attributes="__local__ private" citdl="config.fn" line="117" name="fn" />
            <variable attributes="__local__ private" citdl="Array" line="119" name="ks" />
            <variable attributes="__local__ private" citdl="keyCode.toUpperCase()" line="120" name="keyString" />
            <variable attributes="__local__ private" citdl="keyCode" line="126" name="keyArray" />
            <scope attributes="__local__ private" ilk="function" line="127" lineend="149" name="handler" signature="handler(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="e.getKey()" line="129" name="k" />
            </scope>
          </scope>
          <scope doc="Shorthand for adding a single key listener" ilk="function" line="161" lineend="179" name="on" signature="on(key, fn, scope)">
            <variable citdl="Number/Array/Object" doc="Either the numeric key code, array of key codes or an object with the&#xA;following options:&#xA;{key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}" ilk="argument" name="key" />
            <variable citdl="Function" doc="The function to call" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The scope of the function" ilk="argument" name="scope" />
            <variable citdl="KeyMap" name="this" />
            <variable attributes="__local__ private" citdl="key.shift" line="162" name="shift" />
            <variable attributes="__local__ private" citdl="key.alt" line="162" name="alt" />
            <variable attributes="__local__ private" citdl="key.key" line="162" name="keyCode" />
            <variable attributes="__local__ private" citdl="key.ctrl" line="162" name="ctrl" />
          </scope>
          <scope doc="private" ilk="function" line="182" lineend="189" name="handleKeyDown" signature="handleKeyDown(e)">
            <variable ilk="argument" name="e" />
            <variable citdl="KeyMap" name="this" />
            <variable attributes="__local__ private" citdl="this.bindings" doc="just in case" line="184" name="b" />
          </scope>
          <scope doc="Returns true if this KeyMap is enabled" ilk="function" line="195" lineend="197" name="isEnabled" returns="Boolean" signature="isEnabled()">
            <variable citdl="KeyMap" name="this" />
          </scope>
          <scope doc="Enables this KeyMap" ilk="function" line="202" lineend="207" name="enable" signature="enable()">
            <variable citdl="KeyMap" name="this" />
          </scope>
          <variable citdl="Boolean" line="205" name="enabled" />
          <scope doc="Disable this KeyMap" ilk="function" line="212" lineend="217" name="disable" signature="disable()">
            <variable citdl="KeyMap" name="this" />
          </scope>
        </scope>
        <variable citdl="Ext.Shadow" line="55" name="shadow" />
        <variable citdl="Object" doc="&lt;p&gt;A class to provide basic animation and visual effects support.  &lt;b&gt;Note:&lt;/b&gt; This class is automatically applied&#xA;to the {@link Ext.Element} interface when included, so all effects calls should be performed via Element.&#xA;Conversely, since the effects are not actually defined in Element, Ext.Fx &lt;b&gt;must&lt;/b&gt; be included in order for the&#xA;Element effects to work.&lt;/p&gt;&lt;br/&gt;&#xA;&#xA;&lt;p&gt;It is important to note that although the Fx methods and many non-Fx Element methods support &quot;method chaining&quot; in that&#xA;they return the Element object itself as the method return value, it is not always possible to mix the two in a single&#xA;method chain.  The Fx methods use an internal effects queue so that each effect can be properly timed and sequenced.&#xA;Non-Fx methods, on the other hand, have no such internal queueing and will always execute immediately.  For this reason,&#xA;while it may be possible to mix certain Fx and non-Fx method calls in a single chain, it may not always provide the&#xA;expected results and should be done with care.&lt;/p&gt;&lt;br/&gt;&#xA;&#xA;&lt;p&gt;Motion effects support 8-way anchoring, meaning that you can choose one of 8 different anchor points on the Element&#xA;that will serve as either the start or end point of the animation.  Following are all of the supported anchor positions:&lt;/p&gt;&#xA;&lt;pre&gt;&#xA;Value  Description&#xA;-----  -----------------------------&#xA;tl     The top left corner&#xA;t      The center of the top edge&#xA;tr     The top right corner&#xA;l      The center of the left edge&#xA;r      The center of the right edge&#xA;bl     The bottom left corner&#xA;b      The center of the bottom edge&#xA;br     The bottom right corner&#xA;&lt;/pre&gt;&#xA;&lt;b&gt;Although some Fx methods accept specific custom config parameters, the ones shown in the Config Options section&#xA;below are common options that can be passed to any Fx method.&lt;/b&gt;" line="56" lineend="992" name="Fx">
          <scope doc="Slides the element into view.  An anchor point can be optionally passed to set the point of&#xA;origin for the slide effect.  This function automatically handles wrapping the element with&#xA;a fixed-size container if needed.  See the Fx class overview for valid anchor point options.&#xA;Usage:&#xA;*&lt;pre&gt;&lt;code&gt;&#xA;// default: slide the element in from the top&#xA;el.slideIn();&#xA;// custom: slide the element in from the right with a 2-second duration&#xA;el.slideIn(&apos;r&apos;, { duration: 2 });&#xA;// common config options shown with default values&#xA;el.slideIn(&apos;t&apos;, {&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="79" lineend="170" name="slideIn" returns="Ext.Element" signature="slideIn(anchor, o)">
            <variable citdl="String" doc="(optional) One of the valid Fx anchor positions (defaults to top: &apos;t&apos;)" ilk="argument" name="anchor" />
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="80" name="el" />
          </scope>
          <scope doc="Slides the element out of view.  An anchor point can be optionally passed to set the end point&#xA;for the slide effect.  When the effect is completed, the element will be hidden (visibility =&#xA;&apos;hidden&apos;) but block elements will still take up space in the document.  The element must be removed&#xA;from the DOM using the &apos;remove&apos; config option if desired.  This function automatically handles&#xA;wrapping the element with a fixed-size container if needed.  See the Fx class overview for valid anchor point options.&#xA;Usage:&#xA;*&lt;pre&gt;&lt;code&gt;&#xA;// default: slide the element out to the top&#xA;el.slideOut();&#xA;// custom: slide the element out to the right with a 2-second duration&#xA;el.slideOut(&apos;r&apos;, { duration: 2 });&#xA;// common config options shown with default values&#xA;el.slideOut(&apos;t&apos;, {&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5,&#xA;remove: false,&#xA;useDisplay: false&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="198" lineend="280" name="slideOut" returns="Ext.Element" signature="slideOut(anchor, o)">
            <variable citdl="String" doc="(optional) One of the valid Fx anchor positions (defaults to top: &apos;t&apos;)" ilk="argument" name="anchor" />
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="199" name="el" />
          </scope>
          <scope doc="Fades the element out while slowly expanding it in all directions.  When the effect is completed, the&#xA;element will be hidden (visibility = &apos;hidden&apos;) but block elements will still take up space in the document.&#xA;The element must be removed from the DOM using the &apos;remove&apos; config option if desired.&#xA;Usage:&#xA;*&lt;pre&gt;&lt;code&gt;&#xA;// default&#xA;el.puff();&#xA;// common config options shown with default values&#xA;el.puff({&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5,&#xA;remove: false,&#xA;useDisplay: false&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="302" lineend="346" name="puff" returns="Ext.Element" signature="puff(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="303" name="el" />
          </scope>
          <scope doc="Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television).&#xA;When the effect is completed, the element will be hidden (visibility = &apos;hidden&apos;) but block elements will still&#xA;take up space in the document. The element must be removed from the DOM using the &apos;remove&apos; config option if desired.&#xA;Usage:&#xA;*&lt;pre&gt;&lt;code&gt;&#xA;// default&#xA;el.switchOff();&#xA;// all config options shown with default values&#xA;el.switchOff({&#xA;easing: &apos;easeIn&apos;,&#xA;duration: .3,&#xA;remove: false,&#xA;useDisplay: false&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="368" lineend="406" name="switchOff" returns="Ext.Element" signature="switchOff(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="369" name="el" />
          </scope>
          <scope doc="Highlights the Element by setting a color (applies to the background-color by default, but can be&#xA;changed using the &quot;attr&quot; config option) and then fading back to the original color. If no original&#xA;color is available, you should provide the &quot;endColor&quot; config option which will be cleared after the animation.&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// default: highlight background to yellow&#xA;el.highlight();&#xA;// custom: highlight foreground text to blue for 2 seconds&#xA;el.highlight(&quot;0000ff&quot;, { attr: &apos;color&apos;, duration: 2 });&#xA;// common config options shown with default values&#xA;el.highlight(&quot;ffff9c&quot;, {&#xA;attr: &quot;background-color&quot;, //can be any valid CSS property (attribute) that supports a color value&#xA;endColor: (current color) or &quot;ffffff&quot;,&#xA;easing: &apos;easeIn&apos;,&#xA;duration: 1&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="432" lineend="461" name="highlight" returns="Ext.Element" signature="highlight(color, o)">
            <variable citdl="String" doc="(optional) The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: &apos;ffff9c&apos;)" ilk="argument" name="color" />
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="433" name="el" />
          </scope>
          <scope doc="Shows a ripple of exploding, attenuating borders to draw attention to an Element.&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// default: a single light blue ripple&#xA;el.frame();&#xA;// custom: 3 red ripples lasting 3 seconds total&#xA;el.frame(&quot;ff0000&quot;, 3, { duration: 3 });&#xA;// common config options shown with default values&#xA;el.frame(&quot;C3DAF9&quot;, 1, {&#xA;duration: 1 //duration of entire animation (not each individual ripple)&#xA;// Note: Easing is not configurable and will be ignored if included&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="484" lineend="528" name="frame" returns="Ext.Element" signature="frame(color, count, o)">
            <variable citdl="String" doc="(optional) The color of the border.  Should be a 6 char hex color without the leading # (defaults to light blue: &apos;C3DAF9&apos;)." ilk="argument" name="color" />
            <variable citdl="Number" doc="(optional) The number of ripples to display (defaults to 1)" ilk="argument" name="count" />
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="485" name="el" />
          </scope>
          <scope doc="Creates a pause before any subsequent queued effects begin.  If there are&#xA;no effects queued after the pause it will have no effect.&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;el.pause(1);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="540" lineend="550" name="pause" returns="Ext.Element" signature="pause(seconds)">
            <variable citdl="Number" doc="The length of time to pause (in seconds)" ilk="argument" name="seconds" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="541" name="el" />
            <variable attributes="__local__ private" citdl="Object" line="542" lineend="542" name="o" />
          </scope>
          <scope doc="Fade an element in (from transparent to opaque).  The ending opacity can be specified&#xA;using the &quot;endOpacity&quot; config option.&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// default: fade in from opacity 0 to 100%&#xA;el.fadeIn();&#xA;// custom: fade in from opacity 0 to 75% over 2 seconds&#xA;el.fadeIn({ endOpacity: .75, duration: 2});&#xA;// common config options shown with default values&#xA;el.fadeIn({&#xA;endOpacity: 1, //can be any value between 0 and 1 (e.g. .5)&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="573" lineend="590" name="fadeIn" returns="Ext.Element" signature="fadeIn(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="574" name="el" />
          </scope>
          <scope doc="Fade an element out (from opaque to transparent).  The ending opacity can be specified&#xA;using the &quot;endOpacity&quot; config option.&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// default: fade out from the element&apos;s current opacity to 0&#xA;el.fadeOut();&#xA;// custom: fade out from the element&apos;s current opacity to 25% over 2 seconds&#xA;el.fadeOut({ endOpacity: .25, duration: 2});&#xA;// common config options shown with default values&#xA;el.fadeOut({&#xA;endOpacity: 0, //can be any value between 0 and 1 (e.g. .5)&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5&#xA;remove: false,&#xA;useDisplay: false&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="615" lineend="631" name="fadeOut" returns="Ext.Element" signature="fadeOut(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="616" name="el" />
          </scope>
          <scope doc="Animates the transition of an element&apos;s dimensions from a starting height/width&#xA;to an ending height/width.&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// change height and width to 100x100 pixels&#xA;el.scale(100, 100);&#xA;// common config options shown with default values.  The height and width will default to&#xA;// the element&apos;s existing values if passed as null.&#xA;el.scale(&#xA;[element&apos;s width],&#xA;[element&apos;s height], {&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .35&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="655" lineend="661" name="scale" returns="Ext.Element" signature="scale(w, h, o)">
            <variable ilk="argument" name="w" />
            <variable ilk="argument" name="h" />
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="Animates the transition of any combination of an element&apos;s dimensions, xy position and/or opacity.&#xA;Any of these properties not specified in the config object will not be changed.  This effect&#xA;requires that at least one new dimension, position or opacity setting must be passed in on&#xA;the config object in order for the function to have any effect.&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// slide the element horizontally to x position 200 while changing the height and opacity&#xA;el.shift({ x: 200, height: 50, opacity: .8 });&#xA;// common config options shown with default values.&#xA;el.shift({&#xA;width: [element&apos;s width],&#xA;height: [element&apos;s height],&#xA;x: [element&apos;s x position],&#xA;y: [element&apos;s y position],&#xA;opacity: [element&apos;s opacity],&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .35&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="687" lineend="716" name="shift" returns="Ext.Element" signature="shift(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="688" name="el" />
          </scope>
          <scope doc="Slides the element while fading it out of view.  An anchor point can be optionally passed to set the&#xA;ending point of the effect.&#xA;Usage:&#xA;*&lt;pre&gt;&lt;code&gt;&#xA;// default: slide the element downward while fading out&#xA;el.ghost();&#xA;// custom: slide the element out to the right with a 2-second duration&#xA;el.ghost(&apos;r&apos;, { duration: 2 });&#xA;// common config options shown with default values&#xA;el.ghost(&apos;b&apos;, {&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5&#xA;remove: false,&#xA;useDisplay: false&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="741" lineend="805" name="ghost" returns="Ext.Element" signature="ghost(anchor, o)">
            <variable citdl="String" doc="(optional) One of the valid Fx anchor positions (defaults to bottom: &apos;b&apos;)" ilk="argument" name="anchor" />
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="742" name="el" />
          </scope>
          <scope doc="Ensures that all effects queued after syncFx is called on the element are&#xA;run concurrently.  This is the opposite of {@link #sequenceFx}." ilk="function" line="812" lineend="819" name="syncFx" returns="Ext.Element" signature="syncFx()">
            <variable citdl="Fx" name="this" />
          </scope>
          <variable citdl="Ext.apply()" line="817" name="fxDefaults" />
          <scope doc="Ensures that all effects queued after sequenceFx is called on the element are&#xA;run in sequence.  This is the opposite of {@link #syncFx}." ilk="function" line="826" lineend="833" name="sequenceFx" returns="Ext.Element" signature="sequenceFx()">
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="@private */" ilk="function" line="836" lineend="841" name="nextFx" signature="nextFx()">
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.fxQueue[0]" line="837" name="ef" />
          </scope>
          <scope doc="Returns true if the element has any effects actively running or queued, else returns false." ilk="function" line="847" lineend="849" name="hasActiveFx" returns="Boolean" signature="hasActiveFx()">
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="Stops any running effects and clears the element&apos;s internal effects queue if it contains&#xA;any additional effects that haven&apos;t started yet." ilk="function" line="856" lineend="865" name="stopFx" returns="Ext.Element" signature="stopFx()">
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.fxQueue[0]" line="858" name="cur" />
          </scope>
          <variable citdl="Array" line="860" name="fxQueue" />
          <scope doc="@private */" ilk="function" line="868" lineend="877" name="beforeFx" returns="Boolean" signature="beforeFx(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="Returns true if the element is currently blocking so that no other effect can be queued&#xA;until this effect is finished, else returns false if blocking is not set.  This is commonly&#xA;used to ensure that an effect initiated by a user action runs to completion prior to the&#xA;same effect being restarted (e.g., firing only one effect even if the user clicks several times)." ilk="function" line="886" lineend="889" name="hasFxBlock" returns="Boolean" signature="hasFxBlock()">
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.fxQueue" line="887" name="q" />
          </scope>
          <scope doc="@private */" ilk="function" line="892" lineend="910" name="queueFx" returns="this" signature="queueFx(o, fn)">
            <variable ilk="argument" name="o" />
            <variable ilk="argument" name="fn" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.beforeFx()" line="899" name="run" />
          </scope>
          <scope doc="@private */" ilk="function" line="913" lineend="935" name="fxWrap" returns="wrap" signature="fxWrap(pos, o, vis)">
            <variable ilk="argument" name="pos" />
            <variable ilk="argument" name="o" />
            <variable ilk="argument" name="vis" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="Ext.get()" line="914" name="wrap" />
            <variable attributes="__local__ private" citdl="this.getXY()" line="916" name="wrapXY" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="920" name="div">
              <variable citdl="Object" line="921" name="style">
                <variable citdl="vis" line="921" name="visibility" />
              </variable>
            </variable>
          </scope>
          <scope doc="@private */" ilk="function" line="938" lineend="945" name="fxUnwrap" signature="fxUnwrap(wrap, pos, o)">
            <variable ilk="argument" name="wrap" />
            <variable ilk="argument" name="pos" />
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="@private */" ilk="function" line="948" lineend="951" name="getFxRestore" signature="getFxRestore()">
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.dom.style" line="949" name="st" />
          </scope>
          <scope doc="@private */" ilk="function" line="954" lineend="969" name="afterFx" signature="afterFx(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="@private */" ilk="function" line="972" lineend="974" name="getFxEl" returns="Ext.get()" signature="getFxEl()">
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="@private */" ilk="function" line="977" lineend="991" name="fxanim" returns="anim" signature="fxanim(args, opt, animType, defaultDur, defaultEase, cb)">
            <variable ilk="argument" name="args" />
            <variable ilk="argument" name="opt" />
            <variable ilk="argument" name="animType" />
            <variable ilk="argument" name="defaultDur" />
            <variable ilk="argument" name="defaultEase" />
            <variable ilk="argument" name="cb" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="Ext.lib.Anim[animType]()" line="988" name="anim" />
          </scope>
          <variable citdl="Ext.Fx.scale" doc="backwords compat" line="995" name="resize" />
        </variable>
        <variable citdl="config.shim" line="59" name="useShim" />
        <variable citdl="config.useDisplay" line="60" name="useDisplay" />
        <variable citdl="tpls[tpls.length-1]" line="61" name="master" />
        <variable citdl="tpls" line="62" name="tpls" />
        <scope ilk="class" line="65" lineend="265" name="BasicDialog">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Lightweight Dialog Class.  The code below shows the creation of a typical dialog using existing HTML markup:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var dlg = new Ext.BasicDialog(&quot;my-dlg&quot;, {&#xA;height: 200,&#xA;width: 300,&#xA;minHeight: 100,&#xA;minWidth: 150,&#xA;modal: true,&#xA;proxyDrag: true,&#xA;shadow: true&#xA;});&#xA;dlg.addKeyListener(27, dlg.hide, dlg); // ESC can also close the dialog&#xA;dlg.addButton(&apos;OK&apos;, dlg.hide, dlg);    // Could call a save function instead of hiding&#xA;dlg.addButton(&apos;Cancel&apos;, dlg.hide, dlg);&#xA;dlg.show();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;b&gt;A Dialog should always be a direct child of the body element.&lt;/b&gt;" ilk="function" line="65" lineend="265" name="BasicDialog" signature="BasicDialog(el, config)">
            <variable citdl="String/HTMLElement/Ext.Element" doc="The container element or DOM node, or its id" ilk="argument" name="el" />
            <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
            <variable citdl="BasicDialog" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomHelper" line="67" name="dh" />
            <variable attributes="__local__ private" citdl="Ext.dd.DD" line="174" name="dd" />
          </scope>
          <variable citdl="Ext.get()" line="66" name="el" />
          <variable citdl="el.id" line="83" name="id" />
          <variable citdl="el.createProxy()" line="88" name="proxy" />
          <variable citdl="this.hideAction" line="89" name="hide" />
          <variable citdl="el.getSize()" line="99" name="size" />
          <variable citdl="Array" line="101" name="xy" />
          <variable citdl="el.child()" doc="Ext.Element */" line="106" name="header" />
          <variable citdl="el.child()" doc="Ext.Element */" line="108" name="body" />
          <variable citdl="el.child()" doc="Ext.Element */" line="110" name="footer" />
          <variable citdl="el.createChild()" doc="this element allows the dialog to be focused for keyboard&#xA;event" line="124" name="focusEl" />
          <variable citdl="this.body.wrap()" doc="wrap the body and footer for special rendering" line="130" name="bwrap" />
          <variable citdl="this.el.createChild()" line="138" name="bg" />
          <variable citdl="this.bg.child()" line="139" name="centerBg" />
          <variable citdl="this.el.createChild()" line="146" name="toolbox" />
          <variable citdl="this.toolbox.createChild()" line="150" name="close" />
          <variable citdl="this.toolbox.createChild()" line="155" name="collapseBtn" />
          <variable citdl="Ext.Resizable" line="167" name="resizer" />
          <variable citdl="dd" line="184" name="dd" />
          <variable citdl="dh.append()" line="187" name="mask" />
          <variable citdl="Ext.Shadow" line="196" name="shadow" />
          <variable citdl="Number" line="198" name="shadowOffset" />
          <variable citdl="this.el.createShim()" line="201" name="shim" />
        </scope>
        <variable citdl="Boolean" doc="True if the browser is in strict mode" line="70" name="isStrict" />
        <scope ilk="class" line="72" lineend="152" name="Component">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Base class for all major Ext components.  All subclasses of Component can automatically participate in the standard&#xA;Ext component lifecycle of creation, rendering and destruction.  They also have automatic support for basic hide/show&#xA;and enable/disable behavior.  Component allows any subclass to be lazy-rendered into any {@link Ext.Container} and&#xA;to be automatically registered with the {@link Ext.ComponentMgr} so that it can be referenced at any time via {@link Ext.getCmp}.&#xA;All visual components (widgets) that require rendering into a layout should subclass Component." ilk="function" line="72" lineend="152" name="Component" signature="Component(config)">
            <variable citdl="Ext.Element/String/Object" doc="The configuration options.  If an element is passed, it is set as the internal&#xA;element and its id used as the component id.  If a string is passed, it is assumed to be the id of an existing element&#xA;and is used as the component id.  Otherwise, it is assumed to be a standard config object and is applied to the component." ilk="argument" name="config" />
            <variable citdl="Component" name="this" />
          </scope>
          <variable citdl="config" line="77" name="initialConfig" />
          <variable citdl="String" line="143" name="id" />
          <variable citdl="Number" doc="private" line="155" name="AUTO_ID" />
        </scope>
        <variable citdl="Object" line="74" lineend="788" name="DomQuery">
          <scope ilk="function" line="377" lineend="379" name="getStyle" returns="Ext.fly().getStyle()" signature="getStyle(el, name)">
            <variable ilk="argument" name="el" />
            <variable ilk="argument" name="name" />
            <variable citdl="DomQuery" name="this" />
          </scope>
          <scope doc="Compiles a selector/xpath query into a reusable function. The returned function&#xA;takes one parameter &quot;root&quot; (optional), which is the context node from where the query should start." ilk="function" line="387" lineend="458" name="compile" returns="Function" signature="compile(path, type)">
            <variable ilk="argument" name="path" />
            <variable citdl="String" doc="(optional) Either &quot;select&quot; (the default) or &quot;simple&quot; for a simple selector match" ilk="argument" name="type" />
            <variable citdl="DomQuery" name="this" />
            <variable attributes="__local__ private" citdl="Array" line="390" name="fn" />
            <variable attributes="__local__ private" citdl="path" line="391" name="q" />
            <variable attributes="__local__ private" citdl="q" line="391" name="lq" />
            <variable attributes="__local__ private" line="391" name="mode" />
            <variable attributes="__local__ private" citdl="Ext.DomQuery.matchers" line="392" name="tk" />
            <variable attributes="__local__ private" citdl="tk.length" line="393" name="tklen" />
            <variable attributes="__local__ private" line="394" name="mm" />
            <variable attributes="__local__ private" citdl="q.match()" doc="accept leading mode switch" line="397" name="lmode" />
            <variable attributes="__local__ private" citdl="q.match()" line="409" name="tm" />
            <variable attributes="__local__ private" citdl="Boolean" line="432" name="matched" />
            <variable attributes="__local__ private" citdl="tk[j]" line="434" name="t" />
            <variable attributes="__local__ private" citdl="q.match()" line="435" name="m" />
          </scope>
          <scope doc="Selects a group of elements." ilk="function" line="466" lineend="492" name="select" returns="Array" signature="select(path, root, type)">
            <variable ilk="argument" name="path" />
            <variable citdl="Node" doc="(optional) The start of the query (defaults to document)." ilk="argument" name="root" />
            <variable ilk="argument" name="type" />
            <variable citdl="DomQuery" name="this" />
            <variable attributes="__local__ private" citdl="path.split()" line="473" name="paths" />
            <variable attributes="__local__ private" citdl="Array" line="474" name="results" />
            <variable attributes="__local__ private" citdl="paths[i].replace()" line="476" name="p" />
            <variable attributes="__local__ private" citdl="cache[p]()" line="483" name="result" />
          </scope>
          <scope doc="Selects a single element." ilk="function" line="500" lineend="502" name="selectNode" returns="Element" signature="selectNode(path, root)">
            <variable ilk="argument" name="path" />
            <variable citdl="Node" doc="(optional) The start of the query (defaults to document)." ilk="argument" name="root" />
            <variable citdl="DomQuery" name="this" />
          </scope>
          <scope doc="Selects the value of a node, optionally replacing null with the defaultValue." ilk="function" line="510" lineend="519" name="selectValue" signature="selectValue(path, root, defaultValue)">
            <variable ilk="argument" name="path" />
            <variable citdl="Node" doc="(optional) The start of the query (defaults to document)." ilk="argument" name="root" />
            <variable citdl="String" ilk="argument" name="defaultValue" />
            <variable citdl="DomQuery" name="this" />
            <variable attributes="__local__ private" citdl="valueCache[path]()" line="515" name="n" />
            <variable attributes="__local__ private" line="517" name="v" />
          </scope>
          <scope doc="Selects the value of a node, parsing integers and floats." ilk="function" line="528" lineend="531" name="selectNumber" returns="Number" signature="selectNumber(path, root, defaultValue)">
            <variable ilk="argument" name="path" />
            <variable citdl="Node" doc="(optional) The start of the query (defaults to document)." ilk="argument" name="root" />
            <variable citdl="Number" ilk="argument" name="defaultValue" />
            <variable citdl="DomQuery" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomQuery.selectValue()" line="529" name="v" />
          </scope>
          <scope doc="Returns true if the passed element(s) match the passed simple selector (e.g. div.some-class or span:first-child)" ilk="function" line="539" lineend="546" name="is" returns="Boolean" signature="is(el, ss)">
            <variable citdl="String/HTMLElement/Array" doc="An element id, element or array of elements" ilk="argument" name="el" />
            <variable ilk="argument" name="ss" />
            <variable citdl="DomQuery" name="this" />
            <variable attributes="__local__ private" line="543" name="isArray" />
            <variable attributes="__local__ private" citdl="Ext.DomQuery.filter()" line="544" name="result" />
          </scope>
          <scope doc="Filters an array of elements to only include matches of a simple selector (e.g. div.some-class or span:first-child)" ilk="function" line="556" lineend="563" name="filter" returns="Array" signature="filter(els, ss, nonMatches)">
            <variable ilk="argument" name="els" />
            <variable ilk="argument" name="ss" />
            <variable citdl="Boolean" doc="If true, it returns the elements that DON&apos;T match&#xA;the selector instead of the ones that match" ilk="argument" name="nonMatches" />
            <variable citdl="DomQuery" name="this" />
            <variable attributes="__local__ private" citdl="simpleCache[ss]()" line="561" name="result" />
          </scope>
          <variable citdl="Array" doc="Collection of matching regular expressions and code snippets." line="568" name="matchers" />
          <variable line="569" name="re" />
          <variable citdl="String" line="570" name="select" />
          <variable citdl="Object" doc="Collection of operator comparison functions. The default operators are =, !=, ^=, $=, *=, %=, |= and ~=.&#xA;New operators can be added as long as the match the format &lt;i&gt;c&lt;/i&gt;= where &lt;i&gt;c&lt;/i&gt; is any character other than space, &amp;gt; &amp;lt;." line="590" lineend="615" name="operators">
            <scope ilk="function" line="591" lineend="593" name="=" returns="a" signature="=(a, v)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="v" />
              <variable citdl="operators" name="this" />
            </scope>
            <scope ilk="function" line="594" lineend="596" name="!=" returns="a" signature="!=(a, v)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="v" />
              <variable citdl="operators" name="this" />
            </scope>
            <scope ilk="function" line="597" lineend="599" name="^=" returns="a" signature="^=(a, v)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="v" />
              <variable citdl="operators" name="this" />
            </scope>
            <scope ilk="function" line="600" lineend="602" name="$=" returns="a" signature="$=(a, v)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="v" />
              <variable citdl="operators" name="this" />
            </scope>
            <scope ilk="function" line="603" lineend="605" name="*=" returns="a" signature="*=(a, v)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="v" />
              <variable citdl="operators" name="this" />
            </scope>
            <scope ilk="function" line="606" lineend="608" name="%=" signature="%=(a, v)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="v" />
              <variable citdl="operators" name="this" />
            </scope>
            <scope ilk="function" line="609" lineend="611" name="|=" returns="a" signature="|=(a, v)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="v" />
              <variable citdl="operators" name="this" />
            </scope>
            <scope ilk="function" line="612" lineend="614" name="~=" returns="a" signature="~=(a, v)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="v" />
              <variable citdl="operators" name="this" />
            </scope>
          </variable>
          <variable citdl="Object" doc="Collection of &quot;pseudo class&quot; processors. Each processor is passed the current nodeset (array)&#xA;and the argument (if any) supplied in the selector." line="621" lineend="787" name="pseudos">
            <scope ilk="function" line="622" lineend="631" name="first-child" returns="r" signature="first-child(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="623" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="623" name="ri" />
              <variable attributes="__local__ private" line="623" name="n" />
            </scope>
            <scope ilk="function" line="633" lineend="642" name="last-child" returns="r" signature="last-child(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="634" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="634" name="ri" />
              <variable attributes="__local__ private" line="634" name="n" />
            </scope>
            <scope ilk="function" line="644" lineend="669" name="nth-child" returns="r" signature="nth-child(c, a)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="a" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="645" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="645" name="ri" />
              <variable attributes="__local__ private" citdl="nthRe.exec()" line="646" name="m" />
              <variable attributes="__local__ private" line="647" name="f" />
              <variable attributes="__local__ private" citdl="m[2]" line="647" name="l" />
              <variable attributes="__local__ private" citdl="n.parentNode" line="649" name="pn" />
              <variable attributes="__local__ private" citdl="Number" line="651" name="j" />
            </scope>
            <scope ilk="function" line="671" lineend="679" name="only-child" returns="r" signature="only-child(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="672" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="672" name="ri" />
            </scope>
            <scope ilk="function" line="681" lineend="697" name="empty" returns="r" signature="empty(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="682" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="682" name="ri" />
              <variable attributes="__local__ private" line="684" name="cn" />
              <variable attributes="__local__ private" citdl="Number" line="684" name="j" />
              <variable attributes="__local__ private" citdl="Boolean" line="684" name="empty" />
              <variable attributes="__local__ private" citdl="ci.childNodes" line="684" name="cns" />
            </scope>
            <scope ilk="function" line="699" lineend="707" name="contains" returns="r" signature="contains(c, v)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="v" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="700" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="700" name="ri" />
            </scope>
            <scope ilk="function" line="709" lineend="717" name="nodeValue" returns="r" signature="nodeValue(c, v)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="v" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="710" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="710" name="ri" />
            </scope>
            <scope ilk="function" line="719" lineend="727" name="checked" returns="r" signature="checked(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="720" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="720" name="ri" />
            </scope>
            <scope ilk="function" line="729" lineend="731" name="not" returns="Ext.DomQuery.filter()" signature="not(c, ss)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="ss" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="733" lineend="735" name="odd" returns="this[&quot;nth-child&quot;]()" signature="odd(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="737" lineend="739" name="even" returns="this[&quot;nth-child&quot;]()" signature="even(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="741" lineend="743" name="nth" returns="c[a-1]" signature="nth(c, a)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="a" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="745" lineend="747" name="first" returns="c[0]" signature="first(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="749" lineend="751" name="last" returns="c[c.length-1]" signature="last(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="753" lineend="762" name="has" returns="r" signature="has(c, ss)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="ss" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Ext.DomQuery.select" line="754" name="s" />
              <variable attributes="__local__ private" citdl="Array" line="755" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="755" name="ri" />
            </scope>
            <scope ilk="function" line="764" lineend="774" name="next" returns="r" signature="next(c, ss)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="ss" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Ext.DomQuery.is" line="765" name="is" />
              <variable attributes="__local__ private" citdl="Array" line="766" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="766" name="ri" />
              <variable attributes="__local__ private" citdl="next()" line="768" name="n" />
            </scope>
            <scope ilk="function" line="776" lineend="786" name="prev" returns="r" signature="prev(c, ss)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="ss" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Ext.DomQuery.is" line="777" name="is" />
              <variable attributes="__local__ private" citdl="Array" line="778" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="778" name="ri" />
              <variable attributes="__local__ private" citdl="prev()" line="780" name="n" />
            </scope>
          </variable>
        </variable>
        <variable citdl="Boolean" doc="True if the page is running over SSL" line="75" name="isSecure" />
        <scope ilk="function" line="77" lineend="88" name="SouthLayoutRegion" signature="SouthLayoutRegion(mgr, config)">
          <variable ilk="argument" name="mgr" />
          <variable ilk="argument" name="config" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="config.initialSize" line="84" name="size" />
        </scope>
        <scope ilk="class" line="77" lineend="194" name="Resizable">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: &lt;p&gt;Applies drag handles to an element to make it resizable. The drag handles are inserted into the element&#xA;and positioned absolute. Some elements, such as a textarea or image, don&apos;t support this. To overcome that, you can wrap&#xA;the textarea in a div and set &quot;resizeChild&quot; to true (or to the id of the element), &lt;b&gt;or&lt;/b&gt; set wrap:true in your config and&#xA;the element will be wrapped for you automatically.&lt;/p&gt;&#xA;&lt;p&gt;Here is the list of valid resize handles:&lt;/p&gt;&#xA;&lt;pre&gt;&#xA;Value   Description&#xA;------  -------------------&#xA;&apos;n&apos;     north&#xA;&apos;s&apos;     south&#xA;&apos;e&apos;     east&#xA;&apos;w&apos;     west&#xA;&apos;nw&apos;    northwest&#xA;&apos;sw&apos;    southwest&#xA;&apos;se&apos;    southeast&#xA;&apos;ne&apos;    northeast&#xA;&apos;all&apos;   all&#xA;&lt;/pre&gt;&#xA;&lt;p&gt;Here&apos;s an example showing the creation of a typical Resizable:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var resizer = new Ext.Resizable(&quot;element-id&quot;, {&#xA;handles: &apos;all&apos;,&#xA;minWidth: 200,&#xA;minHeight: 100,&#xA;maxWidth: 500,&#xA;maxHeight: 400,&#xA;pinned: true&#xA;});&#xA;resizer.on(&quot;resize&quot;, myHandler);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;To hide a particular handle, set its display to none in CSS, or through script:&lt;br&gt;&#xA;resizer.east.setDisplayed(false);&lt;/p&gt;" ilk="function" line="77" lineend="194" name="Resizable" signature="Resizable(el, config)">
            <variable citdl="String/HTMLElement/Ext.Element" doc="The id or element to resize" ilk="argument" name="el" />
            <variable citdl="Object" doc="configuration options" ilk="argument" name="config" />
            <variable citdl="Resizable" name="this" />
            <variable attributes="__local__ private" citdl="config.resizeChild.getSize()" line="88" name="csize" />
            <variable attributes="__local__ private" citdl="this.el.getStyle()" doc="if the element isn&apos;t positioned, make it relative" line="107" name="position" />
            <variable attributes="__local__ private" citdl="this.handles.split()" line="120" name="hs" />
            <variable attributes="__local__ private" citdl="Ext.Resizable.positions" line="121" name="ps" />
            <variable attributes="__local__ private" citdl="ps[hs[i]]" line="124" name="pos" />
            <variable attributes="__local__ private" citdl="this.resizeChild" line="146" name="rc" />
            <variable attributes="__local__ private" citdl="this.west" line="147" name="hw" />
            <variable attributes="__local__ private" citdl="this.north" line="147" name="hn" />
            <variable attributes="__local__ private" citdl="this.east" line="147" name="he" />
          </scope>
          <variable citdl="Ext.get()" line="78" name="el" />
          <variable citdl="this.el.dom.id" line="83" name="id" />
          <variable citdl="this.el.createProxy()" line="96" name="proxy" />
          <variable citdl="Boolean" line="103" name="disableTrackOver" />
          <variable citdl="String" doc="no handles passed, must be legacy style" line="112" name="handles" />
          <variable citdl="this.southeast" doc="legacy" line="129" name="corner" />
          <variable citdl="Boolean" line="132" name="updateBox" />
          <variable line="135" name="activeHandle" />
          <variable citdl="Ext.get()" line="139" name="resizeChild" />
          <variable citdl="Array" line="154" name="adjustments" />
          <variable citdl="this.dynamic" line="160" name="dd" />
          <variable citdl="Number" line="191" name="zoom" />
          <variable citdl="Object" doc="private hash to map config positions to true positions" line="588" lineend="590" name="positions">
            <variable citdl="String" line="589" name="e" />
            <variable citdl="String" line="589" name="sw" />
            <variable citdl="String" line="589" name="ne" />
            <variable citdl="String" line="589" name="n" />
            <variable citdl="String" line="589" name="s" />
            <variable citdl="String" line="589" name="w" />
            <variable citdl="String" line="589" name="se" />
            <variable citdl="String" line="589" name="nw" />
          </variable>
          <scope doc="private" ilk="class" line="593" lineend="633" name="Handle">
            <scope attributes="__ctor__" doc="private" ilk="function" line="593" lineend="614" name="Handle" signature="Handle(rz, pos, disableTrackOver, transparent)">
              <variable ilk="argument" name="rz" />
              <variable ilk="argument" name="pos" />
              <variable ilk="argument" name="disableTrackOver" />
              <variable ilk="argument" name="transparent" />
              <variable citdl="Handle" name="this" />
              <variable attributes="__local__ private" citdl="Ext.DomHelper.createTemplate()" doc="only initialize the template if resizable is used" line="598" name="tpl" />
            </scope>
            <variable citdl="pos" line="602" name="position" />
            <variable citdl="rz" line="603" name="rz" />
            <variable citdl="this.tpl.append()" line="604" name="el" />
            <scope ilk="function" line="618" lineend="620" name="afterResize" signature="afterResize(rz)">
              <variable ilk="argument" name="rz" />
              <variable citdl="Handle" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="622" lineend="624" name="onMouseDown" signature="onMouseDown(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Handle" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="626" lineend="628" name="onMouseOver" signature="onMouseOver(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Handle" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="630" lineend="632" name="onMouseOut" signature="onMouseOut(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Handle" name="this" />
            </scope>
          </scope>
        </scope>
        <scope ilk="class" line="80" lineend="90" name="BorderLayout">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: This class represents a common layout manager used in desktop applications. For screenshots and more details,&#xA;please see: &lt;br&gt;&lt;br&gt;&#xA;&lt;a href=&quot;http://www.jackslocum.com/yui/2006/10/19/cross-browser-web-20-layouts-with-yahoo-ui/&quot;&gt;Cross Browser Layouts - Part 1&lt;/a&gt;&lt;br&gt;&#xA;&lt;a href=&quot;http://www.jackslocum.com/yui/2006/10/28/cross-browser-web-20-layouts-part-2-ajax-feed-viewer-20/&quot;&gt;Cross Browser Layouts - Part 2&lt;/a&gt;&lt;br&gt;&lt;br&gt;&#xA;Example:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var layout = new Ext.BorderLayout(document.body, {&#xA;north: {&#xA;initialSize: 25,&#xA;titlebar: false&#xA;west: {&#xA;split:true,&#xA;initialSize: 200,&#xA;minSize: 175,&#xA;maxSize: 400,&#xA;titlebar: true,&#xA;collapsible: true&#xA;east: {&#xA;split:true,&#xA;initialSize: 202,&#xA;minSize: 175,&#xA;maxSize: 400,&#xA;titlebar: true,&#xA;collapsible: true&#xA;south: {&#xA;split:true,&#xA;initialSize: 100,&#xA;minSize: 100,&#xA;maxSize: 200,&#xA;titlebar: true,&#xA;collapsible: true&#xA;center: {&#xA;titlebar: true,&#xA;autoScroll:true,&#xA;resizeTabs: true,&#xA;minTabWidth: 50,&#xA;preferredTabWidth: 150&#xA;});&#xA;// shorthand&#xA;var CP = Ext.ContentPanel;&#xA;layout.beginUpdate();&#xA;layout.add(&quot;north&quot;, new CP(&quot;north&quot;, &quot;North&quot;));&#xA;layout.add(&quot;south&quot;, new CP(&quot;south&quot;, {title: &quot;South&quot;, closable: true}));&#xA;layout.add(&quot;west&quot;, new CP(&quot;west&quot;, {title: &quot;West&quot;}));&#xA;layout.add(&quot;east&quot;, new CP(&quot;autoTabs&quot;, {title: &quot;Auto Tabs&quot;, closable: true}));&#xA;layout.add(&quot;center&quot;, new CP(&quot;center1&quot;, {title: &quot;Close Me&quot;, closable: true}));&#xA;layout.add(&quot;center&quot;, new CP(&quot;center2&quot;, {title: &quot;Center Panel&quot;, closable: false}));&#xA;layout.getRegion(&quot;center&quot;).showPanel(&quot;center1&quot;);&#xA;layout.endUpdate();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;b&gt;The container the layout is rendered into can be either the body element or any other element.&#xA;If it is not the body element, the container needs to either be an absolute positioned element,&#xA;or you will need to add &quot;position:relative&quot; to the css of the container.  You will also need to specify&#xA;the container size if it is not the body element.&lt;/b&gt;" ilk="function" line="80" lineend="90" name="BorderLayout" signature="BorderLayout(container, config)">
            <variable citdl="String/HTMLElement/Element" doc="The container this layout is bound to" ilk="argument" name="container" />
            <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
            <variable citdl="BorderLayout" name="this" />
            <variable attributes="__local__ private" citdl="this.factory.validRegions[i]" line="85" name="target" />
          </scope>
          <variable citdl="config.factory" line="83" name="factory" />
          <scope doc="Shortcut for creating a new BorderLayout object and adding one or more ContentPanels to it in a single step, handling&#xA;the beginUpdate and endUpdate calls internally.  The key to this method is the &lt;b&gt;panels&lt;/b&gt; property that can be&#xA;provided with each region config, which allows you to add ContentPanel configs in addition to the region configs&#xA;during creation.  The following code is equivalent to the constructor-based example at the beginning of this class:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// shorthand&#xA;var CP = Ext.ContentPanel;&#xA;var layout = Ext.BorderLayout.create({&#xA;north: {&#xA;initialSize: 25,&#xA;titlebar: false,&#xA;panels: [new CP(&quot;north&quot;, &quot;North&quot;)]&#xA;west: {&#xA;split:true,&#xA;initialSize: 200,&#xA;minSize: 175,&#xA;maxSize: 400,&#xA;titlebar: true,&#xA;collapsible: true,&#xA;panels: [new CP(&quot;west&quot;, {title: &quot;West&quot;})]&#xA;east: {&#xA;split:true,&#xA;initialSize: 202,&#xA;minSize: 175,&#xA;maxSize: 400,&#xA;titlebar: true,&#xA;collapsible: true,&#xA;panels: [new CP(&quot;autoTabs&quot;, {title: &quot;Auto Tabs&quot;, closable: true})]&#xA;south: {&#xA;split:true,&#xA;initialSize: 100,&#xA;minSize: 100,&#xA;maxSize: 200,&#xA;titlebar: true,&#xA;collapsible: true,&#xA;panels: [new CP(&quot;south&quot;, {title: &quot;South&quot;, closable: true})]&#xA;center: {&#xA;titlebar: true,&#xA;autoScroll:true,&#xA;resizeTabs: true,&#xA;minTabWidth: 50,&#xA;preferredTabWidth: 150,&#xA;panels: [&#xA;new CP(&quot;center1&quot;, {title: &quot;Close Me&quot;, closable: true}),&#xA;new CP(&quot;center2&quot;, {title: &quot;Center Panel&quot;, closable: false})&#xA;}, document.body);&#xA;layout.getRegion(&quot;center&quot;).showPanel(&quot;center1&quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="398" lineend="412" name="create" returns="layout" signature="create(config, targetEl)">
            <variable ilk="argument" name="config" />
            <variable ilk="argument" name="targetEl" />
            <variable citdl="BorderLayout" name="this" />
            <variable attributes="__local__ private" citdl="Ext.BorderLayout" line="399" name="layout" />
            <variable attributes="__local__ private" citdl="Ext.BorderLayout.RegionFactory.validRegions" line="401" name="regions" />
            <variable attributes="__local__ private" citdl="regions[j]" line="403" name="lr" />
            <variable attributes="__local__ private" citdl="layout.regions[lr]" line="405" name="r" />
            <variable attributes="__local__ private" citdl="config[lr].panels" line="406" name="ps" />
          </scope>
          <variable citdl="Object" doc="private" line="415" lineend="439" name="RegionFactory">
            <variable citdl="Array" doc="private" line="417" name="validRegions" />
            <scope doc="private" ilk="function" line="420" lineend="438" name="create" returns="Ext.CenterLayoutRegion" signature="create(target, mgr, config)">
              <variable ilk="argument" name="target" />
              <variable ilk="argument" name="mgr" />
              <variable ilk="argument" name="config" />
              <variable citdl="RegionFactory" name="this" />
            </scope>
          </variable>
        </scope>
        <scope ilk="class" line="82" lineend="2669" name="Element">
          <scope attributes="__ctor__" ilk="function" line="82" lineend="104" name="Element" returns="Ext.Element.cache[id]" signature="Element(element, forceNew)">
            <variable ilk="argument" name="element" />
            <variable ilk="argument" name="forceNew" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" line="83" name="dom" />
            <variable attributes="__local__ private" citdl="dom.id" line="88" name="id" />
          </scope>
          <variable citdl="HTMLElement" doc="The DOM element" line="97" name="dom" />
          <variable citdl="String" doc="The DOM element ID" line="103" name="id" />
          <variable citdl="String" doc="The element&apos;s default display mode  (defaults to &quot;&quot;)" line="113" name="originalDisplay" />
          <variable citdl="Number" line="115" name="visibilityMode" />
          <variable citdl="String" doc="The default unit to append to CSS values where a unit isn&apos;t provided (defaults to px)." line="120" name="defaultUnit" />
          <scope doc="Sets the element&apos;s visibility mode. When setVisible() is called it&#xA;will use this to determine whether to set the visibility or the display property." ilk="function" line="127" lineend="130" name="setVisibilityMode" returns="Ext.Element" signature="setVisibilityMode(visMode)">
            <variable doc="Element.VISIBILITY or Element.DISPLAY" ilk="argument" name="visMode" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Convenience method for setVisibilityMode(Element.DISPLAY)" ilk="function" line="136" lineend="140" name="enableDisplayMode" returns="Ext.Element" signature="enableDisplayMode(display)">
            <variable citdl="String" doc="(optional) What to set display to when visible" ilk="argument" name="display" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)&#xA;search as a number or element (defaults to 10 || document.body)" ilk="function" line="150" lineend="165" name="findParent" returns="HTMLElement" signature="findParent(simpleSelector, maxDepth, returnEl)">
            <variable ilk="argument" name="simpleSelector" />
            <variable citdl="Number/String/HTMLElement/Element" doc="(optional) The max depth to" ilk="argument" name="maxDepth" />
            <variable citdl="Boolean" doc="(optional) True to return a Ext.Element object instead of DOM node" ilk="argument" name="returnEl" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom" line="151" name="p" />
            <variable attributes="__local__ private" citdl="Number" line="151" name="depth" />
            <variable attributes="__local__ private" citdl="document.body" line="151" name="b" />
            <variable attributes="__local__ private" citdl="Ext.getDom()" line="151" name="stopEl" />
            <variable attributes="__local__ private" citdl="Ext.DomQuery" line="151" name="dq" />
          </scope>
          <scope doc="Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)&#xA;search as a number or element (defaults to 10 || document.body)" ilk="function" line="176" lineend="179" name="findParentNode" returns="HTMLElement" signature="findParentNode(simpleSelector, maxDepth, returnEl)">
            <variable ilk="argument" name="simpleSelector" />
            <variable citdl="Number/String/HTMLElement/Element" doc="(optional) The max depth to" ilk="argument" name="maxDepth" />
            <variable citdl="Boolean" doc="(optional) True to return a Ext.Element object instead of DOM node" ilk="argument" name="returnEl" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.fly()" line="177" name="p" />
          </scope>
          <scope doc="Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).&#xA;This is a shortcut for findParentNode() that always returns an Ext.Element.&#xA;search as a number or element (defaults to 10 || document.body)" ilk="function" line="189" lineend="191" name="up" returns="Ext.Element" signature="up(simpleSelector, maxDepth)">
            <variable ilk="argument" name="simpleSelector" />
            <variable citdl="Number/String/HTMLElement/Element" doc="(optional) The max depth to" ilk="argument" name="maxDepth" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Returns true if this element matches the passed simple selector (e.g. div.some-class or span:first-child)" ilk="function" line="200" lineend="202" name="is" returns="Boolean" signature="is(simpleSelector)">
            <variable ilk="argument" name="simpleSelector" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Perform animation on this element." ilk="function" line="213" lineend="216" name="animate" returns="Ext.Element" signature="animate(args, duration, onComplete, easing, animType)">
            <variable citdl="Object" doc="The YUI animation control args" ilk="argument" name="args" />
            <variable citdl="Number" doc="(optional) How long the animation lasts in seconds (defaults to .35)" ilk="argument" name="duration" />
            <variable citdl="Function" doc="(optional) Function to call when animation completes" ilk="argument" name="onComplete" />
            <variable citdl="String" doc="(optional) Easing method to use (defaults to &apos;easeOut&apos;)" ilk="argument" name="easing" />
            <variable citdl="String" doc="(optional) &apos;run&apos; is the default. Can also be &apos;color&apos;, &apos;motion&apos;, or &apos;scroll&apos;" ilk="argument" name="animType" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="* @private Internal animation call */" ilk="function" line="221" lineend="236" name="anim" returns="anim" signature="anim(args, opt, animType, defaultDur, defaultEase, cb)">
            <variable ilk="argument" name="args" />
            <variable ilk="argument" name="opt" />
            <variable ilk="argument" name="animType" />
            <variable ilk="argument" name="defaultDur" />
            <variable ilk="argument" name="defaultEase" />
            <variable ilk="argument" name="cb" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.lib.Anim[animType]()" line="233" name="anim" />
          </scope>
          <scope doc="private legacy anim prep" ilk="function" line="239" lineend="241" name="preanim" signature="preanim(a, i)">
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="i" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Removes worthless text nodes" ilk="function" line="250" lineend="267" name="clean" returns="this" signature="clean(forceReclean)">
            <variable citdl="Boolean" doc="(optional) By default the element&#xA;keeps track if it has been cleaned already so&#xA;you can call this over and over. However, if you update the element and&#xA;need to force a reclean, you can pass true." ilk="argument" name="forceReclean" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" line="254" name="ns" />
            <variable attributes="__local__ private" citdl="Number" line="255" name="ni" />
            <variable attributes="__local__ private" citdl="this.dom" line="255" name="d" />
            <variable attributes="__local__ private" citdl="d.firstChild" line="255" name="n" />
            <variable attributes="__local__ private" citdl="n.nextSibling" line="257" name="nx" />
          </scope>
          <variable citdl="Boolean" line="265" name="isCleaned" />
          <scope doc="private" ilk="function" line="270" lineend="289" name="calcOffsetsTo" returns="Array" signature="calcOffsetsTo(el)">
            <variable ilk="argument" name="el" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="el.dom" line="272" name="d" />
            <variable attributes="__local__ private" citdl="Boolean" line="273" name="restorePos" />
            <variable attributes="__local__ private" citdl="Number" line="278" name="y" />
            <variable attributes="__local__ private" citdl="Number" line="278" name="x" />
            <variable attributes="__local__ private" citdl="this.dom" line="279" name="op" />
          </scope>
          <scope doc="Scrolls this element into view within the passed container." ilk="function" line="297" lineend="327" name="scrollIntoView" returns="Ext.Element" signature="scrollIntoView(container, hscroll)">
            <variable citdl="String/HTMLElement/Element" doc="(optional) The container element to scroll (defaults to document.body)" ilk="argument" name="container" />
            <variable citdl="Boolean" doc="(optional) False to disable horizontal scroll (defaults to true)" ilk="argument" name="hscroll" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.getDom()" line="298" name="c" />
            <variable attributes="__local__ private" citdl="this.dom" line="299" name="el" />
            <variable attributes="__local__ private" citdl="t" line="305" name="b" />
            <variable attributes="__local__ private" citdl="o[0]" line="305" name="l" />
            <variable attributes="__local__ private" citdl="this.calcOffsetsTo()" line="305" name="o" />
            <variable attributes="__local__ private" citdl="l" line="305" name="r" />
            <variable attributes="__local__ private" citdl="o[1]" line="305" name="t" />
            <variable attributes="__local__ private" citdl="c.clientHeight" line="307" name="ch" />
            <variable attributes="__local__ private" citdl="parseInt()" line="308" name="ct" />
            <variable attributes="__local__ private" citdl="parseInt()" line="309" name="cl" />
            <variable attributes="__local__ private" citdl="ct" line="310" name="cb" />
            <variable attributes="__local__ private" citdl="cl" line="311" name="cr" />
          </scope>
          <scope doc="private" ilk="function" line="330" lineend="332" name="scrollChildIntoView" signature="scrollChildIntoView(child, hscroll)">
            <variable ilk="argument" name="child" />
            <variable ilk="argument" name="hscroll" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Measures the element&apos;s content height and updates height to match. Note: this function uses setTimeout so&#xA;the new height may not be available immediately." ilk="function" line="343" lineend="364" name="autoHeight" returns="Ext.Element" signature="autoHeight(animate, duration, onComplete, easing)">
            <variable citdl="Boolean" doc="(optional) Animate the transition (defaults to false)" ilk="argument" name="animate" />
            <variable citdl="Number" doc="(optional) Length of the animation in seconds (defaults to .35)" ilk="argument" name="duration" />
            <variable citdl="Function" doc="(optional) Function to call when animation completes" ilk="argument" name="onComplete" />
            <variable citdl="String" doc="(optional) Easing method to use (defaults to easeOut)" ilk="argument" name="easing" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.getHeight()" line="344" name="oldHeight" />
          </scope>
          <scope doc="Returns true if this element is an ancestor of the passed element" ilk="function" line="371" lineend="374" name="contains" returns="Boolean" signature="contains(el)">
            <variable citdl="HTMLElement/String" doc="The element to check" ilk="argument" name="el" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Checks whether the element is currently visible using both visibility and display properties." ilk="function" line="381" lineend="394" name="isVisible" returns="Boolean" signature="isVisible(deep)">
            <variable citdl="Boolean" doc="(optional) True to walk the dom and see if parent elements are hidden (defaults to false)" ilk="argument" name="deep" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" line="382" name="vis" />
            <variable attributes="__local__ private" citdl="this.dom.parentNode" line="386" name="p" />
          </scope>
          <scope doc="Creates a {@link Ext.CompositeElement} for child nodes based on the passed CSS selector (the selector should not contain an id)." ilk="function" line="402" lineend="404" name="select" returns="CompositeElement/CompositeElementLite" signature="select(selector, unique)">
            <variable citdl="String" doc="The CSS selector" ilk="argument" name="selector" />
            <variable citdl="Boolean" doc="(optional) True to create a unique Ext.Element for each child (defaults to false, which creates a single shared flyweight object)" ilk="argument" name="unique" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Selects child nodes based on the passed CSS selector (the selector should not contain an id)." ilk="function" line="411" lineend="413" name="query" returns="Array" signature="query(selector, unique)">
            <variable citdl="String" doc="The CSS selector" ilk="argument" name="selector" />
            <variable ilk="argument" name="unique" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id)." ilk="function" line="421" lineend="424" name="child" returns="HTMLElement/Ext.Element" signature="child(selector, returnDom)">
            <variable citdl="String" doc="The CSS selector" ilk="argument" name="selector" />
            <variable citdl="Boolean" doc="(optional) True to return the DOM node instead of Ext.Element (defaults to false)" ilk="argument" name="returnDom" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomQuery.selectNode()" line="422" name="n" />
          </scope>
          <scope doc="Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id)." ilk="function" line="432" lineend="435" name="down" returns="HTMLElement/Ext.Element" signature="down(selector, returnDom)">
            <variable citdl="String" doc="The CSS selector" ilk="argument" name="selector" />
            <variable citdl="Boolean" doc="(optional) True to return the DOM node instead of Ext.Element (defaults to false)" ilk="argument" name="returnDom" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomQuery.selectNode()" line="433" name="n" />
          </scope>
          <scope doc="Initializes a {@link Ext.dd.DD} drag drop object for this element." ilk="function" line="444" lineend="447" name="initDD" returns="Ext.dd.DD" signature="initDD(group, config, overrides)">
            <variable citdl="String" doc="The group the DD object is member of" ilk="argument" name="group" />
            <variable citdl="Object" doc="The DD config object" ilk="argument" name="config" />
            <variable citdl="Object" doc="An object containing methods to override/implement on the DD object" ilk="argument" name="overrides" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.dd.DD" line="445" name="dd" />
          </scope>
          <scope doc="Initializes a {@link Ext.dd.DDProxy} object for this element." ilk="function" line="456" lineend="459" name="initDDProxy" returns="Ext.dd.DDProxy" signature="initDDProxy(group, config, overrides)">
            <variable citdl="String" doc="The group the DDProxy object is member of" ilk="argument" name="group" />
            <variable citdl="Object" doc="The DDProxy config object" ilk="argument" name="config" />
            <variable citdl="Object" doc="An object containing methods to override/implement on the DDProxy object" ilk="argument" name="overrides" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.dd.DDProxy" line="457" name="dd" />
          </scope>
          <scope doc="Initializes a {@link Ext.dd.DDTarget} object for this element." ilk="function" line="468" lineend="471" name="initDDTarget" returns="Ext.dd.DDTarget" signature="initDDTarget(group, config, overrides)">
            <variable citdl="String" doc="The group the DDTarget object is member of" ilk="argument" name="group" />
            <variable citdl="Object" doc="The DDTarget config object" ilk="argument" name="config" />
            <variable citdl="Object" doc="An object containing methods to override/implement on the DDTarget object" ilk="argument" name="overrides" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.dd.DDTarget" line="469" name="dd" />
          </scope>
          <scope doc="Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use&#xA;the display property to hide the element, otherwise it uses visibility. The default is to hide and show using the visibility property." ilk="function" line="480" lineend="510" name="setVisible" returns="Ext.Element" signature="setVisible(visible, animate)">
            <variable citdl="Boolean" doc="Whether the element is visible" ilk="argument" name="visible" />
            <variable citdl="Boolean/Object" doc="(optional) True for the default animation, or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom" doc="closure for composites" line="490" name="dom" />
            <variable attributes="__local__ private" citdl="this.visibilityMode" line="491" name="visMode" />
          </scope>
          <variable citdl="visible" line="486" name="visibility" />
          <scope doc="Returns true if display is not &quot;none&quot;" ilk="function" line="516" lineend="518" name="isDisplayed" returns="Boolean" signature="isDisplayed()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Toggles the element&apos;s visibility or display, depending on visibility mode." ilk="function" line="525" lineend="528" name="toggle" returns="Ext.Element" signature="toggle(animate)">
            <variable citdl="Boolean/Object" doc="(optional) True for the default animation, or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the CSS display property. Uses originalDisplay if the specified value is a boolean true." ilk="function" line="535" lineend="541" name="setDisplayed" returns="Ext.Element" signature="setDisplayed(value)">
            <variable citdl="Boolean" doc="Boolean value to display the element using its default display, or a string to set the display directly" ilk="argument" name="value" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Tries to focus the element. Any exceptions are caught and ignored." ilk="function" line="547" lineend="552" name="focus" returns="Ext.Element" signature="focus()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Tries to blur the element. Any exceptions are caught and ignored." ilk="function" line="558" lineend="563" name="blur" returns="Ext.Element" signature="blur()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Adds one or more CSS classes to the element. Duplicate classes are automatically filtered out." ilk="function" line="570" lineend="581" name="addClass" returns="Ext.Element" signature="addClass(className)">
            <variable citdl="String/Array" doc="The CSS class to add, or an array of classes" ilk="argument" name="className" />
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="this.dom.className" line="577" name="className" />
          <scope doc="Adds one or more CSS classes to this element and removes the same class(es) from all siblings." ilk="function" line="588" lineend="598" name="radioClass" returns="Ext.Element" signature="radioClass(className)">
            <variable citdl="String/Array" doc="The CSS class to add, or an array of classes" ilk="argument" name="className" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom.parentNode.childNodes" line="589" name="siblings" />
            <variable attributes="__local__ private" citdl="siblings[i]" line="591" name="s" />
          </scope>
          <scope doc="Removes one or more CSS classes from the element." ilk="function" line="605" lineend="625" name="removeClass" returns="Ext.Element" signature="removeClass(className)">
            <variable citdl="String/Array" doc="The CSS class to remove, or an array of classes" ilk="argument" name="className" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.classReCache[className]" line="615" name="re" />
          </scope>
          <variable citdl="Object" doc="private" line="628" lineend="628" name="classReCache" />
          <scope doc="Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it)." ilk="function" line="635" lineend="642" name="toggleClass" returns="Ext.Element" signature="toggleClass(className)">
            <variable citdl="String" doc="The CSS class to toggle" ilk="argument" name="className" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Checks if the specified CSS class exists on this element&apos;s DOM node." ilk="function" line="649" lineend="651" name="hasClass" returns="Boolean" signature="hasClass(className)">
            <variable citdl="String" doc="The CSS class to check for" ilk="argument" name="className" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Replaces a CSS class on the element with another.  If the old name does not exist, the new name will simply be added." ilk="function" line="659" lineend="663" name="replaceClass" returns="Ext.Element" signature="replaceClass(oldClassName, newClassName)">
            <variable citdl="String" doc="The CSS class to replace" ilk="argument" name="oldClassName" />
            <variable citdl="String" doc="The replacement CSS class" ilk="argument" name="newClassName" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Returns an object with properties matching the styles requested.&#xA;For example, el.getStyles(&apos;color&apos;, &apos;font-size&apos;, &apos;width&apos;) might return&#xA;{&apos;color&apos;: &apos;#FFFFFF&apos;, &apos;font-size&apos;: &apos;13px&apos;, &apos;width&apos;: &apos;100px&apos;}." ilk="function" line="674" lineend="680" name="getStyles" returns="Object" signature="getStyles()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="arguments" line="675" name="a" />
            <variable attributes="__local__ private" citdl="Object" line="675" lineend="675" name="r" />
            <variable attributes="__local__ private" citdl="a.length" line="675" name="len" />
          </scope>
          <variable citdl="String" doc="Normalizes currentStyle and computedStyle. This is not YUI getStyle, it is an optimised version." line="687" name="getStyle" />
          <scope doc="Wrapper for setting style properties, also takes single object parameter of multiple styles." ilk="function" line="740" lineend="759" name="setStyle" returns="Ext.Element" signature="setStyle(prop, value)">
            <variable ilk="argument" name="prop" />
            <variable citdl="String" doc="(optional) The value to apply to the given property, or null if an object was passed." ilk="argument" name="value" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="propCache[prop]" line="742" name="camel" />
          </scope>
          <scope doc="More flexible version of {@link #setStyle} for setting style properties." ilk="function" line="767" lineend="770" name="applyStyles" returns="Ext.Element" signature="applyStyles(style)">
            <variable ilk="argument" name="style" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets the current X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="776" lineend="778" name="getX" returns="Number" signature="getX()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="784" lineend="786" name="getY" returns="Number" signature="getY()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="792" lineend="794" name="getXY" returns="Array" signature="getXY()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="802" lineend="809" name="setX" returns="Ext.Element" signature="setX(x, animate)">
            <variable ilk="argument" name="x" />
            <variable citdl="Boolean/Object" doc="(optional) True for the default animation, or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="817" lineend="824" name="setY" returns="Ext.Element" signature="setY(y, animate)">
            <variable ilk="argument" name="y" />
            <variable citdl="Boolean/Object" doc="(optional) True for the default animation, or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the element&apos;s left position directly using CSS style (instead of {@link #setX})." ilk="function" line="831" lineend="834" name="setLeft" returns="Ext.Element" signature="setLeft(left)">
            <variable citdl="String" doc="The left CSS property value" ilk="argument" name="left" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the element&apos;s top position directly using CSS style (instead of {@link #setY})." ilk="function" line="841" lineend="844" name="setTop" returns="Ext.Element" signature="setTop(top)">
            <variable citdl="String" doc="The top CSS property value" ilk="argument" name="top" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the element&apos;s CSS right style." ilk="function" line="851" lineend="854" name="setRight" returns="Ext.Element" signature="setRight(right)">
            <variable citdl="String" doc="The right CSS property value" ilk="argument" name="right" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the element&apos;s CSS bottom style." ilk="function" line="861" lineend="864" name="setBottom" returns="Ext.Element" signature="setBottom(bottom)">
            <variable citdl="String" doc="The bottom CSS property value" ilk="argument" name="bottom" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the position of the element in page coordinates, regardless of how the element is positioned.&#xA;The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="873" lineend="880" name="setXY" returns="Ext.Element" signature="setXY(pos, animate)">
            <variable citdl="Array" doc="Contains X &amp; Y [x, y] values for new position (coordinates are page-based)" ilk="argument" name="pos" />
            <variable citdl="Boolean/Object" doc="(optional) True for the default animation, or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the position of the element in page coordinates, regardless of how the element is positioned.&#xA;The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="890" lineend="893" name="setLocation" returns="Ext.Element" signature="setLocation(x, y, animate)">
            <variable citdl="Number" doc="X value for new position (coordinates are page-based)" ilk="argument" name="x" />
            <variable citdl="Number" doc="Y value for new position (coordinates are page-based)" ilk="argument" name="y" />
            <variable citdl="Boolean/Object" doc="(optional) True for the default animation, or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the position of the element in page coordinates, regardless of how the element is positioned.&#xA;The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="903" lineend="906" name="moveTo" returns="Ext.Element" signature="moveTo(x, y, animate)">
            <variable citdl="Number" doc="X value for new position (coordinates are page-based)" ilk="argument" name="x" />
            <variable citdl="Number" doc="Y value for new position (coordinates are page-based)" ilk="argument" name="y" />
            <variable citdl="Boolean/Object" doc="(optional) True for the default animation, or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Returns the region of the given element.&#xA;The element must be part of the DOM tree to have a region (display:none or elements not appended return false)." ilk="function" line="913" lineend="915" name="getRegion" returns="Region" signature="getRegion()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Returns the offset height of the element" ilk="function" line="922" lineend="925" name="getHeight" returns="Number" signature="getHeight(contentHeight)">
            <variable citdl="Boolean" doc="(optional) true to get the height minus borders and padding" ilk="argument" name="contentHeight" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom.offsetHeight" line="923" name="h" />
          </scope>
          <scope doc="Returns the offset width of the element" ilk="function" line="932" lineend="935" name="getWidth" returns="Number" signature="getWidth(contentWidth)">
            <variable citdl="Boolean" doc="(optional) true to get the width minus borders and padding" ilk="argument" name="contentWidth" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom.offsetWidth" line="933" name="w" />
          </scope>
          <scope doc="Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders&#xA;when needed to simulate offsetHeight when offsets aren&apos;t available. This may not work on display:none elements&#xA;if a height has not been set using CSS." ilk="function" line="943" lineend="952" name="getComputedHeight" returns="Number" signature="getComputedHeight()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Math.max()" line="944" name="h" />
          </scope>
          <scope doc="Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders&#xA;when needed to simulate offsetWidth when offsets aren&apos;t available. This may not work on display:none elements&#xA;if a width has not been set using CSS." ilk="function" line="960" lineend="969" name="getComputedWidth" returns="Number" signature="getComputedWidth()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Math.max()" line="961" name="w" />
          </scope>
          <scope doc="Returns the size of the element." ilk="function" line="976" lineend="978" name="getSize" returns="Object" signature="getSize(contentSize)">
            <variable citdl="Boolean" doc="(optional) true to get the width/size minus borders and padding" ilk="argument" name="contentSize" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Returns the width and height of the viewport." ilk="function" line="984" lineend="994" name="getViewSize" returns="Object" signature="getViewSize()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="document" line="985" name="doc" />
            <variable attributes="__local__ private" citdl="this.dom" line="985" name="d" />
            <variable attributes="__local__ private" citdl="Number" line="985" name="aw" />
            <variable attributes="__local__ private" citdl="Number" line="985" name="ah" />
          </scope>
          <scope doc="Returns the value of the &quot;value&quot; attribute" ilk="function" line="1001" lineend="1003" name="getValue" returns="String/Number" signature="getValue(asNumber)">
            <variable citdl="Boolean" doc="true to parse the value as a number" ilk="argument" name="asNumber" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="1006" lineend="1016" name="adjustWidth" returns="width" signature="adjustWidth(width)">
            <variable ilk="argument" name="width" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="1019" lineend="1029" name="adjustHeight" returns="height" signature="adjustHeight(height)">
            <variable ilk="argument" name="height" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Set the width of the element" ilk="function" line="1037" lineend="1045" name="setWidth" returns="Ext.Element" signature="setWidth(width, animate)">
            <variable citdl="Number" doc="The new width" ilk="argument" name="width" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="this.addUnits()" line="1040" name="width" />
          <scope doc="Set the height of the element" ilk="function" line="1053" lineend="1061" name="setHeight" returns="Ext.Element" signature="setHeight(height, animate)">
            <variable citdl="Number" doc="The new height" ilk="argument" name="height" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="this.addUnits()" line="1056" name="height" />
          <scope doc="Set the size of the element. If animation is true, both width an height will be animated concurrently." ilk="function" line="1070" lineend="1082" name="setSize" returns="Ext.Element" signature="setSize(width, height, animate)">
            <variable citdl="Number" doc="The new width" ilk="argument" name="width" />
            <variable citdl="Number" doc="The new height" ilk="argument" name="height" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the element&apos;s position and size in one shot. If animation is true then width, height, x and y will be animated concurrently." ilk="function" line="1093" lineend="1103" name="setBounds" returns="Ext.Element" signature="setBounds(x, y, width, height, animate)">
            <variable citdl="Number" doc="X value for new position (coordinates are page-based)" ilk="argument" name="x" />
            <variable citdl="Number" doc="Y value for new position (coordinates are page-based)" ilk="argument" name="y" />
            <variable citdl="Number" doc="The new width" ilk="argument" name="width" />
            <variable citdl="Number" doc="The new height" ilk="argument" name="height" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the element&apos;s position and size the the specified region. If animation is true then width, height, x and y will be animated concurrently." ilk="function" line="1111" lineend="1114" name="setRegion" returns="Ext.Element" signature="setRegion(region, animate)">
            <variable citdl="Ext.lib.Region" doc="The region to fill" ilk="argument" name="region" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Appends an event handler" ilk="function" line="1124" lineend="1126" name="addListener" signature="addListener(eventName, fn, scope, options)">
            <variable citdl="String" doc="The type of event to append" ilk="argument" name="eventName" />
            <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The scope (this object) of the fn" ilk="argument" name="scope" />
            <variable citdl="Object" doc="(optional)An object with standard {@link Ext.EventManager#addListener} options" ilk="argument" name="options" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Removes an event handler from this element" ilk="function" line="1134" lineend="1137" name="removeListener" returns="Ext.Element" signature="removeListener(eventName, fn)">
            <variable citdl="String" doc="the type of event to remove" ilk="argument" name="eventName" />
            <variable citdl="Function" doc="the method the event invokes" ilk="argument" name="fn" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Removes all previous added listeners from this element" ilk="function" line="1143" lineend="1146" name="removeAllListeners" returns="Ext.Element" signature="removeAllListeners()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope ilk="function" line="1148" lineend="1152" name="relayEvent" signature="relayEvent(eventName, observable)">
            <variable ilk="argument" name="eventName" />
            <variable ilk="argument" name="observable" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Set the opacity of the element" ilk="function" line="1160" lineend="1174" name="setOpacity" returns="Ext.Element" signature="setOpacity(opacity, animate)">
            <variable citdl="Number" doc="The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc" ilk="argument" name="opacity" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom.style" line="1162" name="s" />
          </scope>
          <scope doc="Gets the left X coordinate" ilk="function" line="1181" lineend="1187" name="getLeft" returns="Number" signature="getLeft(local)">
            <variable citdl="Boolean" doc="True to get the local css position instead of page coordinate" ilk="argument" name="local" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets the right X coordinate of the element (element X position + element width)" ilk="function" line="1194" lineend="1200" name="getRight" returns="Number" signature="getRight(local)">
            <variable citdl="Boolean" doc="True to get the local css position instead of page coordinate" ilk="argument" name="local" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets the top Y coordinate" ilk="function" line="1207" lineend="1213" name="getTop" returns="Number" signature="getTop(local)">
            <variable citdl="Boolean" doc="True to get the local css position instead of page coordinate" ilk="argument" name="local" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets the bottom Y coordinate of the element (element Y position + element height)" ilk="function" line="1220" lineend="1226" name="getBottom" returns="Number" signature="getBottom(local)">
            <variable citdl="Boolean" doc="True to get the local css position instead of page coordinate" ilk="argument" name="local" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Initializes positioning on this element. If a desired position is not passed, it will make the&#xA;the element positioned relative IF it is not already positioned." ilk="function" line="1236" lineend="1254" name="position" signature="position(pos, zIndex, x, y)">
            <variable citdl="String" doc="(optional) Positioning to use &quot;relative&quot;, &quot;absolute&quot; or &quot;fixed&quot;" ilk="argument" name="pos" />
            <variable citdl="Number" doc="(optional) The zIndex to apply" ilk="argument" name="zIndex" />
            <variable citdl="Number" doc="(optional) Set the page X position" ilk="argument" name="x" />
            <variable citdl="Number" doc="(optional) Set the page Y position" ilk="argument" name="y" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Clear positioning back to the default when the document was loaded" ilk="function" line="1261" lineend="1272" name="clearPositioning" returns="Ext.Element" signature="clearPositioning(value)">
            <variable citdl="String" doc="(optional) The value to use for the left,right,top,bottom, defaults to &apos;&apos; (empty string). You could use &apos;auto&apos;." ilk="argument" name="value" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets an object with all CSS positioning properties. Useful along with setPostioning to get&#xA;snapshot before performing an update and then restoring the element." ilk="function" line="1279" lineend="1290" name="getPositioning" returns="Object" signature="getPositioning()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.getStyle()" line="1280" name="l" />
            <variable attributes="__local__ private" citdl="this.getStyle()" line="1281" name="t" />
          </scope>
          <scope doc="Gets the width of the border(s) for the specified side(s)" ilk="function" line="1298" lineend="1300" name="getBorderWidth" returns="Number" signature="getBorderWidth(side)">
            <variable citdl="String" doc="Can be t, l, r, b or any combination of those to add multiple values. For example,&#xA;passing lr would get the border (l)eft width + the border (r)ight width." ilk="argument" name="side" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets the width of the padding(s) for the specified side(s)" ilk="function" line="1308" lineend="1310" name="getPadding" returns="Number" signature="getPadding(side)">
            <variable citdl="String" doc="Can be t, l, r, b or any combination of those to add multiple values. For example,&#xA;passing lr would get the padding (l)eft + the padding (r)ight." ilk="argument" name="side" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Set positioning with an object returned by getPositioning()." ilk="function" line="1317" lineend="1326" name="setPositioning" returns="Ext.Element" signature="setPositioning(pc)">
            <variable ilk="argument" name="pc" />
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="String" line="1320" name="right" />
          <variable citdl="String" line="1323" name="bottom" />
          <scope doc="private" ilk="function" line="1329" lineend="1337" name="fixDisplay" signature="fixDisplay()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Quick set left and top adding default units" ilk="function" line="1345" lineend="1349" name="setLeftTop" returns="Ext.Element" signature="setLeftTop(left, top)">
            <variable citdl="String" doc="The left CSS property value" ilk="argument" name="left" />
            <variable citdl="String" doc="The top CSS property value" ilk="argument" name="top" />
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="this.addUnits()" line="1346" name="left" />
          <variable citdl="this.addUnits()" line="1347" name="top" />
          <scope doc="Move this element relative to its current position." ilk="function" line="1358" lineend="1382" name="move" returns="Ext.Element" signature="move(direction, distance, animate)">
            <variable citdl="String" doc="Possible values are: &quot;l&quot;,&quot;left&quot; - &quot;r&quot;,&quot;right&quot; - &quot;t&quot;,&quot;top&quot;,&quot;up&quot; - &quot;b&quot;,&quot;bottom&quot;,&quot;down&quot;." ilk="argument" name="direction" />
            <variable citdl="Number" doc="How far to move the element in pixels" ilk="argument" name="distance" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.getXY()" line="1359" name="xy" />
          </scope>
          <scope doc="Store the current overflow setting and clip overflow on the element - use {@link #unclip} to remove" ilk="function" line="1388" lineend="1401" name="clip" returns="Ext.Element" signature="clip()">
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="Boolean" line="1390" name="isClipped" />
          <variable citdl="Object" line="1391" lineend="1395" name="originalClip">
            <variable citdl="this.getStyle()" line="1392" name="o" />
            <variable citdl="this.getStyle()" line="1393" name="x" />
            <variable citdl="this.getStyle()" line="1394" name="y" />
          </variable>
          <scope doc="Return clipping (overflow) to original clipping before clip() was called" ilk="function" line="1407" lineend="1416" name="unclip" returns="Ext.Element" signature="unclip()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.originalClip" line="1410" name="o" />
          </scope>
          <scope doc="Gets the x,y coordinates specified by the anchor position on the element." ilk="function" line="1427" lineend="1492" name="getAnchorXY" returns="Array" signature="getAnchorXY(anchor, local, s)">
            <variable citdl="String" doc="(optional) The specified anchor position (defaults to &quot;c&quot;).  See {@link #alignTo} for details on supported anchor positions." ilk="argument" name="anchor" />
            <variable citdl="Boolean" doc="(optional) True to get the local (element top/left-relative) anchor position instead of page coordinates" ilk="argument" name="local" />
            <variable ilk="argument" name="s" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="D.getViewHeight()" doc="especially for anchored animations that change the el size." line="1431" name="h" />
            <variable attributes="__local__ private" citdl="Boolean" doc="especially for anchored animations that change the el size." line="1431" name="vp" />
            <variable attributes="__local__ private" citdl="D.getViewWidth()" doc="especially for anchored animations that change the el size." line="1431" name="w" />
            <variable attributes="__local__ private" citdl="this.dom" line="1433" name="d" />
            <variable attributes="__local__ private" citdl="Math.round" line="1443" name="r" />
            <variable attributes="__local__ private" citdl="Number" line="1443" name="y" />
            <variable attributes="__local__ private" citdl="Number" line="1443" name="x" />
            <variable attributes="__local__ private" citdl="this.getScroll()" line="1486" name="sc" />
            <variable attributes="__local__ private" citdl="this.getXY()" doc="Add the element&apos;s offset xy" line="1490" name="o" />
          </scope>
          <scope doc="Gets the x,y coordinates to align this element with another element. See {@link #alignTo} for more info on the&#xA;supported position values." ilk="function" line="1502" lineend="1564" name="getAlignToXY" returns="Array" signature="getAlignToXY(el, p, o)">
            <variable ilk="argument" name="el" />
            <variable ilk="argument" name="p" />
            <variable ilk="argument" name="o" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom" line="1504" name="d" />
            <variable attributes="__local__ private" citdl="Boolean" line="1508" name="c" />
            <variable attributes="__local__ private" citdl="String" doc="constrain to viewport" line="1509" name="p2" />
            <variable attributes="__local__ private" citdl="String" doc="constrain to viewport" line="1509" name="p1" />
            <variable attributes="__local__ private" citdl="p.match()" line="1520" name="m" />
            <variable attributes="__local__ private" citdl="this.getAnchorXY()" doc="plus custom offset to get the aligned el&apos;s new offset xy" line="1528" name="a1" />
            <variable attributes="__local__ private" citdl="el.getAnchorXY()" line="1529" name="a2" />
            <variable attributes="__local__ private" citdl="a2[0]" line="1530" name="x" />
            <variable attributes="__local__ private" citdl="a2[1]" line="1531" name="y" />
            <variable attributes="__local__ private" citdl="this.getHeight()" doc="constrain the aligned el to viewport if necessary" line="1534" name="h" />
            <variable attributes="__local__ private" citdl="el.getRegion()" doc="constrain the aligned el to viewport if necessary" line="1534" name="r" />
            <variable attributes="__local__ private" citdl="this.getWidth()" doc="constrain the aligned el to viewport if necessary" line="1534" name="w" />
            <variable attributes="__local__ private" citdl="D.getViewHeight()" doc="5px of margin for ie" line="1536" name="dh" />
            <variable attributes="__local__ private" citdl="D.getViewWidth()" doc="5px of margin for ie" line="1536" name="dw" />
            <variable attributes="__local__ private" citdl="p1.charAt()" doc="otherwise swap the aligned el to the opposite border of the&#xA;target." line="1541" name="p1x" />
            <variable attributes="__local__ private" citdl="p1.charAt()" doc="otherwise swap the aligned el to the opposite border of the&#xA;target." line="1541" name="p1y" />
            <variable attributes="__local__ private" citdl="p2.charAt()" line="1542" name="p2y" />
            <variable attributes="__local__ private" citdl="p2.charAt()" line="1542" name="p2x" />
            <variable attributes="__local__ private" line="1543" name="swapY" />
            <variable attributes="__local__ private" line="1544" name="swapX" />
            <variable attributes="__local__ private" citdl="document" line="1546" name="doc" />
            <variable attributes="__local__ private" line="1547" name="scrollX" />
            <variable attributes="__local__ private" line="1548" name="scrollY" />
          </scope>
          <variable citdl="moved" doc="private" line="1567" name="getConstrainToXY" />
          <scope doc="private" ilk="function" line="1629" lineend="1631" name="adjustForConstraints" returns="this.getConstrainToXY()" signature="adjustForConstraints(xy, parent, offsets)">
            <variable ilk="argument" name="xy" />
            <variable ilk="argument" name="parent" />
            <variable ilk="argument" name="offsets" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Aligns this element with another element relative to the specified anchor points. If the other element is the&#xA;document it aligns it to the viewport.&#xA;The position parameter is optional, and can be specified in any one of the following formats:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;b&gt;Blank&lt;/b&gt;: Defaults to aligning the element&apos;s top-left corner to the target&apos;s bottom-left corner (&quot;tl-bl&quot;).&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;One anchor (deprecated)&lt;/b&gt;: The passed anchor position is used as the target element&apos;s anchor point.&#xA;The element being aligned will position its top-left corner (tl) to that point.  &lt;i&gt;This method has been&#xA;deprecated in favor of the newer two anchor syntax below&lt;/i&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;Two anchors&lt;/b&gt;: If two values from the table below are passed separated by a dash, the first value is used as the&#xA;element&apos;s anchor point, and the second value is used as the target&apos;s anchor point.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;In addition to the anchor points, the position parameter also supports the &quot;?&quot; character.  If &quot;?&quot; is passed at the end of&#xA;the position string, the element will attempt to align as specified, but the position will be adjusted to constrain to&#xA;the viewport if necessary.  Note that the element being aligned might be swapped to align to a different position than&#xA;that specified in order to enforce the viewport constraints.&#xA;Following are all of the supported anchor positions:&#xA;&lt;pre&gt;&#xA;Value  Description&#xA;-----  -----------------------------&#xA;tl     The top left corner (default)&#xA;t      The center of the top edge&#xA;tr     The top right corner&#xA;l      The center of the left edge&#xA;c      In the center of the element&#xA;r      The center of the right edge&#xA;bl     The bottom left corner&#xA;b      The center of the bottom edge&#xA;br     The bottom right corner&#xA;&lt;/pre&gt;&#xA;Example Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// align el to other-el using the default positioning (&quot;tl-bl&quot;, non-constrained)&#xA;el.alignTo(&quot;other-el&quot;);&#xA;// align the top left corner of el with the top right corner of other-el (constrained to viewport)&#xA;el.alignTo(&quot;other-el&quot;, &quot;tr?&quot;);&#xA;// align the bottom right corner of el with the center left edge of other-el&#xA;el.alignTo(&quot;other-el&quot;, &quot;br-l?&quot;);&#xA;// align the center of el with the bottom left corner of other-el and&#xA;// adjust the x position by -6 pixels (and the y position by 0)&#xA;el.alignTo(&quot;other-el&quot;, &quot;c-bl&quot;, [-6, 0]);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="1684" lineend="1688" name="alignTo" returns="Ext.Element" signature="alignTo(element, position, offsets, animate)">
            <variable citdl="String/HTMLElement/Ext.Element" doc="The element to align to." ilk="argument" name="element" />
            <variable citdl="String" doc="The position to align to." ilk="argument" name="position" />
            <variable citdl="Array" doc="(optional) Offset the positioning by [x, y]" ilk="argument" name="offsets" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.getAlignToXY()" line="1685" name="xy" />
          </scope>
          <scope doc="Anchors an element to another element and realigns it when the window is resized." ilk="function" line="1701" lineend="1714" name="anchorTo" returns="Ext.Element" signature="anchorTo(el, alignment, offsets, animate, monitorScroll, callback)">
            <variable ilk="argument" name="el" />
            <variable ilk="argument" name="alignment" />
            <variable citdl="Array" doc="(optional) Offset the positioning by [x, y]" ilk="argument" name="offsets" />
            <variable citdl="Boolean/Object" doc="(optional) True for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Boolean/Number" doc="(optional) True to monitor body scroll and reposition. If this parameter&#xA;is a number, it is used as the buffer delay (defaults to 50ms)." ilk="argument" name="monitorScroll" />
            <variable citdl="Function" doc="The function to call after the animation finishes" ilk="argument" name="callback" />
            <variable citdl="Element" name="this" />
            <scope attributes="__local__ private" ilk="function" line="1702" lineend="1705" name="action" signature="action()" />
            <variable attributes="__local__ private" line="1707" name="tm" />
          </scope>
          <scope doc="Clears any opacity settings from this element. Required in some cases for IE." ilk="function" line="1719" lineend="1730" name="clearOpacity" returns="Ext.Element" signature="clearOpacity()">
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="String" line="1722" name="filter" />
          <variable citdl="String" line="1725" name="opacity" />
          <scope doc="Hide this element - Uses display mode to determine whether to use &quot;display&quot; or &quot;visibility&quot;. See {@link #setVisible}." ilk="function" line="1737" lineend="1740" name="hide" returns="Ext.Element" signature="hide(animate)">
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Show this element - Uses display mode to determine whether to use &quot;display&quot; or &quot;visibility&quot;. See {@link #setVisible}." ilk="function" line="1747" lineend="1750" name="show" returns="Ext.Element" signature="show(animate)">
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope attributes="private" doc="Test if size has a unit, otherwise appends the default */" ilk="function" line="1755" lineend="1757" name="addUnits" returns="Ext.Element.addUnits()" signature="addUnits(size)">
            <variable ilk="argument" name="size" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Temporarily enables offsets (width,height,x,y) for an element with display:none, use endMeasure() when done." ilk="function" line="1763" lineend="1782" name="beginMeasure" returns="Ext.Element" signature="beginMeasure()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom" line="1764" name="el" />
            <variable attributes="__local__ private" citdl="Array" line="1768" name="changed" />
            <variable attributes="__local__ private" citdl="document.body" line="1769" name="b" />
            <variable attributes="__local__ private" citdl="this.dom" line="1769" name="p">
              <variable citdl="Object" line="1774" name="style">
                <variable citdl="String" line="1774" name="visibility" />
                <variable citdl="String" line="1775" name="display" />
              </variable>
            </variable>
            <variable attributes="__local__ private" citdl="Ext.get()" line="1771" name="pe" />
          </scope>
          <variable citdl="changed" line="1779" name="_measureChanged" />
          <scope doc="Restores displays to before beginMeasure was called" ilk="function" line="1788" lineend="1799" name="endMeasure" returns="Ext.Element" signature="endMeasure()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this._measureChanged" line="1789" name="changed" />
            <variable attributes="__local__ private" citdl="changed[i]" line="1792" name="r" />
          </scope>
          <scope doc="Update the innerHTML of this element, optionally searching for and processing scripts" ilk="function" line="1808" lineend="1858" name="update" returns="Ext.Element" signature="update(html, loadScripts, callback)">
            <variable citdl="String" doc="The new HTML" ilk="argument" name="html" />
            <variable citdl="Boolean" doc="(optional) true to look for and process scripts" ilk="argument" name="loadScripts" />
            <variable citdl="Function" doc="For async script loading you can be noticed when the update completes" ilk="argument" name="callback" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.id()" line="1819" name="id" />
            <variable attributes="__local__ private" citdl="this.dom" line="1820" name="dom" />
          </scope>
          <variable citdl="html" line="1813" name="innerHTML" />
          <scope doc="Direct access to the UpdateManager update() method (takes the same parameters)." ilk="function" line="1868" lineend="1872" name="load" returns="Ext.Element" signature="load()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.getUpdateManager()" line="1869" name="um" />
          </scope>
          <scope doc="Gets this element&apos;s UpdateManager" ilk="function" line="1878" lineend="1883" name="getUpdateManager" returns="Ext.UpdateManager" signature="getUpdateManager()">
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="Ext.UpdateManager" line="1880" name="updateManager" />
          <scope doc="Disables text selection for this element (normalized across browsers)" ilk="function" line="1889" lineend="1895" name="unselectable" returns="Ext.Element" signature="unselectable()">
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="String" line="1890" name="unselectable" />
          <scope doc="Calculates the x, y to center this element on the screen" ilk="function" line="1901" lineend="1903" name="getCenterXY" returns="Array" signature="getCenterXY()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Centers the Element in either the viewport, or another Element." ilk="function" line="1909" lineend="1912" name="center" returns="this" signature="center(centerIn)">
            <variable citdl="String/HTMLElement/Ext.Element" doc="(optional) The element in which to center the element." ilk="argument" name="centerIn" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Tests various css rules/browsers to determine if this element uses a border box" ilk="function" line="1918" lineend="1920" name="isBorderBox" returns="Boolean" signature="isBorderBox()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Return a box {x, y, width, height} that can be used to set another elements&#xA;size/location to match this element." ilk="function" line="1929" lineend="1951" name="getBox" returns="Object" signature="getBox(contentBox, local)">
            <variable citdl="Boolean" doc="(optional) If true a box for the content of the element is returned." ilk="argument" name="contentBox" />
            <variable citdl="Boolean" doc="(optional) If true the element&apos;s left and top are returned instead of page x/y." ilk="argument" name="local" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.getXY()" line="1930" name="xy" />
            <variable attributes="__local__ private" citdl="parseInt()" line="1934" name="left" />
            <variable attributes="__local__ private" citdl="parseInt()" line="1935" name="top" />
            <variable attributes="__local__ private" citdl="this.dom" line="1938" name="el" />
            <variable attributes="__local__ private" citdl="el.offsetHeight" line="1938" name="h" />
            <variable attributes="__local__ private" citdl="el.offsetWidth" line="1938" name="w" />
            <variable attributes="__local__ private" line="1938" lineend="1946" name="bx">
              <variable citdl="xy[1]" line="1940" name="y" />
              <variable citdl="xy[0]" line="1940" name="x" />
              <variable citdl="h" line="1940" name="height" />
              <variable citdl="w" line="1940" name="width" />
            </variable>
            <variable attributes="__local__ private" citdl="this.getBorderWidth()" line="1942" name="l" />
            <variable attributes="__local__ private" citdl="this.getBorderWidth()" line="1943" name="r" />
            <variable attributes="__local__ private" citdl="this.getBorderWidth()" line="1944" name="t" />
            <variable attributes="__local__ private" citdl="this.getBorderWidth()" line="1945" name="b" />
          </scope>
          <scope doc="Returns the sum width of the padding and borders for the passed &quot;sides&quot;. See getBorderWidth()&#xA;for more information about the sides." ilk="function" line="1959" lineend="1961" name="getFrameWidth" returns="Number" signature="getFrameWidth(sides, onlyContentBox)">
            <variable citdl="String" ilk="argument" name="sides" />
            <variable ilk="argument" name="onlyContentBox" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the element&apos;s box. Use getBox() on another element to get a box obj. If animate is true then width, height, x and y will be animated concurrently." ilk="function" line="1970" lineend="1978" name="setBox" returns="Ext.Element" signature="setBox(box, adjust, animate)">
            <variable citdl="Object" doc="The box to fill {x, y, width, height}" ilk="argument" name="box" />
            <variable citdl="Boolean" doc="(optional) Whether to adjust for box-model issues automatically" ilk="argument" name="adjust" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="box.height" line="1971" name="h" />
            <variable attributes="__local__ private" citdl="box.width" line="1971" name="w" />
          </scope>
          <scope doc="Forces the browser to repaint this element" ilk="function" line="1984" lineend="1991" name="repaint" returns="Ext.Element" signature="repaint()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom" line="1985" name="dom" />
          </scope>
          <scope doc="Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,&#xA;then it returns the calculated width of the sides (see getPadding)" ilk="function" line="1999" lineend="2010" name="getMargins" returns="Object/Number" signature="getMargins(side)">
            <variable ilk="argument" name="side" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="2013" lineend="2023" name="addStyles" returns="val" signature="addStyles(sides, styles)">
            <variable ilk="argument" name="sides" />
            <variable ilk="argument" name="styles" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="parseInt()" line="2014" name="w" />
            <variable attributes="__local__ private" citdl="Number" line="2014" name="val" />
            <variable attributes="__local__ private" citdl="this.getStyle()" line="2014" name="v" />
          </scope>
          <scope doc="Creates a proxy element of this element" ilk="function" line="2032" lineend="2045" name="createProxy" returns="Ext.Element" signature="createProxy(config, renderTo, matchBox)">
            <variable citdl="String/Object" doc="The class name of the proxy element or a DomHelper config object" ilk="argument" name="config" />
            <variable citdl="String/HTMLElement" doc="(optional) The element or element id to render the proxy to (defaults to document.body)" ilk="argument" name="renderTo" />
            <variable citdl="Boolean" doc="(optional) True to align and size the proxy to this element now (defaults to false)" ilk="argument" name="matchBox" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomHelper.append()" line="2040" name="proxy" />
          </scope>
          <variable citdl="Object" line="2039" lineend="2039" name="config">
            <variable citdl="String" line="2039" name="tag" />
            <variable citdl="config" line="2039" name="cls" />
          </variable>
          <scope doc="Puts a mask over this element to disable user interaction. Requires core.css.&#xA;This method can only be applied to elements which accept child nodes." ilk="function" line="2054" lineend="2077" name="mask" returns="Element" signature="mask(msg, msgCls)">
            <variable citdl="String" doc="(optional) A message to display in the mask" ilk="argument" name="msg" />
            <variable citdl="String" doc="(optional) A css class to apply to the msg element" ilk="argument" name="msgCls" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this._maskMsg" line="2067" name="mm">
              <variable citdl="Object" line="2068" name="dom">
                <variable citdl="msgCls" line="2068" name="className" />
                <variable citdl="Object" line="2069" name="firstChild">
                  <variable citdl="msg" line="2069" name="innerHTML" />
                </variable>
              </variable>
            </variable>
          </scope>
          <variable citdl="Ext.DomHelper.append()" line="2059" name="_mask" />
          <variable citdl="Ext.DomHelper.append()" line="2065" name="_maskMsg" />
          <scope doc="Removes a previously applied mask. If removeEl is true the mask overlay is destroyed, otherwise&#xA;it is cached for reuse." ilk="function" line="2083" lineend="2100" name="unmask" signature="unmask(removeEl)">
            <variable ilk="argument" name="removeEl" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Returns true if this element is masked" ilk="function" line="2106" lineend="2108" name="isMasked" returns="Boolean" signature="isMasked()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Creates an iframe shim for this element to keep selects and other windowed objects from&#xA;showing through." ilk="function" line="2115" lineend="2125" name="createShim" returns="Ext.Element" signature="createShim()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="2116" name="el" />
            <variable attributes="__local__ private" citdl="Ext.get()" line="2122" name="shim" />
          </scope>
          <scope doc="Removes this element from the DOM and deletes it from the cache" ilk="function" line="2130" lineend="2135" name="remove" signature="remove()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets up event handlers to add and remove a css class when the mouse is over this element" ilk="function" line="2144" lineend="2155" name="addClassOnOver" returns="Ext.Element" signature="addClassOnOver(className, preventFlicker)">
            <variable citdl="String" ilk="argument" name="className" />
            <variable citdl="Boolean" doc="(optional) If set to true, it prevents flickering by filtering&#xA;mouseout events for children elements" ilk="argument" name="preventFlicker" />
            <variable citdl="Element" name="this" />
            <scope attributes="__local__ private" ilk="function" line="2148" lineend="2152" name="removeFn" signature="removeFn(e)">
              <variable ilk="argument" name="e" />
            </scope>
          </scope>
          <scope doc="Sets up event handlers to add and remove a css class when this element has the focus" ilk="function" line="2162" lineend="2170" name="addClassOnFocus" returns="Ext.Element" signature="addClassOnFocus(className)">
            <variable citdl="String" ilk="argument" name="className" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect)" ilk="function" line="2176" lineend="2188" name="addClassOnClick" returns="Ext.Element" signature="addClassOnClick(className)">
            <variable citdl="String" ilk="argument" name="className" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom" line="2177" name="dom" />
          </scope>
          <scope doc="Stops the specified event from bubbling and optionally prevents the default action" ilk="function" line="2196" lineend="2211" name="swallowEvent" returns="Ext.Element" signature="swallowEvent(eventName, preventDefault)">
            <variable citdl="String" ilk="argument" name="eventName" />
            <variable citdl="Boolean" doc="(optional) true to prevent the default action too" ilk="argument" name="preventDefault" />
            <variable citdl="Element" name="this" />
            <scope attributes="__local__ private" ilk="function" line="2197" lineend="2202" name="fn" signature="fn(e)">
              <variable ilk="argument" name="e" />
            </scope>
          </scope>
          <variable attributes="private" citdl="Ext.emptyFn" doc="*/" line="2216" name="fitToParentDelegate" />
          <scope doc="Sizes this element to its parent element&apos;s dimensions performing&#xA;neccessary box adjustments." ilk="function" line="2225" lineend="2238" name="fitToParent" returns="Ext.Element" signature="fitToParent(monitorResize, targetParent)">
            <variable citdl="Boolean" doc="(optional) If true maintains the fit when the browser window is resized." ilk="argument" name="monitorResize" />
            <variable citdl="String/HTMLElment/Element" doc="(optional) The target parent, default to the parentNode." ilk="argument" name="targetParent" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.get()" line="2231" name="p" />
          </scope>
          <scope doc="Gets the next sibling, skipping text nodes" ilk="function" line="2244" lineend="2250" name="getNextSibling" returns="HTMLElement" signature="getNextSibling()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom.nextSibling" line="2245" name="n" />
          </scope>
          <scope doc="Gets the previous sibling, skipping text nodes" ilk="function" line="2256" lineend="2262" name="getPrevSibling" returns="HTMLElement" signature="getPrevSibling()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom.previousSibling" line="2257" name="n" />
          </scope>
          <scope doc="Appends the passed element(s) to this element" ilk="function" line="2270" lineend="2274" name="appendChild" returns="Ext.Element" signature="appendChild(el)">
            <variable citdl="String/HTMLElement/Array/Element/CompositeElement" ilk="argument" name="el" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element." ilk="function" line="2284" lineend="2290" name="createChild" returns="Ext.Element" signature="createChild(config, insertBefore, returnDom)">
            <variable citdl="Object" doc="DomHelper element config object.  If no tag is specified (e.g., {tag:&apos;input&apos;}) then a div will be&#xA;automatically generated with the specified attributes." ilk="argument" name="config" />
            <variable citdl="HTMLElement" doc="(optional) a child element of this element" ilk="argument" name="insertBefore" />
            <variable citdl="Boolean" doc="(optional) true to return the dom node instead of creating an Element" ilk="argument" name="returnDom" />
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="String" line="2285" name="tag" />
          <scope doc="Appends this element to the passed element" ilk="function" line="2297" lineend="2301" name="appendTo" returns="Ext.Element" signature="appendTo(el)">
            <variable citdl="String/HTMLElement/Element" doc="The new parent element" ilk="argument" name="el" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Inserts this element before the passed element in the DOM" ilk="function" line="2308" lineend="2312" name="insertBefore" returns="Ext.Element" signature="insertBefore(el)">
            <variable citdl="String/HTMLElement/Element" doc="The element to insert before" ilk="argument" name="el" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Inserts this element after the passed element in the DOM" ilk="function" line="2319" lineend="2323" name="insertAfter" returns="Ext.Element" signature="insertAfter(el)">
            <variable citdl="String/HTMLElement/Element" doc="The element to insert after" ilk="argument" name="el" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Inserts (or creates) an element (or DomHelper config) as the first child of the this element" ilk="function" line="2330" lineend="2339" name="insertFirst" returns="Ext.Element" signature="insertFirst(el, returnDom)">
            <variable citdl="String/HTMLElement/Element/Object" doc="The id or element to insert or a DomHelper config to create and insert" ilk="argument" name="el" />
            <variable ilk="argument" name="returnDom" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element" ilk="function" line="2348" lineend="2368" name="insertSibling" returns="Ext.Element" signature="insertSibling(el, where, returnDom)">
            <variable citdl="String/HTMLElement/Element/Object" doc="The id or element to insert or a DomHelper config to create and insert" ilk="argument" name="el" />
            <variable citdl="String" doc="(optional) &apos;before&apos; or &apos;after&apos; defaults to before" ilk="argument" name="where" />
            <variable citdl="Boolean" doc="(optional) True to return the raw DOM element instead of Ext.Element" ilk="argument" name="returnDom" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomHelper.append()" line="2351" name="rt" />
            <variable attributes="__local__ private" citdl="where" line="2351" name="refNode" />
          </scope>
          <scope doc="Creates and wraps this element with another element" ilk="function" line="2376" lineend="2383" name="wrap" returns="HTMLElement/Element" signature="wrap(config, returnDom)">
            <variable citdl="Object" doc="(optional) DomHelper element config object for the wrapper element or null for an empty div" ilk="argument" name="config" />
            <variable citdl="Boolean" doc="(optional) True to return the raw DOM element instead of Ext.Element" ilk="argument" name="returnDom" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomHelper.insertBefore()" line="2380" name="newEl" />
          </scope>
          <scope doc="Replaces the passed element with this element" ilk="function" line="2390" lineend="2395" name="replace" returns="Ext.Element" signature="replace(el)">
            <variable citdl="String/HTMLElement/Element" doc="The element to replace" ilk="argument" name="el" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Inserts an html fragment into this element" ilk="function" line="2404" lineend="2407" name="insertHtml" returns="HTMLElement/Ext.Element" signature="insertHtml(where, html, returnEl)">
            <variable citdl="String" doc="Where to insert the html in relation to the this element - beforeBegin, afterBegin, beforeEnd, afterEnd." ilk="argument" name="where" />
            <variable citdl="String" doc="The HTML fragment" ilk="argument" name="html" />
            <variable citdl="Boolean" doc="True to return an Ext.Element" ilk="argument" name="returnEl" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomHelper.insertHtml()" line="2405" name="el" />
          </scope>
          <scope doc="Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)" ilk="function" line="2415" lineend="2431" name="set" returns="Ext.Element" signature="set(o, useSet)">
            <variable citdl="Object" doc="The object with the attributes" ilk="argument" name="o" />
            <variable citdl="Boolean" doc="(optional) false to override the default setAttribute to use expandos." ilk="argument" name="useSet" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom" line="2416" name="el" />
          </scope>
          <scope doc="Convenience method for constructing a KeyMap" ilk="function" line="2441" lineend="2460" name="addKeyListener" returns="Ext.KeyMap" signature="addKeyListener(key, fn, scope)">
            <variable citdl="Number/Array/Object/String" doc="Either a string with the keys to listen for, the numeric key code, array of key codes or an object with the following options:&#xA;{key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}" ilk="argument" name="key" />
            <variable citdl="Function" doc="The function to call" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The scope of the function" ilk="argument" name="scope" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" line="2442" lineend="2457" name="config">
              <variable citdl="key" line="2445" name="key" />
              <variable citdl="fn" line="2446" name="fn" />
              <variable citdl="scope" line="2447" name="scope" />
              <variable citdl="key.shift" line="2452" name="shift" />
              <variable citdl="key.ctrl" line="2453" name="ctrl" />
              <variable citdl="key.alt" line="2454" name="alt" />
            </variable>
          </scope>
          <scope doc="Creates a KeyMap for this element" ilk="function" line="2467" lineend="2469" name="addKeyMap" returns="Ext.KeyMap" signature="addKeyMap(config)">
            <variable citdl="Object" doc="The KeyMap config. See {@link Ext.KeyMap} for more details" ilk="argument" name="config" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Returns true if this element is scrollable." ilk="function" line="2475" lineend="2478" name="isScrollable" returns="Boolean" signature="isScrollable()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom" line="2476" name="dom" />
          </scope>
          <scope doc="Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll()." ilk="function" line="2488" lineend="2497" name="scrollTo" returns="Element" signature="scrollTo(side, value, animate)">
            <variable citdl="String" doc="Either &quot;left&quot; for scrollLeft values or &quot;top&quot; for scrollTop values." ilk="argument" name="side" />
            <variable citdl="Number" doc="The new scroll value" ilk="argument" name="value" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="side.toLowerCase()" line="2489" name="prop" />
            <variable attributes="__local__ private" citdl="prop" line="2493" name="to" />
          </scope>
          <scope doc="Scrolls this element the specified direction. Does bounds checking to make sure the scroll is&#xA;within this element&apos;s scrollable range." ilk="function" line="2508" lineend="2556" name="scroll" returns="Boolean" signature="scroll(direction, distance, animate)">
            <variable citdl="String" doc="Possible values are: &quot;l&quot;,&quot;left&quot; - &quot;r&quot;,&quot;right&quot; - &quot;t&quot;,&quot;top&quot;,&quot;up&quot; - &quot;b&quot;,&quot;bottom&quot;,&quot;down&quot;." ilk="argument" name="direction" />
            <variable citdl="Number" doc="How far to scroll the element in pixels" ilk="argument" name="distance" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom" line="2512" name="el" />
            <variable attributes="__local__ private" citdl="el.scrollLeft" line="2513" name="l" />
            <variable attributes="__local__ private" citdl="el.scrollTop" line="2513" name="t" />
            <variable attributes="__local__ private" citdl="el.scrollHeight" line="2514" name="h" />
            <variable attributes="__local__ private" citdl="el.scrollWidth" line="2514" name="w" />
            <variable attributes="__local__ private" citdl="el.clientHeight" line="2515" name="ch" />
            <variable attributes="__local__ private" citdl="el.clientWidth" line="2515" name="cw" />
            <variable attributes="__local__ private" citdl="Boolean" line="2517" name="scrolled" />
            <variable attributes="__local__ private" citdl="this.preanim()" line="2518" name="a" />
            <variable attributes="__local__ private" citdl="Math.min()" line="2523" name="v" />
          </scope>
          <scope doc="Translates the passed page coordinates into left/top css values for this element" ilk="function" line="2564" lineend="2582" name="translatePoints" returns="Object" signature="translatePoints(x, y)">
            <variable citdl="Number/Array" doc="The page x or an array containing [x, y]" ilk="argument" name="x" />
            <variable citdl="Number" doc="The page y" ilk="argument" name="y" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.getStyle()" line="2568" name="p" />
            <variable attributes="__local__ private" citdl="this.getXY()" line="2569" name="o" />
            <variable attributes="__local__ private" citdl="parseInt()" line="2571" name="l" />
            <variable attributes="__local__ private" citdl="parseInt()" line="2572" name="t" />
          </scope>
          <scope doc="Returns the current scroll position of the element." ilk="function" line="2588" lineend="2597" name="getScroll" returns="Object" signature="getScroll()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="document" line="2589" name="doc" />
            <variable attributes="__local__ private" citdl="this.dom" line="2589" name="d" />
            <variable attributes="__local__ private" citdl="window.pageXOffset" line="2591" name="l" />
            <variable attributes="__local__ private" citdl="window.pageYOffset" line="2592" name="t" />
          </scope>
          <scope doc="Return the CSS color for the specified CSS attribute. rgb, 3 digit (like #fff) and valid values&#xA;are convert to standard 6 digit hex color." ilk="function" line="2607" lineend="2635" name="getColor" signature="getColor(attr, defaultValue, prefix)">
            <variable citdl="String" doc="The css attribute" ilk="argument" name="attr" />
            <variable citdl="String" doc="The default value to use when a valid color isn&apos;t found" ilk="argument" name="defaultValue" />
            <variable citdl="String" doc="(optional) defaults to #. Use an empty string when working with&#xA;YUI color anims." ilk="argument" name="prefix" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.getStyle()" line="2608" name="v" />
            <variable attributes="__local__ private" line="2612" name="color" />
            <variable attributes="__local__ private" citdl="v.slice().split()" line="2614" name="rvs" />
            <variable attributes="__local__ private" citdl="parseInt().toString()" line="2616" name="h" />
            <variable attributes="__local__ private" citdl="v.charAt()" line="2626" name="c" />
          </scope>
          <scope doc="Wraps the specified element with a special markup/CSS block that renders by default as a gray container with a&#xA;gradient background, rounded corners and a 4-way shadow." ilk="function" line="2645" lineend="2650" name="boxWrap" returns="Ext.Element" signature="boxWrap(cls)">
            <variable ilk="argument" name="cls" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.get()" line="2647" name="el" />
          </scope>
          <variable citdl="Ext.isIE" doc="Returns the value of a namespaced attribute from the element&apos;s underlying DOM node." line="2658" name="getAttributeNS" />
          <variable attributes="__local__ private" citdl="this.dom" line="2659" name="d" />
          <variable attributes="__local__ private" line="2660" name="type" />
        </scope>
        <variable citdl="Boolean" doc="True to automatically uncache orphaned Ext.Elements periodically (defaults to true)" line="86" name="enableGarbageCollector" />
        <variable citdl="Boolean" doc="True to automatically purge event listeners after uncaching an element (defaults to false).&#xA;Note: this only happens if enableGarbageCollector is true." line="93" name="enableListenerCollection" />
        <variable citdl="Ext.util.TaskRunner" line="94" name="TaskMgr" />
        <variable citdl="String" doc="URL to a blank file used by Ext when in secure mode for iframe src and onReady src to prevent&#xA;the IE insecure content warning (defaults to javascript:false)." line="100" name="SSL_SECURE_URL" />
        <variable citdl="String" doc="URL to a 1x1 transparent gif image used by Ext to create inline icons with CSS background images. (Defaults to&#xA;&quot;http://extjs.com/s.gif&quot; and you should change this to a URL on your server)." line="107" name="BLANK_IMAGE_URL" />
        <scope ilk="function" line="109" lineend="109" name="emptyFn" signature="emptyFn()">
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="Copies all the properties of config to obj if they don&apos;t already exist." ilk="function" line="117" lineend="124" name="applyIf" returns="Object" signature="applyIf(o, c)">
          <variable ilk="argument" name="o" />
          <variable ilk="argument" name="c" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope ilk="function" line="120" lineend="131" name="EastLayoutRegion" signature="EastLayoutRegion(mgr, config)">
          <variable ilk="argument" name="mgr" />
          <variable ilk="argument" name="config" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="config.initialSize" line="127" name="size" />
        </scope>
        <variable citdl="Object" line="121" name="Element">
          <variable citdl="Ext.util.TextMetrics.measure" doc="backwards compat" line="121" name="measureText" />
          <variable citdl="Ext.DomQuery.select" line="342" name="selectorFunction" />
          <scope ilk="function" line="345" lineend="359" name="select" returns="Ext.CompositeElementLite" signature="select(selector, unique, root)">
            <variable ilk="argument" name="selector" />
            <variable ilk="argument" name="unique" />
            <variable ilk="argument" name="root" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.Element.selectorFunction()" line="346" name="els" />
          </scope>
        </variable>
        <variable citdl="Ext.util.JSON.encode" doc="Shorthand for {@link Ext.util.JSON#encode}" line="138" name="encode" />
        <variable citdl="Ext.util.JSON.decode" doc="Shorthand for {@link Ext.util.JSON#decode}" line="143" name="decode" />
        <scope doc="Applies event listeners to elements by selectors when the document is ready.&#xA;The event name is specified with an @ suffix.&#xA;&lt;pre&gt;&lt;code&gt;&#xA;Ext.addBehaviors({&#xA;// add a listener for click on all anchors in element with id foo&#xA;&apos;#foo a@click&apos; : function(e, t){&#xA;// do something&#xA;// add the same listener to multiple selectors (separated by comma BEFORE the @)&#xA;&apos;#foo a, #bar span.some-class@mouseover&apos; : function(){&#xA;// do something&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="144" lineend="163" name="addBehaviors" signature="addBehaviors(o)">
          <variable ilk="argument" name="o" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="Object" line="151" lineend="151" name="cache" />
          <variable attributes="__local__ private" citdl="b.split()" line="153" name="parts" />
          <variable attributes="__local__ private" citdl="parts[0]" doc="for Object prototype breakers" line="155" name="s" />
        </scope>
        <scope ilk="function" line="163" lineend="174" name="WestLayoutRegion" signature="WestLayoutRegion(mgr, config)">
          <variable ilk="argument" name="mgr" />
          <variable ilk="argument" name="config" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="config.initialSize" line="170" name="size" />
        </scope>
        <scope doc="Generates unique ids. If the element already has an id, it is unchanged" ilk="function" line="171" lineend="176" name="id" returns="String" signature="id(el, prefix)">
          <variable citdl="String/HTMLElement/Element" doc="(optional) The element to generate an id for" ilk="argument" name="el" />
          <variable citdl="String" doc="(optional) Id prefix (defaults &quot;ext-gen&quot;)" ilk="argument" name="prefix" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="prefix" line="174" name="id" />
        </scope>
        <variable citdl="sb" doc="Extends one class with another class and optionally overrides members with the passed literal. This class&#xA;also adds the function &quot;override()&quot; to the class that can be used to override&#xA;members on an instance." line="187" name="extend" />
        <variable citdl="Ext.SplitButton" doc="backwards compat" line="189" name="MenuButton" />
        <scope doc="Adds a list of functions to the prototype of an existing class, overwriting any existing methods with the same name.&#xA;Usage:&lt;pre&gt;&lt;code&gt;&#xA;Ext.override(MyClass, {&#xA;newMethod1: function(){&#xA;// etc.&#xA;newMethod2: function(foo){&#xA;// etc.&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="234" lineend="241" name="override" signature="override(origclass, overrides)">
          <variable citdl="Object" doc="The class to override" ilk="argument" name="origclass" />
          <variable citdl="Object" doc="The list of functions to add to origClass.  This should be specified as an object literal&#xA;containing one or more methods." ilk="argument" name="overrides" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="origclass.prototype" line="236" name="p" />
        </scope>
        <scope ilk="class" line="252" lineend="343" name="CompositeElementLite">
          <scope attributes="__ctor__" doc="Flyweight composite class. Reuses the same Ext.Element for element operations.&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var els = Ext.select(&quot;#some-el div.some-class&quot;);&#xA;// or select directly from an existing element&#xA;var el = Ext.get(&apos;some-el&apos;);&#xA;el.select(&apos;div.some-class&apos;);&#xA;els.setWidth(100); // all elements become 100 width&#xA;els.hide(true); // all elements fade out and hide&#xA;// or&#xA;els.setWidth(100).hide(true);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&#xA;&lt;b&gt;NOTE: Although they are not listed, this class supports all of the set/update methods of Ext.Element. All Ext.Element&#xA;actions will be performed on all the elements in this collection.&lt;/b&gt;" ilk="function" line="252" lineend="255" name="CompositeElementLite" signature="CompositeElementLite(els)">
            <variable ilk="argument" name="els" />
            <variable citdl="CompositeElementLite" name="this" />
          </scope>
          <variable citdl="Ext.Element.Flyweight" line="254" name="el" />
        </scope>
        <scope doc="Creates namespaces to be used for scoping variables and classes so that they are not global.  Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;Ext.namespace(&apos;Company&apos;, &apos;Company.data&apos;);&#xA;Company.Widget = function() { ... }&#xA;Company.data.CustomStore = function(config) { ... }&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="254" lineend="265" name="namespace" signature="namespace()">
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="arguments" line="255" name="a" />
          <variable attributes="__local__ private" citdl="d[0]" line="255" name="rt" />
          <variable attributes="__local__ private" citdl="a[i].split()" line="255" name="d" />
          <variable attributes="__local__ private" line="255" name="i" />
          <variable attributes="__local__ private" line="255" name="j" />
          <variable attributes="__local__ private" citdl="o[d[j]]" line="255" name="o" />
        </scope>
        <scope doc="Takes an object and converts it to an encoded URL. e.g. Ext.urlEncode({foo: 1, bar: 2}); would return &quot;foo=1&amp;bar=2&quot;.  Optionally, property values can be arrays, instead of keys and the resulting string that&apos;s returned will contain a name/value pair for each array value." ilk="function" line="272" lineend="296" name="urlEncode" returns="String" signature="urlEncode(o)">
          <variable citdl="Object" ilk="argument" name="o" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="Array" line="276" name="buf" />
          <variable attributes="__local__ private" citdl="o[key]" line="278" name="ov" />
          <variable attributes="__local__ private" citdl="encodeURIComponent()" line="278" name="k" />
          <variable attributes="__local__ private" line="279" name="type" />
        </scope>
        <variable citdl="Ext.form.Form" doc="back compat" line="296" name="Form" />
        <scope doc="Takes an encoded URL and and converts it to an object. e.g. Ext.urlDecode(&quot;foo=1&amp;bar=2&quot;); would return {foo: 1, bar: 2} or Ext.urlDecode(&quot;foo=1&amp;bar=2&amp;bar=3&amp;bar=4&quot;, true); would return {foo: 1, bar: [2, 3, 4]}." ilk="function" line="304" lineend="329" name="urlDecode" returns="Object" signature="urlDecode(string, overwrite)">
          <variable citdl="String" ilk="argument" name="string" />
          <variable citdl="Boolean" doc="(optional) Items of the same name will overwrite previous values instead of creating an an array (Defaults to false)." ilk="argument" name="overwrite" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="Object" line="308" lineend="308" name="obj" />
          <variable attributes="__local__ private" citdl="string.split()" line="309" name="pairs" />
          <variable attributes="__local__ private" citdl="pairs[i].split()" line="310" name="pair" />
          <variable attributes="__local__ private" citdl="decodeURIComponent()" line="310" name="name" />
          <variable attributes="__local__ private" citdl="decodeURIComponent()" line="310" name="value" />
        </scope>
        <scope ilk="class" line="321" lineend="334" name="GridPanel">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Create a new GridPanel." ilk="function" line="321" lineend="334" name="GridPanel" signature="GridPanel(grid, config)">
            <variable citdl="Ext.grid.Grid" doc="The grid for this panel" ilk="argument" name="grid" />
            <variable citdl="String/Object" doc="A string to set only the panel&apos;s title, or a config object" ilk="argument" name="config" />
            <variable citdl="GridPanel" name="this" />
          </scope>
          <variable citdl="Ext.DomHelper.append()" line="323" name="wrapper" />
          <variable citdl="grid" line="332" name="grid" />
        </scope>
        <scope doc="Iterates an array calling the passed function with each item, stopping if your function returns false. If the&#xA;passed array is not really an array, your function is called once with it.&#xA;The supplied function is called with (Object item, Number index, Array allItems)." ilk="function" line="339" lineend="346" name="each" returns="i" signature="each(array, fn, scope)">
          <variable citdl="Array/NodeList/Mixed" ilk="argument" name="array" />
          <variable citdl="Function" ilk="argument" name="fn" />
          <variable citdl="Object" ilk="argument" name="scope" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="deprecated" ilk="function" line="349" lineend="362" name="combine" returns="r" signature="combine()">
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="arguments" line="350" name="as" />
          <variable attributes="__local__ private" citdl="Array" line="350" name="r" />
          <variable attributes="__local__ private" citdl="as.length" line="350" name="l" />
          <variable attributes="__local__ private" citdl="as[i]" line="352" name="a" />
        </scope>
        <scope doc="Escapes the passed string for use in a regular expression" ilk="function" line="369" lineend="371" name="escapeRe" returns="String" signature="escapeRe(s)">
          <variable ilk="argument" name="s" />
          <variable citdl="Ext" name="this" />
        </scope>
        <variable citdl="Ext.Element.select" doc="Selects elements based on the passed CSS selector to enable working on them as 1." line="369" name="select" />
        <scope doc="internal" ilk="function" line="374" lineend="382" name="callback" signature="callback(cb, scope, args, delay)">
          <variable ilk="argument" name="cb" />
          <variable ilk="argument" name="scope" />
          <variable ilk="argument" name="args" />
          <variable ilk="argument" name="delay" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope ilk="class" line="382" lineend="387" name="NestedLayoutPanel">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Create a new NestedLayoutPanel." ilk="function" line="382" lineend="387" name="NestedLayoutPanel" signature="NestedLayoutPanel(layout, config)">
            <variable citdl="Ext.BorderLayout" doc="The layout for this panel" ilk="argument" name="layout" />
            <variable citdl="String/Object" doc="A string to set only the title or a config object" ilk="argument" name="config" />
            <variable citdl="NestedLayoutPanel" name="this" />
          </scope>
          <variable citdl="layout" doc="turn off autosizing" line="385" name="layout" />
        </scope>
        <scope doc="Return the dom node for the passed string (id), dom node, or Ext.Element" ilk="function" line="389" lineend="394" name="getDom" returns="el.dom" signature="getDom(el)">
          <variable citdl="String/HTMLElement/Ext.Element" ilk="argument" name="el" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="Shorthand for {@link Ext.ComponentMgr#get}" ilk="function" line="401" lineend="403" name="getCmp" returns="Ext.ComponentMgr.get()" signature="getCmp(id)">
          <variable citdl="String" ilk="argument" name="id" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope ilk="function" line="405" lineend="410" name="num" returns="v" signature="num(v, defaultValue)">
          <variable ilk="argument" name="v" />
          <variable ilk="argument" name="defaultValue" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope ilk="class" line="411" lineend="488" name="TabPanelItem">
          <scope attributes="__ctor__" doc="Represents an individual item (tab plus body) in a TabPanel." ilk="function" line="411" lineend="488" name="TabPanelItem" signature="TabPanelItem(tabPanel, id, text, closable)">
            <variable citdl="Ext.TabPanel" doc="The {@link Ext.TabPanel} this TabPanelItem belongs to" ilk="argument" name="tabPanel" />
            <variable citdl="String" doc="The id of this TabPanelItem" ilk="argument" name="id" />
            <variable citdl="String" doc="The text for the tab of this TabPanelItem" ilk="argument" name="text" />
            <variable citdl="Boolean" doc="True to allow this TabPanelItem to be closable (defaults to false)" ilk="argument" name="closable" />
            <variable citdl="TabPanelItem" name="this" />
            <variable attributes="__local__ private" citdl="tabPanel.createStripElements()" line="440" name="els" />
            <variable attributes="__local__ private" citdl="Ext.get()" line="450" name="c">
              <variable citdl="Object" line="451" name="dom">
                <variable citdl="this.closeText" line="451" name="title" />
              </variable>
            </variable>
          </scope>
          <variable citdl="Ext.TabPanel" doc="The {@link Ext.TabPanel} this TabPanelItem belongs to" line="416" name="tabPanel" />
          <variable citdl="String" doc="The id for this TabPanelItem" line="421" name="id" />
          <variable citdl="Boolean" doc="*/" line="423" name="disabled" />
          <variable citdl="String" doc="*/" line="425" name="text" />
          <variable citdl="Boolean" doc="*/" line="427" name="loaded" />
          <variable citdl="closable" line="428" name="closable" />
          <variable citdl="Ext.Element" doc="The body element for this TabPanelItem." line="434" name="bodyEl" />
          <variable citdl="Ext.get()" doc="*/" line="442" name="el" />
          <variable citdl="Ext.get()" line="443" name="inner" />
          <variable citdl="Ext.get()" line="444" name="textEl" />
          <variable citdl="Ext.get()" line="445" name="pnode" />
          <variable citdl="Boolean" line="485" name="hidden" />
        </scope>
        <scope ilk="function" line="412" lineend="429" name="destroy" signature="destroy()">
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="a[i]" line="414" name="as" />
        </scope>
        <variable citdl="Ext.data.Connection" doc="Global Ajax request class." line="413" name="Ajax" />
        <scope ilk="function" line="415" lineend="438" name="ScrollPanel" signature="ScrollPanel(el, config, content)">
          <variable ilk="argument" name="el" />
          <variable ilk="argument" name="config" />
          <variable ilk="argument" name="content" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="this.el.wrap()" line="421" name="wrap" />
          <variable attributes="__local__ private" citdl="wrap.createChild()" line="425" name="up" />
          <variable attributes="__local__ private" citdl="wrap.createChild()" line="426" name="down" />
        </scope>
        <variable citdl="String" line="420" name="overflow" />
        <variable citdl="Array" line="434" name="adjustments" />
        <variable citdl="Ext.form.BasicForm" doc="back compat" line="436" name="BasicForm" />
        <variable citdl="this.el" line="436" name="resizeEl" />
        <variable citdl="wrap" line="437" name="el">
          <variable citdl="Object" line="1793" name="style">
            <variable citdl="r.visibility" line="1793" name="visibility" />
            <variable citdl="String" line="1794" name="display" />
          </variable>
        </variable>
        <variable citdl="down" line="437" name="down" />
        <variable citdl="up" line="437" name="up" />
        <scope doc="Returns the type of object that is passed in. If the object passed in is null or undefined it&#xA;return false otherwise it returns one of the following values:&lt;ul&gt;&#xA;&lt;li&gt;&lt;b&gt;string&lt;/b&gt;: If the object passed is a string&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;number&lt;/b&gt;: If the object passed is a number&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;boolean&lt;/b&gt;: If the object passed is a boolean value&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;function&lt;/b&gt;: If the object passed is a function reference&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;object&lt;/b&gt;: If the object passed is an object&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;array&lt;/b&gt;: If the object passed is an array&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;regexp&lt;/b&gt;: If the object passed is a regular expression&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;element&lt;/b&gt;: If the object passed is a DOM Element&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;nodelist&lt;/b&gt;: If the object passed is a DOM NodeList&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;textnode&lt;/b&gt;: If the object passed is a DOM text node and contains something other than whitespace&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;whitespace&lt;/b&gt;: If the object passed is a DOM text node and contains only whitespace&lt;/li&gt;" ilk="function" line="449" lineend="473" name="type" returns="String" signature="type(o)">
          <variable ilk="argument" name="o" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" line="456" name="t" />
        </scope>
        <variable citdl="Ext.EventManager.onDocumentReady" doc="Fires when the document is ready (before onload and before images are loaded).  Shorthand of {@link Ext.EventManager#onDocumentReady}." line="466" name="onReady" />
        <variable citdl="Ext.Toolbar.Button" doc="backwards compat" line="471" name="ToolbarButton" />
        <variable citdl="Object" line="476" lineend="513" name="ButtonToggleMgr">
          <scope ilk="function" line="491" lineend="501" name="register" signature="register(btn)">
            <variable ilk="argument" name="btn" />
            <variable citdl="ButtonToggleMgr" name="this" />
            <variable attributes="__local__ private" citdl="groups[btn.toggleGroup]" line="495" name="g" />
          </scope>
          <scope ilk="function" line="503" lineend="512" name="unregister" signature="unregister(btn)">
            <variable ilk="argument" name="btn" />
            <variable citdl="ButtonToggleMgr" name="this" />
            <variable attributes="__local__ private" citdl="groups[btn.toggleGroup]" line="507" name="g" />
          </scope>
        </variable>
        <scope doc="Returns true if the passed value is null, undefined or an empty string (optional)." ilk="function" line="481" lineend="483" name="isEmpty" returns="Boolean" signature="isEmpty(v, allowBlank)">
          <variable ilk="argument" name="v" />
          <variable citdl="Boolean" doc="(optional) Pass true if an empty string is not considered empty" ilk="argument" name="allowBlank" />
          <variable citdl="Ext" name="this" />
        </scope>
        <variable citdl="isOpera" doc="Boolean */" line="486" name="isOpera" />
        <variable citdl="isSafari" doc="Boolean */" line="488" name="isSafari" />
        <variable citdl="isIE" doc="Boolean */" line="490" name="isIE" />
        <variable citdl="isIE7" doc="Boolean */" line="492" name="isIE7" />
        <variable citdl="isGecko" doc="Boolean */" line="494" name="isGecko" />
        <variable citdl="isBorderBox" doc="Boolean */" line="496" name="isBorderBox" />
        <variable citdl="isWindows" doc="Boolean */" line="498" name="isWindows" />
        <variable citdl="isLinux" doc="Boolean */" line="500" name="isLinux" />
        <variable citdl="isMac" doc="Boolean */" line="502" name="isMac" />
        <variable citdl="Ext.MessageBox" doc="Shorthand for {@link Ext.MessageBox}" line="507" name="Msg" />
        <variable doc="By default, Ext intelligently decides whether floating elements should be shimmed. If you are using flash,&#xA;you may want to set this to true.&#xA;@type Boolean" line="509" name="useShims" />
        <variable citdl="Ext.EventObjectImpl" doc="EventObject exposes the Yahoo! UI Event functionality directly on the object&#xA;passed to your event handler. It exists mostly for convenience. It also fixes the annoying null checks automatically to cleanup your code&#xA;Example:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;function handleClick(e){ // e is not a standard event object, it is a Ext.EventObject&#xA;e.preventDefault();&#xA;var target = e.getTarget();&#xA;...&#xA;var myDiv = Ext.get(&quot;myDiv&quot;);&#xA;myDiv.on(&quot;click&quot;, handleClick);&#xA;//or&#xA;Ext.EventManager.on(&quot;myDiv&quot;, &apos;click&apos;, handleClick);&#xA;Ext.EventManager.addListener(&quot;myDiv&quot;, &apos;click&apos;, handleClick);&#xA;&lt;/code&gt;&lt;/pre&gt;" line="515" name="EventObject" />
        <scope ilk="class" line="536" lineend="787" name="EventObjectImpl">
          <scope attributes="__ctor__" ilk="function" line="536" lineend="540" name="EventObjectImpl" signature="EventObjectImpl(e)">
            <variable ilk="argument" name="e" />
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <variable citdl="e" doc="* The normal browser event */" line="543" name="browserEvent" />
          <variable citdl="Number" doc="* The button pressed in a mouse event */" line="545" name="button" />
          <variable citdl="Boolean" doc="* True if the shift key was down during the event */" line="547" name="shiftKey" />
          <variable citdl="Boolean" doc="* True if the control key was down during the event */" line="549" name="ctrlKey" />
          <variable citdl="Boolean" doc="* True if the alt key was down during the event */" line="551" name="altKey" />
          <variable citdl="Number" doc="Number */" line="554" name="BACKSPACE" />
          <variable citdl="Number" doc="Number */" line="556" name="TAB" />
          <variable citdl="Number" doc="Number */" line="558" name="RETURN" />
          <variable citdl="Number" doc="Number */" line="560" name="ENTER" />
          <variable citdl="Number" doc="Number */" line="562" name="SHIFT" />
          <variable citdl="Number" doc="Number */" line="564" name="CONTROL" />
          <variable citdl="Number" doc="Number */" line="566" name="ESC" />
          <variable citdl="Number" doc="Number */" line="568" name="SPACE" />
          <variable citdl="Number" doc="Number */" line="570" name="PAGEUP" />
          <variable citdl="Number" doc="Number */" line="572" name="PAGEDOWN" />
          <variable citdl="Number" doc="Number */" line="574" name="END" />
          <variable citdl="Number" doc="Number */" line="576" name="HOME" />
          <variable citdl="Number" doc="Number */" line="578" name="LEFT" />
          <variable citdl="Number" doc="Number */" line="580" name="UP" />
          <variable citdl="Number" doc="Number */" line="582" name="RIGHT" />
          <variable citdl="Number" doc="Number */" line="584" name="DOWN" />
          <variable citdl="Number" doc="Number */" line="586" name="DELETE" />
          <variable citdl="Number" doc="Number */" line="588" name="F5" />
          <scope doc="*/" ilk="function" line="591" lineend="625" name="setEvent" returns="this" signature="setEvent(e)">
            <variable ilk="argument" name="e" />
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <variable citdl="e.type" line="602" name="type" />
          <variable citdl="e.keyCode" doc="in getKey these will be normalized for the mac" line="608" name="keyCode" />
          <variable citdl="e.charCode" line="609" name="charCode" />
          <variable citdl="E.getTarget()" doc="cache the target for the delayed and or buffered events" line="611" name="target" />
          <variable citdl="E.getXY()" doc="same for XY" line="613" name="xy" />
          <scope doc="Stop the event (preventDefault and stopPropagation)" ilk="function" line="630" lineend="637" name="stopEvent" signature="stopEvent()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Prevents the browsers default handling of the event." ilk="function" line="642" lineend="646" name="preventDefault" signature="preventDefault()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="*/" ilk="function" line="649" lineend="653" name="isNavKeyPress" signature="isNavKeyPress()">
            <variable citdl="EventObjectImpl" name="this" />
            <variable attributes="__local__ private" citdl="this.keyCode" line="650" name="k" />
          </scope>
          <scope ilk="function" line="655" lineend="663" name="isSpecialKey" signature="isSpecialKey()">
            <variable citdl="EventObjectImpl" name="this" />
            <variable attributes="__local__ private" citdl="this.keyCode" line="656" name="k" />
          </scope>
          <scope doc="Cancels bubbling of the event." ilk="function" line="667" lineend="674" name="stopPropagation" signature="stopPropagation()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Gets the key code for the event." ilk="function" line="680" lineend="682" name="getCharCode" returns="Number" signature="getCharCode()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Returns a normalized keyCode for the event." ilk="function" line="688" lineend="691" name="getKey" returns="Number" signature="getKey()">
            <variable citdl="EventObjectImpl" name="this" />
            <variable attributes="__local__ private" citdl="this.keyCode" line="689" name="k" />
          </scope>
          <scope doc="Gets the x coordinate of the event." ilk="function" line="697" lineend="699" name="getPageX" returns="Number" signature="getPageX()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Gets the y coordinate of the event." ilk="function" line="705" lineend="707" name="getPageY" returns="Number" signature="getPageY()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Gets the time of the event." ilk="function" line="713" lineend="718" name="getTime" returns="Number" signature="getTime()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Gets the page coordinates of the event." ilk="function" line="724" lineend="726" name="getXY" returns="Array" signature="getXY()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Gets the target for the event.&#xA;search as a number or element (defaults to 10 || document.body)" ilk="function" line="736" lineend="738" name="getTarget" returns="HTMLElement" signature="getTarget(selector, maxDepth, returnEl)">
            <variable citdl="String" doc="(optional) A simple selector to filter the target or look for an ancestor of the target" ilk="argument" name="selector" />
            <variable citdl="Number/String/HTMLElement/Element" doc="(optional) The max depth to" ilk="argument" name="maxDepth" />
            <variable citdl="Boolean" doc="(optional) True to return a Ext.Element object instead of DOM node" ilk="argument" name="returnEl" />
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Gets the related target." ilk="function" line="743" lineend="748" name="getRelatedTarget" returns="HTMLElement" signature="getRelatedTarget()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Normalizes mouse wheel delta across browsers" ilk="function" line="754" lineend="763" name="getWheelDelta" returns="Number" signature="getWheelDelta()">
            <variable citdl="EventObjectImpl" name="this" />
            <variable attributes="__local__ private" citdl="this.browserEvent" line="755" name="e" />
            <variable attributes="__local__ private" citdl="Number" line="756" name="delta" />
          </scope>
          <scope doc="Returns true if the control, meta, shift or alt key was pressed during this event." ilk="function" line="769" lineend="771" name="hasModifier" returns="Boolean" signature="hasModifier()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Returns true if the target of this event equals el or is a child of el" ilk="function" line="779" lineend="782" name="within" returns="Boolean" signature="within(el, related)">
            <variable citdl="String/HTMLElement/Element" ilk="argument" name="el" />
            <variable citdl="Boolean" doc="(optional) true to test if the related target is within el instead of the target" ilk="argument" name="related" />
            <variable citdl="EventObjectImpl" name="this" />
            <variable attributes="__local__ private" citdl="this[related?&quot;getRelatedTarget&quot;:&quot;getTarget&quot;]()" line="780" name="t" />
          </scope>
          <scope ilk="function" line="784" lineend="786" name="getPoint" returns="Ext.lib.Point" signature="getPoint()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
        </scope>
        <variable citdl="Ext.debug.log" doc="backwards compat" line="728" name="log" />
        <variable citdl="Ext.log" doc="backwards compat" line="728" name="print" />
        <variable citdl="Ext.logf" line="729" name="printf" />
        <variable citdl="Ext.debug.logf" line="729" name="logf" />
        <variable citdl="Ext.debug.dump" line="730" name="dump" />
        <variable citdl="Ext.debug.time" line="731" name="timer" />
        <variable citdl="Ext.debug.timeEnd" line="732" name="timerEnd" />
        <variable citdl="Ext.DomQuery.select" doc="Selects an array of DOM nodes by CSS/XPath selector. Shorthand of {@link Ext.DomQuery#select}" line="799" name="query" />
        <variable citdl="Object" line="988" lineend="1087" name="DialogManager">
          <variable citdl="Number The z-index value" doc="The starting z-index for BasicDialogs (defaults to 9000)" line="1015" name="zseed" />
          <scope doc="private" ilk="function" line="1018" lineend="1021" name="register" signature="register(dlg)">
            <variable ilk="argument" name="dlg" />
            <variable citdl="DialogManager" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="1024" lineend="1039" name="unregister" signature="unregister(dlg)">
            <variable ilk="argument" name="dlg" />
            <variable citdl="DialogManager" name="this" />
            <variable attributes="__local__ private" citdl="accessList.indexOf()" line="1034" name="i" />
          </scope>
          <scope doc="Gets a registered dialog by id" ilk="function" line="1046" lineend="1048" name="get" returns="Ext.BasicDialog" signature="get(id)">
            <variable citdl="String/Object" doc="The id of the dialog or a dialog" ilk="argument" name="id" />
            <variable citdl="DialogManager" name="this" />
          </scope>
          <scope doc="Brings the specified dialog to the front" ilk="function" line="1055" lineend="1063" name="bringToFront" returns="Ext.BasicDialog" signature="bringToFront(dlg)">
            <variable citdl="String/Object" doc="The id of the dialog or a dialog" ilk="argument" name="dlg" />
            <variable citdl="DialogManager" name="this" />
          </scope>
          <scope doc="Sends the specified dialog to the back" ilk="function" line="1070" lineend="1075" name="sendToBack" returns="Ext.BasicDialog" signature="sendToBack(dlg)">
            <variable citdl="String/Object" doc="The id of the dialog or a dialog" ilk="argument" name="dlg" />
            <variable citdl="DialogManager" name="this" />
          </scope>
          <scope doc="Hides all dialogs" ilk="function" line="1080" lineend="1086" name="hideAll" signature="hideAll()">
            <variable citdl="DialogManager" name="this" />
          </scope>
        </variable>
        <scope ilk="class" line="1147" lineend="1157" name="LayoutDialog">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Dialog which provides adjustments for working with a layout in a Dialog.&#xA;Add your necessary layout config options to the dialog&apos;s config.&lt;br&gt;&#xA;Example usage (including a nested layout):&#xA;&lt;pre&gt;&lt;code&gt;&#xA;if(!dialog){&#xA;dialog = new Ext.LayoutDialog(&quot;download-dlg&quot;, {&#xA;modal: true,&#xA;width:600,&#xA;height:450,&#xA;shadow:true,&#xA;minWidth:500,&#xA;minHeight:350,&#xA;autoTabs:true,&#xA;proxyDrag:true,&#xA;// layout config merges with the dialog config&#xA;center:{&#xA;tabPosition: &quot;top&quot;,&#xA;alwaysShowTabs: true&#xA;});&#xA;dialog.addKeyListener(27, dialog.hide, dialog);&#xA;dialog.setDefaultButton(dialog.addButton(&quot;Close&quot;, dialog.hide, dialog));&#xA;dialog.addButton(&quot;Build It!&quot;, this.getDownload, this);&#xA;// we can even add nested layouts&#xA;var innerLayout = new Ext.BorderLayout(&quot;dl-inner&quot;, {&#xA;east: {&#xA;initialSize: 200,&#xA;autoScroll:true,&#xA;split:true&#xA;center: {&#xA;autoScroll:true&#xA;});&#xA;innerLayout.beginUpdate();&#xA;innerLayout.add(&quot;east&quot;, new Ext.ContentPanel(&quot;dl-details&quot;));&#xA;innerLayout.add(&quot;center&quot;, new Ext.ContentPanel(&quot;selection-panel&quot;));&#xA;innerLayout.endUpdate(true);&#xA;var layout = dialog.getLayout();&#xA;layout.beginUpdate();&#xA;layout.add(&quot;center&quot;, new Ext.ContentPanel(&quot;standard-panel&quot;,&#xA;{title: &quot;Download the Source&quot;, fitToFrame:true}));&#xA;layout.add(&quot;center&quot;, new Ext.NestedLayoutPanel(innerLayout,&#xA;{title: &quot;Build your own ext.js&quot;}));&#xA;layout.getRegion(&quot;center&quot;).showPanel(sp);&#xA;layout.endUpdate();&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="1147" lineend="1157" name="LayoutDialog" signature="LayoutDialog(el, config)">
            <variable citdl="String/HTMLElement/Ext.Element" doc="The id of or container element" ilk="argument" name="el" />
            <variable citdl="Object" doc="configuration options" ilk="argument" name="config" />
            <variable citdl="LayoutDialog" name="this" />
          </scope>
          <variable citdl="Ext.BorderLayout" line="1151" name="layout" />
          <variable citdl="Boolean" line="1152" name="monitorWindowResize" />
          <variable citdl="Ext.BasicDialog.prototype.center" doc="fix case when center region overwrites center function" line="1155" name="center" />
        </scope>
        <variable citdl="El.get" doc="Static method to retrieve Element objects. Uses simple caching to consistently return the same object.&#xA;Automatically fixes if an object was recreated with the same id via AJAX or DOM.&#xA;Shorthand of {@link Ext.Element#get}" line="2883" name="get" />
        <variable attributes="__static__" citdl="El.fly" doc="STATIC: Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -&#xA;the dom node can be overwritten by other code.&#xA;Shorthand of {@link Ext.Element#fly}" line="2896" name="fly" />
      </variable>
      <variable citdl="Ext.EventObjectImpl" doc="create new event object impl so new events don&apos;t wipe out&#xA;properties" line="75" name="e" />
      <variable attributes="private" citdl="Object" doc="local style camelizing for speed" line="77" lineend="77" name="propCache" />
      <variable attributes="private" line="78" name="camelRe" />
      <scope attributes="private" ilk="function" line="79" lineend="79" name="camelFn" returns="a.charAt().toUpperCase()" signature="camelFn(m, a)">
        <variable ilk="argument" name="m" />
        <variable ilk="argument" name="a" />
      </scope>
      <variable attributes="private" citdl="document.defaultView" line="80" name="view" />
      <variable citdl="anchor" line="85" name="anchor" />
      <variable citdl="Array" line="89" name="tasks" />
      <variable citdl="Array" line="90" name="removeQueue" />
      <scope attributes="private" doc="default to inline only" ilk="function" line="101" lineend="101" name="getStyle" returns="el.style[property]" signature="getStyle(el, property)">
        <variable ilk="argument" name="el" />
        <variable ilk="argument" name="property" />
      </scope>
      <variable citdl="Ext.Element" line="106" name="El">
        <scope doc="private" ilk="function" line="2703" lineend="2714" name="addUnits" returns="v" signature="addUnits(v, defaultUnit)">
          <variable ilk="argument" name="v" />
          <variable ilk="argument" name="defaultUnit" />
          <variable citdl="El" name="this" />
        </scope>
        <variable citdl="Object" line="2731" lineend="2731" name="borders">
          <variable citdl="String" line="2731" name="r" />
          <variable citdl="String" line="2731" name="b" />
          <variable citdl="String" line="2731" name="l" />
          <variable citdl="String" line="2731" name="t" />
        </variable>
        <variable citdl="Object" line="2732" lineend="2732" name="paddings">
          <variable citdl="String" line="2732" name="r" />
          <variable citdl="String" line="2732" name="b" />
          <variable citdl="String" line="2732" name="l" />
          <variable citdl="String" line="2732" name="t" />
        </variable>
        <variable citdl="Object" line="2733" lineend="2733" name="margins">
          <variable citdl="String" line="2733" name="r" />
          <variable citdl="String" line="2733" name="b" />
          <variable citdl="String" line="2733" name="l" />
          <variable citdl="String" line="2733" name="t" />
        </variable>
        <variable attributes="private" citdl="Object" doc="*/" line="2740" lineend="2740" name="cache" />
        <scope attributes="__static__" doc="STATIC: Static method to retrieve Element objects. Uses simple caching to consistently return the same object.&#xA;Automatically fixes if an object was recreated with the same id via AJAX or DOM." ilk="function" line="2751" lineend="2796" name="get" returns="Element" signature="get(el)">
          <variable citdl="String/HTMLElement/Element" doc="The id of the node, a DOM Node or an existing Element." ilk="argument" name="el" />
          <variable citdl="El" name="this" />
          <variable attributes="__local__ private" citdl="Ext.id()" line="2752" name="id" />
          <variable attributes="__local__ private" citdl="El.cache[el]" line="2752" name="ex" />
          <variable attributes="__local__ private" line="2752" name="elm" />
          <scope attributes="__local__ private" classrefs="El.prototype" ilk="class" line="2788" lineend="2792" name="f">
            <scope attributes="__local__ private __ctor__" ilk="function" line="2788" lineend="2788" name="f" signature="f()">
              <variable citdl="f" name="this" />
            </scope>
          </scope>
        </scope>
        <scope doc="private" ilk="function" line="2799" lineend="2805" name="uncache" signature="uncache(el)">
          <variable ilk="argument" name="el" />
          <variable citdl="El" name="this" />
        </scope>
        <scope doc="private Garbage collection - uncache elements/purge&#xA;listeners on orphaned elements so we don&apos;t hold a reference&#xA;and cause the browser to retain them" ilk="function" line="2810" lineend="2841" name="garbageCollect" signature="garbageCollect()">
          <variable citdl="El" name="this" />
          <variable attributes="__local__ private" citdl="El.cache[eid]" line="2816" name="el" />
          <variable attributes="__local__ private" citdl="el.dom" line="2816" name="d" />
        </scope>
        <scope classrefs="El.prototype" doc="dom is optional" ilk="class" line="2846" lineend="2851" name="Flyweight">
          <scope attributes="__ctor__" doc="dom is optional" ilk="function" line="2846" lineend="2848" name="Flyweight" signature="Flyweight(dom)">
            <variable ilk="argument" name="dom" />
            <variable citdl="Flyweight" name="this" />
          </scope>
          <variable citdl="dom" line="2847" name="dom" />
        </scope>
        <variable citdl="Object" line="2851" lineend="2851" name="_flyweights" />
        <scope attributes="__static__" doc="STATIC: Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -&#xA;the dom node can be overwritten by other code." ilk="function" line="2861" lineend="2872" name="fly" returns="Element" signature="fly(el, named)">
          <variable citdl="String/HTMLElement" doc="The dom node or id" ilk="argument" name="el" />
          <variable citdl="String" doc="(optional) Allows for creation of named reusable flyweights to&#xA;prevent conflicts (e.g. internally Ext uses &quot;_internal&quot;)" ilk="argument" name="named" />
          <variable citdl="El" name="this" />
        </scope>
      </variable>
      <scope attributes="private" ilk="function" line="121" lineend="123" name="setStyle" signature="setStyle(el, property, val)">
        <variable ilk="argument" name="el" />
        <variable ilk="argument" name="property" />
        <variable ilk="argument" name="val" />
      </scope>
      <variable citdl="Boolean" line="124" name="valid" />
      <scope doc="Modified version of Douglas Crockford&quot;s json.js that doesn&quot;t&#xA;mess with the Object prototype&#xA;http://www.json.org/js.html" ilk="class" line="133" name="Ext.util.JSON" />
      <variable citdl="Boolean" line="138" name="dirty" />
      <variable citdl="this.getOwnerTree().selModel.select()" line="149" name="newS" />
      <variable citdl="ni.children" line="170" name="cn" />
      <variable citdl="Array" doc="Keeps the version info for all YUI modules that have reported themselves" line="191" name="modules" />
      <variable citdl="sp" line="196" name="overrides" />
      <variable citdl="sb" line="197" name="sp" />
      <variable citdl="Array" doc="List of functions that should be executed every time a YUI module&#xA;reports itself." line="199" name="listeners" />
      <scope attributes="__static__" doc="STATIC: Returns the version data for the specified module:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;name:&lt;/dt&gt;      &lt;dd&gt;The name of the module&lt;/dd&gt;&#xA;&lt;dt&gt;version:&lt;/dt&gt;   &lt;dd&gt;The version in use&lt;/dd&gt;&#xA;&lt;dt&gt;build:&lt;/dt&gt;     &lt;dd&gt;The build number in use&lt;/dd&gt;&#xA;&lt;dt&gt;versions:&lt;/dt&gt;  &lt;dd&gt;All versions that were registered&lt;/dd&gt;&#xA;&lt;dt&gt;builds:&lt;/dt&gt;    &lt;dd&gt;All builds that were registered.&lt;/dd&gt;&#xA;&lt;dt&gt;mainClass:&lt;/dt&gt; &lt;dd&gt;An object that was was stamped with the&#xA;current version and build. If&#xA;mainClass.VERSION != version or mainClass.BUILD != build,&#xA;multiple versions of pieces of the library have been&#xA;loaded, potentially causing issues.&lt;/dd&gt;&#xA;&lt;/dl&gt;" ilk="function" line="221" lineend="223" name="getVersion" returns="Object" signature="getVersion(name)">
        <variable citdl="String" doc="the name of the module (event, slider, etc)" ilk="argument" name="name" />
      </scope>
      <scope attributes="private" ilk="function" line="238" lineend="243" name="createBuffered" signature="createBuffered(h, o, scope)">
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="o" />
        <variable ilk="argument" name="scope" />
        <variable attributes="__local__ private" citdl="Ext.util.DelayedTask" line="239" name="task" />
      </scope>
      <variable citdl="swap.menu.items.get().checked" line="238" name="styles" />
      <scope attributes="private" ilk="function" line="245" lineend="250" name="createSingle" returns="h.apply()" signature="createSingle(h, e, fn, scope)">
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="e" />
        <variable ilk="argument" name="fn" />
        <variable ilk="argument" name="scope" />
      </scope>
      <scope attributes="private" ilk="function" line="252" lineend="259" name="createDelayed" signature="createDelayed(h, o, scope)">
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="o" />
        <variable ilk="argument" name="scope" />
        <variable attributes="__local__ private" citdl="Array.prototype.slice.call()" line="254" name="args" />
      </scope>
      <variable citdl="f" line="272" name="field" />
      <scope attributes="private" ilk="class" line="281" lineend="286" name="YAHOO.util.Anim">
        <scope ilk="function" line="281" lineend="290" name="animateX" signature="animateX(callback, scope)">
          <variable ilk="argument" name="callback" />
          <variable ilk="argument" name="scope" />
          <variable citdl="YAHOO.util.Anim" name="this" />
          <scope attributes="__local__ private" ilk="function" line="282" lineend="287" name="f" signature="f()" />
        </scope>
      </scope>
      <scope attributes="private" ilk="class" line="311" lineend="317" name="YAHOO.util.Region">
        <scope ilk="function" line="311" lineend="317" name="adjust" returns="this" signature="adjust(t, l, b, r)">
          <variable ilk="argument" name="t" />
          <variable ilk="argument" name="l" />
          <variable ilk="argument" name="b" />
          <variable ilk="argument" name="r" />
          <variable citdl="YAHOO.util.Region" name="this" />
        </scope>
      </scope>
      <variable line="401" name="currentGroup" />
      <variable citdl="color" line="437" name="color" />
      <variable citdl="o.attr" line="438" name="attr" />
      <variable line="445" name="endColor" />
      <variable citdl="count" line="493" name="count" />
      <variable citdl="o.duration" line="494" name="duration" />
      <variable citdl="Array" line="497" name="groups[btn.toggleGroup]" />
      <variable citdl="ce.getXY()" line="510" name="xy" />
      <variable citdl="r" line="565" name="record" />
      <variable citdl="i" line="576" name="intDay" />
      <scope doc="Used to calculate Bezier splines for any number of control points." ilk="class" line="630" lineend="660" name="YAHOO.util.Bezier">
        <scope doc="Get the current position of the animated element based on t.&#xA;Each point is an array of &quot;x&quot; and &quot;y&quot; values (0 = x, 1 = y)&#xA;At least 2 points are required (start and end).&#xA;First point is start. Last point is end.&#xA;Additional control points are optional." ilk="function" line="642" lineend="659" name="getPosition" returns="Array" signature="getPosition(points, t)">
          <variable citdl="Array" doc="An array containing Bezier points" ilk="argument" name="points" />
          <variable citdl="Number" doc="A number between 0 and 1 which is the basis for determining current position" ilk="argument" name="t" />
          <variable citdl="YAHOO.util.Bezier" name="this" />
          <variable attributes="__local__ private" citdl="points.length" line="643" name="n" />
          <variable attributes="__local__ private" citdl="Array" line="644" name="tmp" />
        </scope>
      </scope>
      <variable attributes="private" citdl="Ext.lib.Event" line="685" name="E" />
      <variable citdl="prop.replace()" line="699" name="propCache[prop]" />
      <scope doc="Utility function that allows you to easily switch a string between two alternating values.  The passed value&#xA;is compared to the current string, and if they are equal, the other value that was passed in is returned.  If&#xA;they are already different, the first value passed in is returned.  Note that this method returns the new value&#xA;but does not change the current string.&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// alternate sort directions&#xA;sort = sort.toggle(&apos;ASC&apos;, &apos;DESC&apos;);&#xA;// instead of conditional logic:&#xA;sort = (sort == &apos;ASC&apos; ? &apos;DESC&apos; : &apos;ASC&apos;);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="class" line="705" lineend="707" name="String">
        <scope doc="Utility function that allows you to easily switch a string between two alternating values.  The passed value&#xA;is compared to the current string, and if they are equal, the other value that was passed in is returned.  If&#xA;they are already different, the first value passed in is returned.  Note that this method returns the new value&#xA;but does not change the current string.&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// alternate sort directions&#xA;sort = sort.toggle(&apos;ASC&apos;, &apos;DESC&apos;);&#xA;// instead of conditional logic:&#xA;sort = (sort == &apos;ASC&apos; ? &apos;DESC&apos; : &apos;ASC&apos;);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="705" lineend="707" name="toggle" returns="String" signature="toggle(value, other)">
          <variable citdl="String" doc="The value to compare to the current string" ilk="argument" name="value" />
          <variable citdl="String" doc="The new value to use if the string already equals the first value passed in" ilk="argument" name="other" />
          <variable citdl="String" name="this" />
        </scope>
      </scope>
      <variable citdl="Ext.debug" line="709" name="console" />
      <scope doc="Returns the number of milliseconds between this date and date&#xA;@param {Date} date (optional) Defaults to now&#xA;@return {Number} The diff in milliseconds&#xA;@member Date getElapsed" ilk="class" line="758" lineend="760" name="Date">
        <variable citdl="Object" doc="&#xA;&#xA;*&lt;pre&gt;&#xA;Sample date:&#xA;&apos;Wed Jan 10 2007 15:05:01 GMT-0600 (Central Standard Time)&apos;&#xA;Format  Output      Description&#xA;------  ----------  --------------------------------------------------------------&#xA;d      10         Day of the month, 2 digits with leading zeros&#xA;D      Wed        A textual representation of a day, three letters&#xA;j      10         Day of the month without leading zeros&#xA;l      Wednesday  A full textual representation of the day of the week&#xA;S      th         English ordinal day of month suffix, 2 chars (use with j)&#xA;w      3          Numeric representation of the day of the week&#xA;z      9          The julian date, or day of the year (0-365)&#xA;W      01         ISO-8601 2-digit week number of year, weeks starting on Monday (00-52)&#xA;F      January    A full textual representation of the month&#xA;m      01         Numeric representation of a month, with leading zeros&#xA;M      Jan        Month name abbreviation, three letters&#xA;n      1          Numeric representation of a month, without leading zeros&#xA;t      31         Number of days in the given month&#xA;L      0          Whether it&apos;s a leap year (1 if it is a leap year, else 0)&#xA;Y      2007       A full numeric representation of a year, 4 digits&#xA;y      07         A two digit representation of a year&#xA;a      pm         Lowercase Ante meridiem and Post meridiem&#xA;A      PM         Uppercase Ante meridiem and Post meridiem&#xA;g      3          12-hour format of an hour without leading zeros&#xA;G      15         24-hour format of an hour without leading zeros&#xA;h      03         12-hour format of an hour with leading zeros&#xA;H      15         24-hour format of an hour with leading zeros&#xA;i      05         Minutes with leading zeros&#xA;s      01         Seconds, with leading zeros&#xA;O      -0600      Difference to Greenwich time (GMT) in hours&#xA;T      CST        Timezone setting of the machine running the code&#xA;Z      -21600     Timezone offset in seconds (negative if west of UTC, positive if east)&#xA;&lt;/pre&gt;&#xA;&#xA;var dt = new Date(&apos;1/10/2007 03:05:01 PM GMT-0600&apos;);&#xA;document.write(dt.format(&apos;Y-m-d&apos;));                         //2007-01-10&#xA;document.write(dt.format(&apos;F j, Y, g:i a&apos;));                 //January 10, 2007, 3:05 pm&#xA;document.write(dt.format(&apos;l, \\t\\he dS of F Y h:i:s A&apos;));  //Wednesday, the 10th of January 2007 03:05:01 PM&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;Date.patterns = {&#xA;ISO8601Long:&quot;Y-m-d H:i:s&quot;,&#xA;ISO8601Short:&quot;Y-m-d&quot;,&#xA;ShortDate: &quot;n/j/Y&quot;,&#xA;LongDate: &quot;l, F d, Y&quot;,&#xA;FullDateTime: &quot;l, F d, Y g:i:s A&quot;,&#xA;MonthDay: &quot;F d&quot;,&#xA;ShortTime: &quot;g:i A&quot;,&#xA;LongTime: &quot;g:i:s A&quot;,&#xA;SortableDateTime: &quot;Y-m-d\\TH:i:s&quot;,&#xA;UniversalSortableDateTime: &quot;Y-m-d H:i:sO&quot;,&#xA;YearMonth: &quot;F, Y&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;var dt = new Date();&#xA;document.write(dt.format(Date.patterns.ShortDate));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;*//*&#xA;&#xA;&#xA;*/// private" line="99" lineend="99" name="parseFunctions">
          <variable citdl="Number" line="99" name="count" />
        </variable>
        <variable citdl="Array" doc="private" line="101" name="parseRegexes" />
        <variable citdl="Object" doc="private" line="103" lineend="103" name="formatFunctions">
          <variable citdl="Number" line="103" name="count" />
        </variable>
        <scope doc="private" ilk="function" line="106" lineend="112" name="dateFormat" returns="this[func]()" signature="dateFormat(format)">
          <variable ilk="argument" name="format" />
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="Date.formatFunctions[format]" line="110" name="func" />
        </scope>
        <scope doc="private" ilk="function" line="124" lineend="144" name="createNewFormat" signature="createNewFormat(format)">
          <variable ilk="argument" name="format" />
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="String" line="125" name="funcName" />
          <variable attributes="__local__ private" citdl="String" line="127" name="code" />
          <variable attributes="__local__ private" citdl="Boolean" line="128" name="special" />
          <variable attributes="__local__ private" citdl="String" line="129" name="ch" />
        </scope>
        <scope doc="private" ilk="function" line="147" lineend="206" name="getFormatCode" returns="String" signature="getFormatCode(character)">
          <variable ilk="argument" name="character" />
          <variable citdl="Date" name="this" />
        </scope>
        <scope attributes="__static__" doc="STATIC: Parses the passed string using the specified format. Note that this function expects dates in normal calendar&#xA;format, meaning that months are 1-based (1 = January) and not zero-based like in JavaScript dates.  Any part of&#xA;the date format that is not specified will default to the current date value for that part.  Time parts can also&#xA;be specified, but default to 0.  Keep in mind that the input date string must precisely match the specified format&#xA;string or the parse operation will fail.&#xA;Example Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;//dt = Fri May 25 2007 (current date)&#xA;var dt = new Date();&#xA;//dt = Thu May 25 2006 (today&apos;s month/day in 2006)&#xA;dt = Date.parseDate(&quot;2006&quot;, &quot;Y&quot;);&#xA;//dt = Sun Jan 15 2006 (all date parts specified)&#xA;dt = Date.parseDate(&quot;2006-1-15&quot;, &quot;Y-m-d&quot;);&#xA;//dt = Sun Jan 15 2006 15:20:01 GMT-0600 (CST)&#xA;dt = Date.parseDate(&quot;2006-1-15 3:20:01 PM&quot;, &quot;Y-m-d h:i:s A&quot; );&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="233" lineend="239" name="parseDate" returns="Date" signature="parseDate(input, format)">
          <variable citdl="String" doc="The unparsed date as a string" ilk="argument" name="input" />
          <variable citdl="String" doc="The format the date is in" ilk="argument" name="format" />
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="Date.parseFunctions[format]" line="237" name="func" />
        </scope>
        <scope doc="private" ilk="function" line="242" lineend="298" name="createParser" signature="createParser(format)">
          <variable ilk="argument" name="format" />
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="String" line="243" name="funcName" />
          <variable attributes="__local__ private" citdl="Date.parseRegexes.length" line="244" name="regexNum" />
          <variable attributes="__local__ private" citdl="Number" line="245" name="currentGroup" />
          <variable attributes="__local__ private" citdl="String" line="248" name="code" />
          <variable attributes="__local__ private" citdl="String" line="256" name="regex" />
          <variable attributes="__local__ private" citdl="Boolean" line="258" name="special" />
          <variable attributes="__local__ private" citdl="String" line="259" name="ch" />
          <variable attributes="__local__ private" citdl="Date.formatCodeToRegex()" line="270" name="obj" />
        </scope>
        <scope doc="private" ilk="function" line="301" lineend="423" name="formatCodeToRegex" signature="formatCodeToRegex(character, currentGroup)">
          <variable ilk="argument" name="character" />
          <variable ilk="argument" name="currentGroup" />
          <variable citdl="Date" name="this" />
        </scope>
        <scope doc="Get the timezone abbreviation of the current date (equivalent to the format specifier &apos;T&apos;)." ilk="function" line="429" lineend="431" name="getTimezone" returns="String" signature="getTimezone()">
          <variable citdl="Date" name="this" />
        </scope>
        <scope doc="Get the offset from GMT of the current date (equivalent to the format specifier &apos;O&apos;)." ilk="function" line="437" lineend="441" name="getGMTOffset" returns="String" signature="getGMTOffset()">
          <variable citdl="Date" name="this" />
        </scope>
        <scope doc="Get the numeric day number of the year, adjusted for leap year." ilk="function" line="447" lineend="454" name="getDayOfYear" returns="Number" signature="getDayOfYear()">
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="Number" line="448" name="num" />
        </scope>
        <scope doc="Get the string representation of the numeric week number of the year&#xA;(equivalent to the format specifier &apos;W&apos;)." ilk="function" line="461" lineend="468" name="getWeekOfYear" returns="String" signature="getWeekOfYear()">
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="this.getDayOfYear()" doc="Skip to Thursday of this week" line="463" name="now" />
          <variable attributes="__local__ private" citdl="Date" doc="Find the first Thursday of the year" line="465" name="jan1" />
          <variable attributes="__local__ private" line="466" name="then" />
        </scope>
        <scope doc="Whether or not the current date is in a leap year." ilk="function" line="474" lineend="477" name="isLeapYear" returns="Boolean" signature="isLeapYear()">
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="this.getFullYear()" line="475" name="year" />
        </scope>
        <scope doc="Get the first day of the current month, adjusted for leap year.  The returned value&#xA;is the numeric day index within the week (0-6) which can be used in conjunction with&#xA;the {@link #monthNames} array to retrieve the textual day name.&#xA;Example:&#xA;*&lt;pre&gt;&lt;code&gt;&#xA;var dt = new Date(&apos;1/10/2007&apos;);&#xA;document.write(Date.dayNames[dt.getFirstDayOfMonth()]); //output: &apos;Monday&apos;&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="490" lineend="493" name="getFirstDayOfMonth" returns="Number" signature="getFirstDayOfMonth()">
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" line="491" name="day" />
        </scope>
        <scope doc="Get the last day of the current month, adjusted for leap year.  The returned value&#xA;is the numeric day index within the week (0-6) which can be used in conjunction with&#xA;the {@link #monthNames} array to retrieve the textual day name.&#xA;Example:&#xA;*&lt;pre&gt;&lt;code&gt;&#xA;var dt = new Date(&apos;1/10/2007&apos;);&#xA;document.write(Date.dayNames[dt.getLastDayOfMonth()]); //output: &apos;Wednesday&apos;&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="506" lineend="509" name="getLastDayOfMonth" returns="Number" signature="getLastDayOfMonth()">
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" line="507" name="day" />
        </scope>
        <scope doc="Get the first date of this date&apos;s month" ilk="function" line="516" lineend="518" name="getFirstDateOfMonth" returns="Date" signature="getFirstDateOfMonth()">
          <variable citdl="Date" name="this" />
        </scope>
        <scope doc="Get the last date of this date&apos;s month" ilk="function" line="524" lineend="526" name="getLastDateOfMonth" returns="Date" signature="getLastDateOfMonth()">
          <variable citdl="Date" name="this" />
        </scope>
        <scope doc="Get the number of days in the current month, adjusted for leap year." ilk="function" line="531" lineend="534" name="getDaysInMonth" returns="Number" signature="getDaysInMonth()">
          <variable citdl="Date" name="this" />
        </scope>
        <scope doc="Get the English ordinal suffix of the current day (equivalent to the format specifier &apos;S&apos;)." ilk="function" line="540" lineend="555" name="getSuffix" returns="String" signature="getSuffix()">
          <variable citdl="Date" name="this" />
        </scope>
        <variable citdl="Array" doc="private" line="558" name="daysInMonth" />
        <variable attributes="__static__" citdl="Array" doc="STATIC: An array of textual month names.&#xA;Override these values for international dates, for example...&#xA;Date.monthNames = [&apos;JanInYourLang&apos;, &apos;FebInYourLang&apos;, ...];" line="568" name="monthNames" />
        <variable attributes="__static__" citdl="Array" doc="STATIC: An array of textual day names.&#xA;Override these values for international dates, for example...&#xA;Date.dayNames = [&apos;SundayInYourLang&apos;, &apos;MondayInYourLang&apos;, ...];" line="589" name="dayNames" />
        <variable citdl="Number" doc="private" line="598" name="y2kYear" />
        <variable citdl="Object" doc="private" line="600" lineend="612" name="monthNumbers">
          <variable citdl="Number" line="601" name="Jan" />
          <variable citdl="Number" line="602" name="Feb" />
          <variable citdl="Number" line="603" name="Mar" />
          <variable citdl="Number" line="604" name="Apr" />
          <variable citdl="Number" line="605" name="May" />
          <variable citdl="Number" line="606" name="Jun" />
          <variable citdl="Number" line="607" name="Jul" />
          <variable citdl="Number" line="608" name="Aug" />
          <variable citdl="Number" line="609" name="Sep" />
          <variable citdl="Number" line="610" name="Oct" />
          <variable citdl="Number" line="611" name="Nov" />
          <variable citdl="Number" line="612" name="Dec" />
        </variable>
        <scope doc="Creates and returns a new Date instance with the exact same date value as the called instance.&#xA;Dates are copied and passed by reference, so if a copied date variable is modified later, the original&#xA;variable will also be changed.  When the intention is to create a new variable that will not&#xA;modify the original instance, you should create a clone.&#xA;&#xA;Example of correctly cloning a date:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;//wrong way:&#xA;var orig = new Date(&apos;10/1/2006&apos;);&#xA;var copy = orig;&#xA;copy.setDate(5);&#xA;document.write(orig);  //returns &apos;Thu Oct 05 2006&apos;!&#xA;//correct way:&#xA;var orig = new Date(&apos;10/1/2006&apos;);&#xA;var copy = orig.clone();&#xA;copy.setDate(5);&#xA;document.write(orig);  //returns &apos;Thu Oct 01 2006&apos;&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="636" lineend="638" name="clone" returns="Date" signature="clone()">
          <variable citdl="Date" name="this" />
        </scope>
        <scope doc="Clears any time information from this date&#xA;@param {Boolean} clone true to create a clone of this date, clear the time and return it&#xA;@return {Date} this or the clone" ilk="function" line="645" lineend="654" name="clearTime" returns="this" signature="clearTime(clone)">
          <variable ilk="argument" name="clone" />
          <variable citdl="Date" name="this" />
        </scope>
        <variable citdl="Date.prototype.setMonth" line="659" name="brokenSetMonth" />
        <scope ilk="function" line="660" lineend="670" name="setMonth" returns="Date.brokenSetMonth.apply()" signature="setMonth(num)">
          <variable ilk="argument" name="num" />
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="Math.ceil()" line="662" name="n" />
          <variable attributes="__local__ private" citdl="Math.ceil()" line="663" name="back_year" />
          <variable attributes="__local__ private" line="664" name="month" />
        </scope>
        <variable citdl="String" doc="String */" line="674" name="MILLI" />
        <variable citdl="String" doc="String */" line="676" name="SECOND" />
        <variable citdl="String" doc="String */" line="678" name="MINUTE" />
        <variable citdl="String" doc="String */" line="680" name="HOUR" />
        <variable citdl="String" doc="String */" line="682" name="DAY" />
        <variable citdl="String" doc="String */" line="684" name="MONTH" />
        <variable citdl="String" doc="String */" line="686" name="YEAR" />
        <scope doc="Provides a convenient method of performing basic date arithmetic.  This method&#xA;does not modify the Date instance being called - it creates and returns&#xA;a new Date instance containing the resulting date value.&#xA;&#xA;Examples:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;//Basic usage:&#xA;var dt = new Date(&apos;10/29/2006&apos;).add(Date.DAY, 5);&#xA;document.write(dt); //returns &apos;Fri Oct 06 2006 00:00:00&apos;&#xA;//Negative values will subtract correctly:&#xA;var dt2 = new Date(&apos;10/1/2006&apos;).add(Date.DAY, -5);&#xA;document.write(dt2); //returns &apos;Tue Sep 26 2006 00:00:00&apos;&#xA;//You can even chain several calls together in one line!&#xA;var dt3 = new Date(&apos;10/1/2006&apos;).add(Date.DAY, 5).add(Date.HOUR, 8).add(Date.MINUTE, -30);&#xA;document.write(dt3); //returns &apos;Fri Oct 06 2006 07:30:00&apos;&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="712" lineend="744" name="add" returns="Date" signature="add(interval, value)">
          <variable citdl="String" doc="A valid date interval enum value" ilk="argument" name="interval" />
          <variable citdl="Number" doc="The amount to add to the current date" ilk="argument" name="value" />
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="this.clone()" line="713" name="d" />
          <variable attributes="__local__ private" citdl="this.getDate()" line="732" name="day" />
        </scope>
        <scope doc="Returns the number of milliseconds between this date and date&#xA;@param {Date} date (optional) Defaults to now&#xA;@return {Number} The diff in milliseconds&#xA;@member Date getElapsed" ilk="function" line="758" lineend="760" name="getElapsed" returns="Math.abs()" signature="getElapsed(date)">
          <variable ilk="argument" name="date" />
          <variable citdl="Date" name="this" />
        </scope>
      </scope>
      <variable line="876" name="tm" />
      <variable citdl="x" line="1233" name="this[0]" />
      <variable citdl="y" line="1234" name="this[1]" />
      <scope attributes="private" ilk="function" line="1267" lineend="1273" name="fly" returns="libFlyweight" signature="fly(el)">
        <variable ilk="argument" name="el" />
      </scope>
      <scope attributes="private" ilk="function" line="1278" lineend="1287" name="fnCleanUp" signature="fnCleanUp()">
        <variable attributes="__local__ private" citdl="Function.prototype" line="1279" name="p" />
      </scope>
      <variable attributes="private" citdl="YAHOO.util.Event" line="1286" name="EU" />
      <scope attributes="private" ilk="class" line="1554" lineend="1672" name="Ext.lib.AnimMgr">
        <variable attributes="__local__ private" citdl="setInterval()" line="1556" name="thread" />
        <variable attributes="__local__ private" citdl="Array" line="1559" name="queue" />
        <variable attributes="__local__ private" citdl="Number" line="1562" name="tweenCount" />
        <variable citdl="Number" line="1565" name="fps" />
        <variable citdl="Number" line="1568" name="delay" />
        <scope ilk="function" line="1571" lineend="1576" name="registerElement" signature="registerElement(tween)">
          <variable ilk="argument" name="tween" />
          <variable citdl="Ext.lib.AnimMgr" name="this" />
        </scope>
        <scope ilk="function" line="1579" lineend="1590" name="unRegister" signature="unRegister(tween, index)">
          <variable ilk="argument" name="tween" />
          <variable ilk="argument" name="index" />
          <variable citdl="Ext.lib.AnimMgr" name="this" />
        </scope>
        <scope ilk="function" line="1593" lineend="1597" name="start" signature="start()">
          <variable citdl="Ext.lib.AnimMgr" name="this" />
        </scope>
        <scope ilk="function" line="1600" lineend="1617" name="stop" signature="stop(tween)">
          <variable ilk="argument" name="tween" />
          <variable citdl="Ext.lib.AnimMgr" name="this" />
        </scope>
        <scope ilk="function" line="1620" lineend="1640" name="run" signature="run()">
          <variable citdl="Ext.lib.AnimMgr" name="this" />
          <variable attributes="__local__ private" citdl="queue[i]" line="1622" name="tween" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="1642" lineend="1649" name="getIndex" returns="Number" signature="getIndex(anim)">
          <variable ilk="argument" name="anim" />
          <variable citdl="Ext.lib.AnimMgr" name="this" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="1652" lineend="1671" name="correctFrame" signature="correctFrame(tween)">
          <variable ilk="argument" name="tween" />
          <variable citdl="Ext.lib.AnimMgr" name="this" />
          <variable attributes="__local__ private" citdl="tween.totalFrames" line="1653" name="frames" />
          <variable attributes="__local__ private" citdl="tween.currentFrame" line="1654" name="frame" />
          <variable attributes="__local__ private" line="1655" name="expected" />
          <variable attributes="__local__ private" line="1656" name="elapsed" />
          <variable attributes="__local__ private" citdl="Number" line="1657" name="tweak" />
        </scope>
      </scope>
      <variable citdl="offsets" line="1572" name="offsets" />
      <scope attributes="private" ilk="class" line="1674" lineend="1694" name="Ext.lib.Bezier">
        <scope ilk="function" line="1676" lineend="1693" name="getPosition" returns="Array" signature="getPosition(points, t)">
          <variable ilk="argument" name="points" />
          <variable ilk="argument" name="t" />
          <variable citdl="Ext.lib.Bezier" name="this" />
          <variable attributes="__local__ private" citdl="points.length" line="1677" name="n" />
          <variable attributes="__local__ private" citdl="Array" line="1678" name="tmp" />
        </scope>
      </scope>
      <variable attributes="private" citdl="Ext.lib" line="1704" name="Y" />
      <variable attributes="private" citdl="Y.ColorAnim.superclass" line="1705" name="superclass" />
      <variable citdl="Y.ColorAnim.prototype" line="1706" name="proto">
        <scope ilk="function" line="1708" lineend="1712" name="toString" signature="toString()">
          <variable citdl="proto" name="this" />
          <variable attributes="__local__ private" citdl="this.getEl()" line="1709" name="el" />
          <variable attributes="__local__ private" citdl="el.id" line="1710" name="id" />
        </scope>
        <variable citdl="Object" line="1714" name="patterns">
          <variable line="1714" name="color" />
          <variable line="1715" name="rgb" />
          <variable line="1716" name="hex" />
          <variable line="1717" name="hex3" />
          <variable line="1718" name="transparent" />
          <variable line="2006" name="points" />
        </variable>
        <scope ilk="function" line="1721" lineend="1742" name="parseColor" signature="parseColor(s)">
          <variable ilk="argument" name="s" />
          <variable citdl="proto" name="this" />
          <variable attributes="__local__ private" citdl="this.patterns.hex.exec()" line="1726" name="c" />
        </scope>
        <scope ilk="function" line="1744" lineend="1766" name="getAttribute" returns="val" signature="getAttribute(attr)">
          <variable ilk="argument" name="attr" />
          <variable citdl="proto" name="this" />
          <variable attributes="__local__ private" citdl="this.getEl()" line="1745" name="el" />
          <variable attributes="__local__ private" citdl="fly().getStyle()" line="1747" name="val" />
          <variable attributes="__local__ private" citdl="el.parentNode" line="1750" name="parent" />
        </scope>
        <scope ilk="function" line="1768" lineend="1784" name="doMethod" returns="val" signature="doMethod(attr, start, end)">
          <variable ilk="argument" name="attr" />
          <variable ilk="argument" name="start" />
          <variable ilk="argument" name="end" />
          <variable citdl="proto" name="this" />
          <variable attributes="__local__ private" citdl="Array" line="1769" name="val" />
          <variable attributes="__local__ private" citdl="this.method()" line="2035" name="t" />
        </scope>
        <scope ilk="function" line="1786" lineend="1805" name="setRuntimeAttribute" signature="setRuntimeAttribute(attr)">
          <variable ilk="argument" name="attr" />
          <variable citdl="proto" name="this" />
          <variable attributes="__local__ private" citdl="this.attributes" line="1790" name="attributes" />
          <variable attributes="__local__ private" citdl="this.parseColor()" line="1791" name="start" />
          <variable attributes="__local__ private" citdl="this.parseColor()" line="1792" name="end" />
          <variable attributes="__local__ private" citdl="this.getEl()" line="2045" name="el" />
          <variable attributes="__local__ private" citdl="attributes[&apos;points&apos;][&apos;control&apos;]" line="2048" name="control" />
          <variable attributes="__local__ private" line="2050" name="i" />
          <variable attributes="__local__ private" line="2050" name="len" />
          <variable attributes="__local__ private" citdl="Array" line="2055" name="tmp" />
          <variable attributes="__local__ private" citdl="Ext.lib.Dom.getXY()" line="2077" name="pageXY" />
        </scope>
        <scope ilk="function" line="2008" lineend="2016" name="setAttribute" signature="setAttribute(attr, val, unit)">
          <variable ilk="argument" name="attr" />
          <variable ilk="argument" name="val" />
          <variable ilk="argument" name="unit" />
          <variable citdl="proto" name="this" />
          <variable attributes="__local__ private" citdl="this.getEl()" line="2166" name="el" />
        </scope>
      </variable>
      <scope attributes="private" ilk="function" line="2104" lineend="2109" name="translateValues" returns="val" signature="translateValues(val, start)">
        <variable ilk="argument" name="val" />
        <variable ilk="argument" name="start" />
        <variable attributes="__local__ private" citdl="Ext.lib.Dom.getXY()" line="2105" name="pageXY" />
      </scope>
      <scope attributes="private" ilk="function" line="2111" lineend="2113" name="isset" signature="isset(prop)">
        <variable ilk="argument" name="prop" />
      </scope>
      <variable attributes="private" citdl="El.prototype" line="2671" name="ep" />
      <variable attributes="private" citdl="f" line="2742" name="docEl" />
      <variable attributes="private" citdl="Ext.isStrict" doc="speedy lookup for elements never to box adjust" line="2899" name="noBoxAdjust" />
    </scope>
  </file>
</codeintel>
