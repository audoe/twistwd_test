<codeintel description="jQuery JavaScript library - version 1.2.3" name="jQuery_v123" version="2.0">
  <file lang="JavaScript" path="">
    <scope ilk="blob" lang="JavaScript" name="jQuery_v123">
      <scope ilk="class" name="jQuery">
        <scope attributes="__ctor__" doc="String: Create DOM elements on-the-fly from the provided String of raw HTML.&#xA;Element|Array: Wrap jQuery functionality around single or multiple DOM Element(s).&#xA;Function: To be executed when the DOM document has finished loading.&#xA;&#xA;If &apos;context&apos; is specified, accepts a string containing a CSS or basic XPath selector&#xA;which is then used to match a set of elements." ilk="function" name="jQuery" signature="jQuery(arg &lt;String|Element|Array of Elements|Function|jQuery&gt;, context &lt;Element|jQuery&gt;) -&gt; jQuery" />
        <scope doc="Execute a function within the context of every matched&#xA;element." ilk="function" name="each" returns="jQuery" signature="each(callback) -&gt; jQuery">
          <variable citdl="Function" doc="The callback to execute for each matched element.&#xA;&lt;pre&gt;function callback(index, domElement) {&#xA;  this; // this == domElement&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="The number of elements in the jQuery object." ilk="function" name="size" returns="Number" signature="size() -&gt; Number" />
        <variable citdl="Number" doc="The number of elements in the jQuery object." name="length" />
        <scope doc="Reduce the set of matched elements to a single element." ilk="function" name="eq" returns="jQuery" signature="eq(position) -&gt; jQuery">
          <variable citdl="Number" doc="The index of the element to select." ilk="argument" name="position" />
        </scope>
        <scope doc="Access all matched DOM elements." ilk="function" name="get" returns="Array&lt;Element&gt;" signature="get() -&gt; Array&lt;Element&gt;" />
        <scope doc="Access a single matched DOM element at a specified index in&#xA;the matched set." ilk="function" name="get" returns="Element" signature="get(index) -&gt; Element">
          <variable citdl="Number" doc="Access the element in the Nth position." ilk="argument" name="index" />
        </scope>
        <scope doc="Searches every matched element for the object and returns&#xA;the index of the element, if found, starting with zero." ilk="function" name="index" returns="Number" signature="index(subject) -&gt; Number">
          <variable citdl="Element " doc="Object to search for." ilk="argument" name="subject" />
        </scope>
        <scope doc="Extends the jQuery object itself." ilk="function" name="extend" returns="jQuery" signature="extend(object) -&gt; jQuery">
          <variable citdl="Object" doc="The object that will be merged into the jQuery object." ilk="argument" name="object" />
        </scope>
        <scope doc="Run this function to give control of the $ variable back to&#xA;whichever library first implemented it." ilk="function" name="noConflict" returns="jQuery" signature="noConflict() -&gt; jQuery" />
        <scope doc="Revert control of both the $ and jQuery variables to their&#xA;original owners." ilk="function" name="noConflict" returns="jQuery" signature="noConflict(extreme) -&gt; jQuery">
          <variable citdl="Boolean" doc="Set to true to enable the extreme rollback of jQuery and it&apos;s variables." ilk="argument" name="extreme" />
        </scope>
        <scope doc="Access a property on the first matched element. This method&#xA;makes it easy to retrieve a property value from the first&#xA;matched element." ilk="function" name="attr" returns="Object" signature="attr(name) -&gt; Object">
          <variable citdl="String" doc="The name of the property to access." ilk="argument" name="name" />
        </scope>
        <scope doc="Set a key/value object as properties to all matched&#xA;elements." ilk="function" name="attr" returns="jQuery" signature="attr(properties) -&gt; jQuery">
          <variable citdl="Map" doc="Key/value pairs to set as object properties." ilk="argument" name="properties" />
        </scope>
        <scope doc="Set a single property to a value, on all matched elements." ilk="function" name="attr" returns="jQuery" signature="attr(key, value) -&gt; jQuery">
          <variable citdl="String" doc="The name of the property to set." ilk="argument" name="key" />
          <variable citdl="Object" doc="The value to set the property to." ilk="argument" name="value" />
        </scope>
        <scope doc="Set a single property to a computed value, on all matched&#xA;elements." ilk="function" name="attr" returns="jQuery" signature="attr(key, fn) -&gt; jQuery">
          <variable citdl="String" doc="The name of the property to set." ilk="argument" name="key" />
          <variable citdl="Function" doc="A function returning the value to set. Scope: Current element, argument: Index of current element&#xA;&lt;pre&gt;function callback(indexArray) {&#xA;  // indexArray == position in the jQuery object&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Remove an attribute from each of the matched elements." ilk="function" name="removeAttr" returns="jQuery" signature="removeAttr(name) -&gt; jQuery">
          <variable citdl="String" doc="The name of the property to remove." ilk="argument" name="name" />
        </scope>
        <scope doc="Adds the specified class(es) to each of the set of matched&#xA;elements." ilk="function" name="addClass" returns="jQuery" signature="addClass(class) -&gt; jQuery">
          <variable citdl="String" doc="One or more CSS classes to add to the elements, these are separated by spaces." ilk="argument" name="class" />
        </scope>
        <scope doc="Returns true if the specified class is present on at least&#xA;one of the set of matched elements." ilk="function" name="hasClass" returns="Boolean" signature="hasClass(class) -&gt; Boolean">
          <variable citdl="String" doc="One CSS class name to be checked for." ilk="argument" name="class" />
        </scope>
        <scope doc="Removes all or the specified class(es) from the set of&#xA;matched elements." ilk="function" name="removeClass" returns="jQuery" signature="removeClass(class) -&gt; jQuery">
          <variable citdl="String &apos;&apos;(optional)&apos;&apos;" doc="One or more CSS classes to remove from the elements, these are separated by spaces." ilk="argument" name="class" />
        </scope>
        <scope doc="Adds the specified class if it is not present, removes the&#xA;specified class if it is present." ilk="function" name="toggleClass" returns="jQuery" signature="toggleClass(class) -&gt; jQuery">
          <variable citdl="String" doc="A CSS class to toggle on the elements." ilk="argument" name="class" />
        </scope>
        <scope doc="Get the html contents (innerHTML) of the first matched&#xA;element. This property is not available on XML documents&#xA;(although it will work for XHTML documents)." ilk="function" name="html" returns="String" signature="html() -&gt; String" />
        <scope doc="Set the html contents of every matched element. This&#xA;property is not available on XML documents (although it will&#xA;work for XHTML documents)." ilk="function" name="html" returns="jQuery" signature="html(val) -&gt; jQuery">
          <variable citdl="String" doc="Set the html contents to the specified value." ilk="argument" name="val" />
        </scope>
        <scope doc="Get the combined text contents of all matched elements." ilk="function" name="text" returns="String" signature="text() -&gt; String" />
        <scope doc="Set the text contents of all matched elements." ilk="function" name="text" returns="jQuery" signature="text(val) -&gt; jQuery">
          <variable citdl="String" doc="The text value to set the contents of the element to." ilk="argument" name="val" />
        </scope>
        <scope doc="Get the content of the value attribute of the first matched&#xA;element." ilk="function" name="val" returns="String, Array" signature="val() -&gt; String, Array" />
        <scope doc="Set the value attribute of every matched element." ilk="function" name="val" returns="jQuery" signature="val(val) -&gt; jQuery">
          <variable citdl="String" doc="The value to set on the matched element." ilk="argument" name="val" />
        </scope>
        <scope doc="Checks, or selects, all the radio buttons, checkboxes, and&#xA;select options that match the set of values." ilk="function" name="val" returns="jQuery" signature="val(val) -&gt; jQuery">
          <variable citdl="Array&lt;String&gt;" doc="The set of values to check/select." ilk="argument" name="val" />
        </scope>
        <scope doc="Reduce the set of matched elements to a single element." ilk="function" name="eq" returns="jQuery" signature="eq(index) -&gt; jQuery">
          <variable citdl="Number" doc="The index of the element in the jQuery object." ilk="argument" name="index" />
        </scope>
        <scope doc="Checks the current selection against a class and returns&#xA;true, if at least one element of the selection has the given&#xA;class." ilk="function" name="hasClass" returns="Boolean" signature="hasClass(class) -&gt; Boolean">
          <variable citdl="String" doc="The class to match." ilk="argument" name="class" />
        </scope>
        <scope doc="Removes all elements from the set of matched elements that&#xA;do not match the specified expression(s)." ilk="function" name="filter" returns="jQuery" signature="filter(expr) -&gt; jQuery">
          <variable citdl="Expression" doc="An expression to pass into the filter" ilk="argument" name="expr" />
        </scope>
        <scope doc="Removes all elements from the set of matched elements that&#xA;does not match the specified function." ilk="function" name="filter" returns="jQuery" signature="filter(fn) -&gt; jQuery">
          <variable citdl="Function" doc="A function to pass into the filter&#xA;&lt;pre&gt;function callback(indexInJQueryObject) {&#xA;  var keepItBoolean = true;&#xA;&#xA;  this; // dom element&#xA;&#xA;  return keepItBoolean;&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Checks the current selection against an expression and&#xA;returns true, if at least one element of the selection fits&#xA;the given expression." ilk="function" name="is" returns="Boolean" signature="is(expr) -&gt; Boolean">
          <variable citdl="String" doc="The expression with which to filter" ilk="argument" name="expr" />
        </scope>
        <scope doc="Translate a set of elements in the jQuery object into&#xA;another set of values in an array (which may, or may not, be&#xA;elements)." ilk="function" name="map" returns="jQuery" signature="map(callback) -&gt; jQuery">
          <variable citdl="Function" doc="The function to execute on each element in the set.&#xA;&lt;pre&gt;function callback(index, domElement) {&#xA;  var replacement;&#xA;&#xA;  this; // also dom element&#xA;&#xA;  // replacement == null : delete spot&#xA;  // replacement == array : insert the elements of the array&#xA;  // else replace the spot with replacement&#xA;  return replacement;&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Removes elements matching the specified expression from the&#xA;set of matched elements." ilk="function" name="not" returns="jQuery" signature="not(expr) -&gt; jQuery">
          <variable citdl="String, DOMElement, Array&lt;DOMElement&gt;" doc="An expression with which to remove matching elements, an element to remove from the set or a set of elements to remove from the jQuery set of matched elements." ilk="argument" name="expr" />
        </scope>
        <scope doc="Selects a subset of the matched elements." ilk="function" name="slice" returns="jQuery" signature="slice(start, end) -&gt; jQuery">
          <variable citdl="Number" doc="Where to start the subset. The first element is at zero. Can be negative to start from the end of the selection." ilk="argument" name="start" />
          <variable citdl="Number" doc="Where to end the subset. If unspecified, ends at the end of the selection." ilk="argument" name="end" />
        </scope>
        <scope doc="Adds more elements, matched by the given expression, to the&#xA;set of matched elements." ilk="function" name="add" returns="jQuery" signature="add(expr) -&gt; jQuery">
          <variable citdl="String, DOMElement, Array&lt;DOMElement&gt;" doc="An expression whose matched elements are added for String, a string of HTML to create on the fly for DOMElement or one or more Elements to add if an Array." ilk="argument" name="expr" />
        </scope>
        <scope doc="Get a set of elements containing all of the unique immediate&#xA;children of each of the matched set of elements." ilk="function" name="children" returns="jQuery" signature="children(expr) -&gt; jQuery">
          <variable citdl="String" doc="An expression to filter the child Elements with." ilk="argument" name="expr" />
        </scope>
        <scope doc="Find all the child nodes inside the matched elements&#xA;(including text nodes), or the content document, if the&#xA;element is an iframe." ilk="function" name="contents" returns="jQuery" signature="contents() -&gt; jQuery" />
        <scope doc="Searches for all elements that match the specified &lt;a&#xA;href=&apos;Selectors&apos;&gt;expression&lt;/a&gt;. This method is a good way&#xA;to find additional descendant elements with which to&#xA;process." ilk="function" name="find" returns="jQuery" signature="find(expr) -&gt; jQuery">
          <variable citdl="String" doc="An expression to search with." ilk="argument" name="expr" />
        </scope>
        <scope doc="Get a set of elements containing the unique next siblings of&#xA;each of the given set of elements." ilk="function" name="next" returns="jQuery" signature="next(expr) -&gt; jQuery">
          <variable citdl="String" doc="An expression with which to filter the returned set." ilk="argument" name="expr" />
        </scope>
        <scope doc="Find all sibling elements after the current element." ilk="function" name="nextAll" returns="jQuery" signature="nextAll(expr) -&gt; jQuery">
          <variable citdl="String" doc="An expression to filter the next Elements with." ilk="argument" name="expr" />
        </scope>
        <scope doc="Get a set of elements containing the unique parents of the&#xA;matched set of elements." ilk="function" name="parent" returns="jQuery" signature="parent(expr) -&gt; jQuery">
          <variable citdl="String" doc="An expression to filter the parents with." ilk="argument" name="expr" />
        </scope>
        <scope doc="Get a set of elements containing the unique ancestors of the&#xA;matched set of elements (except for the root element)." ilk="function" name="parents" returns="jQuery" signature="parents(expr) -&gt; jQuery">
          <variable citdl="String" doc="An expression to filter the ancestors with" ilk="argument" name="expr" />
        </scope>
        <scope doc="Get a set of elements containing the unique previous&#xA;siblings of each of the matched set of elements." ilk="function" name="prev" returns="jQuery" signature="prev(expr) -&gt; jQuery">
          <variable citdl="String" doc="An expression to filter the previous Elements with." ilk="argument" name="expr" />
        </scope>
        <scope doc="Find all sibling elements before the current element." ilk="function" name="prevAll" returns="jQuery" signature="prevAll(expr) -&gt; jQuery">
          <variable citdl="String" doc="An expression to filter the previous Elements with." ilk="argument" name="expr" />
        </scope>
        <scope doc="Get a set of elements containing all of the unique siblings&#xA;of each of the matched set of elements." ilk="function" name="siblings" returns="jQuery" signature="siblings(expr) -&gt; jQuery">
          <variable citdl="String" doc="An expression to filter the sibling Elements with" ilk="argument" name="expr" />
        </scope>
        <scope doc="Add the previous selection to the current selection." ilk="function" name="andSelf" returns="jQuery" signature="andSelf() -&gt; jQuery" />
        <scope doc="Revert the most recent &apos;destructive&apos; operation, changing the&#xA;set of matched elements to its previous state (right before&#xA;the destructive operation)." ilk="function" name="end" returns="jQuery" signature="end() -&gt; jQuery" />
        <scope doc="Get the html contents (innerHTML) of the first matched&#xA;element. This property is not available on XML documents&#xA;(although it will work for XHTML documents)." ilk="function" name="html" returns="String" signature="html() -&gt; String" />
        <scope doc="Set the html contents of every matched element. This&#xA;property is not available on XML documents (although it will&#xA;work for XHTML documents)." ilk="function" name="html" returns="jQuery" signature="html(val) -&gt; jQuery">
          <variable citdl="String" doc="Set the html contents to the specified value." ilk="argument" name="val" />
        </scope>
        <scope doc="Get the combined text contents of all matched elements." ilk="function" name="text" returns="String" signature="text() -&gt; String" />
        <scope doc="Set the text contents of all matched elements." ilk="function" name="text" returns="jQuery" signature="text(val) -&gt; jQuery">
          <variable citdl="String" doc="The text value to set the contents of the element to." ilk="argument" name="val" />
        </scope>
        <scope doc="Append content to the inside of every matched element." ilk="function" name="append" returns="jQuery" signature="append(content) -&gt; jQuery">
          <variable citdl="String, Element, jQuery" doc="Content to append to the target." ilk="argument" name="content" />
        </scope>
        <scope doc="Append all of the matched elements to another, specified,&#xA;set of elements." ilk="function" name="appendTo" returns="jQuery" signature="appendTo(content) -&gt; jQuery">
          <variable citdl="String" doc="target to which the content will be appended." ilk="argument" name="content" />
        </scope>
        <scope doc="Prepend content to the inside of every matched element." ilk="function" name="prepend" returns="jQuery" signature="prepend(content) -&gt; jQuery">
          <variable citdl="String, Element, jQuery" doc="Content to prepend to the target." ilk="argument" name="content" />
        </scope>
        <scope doc="Prepend all of the matched elements to another, specified,&#xA;set of elements." ilk="function" name="prependTo" returns="jQuery" signature="prependTo(content) -&gt; jQuery">
          <variable citdl="String" doc="target to which the content will be prepended." ilk="argument" name="content" />
        </scope>
        <scope doc="Insert content after each of the matched elements." ilk="function" name="after" returns="jQuery" signature="after(content) -&gt; jQuery">
          <variable citdl="String, Element, jQuery" doc="Content to insert after each target." ilk="argument" name="content" />
        </scope>
        <scope doc="Insert content before each of the matched elements." ilk="function" name="before" returns="jQuery" signature="before(content) -&gt; jQuery">
          <variable citdl="String, Element, jQuery" doc="Content to insert before each target." ilk="argument" name="content" />
        </scope>
        <scope doc="Insert all of the matched elements after another, specified,&#xA;set of elements." ilk="function" name="insertAfter" returns="jQuery" signature="insertAfter(content) -&gt; jQuery">
          <variable citdl="String" doc="Content after which the selected element(s) is inserted." ilk="argument" name="content" />
        </scope>
        <scope doc="Insert all of the matched elements before another,&#xA;specified, set of elements." ilk="function" name="insertBefore" returns="jQuery" signature="insertBefore(content) -&gt; jQuery">
          <variable citdl="String" doc="Content after which the selected element(s) is inserted." ilk="argument" name="content" />
        </scope>
        <scope doc="Wrap all matched elements with a structure of other&#xA;elements." ilk="function" name="wrap" returns="jQuery" signature="wrap(html) -&gt; jQuery">
          <variable citdl="String" doc="A string of HTML that will be created on the fly and wrapped around the target." ilk="argument" name="html" />
        </scope>
        <scope doc="Wrap all matched elements with a structure of other&#xA;elements." ilk="function" name="wrap" returns="jQuery" signature="wrap(elem) -&gt; jQuery">
          <variable citdl="Element" doc="A DOM element that will be wrapped around the target." ilk="argument" name="elem" />
        </scope>
        <scope doc="Wrap all the elements in the matched set into a single&#xA;wrapper element." ilk="function" name="wrapAll" returns="jQuery" signature="wrapAll(html) -&gt; jQuery">
          <variable citdl="String" doc="A string of HTML that will be created on the fly and wrapped around the target." ilk="argument" name="html" />
        </scope>
        <scope doc="Wrap all the elements in the matched set into a single&#xA;wrapper element." ilk="function" name="wrapAll" returns="jQuery" signature="wrapAll(elem) -&gt; jQuery">
          <variable citdl="Element" doc="A DOM element that will be wrapped around the target." ilk="argument" name="elem" />
        </scope>
        <scope doc="Wrap the inner child contents of each matched element&#xA;(including text nodes) with an HTML structure." ilk="function" name="wrapInner" returns="jQuery" signature="wrapInner(html) -&gt; jQuery">
          <variable citdl="String" doc="A string of HTML that will be created on the fly and wrapped around the target." ilk="argument" name="html" />
        </scope>
        <scope doc="Wrap the inner child contents of each matched element&#xA;(including text nodes) with a DOM element." ilk="function" name="wrapInner" returns="jQuery" signature="wrapInner(elem) -&gt; jQuery">
          <variable citdl="Element" doc="A DOM element that will be wrapped around the target." ilk="argument" name="elem" />
        </scope>
        <scope doc="Replaces all matched elements with the specified HTML or DOM&#xA;elements." ilk="function" name="replaceWith" returns="jQuery" signature="replaceWith(content) -&gt; jQuery">
          <variable citdl="String, Element, jQuery" doc="Content to replace the matched elements with." ilk="argument" name="content" />
        </scope>
        <scope doc="Replaces the elements matched by the specified selector with&#xA;the matched elements." ilk="function" name="replaceAll" returns="jQuery" signature="replaceAll(selector) -&gt; jQuery">
          <variable citdl="Selector" doc="The elements to find and replace the matched elements with." ilk="argument" name="selector" />
        </scope>
        <scope doc="Remove all child nodes from the set of matched elements." ilk="function" name="empty" returns="jQuery" signature="empty() -&gt; jQuery" />
        <scope doc="Removes all matched elements from the DOM." ilk="function" name="remove" returns="jQuery" signature="remove(expr) -&gt; jQuery">
          <variable citdl="String" doc="A jQuery expression to filter the set of elements to be removed." ilk="argument" name="expr" />
        </scope>
        <scope doc="Clone matched DOM Elements and select the clones." ilk="function" name="clone" returns="jQuery" signature="clone() -&gt; jQuery" />
        <scope doc="Clone matched DOM Elements, and all their event handlers,&#xA;and select the clones." ilk="function" name="clone" returns="jQuery" signature="clone(true) -&gt; jQuery">
          <variable citdl="Boolean" doc="Set to true to enable cloning of event handlers." ilk="argument" name="true" />
        </scope>
        <scope doc="Return a style property on the first matched element." ilk="function" name="css" returns="String" signature="css(name) -&gt; String">
          <variable citdl="String" doc="The name of the property to access." ilk="argument" name="name" />
        </scope>
        <scope doc="Set a key/value object as style properties to all matched&#xA;elements." ilk="function" name="css" returns="jQuery" signature="css(properties) -&gt; jQuery">
          <variable citdl="Map" doc="Key/value pairs to set as style properties." ilk="argument" name="properties" />
        </scope>
        <scope doc="Set a single style property to a value on all matched&#xA;elements." ilk="function" name="css" returns="jQuery" signature="css(name, value) -&gt; jQuery">
          <variable citdl="String" doc="The name of the property to set." ilk="argument" name="name" />
          <variable citdl="String or Number" doc="The value to set the property to." ilk="argument" name="value" />
        </scope>
        <scope doc="Get the current offset of the first matched element relative&#xA;to the viewport." ilk="function" name="offset" returns="Object{top,left}" signature="offset() -&gt; Object{top,left}" />
        <scope doc="Get the current computed, pixel, height of the first matched&#xA;element." ilk="function" name="height" returns="Number" signature="height() -&gt; Number" />
        <scope doc="Set the CSS height of every matched element." ilk="function" name="height" returns="jQuery" signature="height(val) -&gt; jQuery">
          <variable citdl="String or Number" doc="Set the CSS &apos;height&apos; property to the specified value." ilk="argument" name="val" />
        </scope>
        <scope doc="Get the current computed, pixel, width of the first matched&#xA;element." ilk="function" name="width" returns="Number" signature="width() -&gt; Number" />
        <scope doc="Set the CSS width of every matched element." ilk="function" name="width" returns="jQuery" signature="width(val) -&gt; jQuery">
          <variable citdl="String, Number" doc="Set the CSS &apos;width&apos; property to the specified value." ilk="argument" name="val" />
        </scope>
        <scope doc="Binds a function to be executed whenever the DOM is ready to&#xA;be traversed and manipulated." ilk="function" name="ready" returns="jQuery" signature="ready(fn) -&gt; jQuery">
          <variable citdl="Function" doc="The function to be executed when the DOM is ready.&#xA;&lt;pre&gt;function callback(jQueryReference) {&#xA;  this; // document&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Binds a handler to a particular event (like click) for each&#xA;matched element. Can also bind custom events." ilk="function" name="bind" returns="jQuery" signature="bind(type, data, fn) -&gt; jQuery">
          <variable citdl="String" doc="An event type" ilk="argument" name="type" />
          <variable citdl="Object" doc="Additional data passed to the event handler as event.data" ilk="argument" name="data" />
          <variable citdl="Function" doc="A function to bind to the event on each of the set of matched elements&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Binds a handler to a particular event to be executed&#xA;&lt;i&gt;once&lt;/i&gt; for each matched element." ilk="function" name="one" returns="jQuery" signature="one(type, data, fn) -&gt; jQuery">
          <variable citdl="String" doc="An event type" ilk="argument" name="type" />
          <variable citdl="Object" doc="Additional data passed to the event handler as event.data" ilk="argument" name="data" />
          <variable citdl="Function" doc="A function to bind to the specified event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Trigger a type of event on every matched element." ilk="function" name="trigger" returns="jQuery" signature="trigger(type , data ) -&gt; jQuery">
          <variable citdl="String" doc="An event type to trigger." ilk="argument" name="type " />
          <variable citdl="Array" doc="Additional data to pass as arguments (after the event object) to the event handler." ilk="argument" name="data " />
        </scope>
        <scope doc="This particular method triggers all bound event handlers on&#xA;an element (for a specific event type) WITHOUT executing the&#xA;browsers default actions." ilk="function" name="triggerHandler" returns="jQuery" signature="triggerHandler(type , data ) -&gt; jQuery">
          <variable citdl="String" doc="An event type to trigger." ilk="argument" name="type " />
          <variable citdl="Array" doc="Additional data to pass as arguments (after the event object) to the event handler." ilk="argument" name="data " />
        </scope>
        <scope doc="This does the opposite of bind, it removes bound events from&#xA;each of the matched elements." ilk="function" name="unbind" returns="jQuery" signature="unbind(type , data ) -&gt; jQuery">
          <variable citdl="String" doc="An event type to unbind." ilk="argument" name="type " />
          <variable citdl="Function" doc="A function to unbind from the event on each of the set of matched elements." ilk="argument" name="data " />
        </scope>
        <scope doc="Simulates hovering (moving the mouse on, and off, an&#xA;object). This is a custom method which provides an &apos;in&apos; to a&#xA;frequent task." ilk="function" name="hover" returns="jQuery" signature="hover(over, out) -&gt; jQuery">
          <variable citdl="Function" doc="The function to fire when the mouse is moved over a matched element.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="over" />
          <variable citdl="Function" doc="The function to fire when the mouse is moved off of a matched element.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="out" />
        </scope>
        <scope doc="Toggle between two function calls every other click." ilk="function" name="toggle" returns="jQuery" signature="toggle(fn, fn) -&gt; jQuery">
          <variable citdl="Function" doc="The function to execute on every even click.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
          <variable citdl="Function" doc="The function to execute on every odd click.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Triggers the blur event of each matched element." ilk="function" name="blur" returns="jQuery" signature="blur() -&gt; jQuery" />
        <scope doc="Bind a function to the blur event of each matched element." ilk="function" name="blur" returns="jQuery" signature="blur(fn) -&gt; jQuery">
          <variable citdl="Function" doc="A function to bind to the blur event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Triggers the change event of each matched element." ilk="function" name="change" returns="jQuery" signature="change() -&gt; jQuery" />
        <scope doc="Binds a function to the change event of each matched&#xA;element." ilk="function" name="change" returns="jQuery" signature="change(fn) -&gt; jQuery">
          <variable citdl="Function" doc="A function to bind to the change event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Triggers the click event of each matched element." ilk="function" name="click" returns="jQuery" signature="click() -&gt; jQuery" />
        <scope doc="Binds a function to the click event of each matched element." ilk="function" name="click" returns="jQuery" signature="click(fn) -&gt; jQuery">
          <variable citdl="Function" doc="A function to bind to the click event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Triggers the dblclick event of each matched element." ilk="function" name="dblclick" returns="jQuery" signature="dblclick() -&gt; jQuery" />
        <scope doc="Binds a function to the dblclick event of each matched&#xA;element." ilk="function" name="dblclick" returns="jQuery" signature="dblclick(fn) -&gt; jQuery">
          <variable citdl="Function" doc="The function to bind to the dblclick event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Triggers the error event of each matched element." ilk="function" name="error" returns="jQuery" signature="error() -&gt; jQuery" />
        <scope doc="Binds a function to the error event of each matched element." ilk="function" name="error" returns="jQuery" signature="error(fn) -&gt; jQuery">
          <variable citdl="Function" doc="An event handler function to bind to the error event.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Triggers the focus event of each matched element." ilk="function" name="focus" returns="jQuery" signature="focus() -&gt; jQuery" />
        <scope doc="Binds a function to the focus event of each matched element." ilk="function" name="focus" returns="jQuery" signature="focus(fn) -&gt; jQuery">
          <variable citdl="Function" doc="A function to bind to the focus event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Triggers the keydown event of each matched element." ilk="function" name="keydown" returns="jQuery" signature="keydown() -&gt; jQuery" />
        <scope doc="Bind a function to the keydown event of each matched&#xA;element." ilk="function" name="keydown" returns="jQuery" signature="keydown(fn) -&gt; jQuery">
          <variable citdl="Function" doc="A function to bind to the keydown event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Triggers the keypress event of each matched element." ilk="function" name="keypress" returns="jQuery" signature="keypress() -&gt; jQuery" />
        <scope doc="Binds a function to the keypress event of each matched&#xA;element." ilk="function" name="keypress" returns="jQuery" signature="keypress(fn) -&gt; jQuery">
          <variable citdl="Function" doc="A function to bind to the keypress event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Triggers the keyup event of each matched element." ilk="function" name="keyup" returns="jQuery" signature="keyup() -&gt; jQuery" />
        <scope doc="Bind a function to the keyup event of each matched element." ilk="function" name="keyup" returns="jQuery" signature="keyup(fn) -&gt; jQuery">
          <variable citdl="Function" doc="A function to bind to the keyup event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Binds a function to the load event of each matched element." ilk="function" name="load " returns="jQuery" signature="load (fn) -&gt; jQuery">
          <variable citdl="Function" doc="A function to bind to the load event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Binds a function to the mousedown event of each matched&#xA;element." ilk="function" name="mousedown " returns="jQuery" signature="mousedown (fn) -&gt; jQuery">
          <variable citdl="Function" doc="A function to bind to the mousedown event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Bind a function to the mousemove event of each matched&#xA;element." ilk="function" name="mousemove" returns="jQuery" signature="mousemove(fn) -&gt; jQuery">
          <variable citdl="Function" doc="A function to bind to the mousmove event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Bind a function to the mouseout event of each matched&#xA;element." ilk="function" name="mouseout" returns="jQuery" signature="mouseout(fn) -&gt; jQuery">
          <variable citdl="Function" doc="A function to bind to the mouseout event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Bind a function to the mouseover event of each matched&#xA;element." ilk="function" name="mouseover" returns="jQuery" signature="mouseover(fn) -&gt; jQuery">
          <variable citdl="Function" doc="A function to bind to the mouseover event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Bind a function to the mouseup event of each matched&#xA;element." ilk="function" name="mouseup" returns="jQuery" signature="mouseup(fn) -&gt; jQuery">
          <variable citdl="Function" doc="A function to bind to the mouseup event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Bind a function to the resize event of each matched element." ilk="function" name="resize" returns="jQuery" signature="resize(fn) -&gt; jQuery">
          <variable citdl="Function" doc="A function to bind to the resize event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Bind a function to the scroll event of each matched element." ilk="function" name="scroll" returns="jQuery" signature="scroll(fn) -&gt; jQuery">
          <variable citdl="Function" doc="A function to bind to the scroll event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Trigger the select event of each matched element." ilk="function" name="select" returns="jQuery" signature="select() -&gt; jQuery" />
        <scope doc="Bind a function to the select event of each matched element." ilk="function" name="select" returns="jQuery" signature="select(fn) -&gt; jQuery">
          <variable citdl="Function" doc="A function to bind to the select event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Trigger the submit event of each matched element." ilk="function" name="submit" returns="jQuery" signature="submit() -&gt; jQuery" />
        <scope doc="Bind a function to the submit event of each matched element." ilk="function" name="submit" returns="jQuery" signature="submit(fn) -&gt; jQuery">
          <variable citdl="Function" doc="A function to bind to the submit event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Binds a function to the unload event of each matched&#xA;element." ilk="function" name="unload" returns="jQuery" signature="unload(fn) -&gt; jQuery">
          <variable citdl="Function" doc="function to bind to the unload event on each of the matched elements.&#xA;&lt;pre&gt;function callback(eventObject) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="fn" />
        </scope>
        <scope doc="Displays each of the set of matched elements if they are&#xA;hidden." ilk="function" name="show" returns="jQuery" signature="show() -&gt; jQuery" />
        <scope doc="Show all matched elements using a graceful animation and&#xA;firing an optional callback after completion." ilk="function" name="show" returns="jQuery" signature="show(speed, callback) -&gt; jQuery">
          <variable citdl="String, Number " doc="A string representing one of the three predefined speeds (&quot;slow&quot;, &quot;normal&quot;, or &quot;fast&quot;) or the number of milliseconds to run the animation (e.g. 1000)." ilk="argument" name="speed" />
          <variable citdl="Function" doc="A function to be executed whenever the animation completes, executes once for each element animated against.&#xA;&lt;pre&gt;function callback() {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Hides each of the set of matched elements if they are shown." ilk="function" name="hide" returns="jQuery" signature="hide() -&gt; jQuery" />
        <scope doc="Hide all matched elements using a graceful animation and&#xA;firing an optional callback after completion." ilk="function" name="hide" returns="jQuery" signature="hide(speed, callback) -&gt; jQuery">
          <variable citdl="String, Number " doc="A string representing one of the three predefined speeds (&quot;slow&quot;, &quot;normal&quot;, or &quot;fast&quot;) or the number of milliseconds to run the animation (e.g. 1000)." ilk="argument" name="speed" />
          <variable citdl="Function" doc="A function to be executed whenever the animation completes, executes once for each element animated against.&#xA;&lt;pre&gt;function callback() {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Toggles each of the set of matched elements." ilk="function" name="toggle" returns="jQuery" signature="toggle() -&gt; jQuery" />
        <scope doc="Reveal all matched elements by adjusting their height and&#xA;firing an optional callback after completion." ilk="function" name="slideDown" returns="jQuery" signature="slideDown(speed, callback) -&gt; jQuery">
          <variable citdl="String, Number " doc="A string representing one of the three predefined speeds (&quot;slow&quot;, &quot;normal&quot;, or &quot;fast&quot;) or the number of milliseconds to run the animation (e.g. 1000)." ilk="argument" name="speed" />
          <variable citdl="Function" doc="A function to be executed whenever the animation completes, executes once for each element animated against.&#xA;&lt;pre&gt;function callback() {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Hide all matched elements by adjusting their height and&#xA;firing an optional callback after completion." ilk="function" name="slideUp" returns="jQuery" signature="slideUp(speed, callback) -&gt; jQuery">
          <variable citdl="String, Number " doc="A string representing one of the three predefined speeds (&quot;slow&quot;, &quot;normal&quot;, or &quot;fast&quot;) or the number of milliseconds to run the animation (e.g. 1000)." ilk="argument" name="speed" />
          <variable citdl="Function" doc="A function to be executed whenever the animation completes, executes once for each element animated against.&#xA;&lt;pre&gt;function callback() {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Toggle the visibility of all matched elements by adjusting&#xA;their height and firing an optional callback after&#xA;completion." ilk="function" name="slideToggle" returns="jQuery" signature="slideToggle(speed, callback) -&gt; jQuery">
          <variable citdl="String, Number " doc="A string representing one of the three predefined speeds (&quot;slow&quot;, &quot;normal&quot;, or &quot;fast&quot;) or the number of milliseconds to run the animation (e.g. 1000)." ilk="argument" name="speed" />
          <variable citdl="Function" doc="A function to be executed whenever the animation completes, executes once for each element animated against.&#xA;&lt;pre&gt;function callback() {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Fade in all matched elements by adjusting their opacity and&#xA;firing an optional callback after completion." ilk="function" name="fadeIn" returns="jQuery" signature="fadeIn(speed, callback) -&gt; jQuery">
          <variable citdl="String, Number " doc="A string representing one of the three predefined speeds (&quot;slow&quot;, &quot;normal&quot;, or &quot;fast&quot;) or the number of milliseconds to run the animation (e.g. 1000)." ilk="argument" name="speed" />
          <variable citdl="Function" doc="A function to be executed whenever the animation completes, executes once for each element animated against.&#xA;&lt;pre&gt;function callback() {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Fade out all matched elements by adjusting their opacity and&#xA;firing an optional callback after completion." ilk="function" name="fadeOut" returns="jQuery" signature="fadeOut(speed, callback) -&gt; jQuery">
          <variable citdl="String, Number " doc="A string representing one of the three predefined speeds (&quot;slow&quot;, &quot;normal&quot;, or &quot;fast&quot;) or the number of milliseconds to run the animation (e.g. 1000)." ilk="argument" name="speed" />
          <variable citdl="Function" doc="A function to be executed whenever the animation completes, executes once for each element animated against.&#xA;&lt;pre&gt;function callback() {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Fade the opacity of all matched elements to a specified&#xA;opacity and firing an optional callback after completion." ilk="function" name="fadeTo" returns="jQuery" signature="fadeTo(speed, opacity, callback) -&gt; jQuery">
          <variable citdl="String, Number " doc="A string representing one of the three predefined speeds (&quot;slow&quot;, &quot;normal&quot;, or &quot;fast&quot;) or the number of milliseconds to run the animation (e.g. 1000)." ilk="argument" name="speed" />
          <variable citdl="Number " doc="The opacity to fade to (a number from 0 to 1)." ilk="argument" name="opacity" />
          <variable citdl="Function" doc="A function to be executed whenever the animation completes, executed once for each element animated against.&#xA;&lt;pre&gt;function callback() {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="A function for making your own, custom animations." ilk="function" name="animate" returns="jQuery" signature="animate(params, duration, easing, callback) -&gt; jQuery">
          <variable citdl="Options" doc="A set of style attributes that you wish to animate, and to what end." ilk="argument" name="params" />
          <variable citdl="String, Number " doc="A string representing one of the three predefined speeds (&quot;slow&quot;, &quot;normal&quot;, or &quot;fast&quot;) or the number of milliseconds to run the animation (e.g. 1000)." ilk="argument" name="duration" />
          <variable citdl="String " doc="The name of the easing effect that you want to use (Plugin Required). There are two built-in values, &quot;linear&quot; and &quot;swing&quot;." ilk="argument" name="easing" />
          <variable citdl="Function" doc="A function to be executed whenever the animation completes, executes once for each element animated against." ilk="argument" name="callback" />
        </scope>
        <scope doc="A function for making your own, custom animations." ilk="function" name="animate" returns="jQuery" signature="animate(params, options) -&gt; jQuery">
          <variable citdl="Options" doc="A set of style attributes that you wish to animate, and to what end." ilk="argument" name="params" />
          <variable citdl="Options " doc="A set of options with which to configure the animation." ilk="argument" name="options" />
        </scope>
        <scope doc="Stops all the currently running animations on all the&#xA;specified elements." ilk="function" name="stop" returns="jQuery" signature="stop() -&gt; jQuery" />
        <scope doc="Returns a reference to the first element&apos;s queue (which is&#xA;an array of functions)." ilk="function" name="queue" returns="Array&lt;Function&gt;" signature="queue() -&gt; Array&lt;Function&gt;" />
        <scope doc="Adds a new function, to be executed, onto the end of the&#xA;queue of all matched elements." ilk="function" name="queue" returns="jQuery" signature="queue(callback) -&gt; jQuery">
          <variable citdl="Function" doc="The function to add to the queue.&#xA;&lt;pre&gt;function callback() {&#xA;  this; // dom element&#xA;  // to continue the queue you must call&#xA;  jQuery(this).dequeue();&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Replaces the queue of all matched element with this new&#xA;queue (the array of functions)." ilk="function" name="queue" returns="jQuery" signature="queue(queue) -&gt; jQuery">
          <variable citdl="Array&lt;Function&gt;" doc="The queue to replace all the queues with.  The functions have the same parameters and this value as queue(callback)." ilk="argument" name="queue" />
        </scope>
        <scope doc="Removes a queued function from the front of the queue and&#xA;executes it." ilk="function" name="dequeue" returns="jQuery" signature="dequeue() -&gt; jQuery" />
        <scope doc="Load a remote page using an HTTP request." ilk="function" name="ajax" returns="XMLHttpRequest" signature="ajax(options) -&gt; XMLHttpRequest">
          <variable citdl="Options" doc="A set of key/value pairs that configure the Ajax request. All options are optional. A default can be set for any option with &lt;a href=&apos;Ajax/jQuery.ajaxSetup&apos;&gt;$.ajaxSetup&lt;/a&gt;()." ilk="argument" name="options" />
        </scope>
        <scope doc="Load HTML from a remote file and inject it into the DOM." ilk="function" name="load" returns="jQuery" signature="load(url, data, callback) -&gt; jQuery">
          <variable citdl="String" doc="The URL of the HTML page to load." ilk="argument" name="url" />
          <variable citdl="Map" doc="Key/value pairs that will be sent to the server." ilk="argument" name="data" />
          <variable citdl="Callback" doc="The function called when the ajax request is complete (not necessarily success).&#xA;&lt;pre&gt;function (responseText, textStatus, XMLHttpRequest) {&#xA;  this; // dom element&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Load a remote page using an HTTP GET request." ilk="function" name="get" returns="XMLHttpRequest" signature="get(url, data, callback) -&gt; XMLHttpRequest">
          <variable citdl="String" doc="The URL of the page to load." ilk="argument" name="url" />
          <variable citdl="Map" doc="Key/value pairs that will be sent to the server." ilk="argument" name="data" />
          <variable citdl="Function" doc="A function to be executed whenever the data is loaded successfully.&#xA;&lt;pre&gt;function (data, textStatus) {&#xA;  // data could be xmlDoc, jsonObj, html, text, etc...&#xA;  this; // the options for this ajax request&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Load JSON data using an HTTP GET request." ilk="function" name="getJSON" returns="XMLHttpRequest" signature="getJSON(url, data, callback) -&gt; XMLHttpRequest">
          <variable citdl="String" doc="The URL of the page to load." ilk="argument" name="url" />
          <variable citdl="Map" doc="Key/value pairs that will be sent to the server." ilk="argument" name="data" />
          <variable citdl="Function" doc="A function to be executed whenever the data is loaded successfully.&#xA;&lt;pre&gt;function (data, textStatus) {&#xA;  // data will be a jsonObj&#xA;  this; // the options for this ajax request&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Loads, and executes, a local JavaScript file using an HTTP&#xA;GET request." ilk="function" name="getScript" returns="XMLHttpRequest" signature="getScript(url, callback) -&gt; XMLHttpRequest">
          <variable citdl="String" doc="The URL of the page to load." ilk="argument" name="url" />
          <variable citdl="Function" doc="A function to be executed whenever the data is loaded successfully.&#xA;&lt;pre&gt;function (data, textStatus) {&#xA;  // data should be javascript&#xA;  this; // the options for this ajax request&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Load a remote page using an HTTP POST request." ilk="function" name="post" returns="XMLHttpRequest" signature="post(url, data, callback, type) -&gt; XMLHttpRequest">
          <variable citdl="String" doc="The URL of the page to load." ilk="argument" name="url" />
          <variable citdl="Map" doc="Key/value pairs that will be sent to the server." ilk="argument" name="data" />
          <variable citdl="Function" doc="A function to be executed whenever the data is loaded successfully.&#xA;&lt;pre&gt;function (data, textStatus) {&#xA;  // data could be xmlDoc, jsonObj, html, text, etc...&#xA;  this; // the options for this ajax request&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
          <variable citdl="String" doc="Type of data to be sent (JSON, XML, etc.)&#xA;&lt;pre&gt;$.postJSON = function(url, data, callback) {&#xA; $.post(url, data, callback, &quot;json&quot;);&#xA;};&#xA;&lt;/pre&gt;" ilk="argument" name="type" />
        </scope>
        <scope doc="Attach a function to be executed whenever an AJAX request&#xA;completes. This is an &lt;a href=&apos;Ajax_Events&apos;&gt;Ajax Event&lt;/a&gt;." ilk="function" name="ajaxComplete" returns="jQuery" signature="ajaxComplete(callback) -&gt; jQuery">
          <variable citdl="Function" doc="The function to execute.&#xA;&lt;pre&gt;function (event, XMLHttpRequest, ajaxOptions) {&#xA;  this; // dom element listening&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Attach a function to be executed whenever an AJAX request&#xA;fails. This is an &lt;a href=&apos;Ajax_Events&apos;&gt;Ajax Event&lt;/a&gt;." ilk="function" name="ajaxError" returns="jQuery" signature="ajaxError(callback) -&gt; jQuery">
          <variable citdl="Function" doc="The function to execute.&#xA;&lt;pre&gt;function (event, XMLHttpRequest, ajaxOptions, thrownError) {&#xA;  // thrownError only passed if an error was caught&#xA;  this; // dom element listening&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Attach a function to be executed before an AJAX request is&#xA;sent. This is an &lt;a href=&apos;Ajax_Events&apos;&gt;Ajax Event&lt;/a&gt;." ilk="function" name="ajaxSend" returns="jQuery" signature="ajaxSend(callback) -&gt; jQuery">
          <variable citdl="Function" doc="The function to execute.&#xA;&lt;pre&gt;function (event, XMLHttpRequest, ajaxOptions) {&#xA;  this; // dom element listening&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Attach a function to be executed whenever an AJAX request&#xA;begins and there is none already active. This is an &lt;a&#xA;href=&apos;Ajax_Events&apos;&gt;Ajax Event&lt;/a&gt;." ilk="function" name="ajaxStart" returns="jQuery" signature="ajaxStart(callback) -&gt; jQuery">
          <variable citdl="Function" doc="The function to execute.&#xA;&lt;pre&gt;function () {&#xA;  this; // dom element listening&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Attach a function to be executed whenever all AJAX requests&#xA;have ended. This is an &lt;a href=&apos;Ajax_Events&apos;&gt;Ajax Event&lt;/a&gt;." ilk="function" name="ajaxStop" returns="jQuery" signature="ajaxStop(callback) -&gt; jQuery">
          <variable citdl="Function" doc="The function to execute.&#xA;&lt;pre&gt;function () {&#xA;  this; // dom element listening&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Attach a function to be executed whenever an AJAX request&#xA;completes successfully. This is an &lt;a&#xA;href=&apos;Ajax_Events&apos;&gt;Ajax Event&lt;/a&gt;." ilk="function" name="ajaxSuccess" returns="jQuery" signature="ajaxSuccess(callback) -&gt; jQuery">
          <variable citdl="Function" doc="The function to execute.&#xA;&lt;pre&gt;function (event, XMLHttpRequest, ajaxOptions) {&#xA;  this; // dom element listening&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Setup global settings for AJAX requests." ilk="function" name="ajaxSetup" signature="ajaxSetup(options)">
          <variable citdl="Options" doc="A set of key/value pairs that configure the default Ajax request. All options are optional." ilk="argument" name="options" />
        </scope>
        <scope doc="Serializes a set of input elements into a string of data.&#xA;This will serialize all given elements." ilk="function" name="serialize" returns="jQuery" signature="serialize() -&gt; jQuery" />
        <scope doc="Serializes all forms and form elements (like the &lt;a&#xA;href=&apos;Ajax/serialize&apos;&gt;.serialize()&lt;/a&gt; method) but returns a&#xA;JSON data structure for you to work with." ilk="function" name="serializeArray" returns="jQuery" signature="serializeArray() -&gt; jQuery" />
        <variable citdl="Map" doc="Contains flags for the useragent, read from&#xA;navigator.userAgent." name="browser">
          <variable citdl="String" doc="The version number of the rendering engine for the user&apos;s&#xA;browser." name="version" />
        </variable>
        <variable citdl="Boolean" doc="States if the current page, in the user&apos;s browser, is being&#xA;rendered using the [http://www.w3.org/TR/REC-CSS2/box.html&#xA;W3C CSS Box Model]." name="boxModel" />
        <scope doc="A generic iterator function, which can be used to seamlessly&#xA;iterate over both objects and arrays." ilk="function" name="each" returns="Object" signature="each(object, callback) -&gt; Object">
          <variable citdl="Object" doc="The object, or array, to iterate over." ilk="argument" name="object" />
          <variable citdl="Function" doc="The function that will be executed on every object.&#xA;&lt;pre&gt;function callback(indexInArray, valueOfElement) {&#xA;  var booleanKeepGoing;&#xA;&#xA;  this; // == valueOfElement&#xA;&#xA;  return booleanKeepGoing; // optional, unless false &#xA;                           // and want to stop looping&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Extend one object with one or more others, returning the&#xA;original, modified, object." ilk="function" name="extend" returns="Object" signature="extend(target, object1, objectN) -&gt; Object">
          <variable citdl="Object" doc="The object to extend." ilk="argument" name="target" />
          <variable citdl="Object" doc="The object that will be merged into the first." ilk="argument" name="object1" />
          <variable citdl="Object" doc="More objects to merge into the first." ilk="argument" name="objectN" />
        </scope>
        <scope doc="Filter items out of an array, by using a filter function." ilk="function" name="grep" returns="Array" signature="grep(array, callback, invert) -&gt; Array">
          <variable citdl="Array" doc="The Array to find items in." ilk="argument" name="array" />
          <variable citdl="Function" doc="The function to process each item against.  The first argument to the function is the list item, and the second argument is the list index.  The function should return a Boolean value.  Optionally, this argument may be a string rather than a function.  If the argument is a string, it is treated as a short &quot;lambda-form&quot; function, with &quot;a&quot; representing the list item and &quot;i&quot; representing the index.  For example, &quot;a &gt; 0&quot; may be passed instead of &quot;function(a){ return a &gt; 0; }&quot;.&#xA;&lt;pre&gt;function callback(elementOfArray, indexInArray) {&#xA;  var shouldKeepIt;&#xA;&#xA;  this; // unmapped&#xA;&#xA;  return shouldKeepIt;&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
          <variable citdl="Boolean" doc="If &quot;invert&quot; is false, or not provided, then the function returns an array consisting of all elements for which &quot;callback&quot; returns true.  If &quot;invert&quot; is true, then the function returns an array consisting of all elements for which &quot;callback&quot; returns false." ilk="argument" name="invert" />
        </scope>
        <scope doc="Turns an array-like object into a true array." ilk="function" name="makeArray" returns="Array" signature="makeArray(obj) -&gt; Array">
          <variable citdl="Object" doc="Array-like object to turn in to an actual Array." ilk="argument" name="obj" />
        </scope>
        <scope doc="Translate all items in an array to another array of items." ilk="function" name="map" returns="Array" signature="map(array, callback) -&gt; Array">
          <variable citdl="Array" doc="The Array to translate." ilk="argument" name="array" />
          <variable citdl="Function" doc="The function to process each item against.  The argument to the function is the list item. The function can return any value.  Optionally, this argument may be a string rather than a function. If the argument is a string, it is treated as a short &quot;lambda-form&quot; function, with &quot;a&quot; representing the list item. For example, &quot;a * a&quot; may be passed instead of &quot;function(a){ return a * a; }&quot;. &#xA;&lt;pre&gt;function callback(elementOfArray, indexInArray) {&#xA;  var replacementValue;&#xA;&#xA;  this; // unmapped&#xA;&#xA;  return replacementValue;&#xA;}&#xA;&lt;/pre&gt;" ilk="argument" name="callback" />
        </scope>
        <scope doc="Determine the index of the first parameter in the Array (-1&#xA;if not found)." ilk="function" name="inArray" returns="Number" signature="inArray(value, array) -&gt; Number">
          <variable citdl="Any" doc="Value to see if it exists in the array." ilk="argument" name="value" />
          <variable citdl="Array" doc="Array to look through for the value." ilk="argument" name="array" />
        </scope>
        <scope doc="Remove all duplicate elements from an array of elements." ilk="function" name="unique" returns="Array" signature="unique(array) -&gt; Array">
          <variable citdl="Array" doc="The Array to translate." ilk="argument" name="array" />
        </scope>
        <scope doc="Determine if the parameter passed is a function." ilk="function" name="isFunction" returns="Boolean" signature="isFunction(obj) -&gt; Boolean">
          <variable citdl="Object" doc="Object to test whether or not it is a function." ilk="argument" name="obj" />
        </scope>
        <scope doc="Remove the whitespace from the beginning and end of a&#xA;string." ilk="function" name="trim" returns="String" signature="trim(str) -&gt; String">
          <variable citdl="String" doc="The string to trim." ilk="argument" name="str" />
        </scope>
        <scope doc="Returns a unique ID for the element." ilk="function" name="data" returns="Number" signature="data(elem) -&gt; Number">
          <variable citdl="Element" doc="DOM element of interest." ilk="argument" name="elem" />
        </scope>
        <scope doc="Returns value at named data store for the element." ilk="function" name="data" signature="data(elem, name)">
          <variable citdl="Element" doc="DOM element of interest." ilk="argument" name="elem" />
          <variable citdl="String" doc="Name of the data stored." ilk="argument" name="name" />
        </scope>
        <scope doc="Stores the value in the named spot and also returns the&#xA;value." ilk="function" name="data" signature="data(elem, name, value)">
          <variable citdl="Element" doc="DOM element of interest." ilk="argument" name="elem" />
          <variable citdl="String" doc="Name of the data to store." ilk="argument" name="name" />
          <variable citdl="Any" doc="Value to be stored." ilk="argument" name="value" />
        </scope>
        <scope doc="Remove the expando attribute that allows data storage on an&#xA;element." ilk="function" name="removeData" signature="removeData(elem)">
          <variable citdl="Element" doc="Element to delete the data store from." ilk="argument" name="elem" />
        </scope>
        <scope doc="Removes just this one named data store." ilk="function" name="removeData" signature="removeData(elem, name)">
          <variable citdl="Element" doc="Element to delete the named data store property from." ilk="argument" name="elem" />
          <variable citdl="String" doc="The name of the data store property to remove." ilk="argument" name="name" />
        </scope>
        <scope doc="Serializes an array of form elements or an object (core of&#xA;&lt;a href=&apos;Ajax/serialize&apos;&gt;.serialize()&lt;/a&gt; method)." ilk="function" name="param" returns="String" signature="param(obj) -&gt; String">
          <variable citdl="Array&lt;Elements&gt;, jQuery, Object" doc="An Array or jQuery object is serialized by name/value pairs.  An object by key/value pairs." ilk="argument" name="obj" />
        </scope>
        <variable citdl="String" doc="The current version of jQuery." name="jquery" />
      </scope>
      <scope classrefs="jQuery" ilk="class" name="$">
        <scope attributes="__ctor__" doc="String: Create DOM elements on-the-fly from the provided String of raw HTML.&#xA;Element|Array: Wrap jQuery functionality around single or multiple DOM Element(s).&#xA;Function: To be executed when the DOM document has finished loading.&#xA;&#xA;If &apos;context&apos; is specified, accepts a string containing a CSS or basic XPath selector&#xA;which is then used to match a set of elements." ilk="function" name="$" signature="$(arg &lt;String|Element|Array of Elements|Function|jQuery&gt;, context &lt;Element|jQuery&gt;) -&gt; jQuery" />
      </scope>
    </scope>
  </file>
</codeintel>
