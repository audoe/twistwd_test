<?xml version="1.0" encoding="UTF-8"?>
<codeintel description="Yahoo! User Interface Library - v2.2.2" name="YUI-2.2" version="2.0">
  <file lang="JavaScript" path="yui">
    <scope ilk="blob" lang="JavaScript" name="yui" src="yui">
      <variable citdl="Array" doc="Keeps the version info for all YUI modules that have reported themselves" line="183" name="modules" />
      <variable citdl="Array" doc="List of functions that should be executed every time a YUI module&#xA;reports itself." line="191" name="listeners" />
      <scope attributes="__static__" doc="STATIC: Returns the version data for the specified module:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;name:&lt;/dt&gt;      &lt;dd&gt;The name of the module&lt;/dd&gt;&#xA;&lt;dt&gt;version:&lt;/dt&gt;   &lt;dd&gt;The version in use&lt;/dd&gt;&#xA;&lt;dt&gt;build:&lt;/dt&gt;     &lt;dd&gt;The build number in use&lt;/dd&gt;&#xA;&lt;dt&gt;versions:&lt;/dt&gt;  &lt;dd&gt;All versions that were registered&lt;/dd&gt;&#xA;&lt;dt&gt;builds:&lt;/dt&gt;    &lt;dd&gt;All builds that were registered.&lt;/dd&gt;&#xA;&lt;dt&gt;mainClass:&lt;/dt&gt; &lt;dd&gt;An object that was was stamped with the&#xA;current version and build. If&#xA;mainClass.VERSION != version or mainClass.BUILD != build,&#xA;multiple versions of pieces of the library have been&#xA;loaded, potentially causing issues.&lt;/dd&gt;&#xA;&lt;/dl&gt;" ilk="function" line="213" lineend="215" name="getVersion" returns="Object" signature="getVersion(name)">
        <variable citdl="String" doc="the name of the module (event, slider, etc)" ilk="argument" name="name" />
      </scope>
      <variable citdl="_iframe.contentWindow.document" line="224" name="doc" />
      <variable citdl="doc.getElementById()" line="225" name="elem" />
      <variable citdl="newfqstate" line="230" name="fqstate" />
      <variable citdl="newHash" line="409" name="hash" />
      <variable citdl="newCounter" line="410" name="counter" />
      <variable citdl="sMarkup.substring()" line="421" name="sMarkup" />
      <variable citdl="setInterval()" line="523" name="thread" />
      <variable citdl="Array" line="543" name="queue" />
      <variable citdl="Number" line="545" name="tweenCount" />
      <variable citdl="YAHOO.util.Region" line="712" name="curRegion" />
      <variable citdl="YAHOO.util.Anim" line="877" name="oAnim" />
      <variable citdl="Number" doc="The X position of the point, which is also the right, left and index zero (for Dom.getXY symmetry)" line="905" name="this[0]" />
      <variable citdl="Number" doc="The Y position of the point, which is also the top, bottom and index one (for Dom.getXY symmetry)" line="912" name="this[1]" />
      <variable citdl="Menu" line="1133" name="oMenu" />
      <variable citdl="aKeyCodes.length" line="1245" name="nKeyCodes" />
      <variable citdl="Object" line="1807" name="window">
        <variable citdl="YAHOO.widget.Logger._onWindowError" line="1807" name="onerror" />
        <variable citdl="Number" line="2359" name="scrollEnd" />
        <variable citdl="Number" line="2377" name="resizeEnd" />
      </variable>
      <variable citdl="o" line="2516" name="activeOverlay" />
      <variable citdl="firstPageLink" line="3251" name="markup" />
      <variable citdl="Object" line="7579" lineend="41" name="YAHOO">
        <variable citdl="Object" line="14" name="util">
          <scope classrefs="Object" ilk="class" line="14" lineend="441" name="Config">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Config is a utility used within an Object to allow the implementer to maintain a list of local configuration properties and listen for changes to those properties dynamically using CustomEvent. The initial values are also maintained so that the configuration can be reset at any given point to its initial state." ilk="function" line="14" lineend="18" name="Config" signature="Config(owner)">
              <variable citdl="Object" doc="The owner Object to which this Config Object belongs" ilk="argument" name="owner" />
              <variable citdl="Config" name="this" />
            </scope>
            <variable attributes="private __static__ constant" citdl="String" doc="PRIVATE STATIC CONSTANT: Constant representing the CustomEvent type for the config changed event." line="27" name="CONFIG_CHANGED_EVENT" />
            <variable attributes="private __static__ constant" citdl="String" doc="PRIVATE STATIC CONSTANT: Constant representing the boolean type string" line="36" name="BOOLEAN_TYPE" />
            <variable citdl="Object" doc="Object reference to the owner of this Config Object" line="45" name="owner" />
            <variable citdl="Boolean" doc="Boolean flag that specifies whether a queue is currently being executed" line="52" name="queueInProgress" />
            <variable attributes="private" citdl="Object" doc="PRIVATE: Maintains the local collection of configuration property objects and their specified values" line="60" lineend="453" name="config" />
            <variable attributes="private" citdl="Object" doc="PRIVATE: Maintains the local collection of configuration property objects as they were initially applied.&#xA;This object is used when resetting a property." line="69" lineend="454" name="initialConfig" />
            <variable attributes="private" citdl="Object" doc="PRIVATE: Maintains the local, normalized CustomEvent queue" line="77" name="eventQueue" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Custom Event, notifying subscribers when Config properties are set (setProperty is called without the silent flag" line="83" name="configChangedEvent" />
            <scope doc="Validates that the value passed in is a Boolean." ilk="function" line="91" lineend="93" name="checkBoolean" returns="Boolean" signature="checkBoolean(val)">
              <variable citdl="Object" doc="The value to validate" ilk="argument" name="val" />
              <variable citdl="Config" name="this" />
            </scope>
            <scope doc="Validates that the value passed in is a number." ilk="function" line="101" lineend="103" name="checkNumber" returns="Boolean" signature="checkNumber(val)">
              <variable citdl="Object" doc="The value to validate" ilk="argument" name="val" />
              <variable citdl="Config" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Fires a configuration property event using the specified value." ilk="function" line="112" lineend="118" name="fireEvent" signature="fireEvent(key, value)">
              <variable citdl="String" doc="The configuration property&apos;s name" ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="this.config[key]" line="113" name="property" />
            </scope>
            <scope doc="Adds a property to the Config Object&apos;s private config hash." ilk="function" line="126" lineend="144" name="addProperty" signature="addProperty(key, propertyObject)">
              <variable citdl="String" doc="The configuration property&apos;s name" ilk="argument" name="key" />
              <variable citdl="Object" doc="The Object containing all of this property&apos;s arguments" ilk="argument" name="propertyObject" />
              <variable citdl="Config" name="this" />
            </scope>
            <scope doc="Returns a key-value configuration map of the values currently set in the Config Object." ilk="function" line="151" lineend="162" name="getConfig" returns="Object" signature="getConfig()">
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="152" lineend="152" name="cfg" />
              <variable attributes="__local__ private" citdl="this.config[prop]" line="155" name="property" />
            </scope>
            <scope doc="Returns the value of specified property." ilk="function" line="170" lineend="177" name="getProperty" returns="Object" signature="getProperty(key)">
              <variable citdl="String" doc="The name of the property" ilk="argument" name="key" />
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="this.config[key.toLowerCase()]" line="171" name="property" />
            </scope>
            <scope doc="Resets the specified property&apos;s value to its initial value." ilk="function" line="185" lineend="197" name="resetProperty" returns="Boolean" signature="resetProperty(key)">
              <variable citdl="String" doc="The name of the property" ilk="argument" name="key" />
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="this.config[key]" line="188" name="property" />
            </scope>
            <scope doc="Sets the value of a property. If the silent property is passed as true, the property&apos;s event will not be fired." ilk="function" line="207" lineend="230" name="setProperty" returns="Boolean" signature="setProperty(key, value, silent)">
              <variable citdl="String" doc="The name of the property" ilk="argument" name="key" />
              <variable citdl="String" doc="The value to set the property to" ilk="argument" name="value" />
              <variable citdl="Boolean" doc="Whether the value should be set silently, without firing the property event." ilk="argument" name="silent" />
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="this.config[key]" line="214" name="property" />
            </scope>
            <scope doc="Sets the value of a property and queues its event to execute. If the event is already scheduled to execute, it is&#xA;moved from its current position to the end of the queue." ilk="function" line="240" lineend="306" name="queueProperty" returns="Boolean" signature="queueProperty(key, value)">
              <variable citdl="String" doc="The name of the property" ilk="argument" name="key" />
              <variable citdl="String" doc="The value to set the property to" ilk="argument" name="value" />
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="this.config[key]" line="243" name="property" />
              <variable attributes="__local__ private" citdl="Boolean" line="256" name="foundDuplicate" />
              <variable attributes="__local__ private" citdl="this.eventQueue.length" line="257" name="iLen" />
              <variable attributes="__local__ private" citdl="this.eventQueue[i]" line="259" name="queueItem" />
              <variable attributes="__local__ private" citdl="queueItem[0]" line="262" name="queueItemKey" />
              <variable attributes="__local__ private" citdl="queueItem[1]" line="263" name="queueItemValue" />
              <variable attributes="__local__ private" citdl="property.supercedes.length" line="281" name="sLen" />
              <variable attributes="__local__ private" citdl="property.supercedes[s]" line="283" name="supercedesCheck" />
              <variable attributes="__local__ private" citdl="this.eventQueue.length" line="284" name="qLen" />
              <variable attributes="__local__ private" citdl="this.eventQueue[q]" line="286" name="queueItemCheck" />
              <variable attributes="__local__ private" citdl="queueItemCheck[0]" line="289" name="queueItemCheckKey" />
              <variable attributes="__local__ private" citdl="queueItemCheck[1]" line="290" name="queueItemCheckValue" />
            </scope>
            <scope doc="Fires the event for a property using the property&apos;s current value." ilk="function" line="313" lineend="324" name="refireEvent" signature="refireEvent(key)">
              <variable citdl="String" doc="The name of the property" ilk="argument" name="key" />
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="this.config[key]" line="316" name="property" />
            </scope>
            <scope doc="Applies a key-value Object literal to the configuration, replacing any existing values, and queueing the property events.&#xA;Although the values will be set, fireQueue() must be called for their associated events to execute." ilk="function" line="333" lineend="340" name="applyConfig" signature="applyConfig(userConfig, init)">
              <variable citdl="Object" doc="The configuration Object literal" ilk="argument" name="userConfig" />
              <variable citdl="Boolean" doc="When set to true, the initialConfig will be set to the userConfig passed in, so that calling a reset will reset the properties to the passed values." ilk="argument" name="init" />
              <variable citdl="Config" name="this" />
            </scope>
            <scope doc="Refires the events for all configuration properties using their current values." ilk="function" line="346" lineend="350" name="refresh" signature="refresh()">
              <variable citdl="Config" name="this" />
            </scope>
            <scope doc="Fires the normalized list of queued property change events" ilk="function" line="356" lineend="373" name="fireQueue" signature="fireQueue()">
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="this.eventQueue[i]" line="359" name="queueItem" />
              <variable attributes="__local__ private" citdl="queueItem[0]" line="361" name="key" />
              <variable attributes="__local__ private" citdl="queueItem[1]" line="362" name="value" />
              <variable attributes="__local__ private" citdl="this.config[key]" line="364" name="property" />
            </scope>
            <scope doc="Subscribes an external handler to the change event for any given property." ilk="function" line="384" lineend="394" name="subscribeToConfigEvent" returns="Boolean" signature="subscribeToConfigEvent(key, handler, obj, override)">
              <variable citdl="String" doc="The property name" ilk="argument" name="key" />
              <variable citdl="Function" doc="The handler function to use subscribe to the property&apos;s event" ilk="argument" name="handler" />
              <variable citdl="Object" doc="The Object to use for scoping the event handler (see CustomEvent documentation)" ilk="argument" name="obj" />
              <variable citdl="Boolean" doc="Optional. If true, will override &quot;this&quot; within the handler to map to the scope Object passed into the method." ilk="argument" name="override" />
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="this.config[key.toLowerCase()]" line="385" name="property" />
            </scope>
            <scope doc="Unsubscribes an external handler from the change event for any given property." ilk="function" line="404" lineend="411" name="unsubscribeFromConfigEvent" returns="Boolean" signature="unsubscribeFromConfigEvent(key, handler, obj)">
              <variable citdl="String" doc="The property name" ilk="argument" name="key" />
              <variable citdl="Function" doc="The handler function to use subscribe to the property&apos;s event" ilk="argument" name="handler" />
              <variable citdl="Object" doc="The Object to use for scoping the event handler (see CustomEvent documentation)" ilk="argument" name="obj" />
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="this.config[key.toLowerCase()]" line="405" name="property" />
            </scope>
            <scope doc="Returns a string representation of the Config object" ilk="function" line="418" lineend="424" name="toString" returns="String" signature="toString()">
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="String" line="419" name="output" />
            </scope>
            <scope doc="Returns a string representation of the Config object&apos;s current CustomEvent queue" ilk="function" line="431" lineend="440" name="outputEventQueue" returns="String" signature="outputEventQueue()">
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="String" line="432" name="output" />
              <variable attributes="__local__ private" citdl="this.eventQueue[q]" line="434" name="queueItem" />
            </scope>
            <scope doc="Initializes the configuration Object and all of its local members." ilk="function" line="449" lineend="456" name="init" signature="init(owner)">
              <variable citdl="Object" doc="The owner Object to which this Config Object belongs" ilk="argument" name="owner" />
              <variable citdl="Config" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Checks to determine if a particular function/Object pair are already subscribed to the specified CustomEvent" ilk="function" line="467" lineend="475" name="alreadySubscribed" returns="Boolean" signature="alreadySubscribed(evt, fn, obj)">
              <variable citdl="YAHOO.util.CustomEvent" doc="The CustomEvent for which to check the subscriptions" ilk="argument" name="evt" />
              <variable citdl="Function" doc="The function to look for in the subscribers list" ilk="argument" name="fn" />
              <variable citdl="Object" doc="The execution scope Object for the subscription" ilk="argument" name="obj" />
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="evt.subscribers[e]" line="469" name="subsc" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="16" lineend="196" name="Attribute">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides Attribute configurations." ilk="function" line="16" lineend="21" name="Attribute" signature="Attribute(hash, owner)">
              <variable citdl="Object" doc="The intial Attribute." ilk="argument" name="hash" />
              <variable ilk="argument" name="owner" />
              <variable citdl="Attribute" name="this" />
            </scope>
            <variable citdl="owner" line="18" name="owner" />
            <variable citdl="String" doc="The name of the attribute." line="29" name="name" />
            <variable citdl="String" doc="The value of the attribute." line="36" name="value" />
            <variable citdl="Boolean" doc="Whether or not the attribute is read only." line="50" name="readOnly" />
            <variable citdl="Boolean" doc="Whether or not the attribute can only be written once." line="57" name="writeOnce" />
            <variable attributes="private" citdl="Object" doc="PRIVATE: The attribute&apos;s initial configuration." line="65" name="_initialConfig" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Whether or not the attribute&apos;s value has been set." line="73" name="_written" />
            <variable citdl="Function" doc="The method to use when setting the attribute&apos;s value.&#xA;The method recieves the new value as the only argument." line="81" name="method" />
            <variable citdl="Function" doc="The validator to use when setting the attribute&apos;s value." line="89" name="validator" />
            <scope doc="Retrieves the current value of the attribute." ilk="function" line="96" lineend="98" name="getValue" returns="any" signature="getValue()">
              <variable citdl="Attribute" name="this" />
            </scope>
            <scope doc="Sets the value of the attribute and fires beforeChange and change events." ilk="function" line="107" lineend="147" name="setValue" returns="Boolean" signature="setValue(value, silent)">
              <variable citdl="Any" doc="The value to apply to the attribute." ilk="argument" name="value" />
              <variable citdl="Boolean" doc="If true the change events will not be fired." ilk="argument" name="silent" />
              <variable citdl="Attribute" name="this" />
              <variable attributes="__local__ private" citdl="owner.fireBeforeChangeEvent()" line="108" name="beforeRetVal" />
              <variable attributes="__local__ private" citdl="this.owner" line="109" name="owner" />
              <variable attributes="__local__ private" citdl="this.name" line="110" name="name" />
              <variable attributes="__local__ private" citdl="Object" line="112" lineend="116" name="event">
                <variable citdl="name" line="113" name="type" />
                <variable citdl="this.getValue()" line="114" name="prevValue" />
                <variable citdl="value" line="115" name="newValue" />
              </variable>
            </scope>
            <scope doc="Allows for configuring the Attribute&apos;s properties." ilk="function" line="155" lineend="168" name="configure" signature="configure(map, init)">
              <variable citdl="Object" doc="A key-value map of Attribute properties." ilk="argument" name="map" />
              <variable citdl="Boolean" doc="Whether or not this should become the initial config." ilk="argument" name="init" />
              <variable citdl="Attribute" name="this" />
            </scope>
            <scope doc="Resets the value to the initial config value." ilk="function" line="175" lineend="177" name="resetValue" returns="Boolean" signature="resetValue()">
              <variable citdl="Attribute" name="this" />
            </scope>
            <scope doc="Resets the attribute config to the initial config state." ilk="function" line="183" lineend="185" name="resetConfig" signature="resetConfig()">
              <variable citdl="Attribute" name="this" />
            </scope>
            <scope doc="Resets the value to the current value.&#xA;Useful when values may have gotten out of sync with actual properties." ilk="function" line="193" lineend="195" name="refresh" returns="Boolean" signature="refresh(silent)">
              <variable ilk="argument" name="silent" />
              <variable citdl="Attribute" name="this" />
            </scope>
          </scope>
          <variable citdl="Object" doc="The Connection Manager provides a simplified interface to the XMLHttpRequest&#xA;object.  It handles cross-browser instantiantion of XMLHttpRequest, negotiates the&#xA;interactive states and server response, returning the results to a pre-defined&#xA;callback you create." line="26" lineend="1100" name="Connect">
            <variable attributes="private __static__" citdl="Array" doc="PRIVATE STATIC: Array of MSFT ActiveX ids for XMLHttpRequest." line="35" name="_msxml_progid" />
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Object literal of HTTP header(s)" line="47" lineend="706" name="_http_headers" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Determines if HTTP headers are set." line="56" name="_has_http_headers" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Determines if a default header of&#xA;Content-Type of &apos;application/x-www-form-urlencoded&apos;&#xA;will be added to any client HTTP headers sent for POST&#xA;transactions." line="68" name="_use_default_post_header" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Determines if a default header of&#xA;Content-Type of &apos;application/x-www-form-urlencoded&apos;&#xA;will be added to client HTTP headers sent for POST&#xA;transactions." line="80" name="_default_post_header" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Determines if a default header of&#xA;&apos;X-Requested-With: XMLHttpRequest&apos;&#xA;will be added to each transaction." line="91" name="_use_default_xhr_header" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: The default header value for the label&#xA;&quot;X-Requested-With&quot;.  This is sent with each&#xA;transaction, by default, to identify the&#xA;request as being made by YUI Connection Manager." line="103" name="_default_xhr_header" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Determines if custom, default headers&#xA;are set for each transaction." line="113" name="_has_default_headers" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Determines if custom, default headers&#xA;are set for each transaction." line="123" lineend="720" name="_default_headers" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Property modified by setForm() to determine if the data&#xA;should be submitted as an HTML form." line="133" name="_isFormSubmit" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Property modified by setForm() to determine if a file(s)&#xA;upload is expected." line="143" name="_isFileUpload" />
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Property modified by setForm() to set a reference to the HTML&#xA;form node if the desired action is file upload." line="153" name="_formNode" />
            <variable attributes="private __static__" citdl="String" doc="PRIVATE STATIC: Property modified by setForm() to set the HTML form data&#xA;for each transaction." line="163" name="_sFormData" />
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Collection of polling references to the polling mechanism in handleReadyState." line="172" lineend="172" name="_poll" />
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Queue of timeout values for each transaction callback with a defined timeout value." line="181" lineend="181" name="_timeOut" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: The polling frequency, in milliseconds, for HandleReadyState.&#xA;when attempting to determine a transaction&apos;s XHR readyState.&#xA;The default is 50 milliseconds." line="192" name="_polling_interval" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: A transaction counter that increments the transaction id for each transaction." line="201" name="_transaction_id" />
            <variable attributes="private __static__" citdl="String" doc="PRIVATE STATIC: Tracks the name-value pair of the &quot;clicked&quot; submit button if multiple submit&#xA;buttons are present in an HTML form; and, if YAHOO.util.Event is available." line="211" name="_submitElementValue" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Determines whether YAHOO.util.Event is available and returns true or false.&#xA;If true, an event listener is bound at the document level to trap click events that&#xA;resolve to a target type of &quot;Submit&quot;.  This listener will enable setForm() to determine&#xA;the clicked &quot;Submit&quot; value in a multi-Submit button, HTML form." line="238" name="_hasSubmitListener" />
            <scope attributes="__static__" doc="STATIC: Member to add an ActiveX id to the existing xml_progid array.&#xA;In the event(unlikely) a new ActiveX id is introduced, it can be added&#xA;without internal code modifications." ilk="function" line="251" lineend="253" name="setProgId" signature="setProgId(id)">
              <variable citdl="String" doc="The ActiveX id to be added to initialize the XHR object." ilk="argument" name="id" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Member to enable or disable the default POST header." ilk="function" line="264" lineend="266" name="setDefaultPostHeader" signature="setDefaultPostHeader(b)">
              <variable citdl="Boolean" doc="Set and use default header - true or false ." ilk="argument" name="b" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Member to enable or disable the default POST header." ilk="function" line="277" lineend="279" name="setDefaultXhrHeader" signature="setDefaultXhrHeader(b)">
              <variable citdl="Boolean" doc="Set and use default header - true or false ." ilk="argument" name="b" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Member to modify the default polling interval." ilk="function" line="290" lineend="294" name="setPollingInterval" signature="setPollingInterval(i)">
              <variable citdl="Number" doc="The polling interval in milliseconds." ilk="argument" name="i" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Instantiates a XMLHttpRequest object and returns an object with two properties:&#xA;the XMLHttpRequest instance and the transaction id." ilk="function" line="306" lineend="333" name="createXhrObject" returns="Object" signature="createXhrObject(transactionId)">
              <variable citdl="Number" doc="Property containing the transaction id for this transaction." ilk="argument" name="transactionId" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="XMLHttpRequest" line="307" name="http" />
              <variable attributes="__local__ private" line="307" lineend="323" name="obj">
                <variable citdl="transactionId" line="313" name="tId" />
                <variable citdl="http" line="313" name="conn" />
              </variable>
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: This method is called by asyncRequest to create a&#xA;valid connection object for the transaction.  It also passes a&#xA;transaction id and increments the transaction id counter." ilk="function" line="345" lineend="361" name="getConnectionObject" returns="Object" signature="getConnectionObject()">
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="this.createXhrObject()" line="346" name="o" />
              <variable attributes="__local__ private" citdl="this._transaction_id" line="347" name="tId" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Method for initiating an asynchronous request via the XHR object." ilk="function" line="375" lineend="433" name="asyncRequest" returns="Object" signature="asyncRequest(method, uri, callback, postData)">
              <variable citdl="String" doc="HTTP transaction method" ilk="argument" name="method" />
              <variable citdl="String" doc="Fully qualified path of resource" ilk="argument" name="uri" />
              <variable citdl="callback" doc="User-defined callback function or object" ilk="argument" name="callback" />
              <variable citdl="String" doc="POST body" ilk="argument" name="postData" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="this.getConnectionObject()" line="376" name="o" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: This method serves as a timer that polls the XHR object&apos;s readyState&#xA;property during a transaction, instead of binding a callback to the&#xA;onreadystatechange event.  Upon readyState 4, handleTransactionResponse&#xA;will process the response, and the timer will be cleared." ilk="function" line="448" lineend="469" name="handleReadyState" signature="handleReadyState(o, callback)">
              <variable citdl="Object" doc="The connection object" ilk="argument" name="o" />
              <variable citdl="callback" doc="The user-defined callback object" ilk="argument" name="callback" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="this" line="449" name="oConn" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: This method attempts to interpret the server response and&#xA;determine whether the transaction was successful, or if an error or&#xA;exception was encountered." ilk="function" line="484" lineend="557" name="handleTransactionResponse" signature="handleTransactionResponse(o, callback, isAbort)">
              <variable citdl="Object" doc="The connection object" ilk="argument" name="o" />
              <variable citdl="Object" doc="The sser-defined callback object" ilk="argument" name="callback" />
              <variable citdl="Boolean" doc="Determines if the transaction was aborted." ilk="argument" name="isAbort" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="this.createResponseObject()" line="491" name="responseObject" />
              <variable attributes="__local__ private" citdl="o.conn.status" line="491" name="httpStatus" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: This method evaluates the server response, creates and returns the results via&#xA;its properties.  Success and failure cases will differ in the response&#xA;object&apos;s property values." ilk="function" line="571" lineend="603" name="createResponseObject" returns="Object" signature="createResponseObject(o, callbackArg)">
              <variable citdl="Object" doc="The connection object" ilk="argument" name="o" />
              <variable citdl="callbackArg" doc="The user-defined argument or arguments to be passed to the callback" ilk="argument" name="callbackArg" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="572" lineend="572" name="obj">
                <variable citdl="o.tId" line="588" name="tId" />
                <variable line="590" name="status" />
                <variable line="592" name="statusText" />
                <variable citdl="headerObj" line="593" name="getResponseHeader" />
                <variable citdl="headerStr" line="594" name="getAllResponseHeaders" />
                <variable citdl="o.conn.responseText" line="595" name="responseText" />
                <variable citdl="o.conn.responseXML" line="596" name="responseXML" />
                <variable citdl="callbackArg" line="599" name="argument" />
              </variable>
              <variable attributes="__local__ private" citdl="Object" line="573" lineend="573" name="headerObj" />
              <variable attributes="__local__ private" citdl="o.conn.getAllResponseHeaders()" line="577" name="headerStr" />
              <variable attributes="__local__ private" citdl="headerStr.split()" line="578" name="header" />
              <variable attributes="__local__ private" citdl="header[i].indexOf()" line="580" name="delimitPos" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: If a transaction cannot be completed due to dropped or closed connections,&#xA;there may be not be enough information to build a full response object.&#xA;The failure callback will be fired and this specific condition can be identified&#xA;by a status property value of 0.&#xA;&#xA;If an abort was successful, the status property will report a value of -1." ilk="function" line="622" lineend="645" name="createExceptionObject" returns="Object" signature="createExceptionObject(tId, callbackArg, isAbort)">
              <variable citdl="Number" doc="The Transaction Id" ilk="argument" name="tId" />
              <variable citdl="callbackArg" doc="The user-defined argument or arguments to be passed to the callback" ilk="argument" name="callbackArg" />
              <variable citdl="Boolean" doc="Determines if the exception case is caused by a transaction abort" ilk="argument" name="isAbort" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="Number" line="623" name="COMM_CODE" />
              <variable attributes="__local__ private" citdl="String" line="624" name="COMM_ERROR" />
              <variable attributes="__local__ private" citdl="Number" line="625" name="ABORT_CODE" />
              <variable attributes="__local__ private" citdl="String" line="626" name="ABORT_ERROR" />
              <variable attributes="__local__ private" citdl="Object" line="628" lineend="628" name="obj">
                <variable citdl="tId" line="630" name="tId" />
                <variable citdl="ABORT_CODE" line="632" name="status" />
                <variable citdl="ABORT_ERROR" line="633" name="statusText" />
                <variable citdl="callbackArg" line="641" name="argument" />
              </variable>
            </scope>
            <scope attributes="__static__" doc="STATIC: Method that initializes the custom HTTP headers for the each transaction." ilk="function" line="659" lineend="677" name="initHeader" signature="initHeader(label, value, isDefault)">
              <variable citdl="String" doc="The HTTP header label" ilk="argument" name="label" />
              <variable citdl="String" doc="The HTTP header value" ilk="argument" name="value" />
              <variable citdl="String" doc="Determines if the specific header is a default header&#xA;automatically sent with each transaction." ilk="argument" name="isDefault" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" line="660" name="headerObj" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Accessor that sets the HTTP headers for each transaction." ilk="function" line="689" lineend="709" name="setHeader" signature="setHeader(o)">
              <variable citdl="Object" doc="The connection object for the transaction." ilk="argument" name="o" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Resets the default HTTP headers object" ilk="function" line="718" lineend="722" name="resetDefaultHeaders" signature="resetDefaultHeaders()">
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: This method assembles the form label and value pairs and&#xA;constructs an encoded string.&#xA;asyncRequest() will automatically initialize the&#xA;transaction with a HTTP header Content-Type of&#xA;application/x-www-form-urlencoded." ilk="function" line="739" lineend="845" name="setForm" returns="String" signature="setForm(formId, isUpload, secureUri)">
              <variable ilk="argument" name="formId" />
              <variable ilk="argument" name="isUpload" />
              <variable ilk="argument" name="secureUri" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="formId" line="741" name="oForm" />
              <variable attributes="__local__ private" citdl="oForm.elements[i].value" line="775" name="oValue" />
              <variable attributes="__local__ private" citdl="oForm.elements[i].disabled" line="775" name="oDisabled" />
              <variable attributes="__local__ private" citdl="oForm.elements[i]" line="775" name="oElement" />
              <variable attributes="__local__ private" citdl="oForm.elements[i].name" line="775" name="oName" />
              <variable attributes="__local__ private" citdl="Boolean" line="776" name="hasSubmit" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Resets HTML form properties when an HTML form or HTML form&#xA;with file upload transaction is sent." ilk="function" line="855" lineend="860" name="resetFormState" signature="resetFormState()">
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Creates an iframe to be used for form file uploads.  It is remove from the&#xA;document upon completion of the upload transaction." ilk="function" line="871" lineend="901" name="createFrame" signature="createFrame(secureUri)">
              <variable ilk="argument" name="secureUri" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="String" line="876" name="frameId" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="878" name="io">
                <variable citdl="Object" line="896" name="style">
                  <variable citdl="String" line="896" name="position" />
                  <variable citdl="String" line="897" name="top" />
                  <variable citdl="String" line="898" name="left" />
                </variable>
              </variable>
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Parses the POST data and creates hidden form elements&#xA;for each key-value, and appends them to the HTML form object." ilk="function" line="913" lineend="928" name="appendPostData" returns="Array" signature="appendPostData(postData)">
              <variable citdl="String" doc="The HTTP POST data" ilk="argument" name="postData" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="914" name="formElements" />
              <variable attributes="__local__ private" citdl="postData.split()" line="915" name="postMessage" />
              <variable attributes="__local__ private" citdl="postMessage[i].indexOf()" line="917" name="delimitPos" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Uploads HTML form, including files/attachments, to the&#xA;iframe created in createFrame." ilk="function" line="941" lineend="1032" name="uploadFile" signature="uploadFile(id, callback, uri, postData)">
              <variable citdl="Number" doc="The transaction id." ilk="argument" name="id" />
              <variable citdl="Object" doc="- User-defined callback object." ilk="argument" name="callback" />
              <variable citdl="String" doc="Fully qualified path of resource." ilk="argument" name="uri" />
              <variable ilk="argument" name="postData" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="String" line="945" name="frameId" />
              <variable attributes="__local__ private" citdl="String" line="946" name="uploadEncoding" />
              <variable attributes="__local__ private" citdl="document.getElementById()" line="947" name="io" />
              <variable attributes="__local__ private" citdl="this.appendPostData()" line="966" name="oElements" />
              <scope attributes="__local__ private" ilk="function" line="985" lineend="1019" name="uploadCallback" signature="uploadCallback()">
                <variable attributes="__local__ private" citdl="Object" line="986" lineend="986" name="obj">
                  <variable citdl="id" line="987" name="tId" />
                  <variable citdl="callback.argument" line="988" name="argument" />
                  <variable citdl="io.contentWindow.document.body" line="992" name="responseText" />
                  <variable citdl="io.contentWindow.document.XMLDocument" line="993" name="responseXML" />
                </variable>
              </scope>
            </scope>
            <variable citdl="uploadEncoding" line="958" name="encoding" />
            <variable citdl="uploadEncoding" line="961" name="enctype" />
            <scope attributes="__static__" doc="STATIC: Method to terminate a transaction, if it has not reached readyState 4." ilk="function" line="1045" lineend="1061" name="abort" returns="Boolean" signature="abort(o, callback, isTimeout)">
              <variable citdl="Object" doc="The connection object returned by asyncRequest." ilk="argument" name="o" />
              <variable citdl="Object" doc="User-defined callback object." ilk="argument" name="callback" />
              <variable citdl="String" doc="boolean to indicate if abort was a timeout." ilk="argument" name="isTimeout" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Public method to check if the transaction is still being processed." ilk="function" line="1073" lineend="1083" name="isCallInProgress" returns="Boolean" signature="isCallInProgress(o)">
              <variable citdl="Object" doc="The connection object returned by asyncRequest" ilk="argument" name="o" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Dereference the XHR instance and the connection object after the transaction is completed." ilk="function" line="1094" lineend="1099" name="releaseObject" signature="releaseObject(o)">
              <variable citdl="Object" doc="The connection object" ilk="argument" name="o" />
              <variable citdl="Connect" name="this" />
            </scope>
          </variable>
          <scope classrefs="Object" ilk="class" line="27" lineend="289" name="CustomEvent">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The CustomEvent class lets you define events for your application&#xA;that can be subscribed to by one or more independent component." ilk="function" line="27" lineend="112" name="CustomEvent" signature="CustomEvent(type, oScope, silent, signature)">
              <variable citdl="String" doc="The type of event, which is passed to the callback&#xA;when the event fires" ilk="argument" name="type" />
              <variable citdl="Object" doc="The context the event will fire from.  &quot;this&quot; will&#xA;refer to this object in the callback.  Default value:&#xA;the window object.  The listener can override this." ilk="argument" name="oScope" />
              <variable citdl="Boolean" doc="pass true to prevent the event from writing to&#xA;the debugsystem" ilk="argument" name="silent" />
              <variable citdl="Number" doc="the signature that the custom event subscriber&#xA;will receive. YAHOO.util.CustomEvent.LIST or&#xA;YAHOO.util.CustomEvent.FLAT.  The default is&#xA;YAHOO.util.CustomEvent.LIST." ilk="argument" name="signature" />
              <variable citdl="CustomEvent" name="this" />
              <variable attributes="__local__ private" citdl="String" line="86" name="onsubscribeType" />
            </scope>
            <variable citdl="String" doc="The type of event, returned to subscribers when the event fires" line="34" name="type" />
            <variable citdl="Object" doc="The scope the the event will fire from by default.  Defaults to the window&#xA;obj" line="42" name="scope" />
            <variable citdl="Boolean" doc="By default all custom events are logged in the debug build, set silent&#xA;to true to disable debug outpu for this event." line="50" name="silent" />
            <variable citdl="Number" doc="Custom events support two styles of arguments provided to the event&#xA;subscribers.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;YAHOO.util.CustomEvent.LIST:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;param1: event name&lt;/li&gt;&#xA;&lt;li&gt;param2: array of arguments sent to fire&lt;/li&gt;&#xA;&lt;li&gt;param3: &lt;optional&gt; a custom object supplied by the subscriber&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;YAHOO.util.CustomEvent.FLAT&#xA;&lt;ul&gt;&#xA;&lt;li&gt;param1: the first argument passed to fire.  If you need to&#xA;pass multiple parameters, use and array or object literal&lt;/li&gt;&#xA;&lt;li&gt;param2: &lt;optional&gt; a custom object supplied by the subscriber&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;" line="74" name="signature" />
            <variable citdl="Array" doc="The subscribers to this event" line="81" name="subscribers" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Custom events provide a custom event that fires whenever there is&#xA;a new subscriber to the event.  This provides an opportunity to&#xA;handle the case where there is a non-repeating event that has&#xA;already fired has a new subscriber." line="109" name="subscribeEvent" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: Subscriber listener sigature constant.  The LIST type returns three&#xA;parameters: the event type, the array of args passed to fire, and&#xA;the optional custom object" line="122" name="LIST" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: Subscriber listener sigature constant.  The FLAT type returns two&#xA;parameters: the first argument passed to fire and the optional&#xA;custom object" line="132" name="FLAT" />
            <scope doc="Subscribes the caller to this event" ilk="function" line="147" lineend="158" name="subscribe" signature="subscribe(fn, obj, override)">
              <variable citdl="Function" doc="The function to execute" ilk="argument" name="fn" />
              <variable citdl="Object" doc="An object to be passed along when the event&#xA;fires" ilk="argument" name="obj" />
              <variable citdl="{boolean" doc="If true, the obj passed in becomes&#xA;the execution scope of the listener.&#xA;if an object, that object becomes the&#xA;the execution scope." ilk="argument" name="override" />
              <variable citdl="CustomEvent" name="this" />
            </scope>
            <scope doc="Unsubscribes subscribers." ilk="function" line="172" lineend="188" name="unsubscribe" returns="Boolean" signature="unsubscribe(fn, obj)">
              <variable citdl="Function" doc="The subscribed function to remove, if not supplied&#xA;all will be removed" ilk="argument" name="fn" />
              <variable citdl="Object" doc="The custom object passed to subscribe.  This is&#xA;optional, but if supplied will be used to&#xA;disambiguate multiple listeners that are the same&#xA;(e.g., you subscribe many object using a function&#xA;that lives on the prototype)" ilk="argument" name="obj" />
              <variable citdl="CustomEvent" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="178" name="found" />
              <variable attributes="__local__ private" citdl="this.subscribers[i]" line="180" name="s" />
            </scope>
            <scope doc="Notifies the subscribers.  The callback functions will be executed&#xA;from the scope specified when the event was created, and with the&#xA;following parameters:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The type of event&lt;/li&gt;&#xA;&lt;li&gt;All of the arguments fire() was executed with as an array&lt;/li&gt;&#xA;&lt;li&gt;The custom object (if any) that was passed into the subscribe()&#xA;method&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="function" line="206" lineend="251" name="fire" returns="Boolean" signature="fire()">
              <variable citdl="CustomEvent" name="this" />
              <variable attributes="__local__ private" citdl="this.subscribers.length" line="207" name="len" />
              <variable attributes="__local__ private" line="212" name="i" />
              <variable attributes="__local__ private" citdl="Array" line="212" name="args" />
              <variable attributes="__local__ private" citdl="Boolean" line="212" name="ret" />
              <variable attributes="__local__ private" citdl="args.length" line="218" name="argslength" />
              <variable attributes="__local__ private" citdl="this.subscribers[i]" line="224" name="s" />
              <variable attributes="__local__ private" citdl="s.getScope()" line="229" name="scope" />
              <variable attributes="__local__ private" citdl="args[0]" line="232" name="param" />
            </scope>
            <scope doc="Removes all listeners" ilk="function" line="258" lineend="264" name="unsubscribeAll" returns="Number" signature="unsubscribeAll()">
              <variable citdl="CustomEvent" name="this" />
            </scope>
            <scope attributes="private" ilk="function" line="270" lineend="279" name="_delete" signature="_delete(index)">
              <variable ilk="argument" name="index" />
              <variable citdl="CustomEvent" name="this" />
              <variable attributes="__local__ private" citdl="this.subscribers[index]" line="271" name="s" />
            </scope>
            <scope ilk="function" line="284" lineend="288" name="toString" returns="String" signature="toString()">
              <variable citdl="CustomEvent" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="31" lineend="46" name="DragDropMgr">
            <variable citdl="Object" line="31" lineend="1363" name="DragDropMgr">
              <variable attributes="private __static__" citdl="String" doc="PRIVATE STATIC: Two dimensional Array of registered DragDrop objects.  The first&#xA;dimension is the DragDrop item group, the second the DragDrop&#xA;object." line="46" lineend="1085" name="ids" />
              <variable attributes="private __static__" citdl="String" doc="PRIVATE STATIC: Array of element ids defined as drag handles.  Used to determine&#xA;if the element that generated the mousedown event is actually the&#xA;handle and not the html element itself." line="57" lineend="57" name="handleIds" />
              <variable attributes="private __static__" citdl="DragDrop" doc="PRIVATE STATIC: the DragDrop object that is currently being dragged" line="66" name="dragCurrent" />
              <variable attributes="private __static__" citdl="Array" doc="PRIVATE STATIC: the DragDrop object(s) that are being hovered over" line="75" lineend="635" name="dragOvers" />
              <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: the X distance between the cursor and the object being dragged" line="84" name="deltaX" />
              <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: the Y distance between the cursor and the object being dragged" line="93" name="deltaY" />
              <variable attributes="__static__" citdl="Boolean" doc="STATIC: Flag to determine if we should prevent the default behavior of the&#xA;events we define. By default this is true, but this can be set to&#xA;false if you need the default behavior (not recommended)" line="103" name="preventDefault" />
              <variable attributes="__static__" citdl="Boolean" doc="STATIC: Flag to determine if we should stop the propagation of the events&#xA;we generate. This is true by default but you may want to set it to&#xA;false if the html element contains other features that require the&#xA;mouse click." line="114" name="stopPropagation" />
              <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Internal flag that is set to true when drag and drop has been&#xA;intialized" line="123" name="initalized" />
              <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: All drag and drop can be disabled." line="131" name="locked" />
              <variable attributes="__static__" citdl="Object" doc="STATIC: Provides additional information about the the current set of&#xA;interactions.  Can be accessed from the event handlers. It&#xA;contains the following properties:&#xA;&#xA;out:       onDragOut interactions&#xA;enter:     onDragEnter interactions&#xA;over:      onDragOver interactions&#xA;drop:      onDragDrop interactions&#xA;point:     The location of the cursor&#xA;draggedRegion: The location of dragged element at the time&#xA;of the interaction&#xA;sourceRegion: The location of the source elemtn at the time&#xA;of the interaction&#xA;validDrop: boolean" line="153" lineend="784" name="interactionInfo">
                <variable citdl="outEvts" line="776" name="out" />
                <variable citdl="enterEvts" line="777" name="enter" />
                <variable citdl="overEvts" line="778" name="over" />
                <variable citdl="dropEvts" line="779" name="drop" />
                <variable citdl="pt" line="780" name="point" />
                <variable citdl="curRegion" line="781" name="draggedRegion" />
                <variable citdl="this.locationCache[dc.id]" line="782" name="sourceRegion" />
                <variable citdl="isDrop" line="783" name="validDrop" />
              </variable>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Called the first time an element is registered." ilk="function" line="161" lineend="163" name="init" signature="init()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <variable citdl="Boolean" line="162" name="initialized" />
              <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: In point mode, drag and drop interaction is defined by the&#xA;location of the cursor during the drag/drop" line="173" name="POINT" />
              <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: In intersect mode, drag and drop interaction is defined by the&#xA;cursor position or the amount of overlap of two or more drag and&#xA;drop objects." line="184" name="INTERSECT" />
              <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: In intersect mode, drag and drop interaction is defined only by the&#xA;overlap of two or more drag and drop objects." line="194" name="STRICT_INTERSECT" />
              <variable attributes="__static__" citdl="Number" doc="STATIC: The current drag and drop mode.  Default: POINT" line="202" name="mode" />
              <scope attributes="private __static__" doc="PRIVATE STATIC: Runs method on all drag and drop objects" ilk="function" line="210" lineend="220" name="_execOnAll" signature="_execOnAll(sMethod, args)">
                <variable ilk="argument" name="sMethod" />
                <variable ilk="argument" name="args" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.ids[i][j]" line="213" name="oDD" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Drag and drop initialization.  Sets up the global event handlers" ilk="function" line="228" lineend="239" name="_onLoad" signature="_onLoad()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Reset constraints on all drag and drop objs" ilk="function" line="247" lineend="249" name="_onResize" signature="_onResize(e)">
                <variable ilk="argument" name="e" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Lock all drag and drop functionality" ilk="function" line="256" lineend="256" name="lock" signature="lock()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Unlock all drag and drop functionality" ilk="function" line="263" lineend="263" name="unlock" signature="unlock()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Is drag and drop locked?" ilk="function" line="271" lineend="271" name="isLocked" returns="Boolean" signature="isLocked()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Location cache that is set for all drag drop objects when a drag is&#xA;initiated, cleared when the drag is finished." line="280" lineend="280" name="locationCache" />
              <variable attributes="__static__" citdl="Boolean" doc="STATIC: Set useCache to false if you want to force object the lookup of each&#xA;drag and drop linked element constantly during a drag." line="289" name="useCache" />
              <variable attributes="__static__" citdl="Number" doc="STATIC: The number of pixels that the mouse needs to move after the&#xA;mousedown before the drag is initiated.  Default=3;" line="298" name="clickPixelThresh" />
              <variable attributes="__static__" citdl="Number" doc="STATIC: The number of milliseconds after the mousedown event to initiate the&#xA;drag if we don&apos;t get a mouseup event. Default=1000" line="307" name="clickTimeThresh" />
              <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Flag that indicates that either the drag pixel threshold or the&#xA;mousdown time threshold has been met" line="317" name="dragThreshMet" />
              <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Timeout used for the click time threshold" line="326" name="clickTimeout" />
              <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: The X position of the mousedown event stored for later use when a&#xA;drag threshold is met." line="336" name="startX" />
              <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: The Y position of the mousedown event stored for later use when a&#xA;drag threshold is met." line="346" name="startY" />
              <scope attributes="__static__" doc="STATIC: Each DragDrop instance must be registered with the DragDropMgr.&#xA;This is executed in DragDrop.init()" ilk="function" line="356" lineend="363" name="regDragDrop" signature="regDragDrop(oDD, sGroup)">
                <variable citdl="DragDrop" doc="the DragDrop object to register" ilk="argument" name="oDD" />
                <variable citdl="String" doc="the name of the group this element belongs to" ilk="argument" name="sGroup" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Removes the supplied dd instance from the supplied group. Executed&#xA;by DragDrop.removeFromGroup, so don&apos;t call this function directly." ilk="function" line="372" lineend="381" name="removeDDFromGroup" signature="removeDDFromGroup(oDD, sGroup)">
                <variable ilk="argument" name="oDD" />
                <variable ilk="argument" name="sGroup" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.ids[sGroup]" line="377" name="obj" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Unregisters a drag and drop item.  This is executed in&#xA;DragDrop.unreg, use that method instead of calling this directly." ilk="function" line="390" lineend="397" name="_remove" signature="_remove(oDD)">
                <variable ilk="argument" name="oDD" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Each DragDrop handle element must be registered.  This is done&#xA;automatically when executing DragDrop.setHandleElId()" ilk="function" line="408" lineend="413" name="regHandle" signature="regHandle(sDDId, sHandleId)">
                <variable citdl="String" doc="the DragDrop id this element is a handle for" ilk="argument" name="sDDId" />
                <variable citdl="String" doc="the id of the element that is the drag&#xA;handle" ilk="argument" name="sHandleId" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Utility function to determine if a given element has been&#xA;registered as a drag drop item." ilk="function" line="424" lineend="426" name="isDragDrop" returns="Boolean" signature="isDragDrop(id)">
                <variable citdl="String" doc="the element id to check" ilk="argument" name="id" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns the drag and drop instances that are in all groups the&#xA;passed in instance belongs to." ilk="function" line="437" lineend="452" name="getRelated" returns="Array" signature="getRelated(p_oDD, bTargetsOnly)">
                <variable citdl="DragDrop" doc="the obj to get related data for" ilk="argument" name="p_oDD" />
                <variable citdl="Boolean" doc="if true, only return targetable objs" ilk="argument" name="bTargetsOnly" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="Array" line="438" name="oDDs" />
                <variable attributes="__local__ private" citdl="this.ids[i][j]" line="441" name="dd" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns true if the specified dd target is a legal target for&#xA;the specifice drag obj" ilk="function" line="464" lineend="473" name="isLegalTarget" returns="Boolean" signature="isLegalTarget(oDD, oTargetDD)">
                <variable ilk="argument" name="oDD" />
                <variable ilk="argument" name="oTargetDD" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.getRelated()" line="465" name="targets" />
              </scope>
              <scope attributes="__static__" doc="STATIC: My goal is to be able to transparently determine if an object is&#xA;typeof DragDrop, and the exact subclass of DragDrop.  typeof&#xA;returns &quot;object&quot;, oDD.constructor.toString() always returns&#xA;&quot;DragDrop&quot; and not the name of the subclass.  So for now it just&#xA;evaluates a well-known variable in DragDrop." ilk="function" line="486" lineend="488" name="isTypeOfDD" returns="Boolean" signature="isTypeOfDD(oDD)">
                <variable ilk="argument" name="oDD" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Utility function to determine if a given element has been&#xA;registered as a drag drop handle for the given Drag Drop object." ilk="function" line="499" lineend="502" name="isHandle" returns="Boolean" signature="isHandle(sDDId, sHandleId)">
                <variable ilk="argument" name="sDDId" />
                <variable ilk="argument" name="sHandleId" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns the DragDrop instance for a given id" ilk="function" line="511" lineend="518" name="getDDById" returns="DragDrop" signature="getDDById(id)">
                <variable citdl="String" doc="the id of the DragDrop object" ilk="argument" name="id" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Fired after a registered DragDrop object gets the mousedown event.&#xA;Sets up the events required to track the object being dragged" ilk="function" line="529" lineend="552" name="handleMouseDown" signature="handleMouseDown(e, oDD)">
                <variable citdl="Event" doc="the event" ilk="argument" name="e" />
                <variable doc="the DragDrop object being dragged" ilk="argument" name="oDD" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="oDD.getEl()" line="535" name="el" />
              </scope>
              <variable citdl="YAHOO.util.Event.getTarget()" line="531" name="currentTarget" />
              <scope attributes="__static__" doc="STATIC: Fired when either the drag pixel threshol or the mousedown hold&#xA;time threshold has been met." ilk="function" line="562" lineend="569" name="startDrag" signature="startDrag(x, y)">
                <variable citdl="Number" doc="the X position of the original mousedown" ilk="argument" name="x" />
                <variable citdl="Number" doc="the Y position of the original mousedown" ilk="argument" name="y" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Internal function to handle the mouseup event.  Will be invoked&#xA;from the context of the document." ilk="function" line="579" lineend="595" name="handleMouseUp" signature="handleMouseUp(e)">
                <variable citdl="Event" doc="the event" ilk="argument" name="e" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Utility to stop event propagation and event default, if these&#xA;features are turned on." ilk="function" line="604" lineend="612" name="stopEvent" signature="stopEvent(e)">
                <variable citdl="Event" doc="the event as returned by this.getEvent()" ilk="argument" name="e" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Internal function to clean up event handlers after the drag&#xA;operation is complete" ilk="function" line="622" lineend="636" name="stopDrag" signature="stopDrag(e)">
                <variable citdl="Event" doc="the event" ilk="argument" name="e" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Internal function to handle the mousemove event.  Will be invoked&#xA;from the context of the html element." ilk="function" line="653" lineend="684" name="handleMouseMove" returns="Boolean" signature="handleMouseMove(e)">
                <variable citdl="Event" doc="the event" ilk="argument" name="e" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="Math.abs()" line="667" name="diffX" />
                <variable attributes="__local__ private" citdl="Math.abs()" line="668" name="diffY" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Iterates over all of the DragDrop elements to find ones we are&#xA;hovering over or dropping on" ilk="function" line="695" lineend="840" name="fireEvents" signature="fireEvents(e, isDrop)">
                <variable citdl="Event" doc="the event" ilk="argument" name="e" />
                <variable citdl="Boolean" doc="is this a drop op or a mouseover op?" ilk="argument" name="isDrop" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.dragCurrent" line="696" name="dc" />
                <variable attributes="__local__ private" citdl="YAHOO.util.Event.getPageX()" line="704" name="x" />
                <variable attributes="__local__ private" citdl="YAHOO.util.Event.getPageY()" line="705" name="y" />
                <variable attributes="__local__ private" citdl="YAHOO.util.Point" line="706" name="pt" />
                <variable attributes="__local__ private" citdl="dc.getTargetCoord()" line="707" name="pos" />
                <variable attributes="__local__ private" citdl="dc.getDragEl()" line="708" name="el" />
                <variable attributes="__local__ private" citdl="Array" line="714" name="oldOvers" />
                <variable attributes="__local__ private" citdl="Array" line="716" name="outEvts" />
                <variable attributes="__local__ private" citdl="Array" line="717" name="overEvts" />
                <variable attributes="__local__ private" citdl="Array" line="718" name="dropEvts" />
                <variable attributes="__local__ private" citdl="Array" line="719" name="enterEvts" />
                <variable attributes="__local__ private" citdl="this.dragOvers[i]" line="726" name="ddo" />
                <variable attributes="__local__ private" citdl="this.ids[sGroup][i]" line="747" name="oDD" />
                <variable attributes="__local__ private" citdl="Number" line="815" name="len" />
              </scope>
              <variable citdl="Boolean" line="788" name="validDrop" />
              <scope attributes="__static__" doc="STATIC: Helper function for getting the best match from the list of drag&#xA;and drop objects returned by the drag and drop events when we are&#xA;in INTERSECT mode.  It returns either the first object that the&#xA;cursor is over, or the object that has the greatest overlap with&#xA;the dragged element." ilk="function" line="854" lineend="882" name="getBestMatch" returns="DragDrop" signature="getBestMatch(dds)">
                <variable citdl="Array" doc="The array of drag and drop objects&#xA;targeted" ilk="argument" name="dds" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="dds[0]" line="855" name="winner" />
                <variable attributes="__local__ private" citdl="dds.length" line="857" name="len" />
                <variable attributes="__local__ private" citdl="dds[i]" line="864" name="dd" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Refreshes the cache of the top-left and bottom-right points of the&#xA;drag and drop objects in the specified group(s).  This is in the&#xA;format that is stored in the drag and drop instance, so typical&#xA;usage is:&#xA;&lt;code&gt;&#xA;YAHOO.util.DragDropMgr.refreshCache(ddinstance.groups);&#xA;&lt;/code&gt;&#xA;Alternatively:&#xA;&lt;code&gt;&#xA;YAHOO.util.DragDropMgr.refreshCache({group1:true, group2:true});&#xA;&lt;/code&gt;" ilk="function" line="902" lineend="924" name="refreshCache" signature="refreshCache(groups)">
                <variable citdl="Object" doc="an associative array of groups to refresh" ilk="argument" name="groups" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="groups" line="905" name="g" />
                <variable attributes="__local__ private" citdl="this.ids[sGroup][i]" line="912" name="oDD" />
                <variable attributes="__local__ private" citdl="this.getLocation()" line="915" name="loc" />
              </scope>
              <scope attributes="__static__" doc="STATIC: This checks to make sure an element exists and is in the DOM.  The&#xA;main purpose is to handle cases where innerHTML is used to remove&#xA;drag and drop objects from the DOM.  IE provides an &apos;unspecified&#xA;error&apos; when trying to access the offsetParent of such an element" ilk="function" line="936" lineend="948" name="verifyEl" returns="Boolean" signature="verifyEl(el)">
                <variable citdl="HTMLElement" doc="the element to check" ilk="argument" name="el" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="el.offsetParent" line="939" name="parent" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns a Region object containing the drag and drop element&apos;s position&#xA;and size, including the padding configured for it" ilk="function" line="961" lineend="987" name="getLocation" returns="YAHOO.util.Region" signature="getLocation(oDD)">
                <variable citdl="DragDrop" doc="the drag and drop object to get the&#xA;location for" ilk="argument" name="oDD" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="oDD.getEl()" line="966" name="el" />
                <variable attributes="__local__ private" citdl="y1" line="966" name="y2" />
                <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getXY()" line="966" name="pos" />
                <variable attributes="__local__ private" citdl="x1" line="966" name="l" />
                <variable attributes="__local__ private" citdl="pos[1]" line="966" name="y1" />
                <variable attributes="__local__ private" citdl="x2" line="966" name="r" />
                <variable attributes="__local__ private" citdl="y1" line="966" name="t" />
                <variable attributes="__local__ private" citdl="x1" line="966" name="x2" />
                <variable attributes="__local__ private" citdl="pos[0]" line="966" name="x1" />
                <variable attributes="__local__ private" citdl="y2" line="966" name="b" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Checks the cursor location to see if it over the target" ilk="function" line="1000" lineend="1053" name="isOverTarget" returns="Boolean" signature="isOverTarget(pt, oTarget, intersect, curRegion)">
                <variable citdl="YAHOO.util.Point" doc="The point to evaluate" ilk="argument" name="pt" />
                <variable citdl="DragDrop" doc="the DragDrop object we are inspecting" ilk="argument" name="oTarget" />
                <variable citdl="Boolean" doc="true if we are in intersect mode" ilk="argument" name="intersect" />
                <variable ilk="argument" name="curRegion" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.locationCache[oTarget.id]" line="1002" name="loc" />
                <variable attributes="__local__ private" citdl="this.dragCurrent" line="1021" name="dc" />
                <variable attributes="__local__ private" citdl="dc.getTargetCoord()" line="1037" name="pos" />
                <variable attributes="__local__ private" citdl="dc.getDragEl()" line="1038" name="el" />
                <variable attributes="__local__ private" citdl="curRegion.intersect()" line="1045" name="overlap" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: unload event handler" ilk="function" line="1061" lineend="1063" name="_onUnload" signature="_onUnload(e, me)">
                <variable ilk="argument" name="e" />
                <variable ilk="argument" name="me" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Cleans up the drag and drop events and objects." ilk="function" line="1071" lineend="1086" name="unregAll" signature="unregAll()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <variable citdl="Object" line="1084" lineend="1094" name="elementCache" />
              <scope attributes="deprecated private __static__" doc="DEPRECATED PRIVATE STATIC: Get the wrapper for the DOM element specified" ilk="function" line="1105" lineend="1112" name="getElWrapper" returns="YAHOO.util.DDM.ElementWrapper" signature="getElWrapper(id)">
                <variable citdl="String" doc="the id of the element to get" ilk="argument" name="id" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.elementCache[id]" line="1106" name="oWrapper" />
              </scope>
              <variable line="1109" name="elementCache[id]" />
              <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the actual DOM element" ilk="function" line="1122" lineend="1124" name="getElement" returns="Object" signature="getElement(id)">
                <variable citdl="String" doc="the id of the elment to get" ilk="argument" name="id" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the style property for the DOM element (i.e.,&#xA;document.getElById(id).style)" ilk="function" line="1135" lineend="1138" name="getCss" returns="Object" signature="getCss(id)">
                <variable citdl="String" doc="the id of the elment to get" ilk="argument" name="id" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="YAHOO.util.Dom.get()" line="1136" name="el" />
              </scope>
              <scope ilk="class" line="1147" lineend="1163" name="ElementWrapper">
                <scope attributes="__ctor__ deprecated private" doc="DEPRECATED PRIVATE: Inner class for cached elements" ilk="function" line="1147" lineend="1163" name="ElementWrapper" signature="ElementWrapper(el)">
                  <variable ilk="argument" name="el" />
                  <variable citdl="ElementWrapper" name="this" />
                </scope>
                <variable citdl="el" doc="The element" line="1152" name="el" />
                <variable citdl="this.el" doc="The element id" line="1157" name="id" />
                <variable citdl="this.el" doc="A reference to the style property" line="1162" name="css" />
              </scope>
              <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the X position of an html element" ilk="function" line="1174" lineend="1176" name="getPosX" returns="Number" signature="getPosX(el)">
                <variable doc="the element for which to get the position" ilk="argument" name="el" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the Y position of an html element" ilk="function" line="1186" lineend="1188" name="getPosY" returns="Number" signature="getPosY(el)">
                <variable doc="the element for which to get the position" ilk="argument" name="el" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Swap two nodes.  In IE, we use the native method, for others we&#xA;emulate the IE behavior" ilk="function" line="1198" lineend="1214" name="swapNode" signature="swapNode(n1, n2)">
                <variable doc="the first node to swap" ilk="argument" name="n1" />
                <variable doc="the other node to swap" ilk="argument" name="n2" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="n2.parentNode" line="1202" name="p" />
                <variable attributes="__local__ private" citdl="n2.nextSibling" line="1203" name="s" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Returns the current scroll position" ilk="function" line="1222" lineend="1233" name="getScroll" signature="getScroll()">
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="document.body" line="1223" name="db" />
                <variable attributes="__local__ private" citdl="dde.scrollTop" line="1223" name="t" />
                <variable attributes="__local__ private" citdl="document.documentElement" line="1223" name="dde" />
                <variable attributes="__local__ private" citdl="dde.scrollLeft" line="1223" name="l" />
              </scope>
              <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the specified element style property" ilk="function" line="1244" lineend="1246" name="getStyle" returns="String" signature="getStyle(el, styleProp)">
                <variable citdl="HTMLElement" doc="the element" ilk="argument" name="el" />
                <variable citdl="String" doc="the style property" ilk="argument" name="styleProp" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Gets the scrollTop" ilk="function" line="1254" lineend="1254" name="getScrollTop" returns="Number" signature="getScrollTop()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Gets the scrollLeft" ilk="function" line="1262" lineend="1262" name="getScrollLeft" returns="Number" signature="getScrollLeft()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Sets the x/y position of an element to the location of the&#xA;target element." ilk="function" line="1272" lineend="1275" name="moveToEl" signature="moveToEl(moveEl, targetEl)">
                <variable citdl="HTMLElement" doc="The element to move" ilk="argument" name="moveEl" />
                <variable citdl="HTMLElement" doc="The position reference element" ilk="argument" name="targetEl" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getXY()" line="1273" name="aCoord" />
              </scope>
              <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Gets the client height" ilk="function" line="1284" lineend="1286" name="getClientHeight" returns="Number" signature="getClientHeight()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Gets the client width" ilk="function" line="1295" lineend="1297" name="getClientWidth" returns="Number" signature="getClientWidth()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Numeric array sort function" ilk="function" line="1304" lineend="1304" name="numericSort" signature="numericSort(a, b)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="b" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Internal counter" line="1312" name="_timeoutCount" />
              <scope attributes="private __static__" doc="PRIVATE STATIC: Trying to make the load order less important.  Without this we get&#xA;an error if this file is loaded before the Event Utility." ilk="function" line="1321" lineend="1334" name="_addListeners" signature="_addListeners()">
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="YAHOO.util.DDM" line="1322" name="DDM" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Recursively searches the immediate parent and all child nodes for&#xA;the handle element in order to determine wheter or not it was&#xA;clicked." ilk="function" line="1344" lineend="1361" name="handleWasClicked" returns="Boolean" signature="handleWasClicked(node, id)">
                <variable doc="the html element to inspect" ilk="argument" name="node" />
                <variable ilk="argument" name="id" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="node.parentNode" line="1349" name="p" />
              </scope>
            </variable>
          </scope>
          <scope classrefs="Object" ilk="class" line="34" lineend="432" name="Anim">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The animation module provides allows effects to be added to HTMLElements." ilk="function" line="34" lineend="38" name="Anim" signature="Anim(el, attributes, duration, method)">
              <variable ilk="argument" name="el" />
              <variable citdl="Object" doc="The attribute(s) to be animated.&#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.&#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).&#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
              <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
              <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
              <variable citdl="Anim" name="this" />
            </scope>
            <scope doc="Provides a readable name for the Anim instance." ilk="function" line="46" lineend="50" name="toString" returns="String" signature="toString()">
              <variable citdl="Anim" name="this" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="47" name="el" />
              <variable attributes="__local__ private" citdl="el.id" line="48" name="id" />
            </scope>
            <variable citdl="Object" line="52" lineend="57" name="patterns">
              <variable line="53" name="noNegatives" />
              <variable line="54" name="offsetAttribute" />
              <variable line="55" name="defaultUnit" />
            </variable>
            <scope doc="Returns the value computed by the animation&apos;s &quot;method&quot;." ilk="function" line="67" lineend="69" name="doMethod" returns="Number" signature="doMethod(attr, start, end)">
              <variable citdl="String" doc="The name of the attribute." ilk="argument" name="attr" />
              <variable citdl="Number" doc="The value this attribute should start from for this animation." ilk="argument" name="start" />
              <variable citdl="Number" doc="The value this attribute should end at for this animation." ilk="argument" name="end" />
              <variable citdl="Anim" name="this" />
            </scope>
            <scope doc="Applies a value to an attribute." ilk="function" line="78" lineend="84" name="setAttribute" signature="setAttribute(attr, val, unit)">
              <variable citdl="String" doc="The name of the attribute." ilk="argument" name="attr" />
              <variable citdl="Number" doc="The value to be applied to the attribute." ilk="argument" name="val" />
              <variable citdl="String" doc="The unit (&apos;px&apos;, &apos;%&apos;, etc.) of the value." ilk="argument" name="unit" />
              <variable citdl="Anim" name="this" />
            </scope>
            <scope doc="Returns current value of the attribute." ilk="function" line="92" lineend="112" name="getAttribute" returns="Number" signature="getAttribute(attr)">
              <variable citdl="String" doc="The name of the attribute." ilk="argument" name="attr" />
              <variable citdl="Anim" name="this" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="93" name="el" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getStyle()" line="94" name="val" />
              <variable attributes="__local__ private" citdl="this.patterns.offsetAttribute.exec()" line="100" name="a" />
              <variable attributes="__local__ private" line="101" name="pos" />
              <variable attributes="__local__ private" line="102" name="box" />
            </scope>
            <scope doc="Returns the unit to use when none is supplied." ilk="function" line="120" lineend="126" name="getDefaultUnit" returns="String" signature="getDefaultUnit(attr)">
              <variable citdl="attr" doc="The name of the attribute." ilk="argument" name="attr" />
              <variable citdl="Anim" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Sets the actual values to be used during the animation.  Should only be needed for subclass use." ilk="function" line="134" lineend="170" name="setRuntimeAttribute" returns="Boolean" signature="setRuntimeAttribute(attr)">
              <variable citdl="Object" doc="The attribute object" ilk="argument" name="attr" />
              <variable citdl="Anim" name="this" />
              <variable attributes="__local__ private" line="135" name="start" />
              <variable attributes="__local__ private" citdl="attributes[attr][&apos;to&apos;]" line="136" name="end" />
              <variable attributes="__local__ private" citdl="this.attributes" line="137" name="attributes" />
              <scope attributes="__local__ private" ilk="function" line="141" lineend="143" name="isset" signature="isset(prop)">
                <variable ilk="argument" name="prop" />
              </scope>
            </scope>
            <scope doc="Constructor for Anim instance." ilk="function" line="183" lineend="431" name="init" signature="init(el, attributes, duration, method)">
              <variable ilk="argument" name="el" />
              <variable citdl="Object" doc="The attribute(s) to be animated.&#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.&#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).&#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
              <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
              <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
              <variable citdl="Anim" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" doc="PRIVATE: Whether or not the animation is running." line="190" name="isAnimated" />
              <variable attributes="__local__ private" citdl="Date" doc="PRIVATE: A Date object that is created when the animation begins." line="198" name="startTime" />
              <variable attributes="__local__ private" citdl="Number" doc="PRIVATE: The number of frames this animation was able to execute." line="206" name="actualFrames" />
              <scope attributes="__local__ private" ilk="class" line="326" lineend="337" name="onStart">
                <scope attributes="__local__ private __ctor__" ilk="function" line="326" lineend="337" name="onStart" signature="onStart()">
                  <variable citdl="onStart" name="this" />
                </scope>
                <variable citdl="Object" line="329" lineend="329" name="runtimeAttributes" />
              </scope>
              <scope attributes="__local__ private" doc="PRIVATE: Feeds the starting and ending values for each animated attribute to doMethod once per frame, then applies the resulting value to the attribute(s)." ilk="function" line="344" lineend="366" name="onTween" signature="onTween()">
                <variable attributes="__local__ private" citdl="Object" line="345" lineend="348" name="data">
                  <variable citdl="Date" line="346" name="duration" />
                  <variable citdl="this.currentFrame" line="347" name="currentFrame" />
                  <scope ilk="function" line="350" lineend="355" name="toString" signature="toString()">
                    <variable citdl="data" name="this" />
                  </scope>
                </variable>
                <variable attributes="__local__ private" citdl="this.runtimeAttributes" line="359" name="runtimeAttributes" />
              </scope>
              <scope attributes="__local__ private" ilk="function" line="368" lineend="388" name="onComplete" signature="onComplete()">
                <variable attributes="__local__ private" line="369" name="actual_duration" />
                <variable attributes="__local__ private" citdl="Object" line="371" lineend="375" name="data">
                  <variable citdl="actual_duration" line="372" name="duration" />
                  <variable citdl="actualFrames" line="373" name="frames" />
                  <variable citdl="actualFrames" line="374" name="fps" />
                  <scope ilk="function" line="377" lineend="383" name="toString" signature="toString()">
                    <variable citdl="data" name="this" />
                  </scope>
                </variable>
              </scope>
            </scope>
            <variable citdl="Object" doc="The collection of attributes to be animated.&#xA;Each attribute must have at least a &quot;to&quot; or &quot;by&quot; defined in order to animate.&#xA;If &quot;to&quot; is supplied, the animation will end with the attribute at that value.&#xA;If &quot;by&quot; is supplied, the animation will end at that value plus its starting value.&#xA;If both are supplied, &quot;to&quot; is used, and &quot;by&quot; is ignored.&#xA;Optional additional member include &quot;from&quot; (the value the attribute should start animating from, defaults to current value), and &quot;unit&quot; (the units to apply to the values)." line="226" name="attributes" />
            <variable citdl="Number" doc="The length of the animation.  Defaults to &quot;1&quot; (second)." line="233" name="duration" />
            <variable citdl="Function" doc="The method that will provide values to the attribute(s) during the animation.&#xA;Defaults to &quot;YAHOO.util.Easing.easeNone&quot;." line="241" name="method" />
            <variable citdl="Boolean" doc="Whether or not the duration should be treated as seconds.&#xA;Defaults to true." line="249" name="useSeconds" />
            <variable citdl="Number" doc="The location of the current animation on the timeline.&#xA;In time-based animations, this is used by AnimMgr to ensure the animation finishes on time." line="257" name="currentFrame" />
            <variable citdl="Number" doc="The total number of frames to be executed.&#xA;In time-based animations, this is used by AnimMgr to ensure the animation finishes on time." line="265" name="totalFrames" />
            <scope doc="Returns a reference to the animated element." ilk="function" line="273" lineend="273" name="getEl" returns="HTMLElement" signature="getEl()">
              <variable citdl="Anim" name="this" />
            </scope>
            <scope doc="Checks whether the element is currently animated." ilk="function" line="280" lineend="282" name="isAnimated" returns="Boolean" signature="isAnimated()">
              <variable citdl="Anim" name="this" />
            </scope>
            <scope doc="Returns the animation start time." ilk="function" line="289" lineend="291" name="getStartTime" returns="Date" signature="getStartTime()">
              <variable citdl="Anim" name="this" />
            </scope>
            <variable citdl="Object" line="293" lineend="293" name="runtimeAttributes" />
            <scope doc="Starts the animation by registering it with the animation manager." ilk="function" line="301" lineend="311" name="animate" returns="Boolean" signature="animate()">
              <variable citdl="Anim" name="this" />
            </scope>
            <scope doc="Stops the animation.  Normally called by AnimMgr when animation completes." ilk="function" line="318" lineend="324" name="stop" signature="stop(finish)">
              <variable citdl="Boolean" doc="(optional) If true, animation will jump to final frame." ilk="argument" name="finish" />
              <variable citdl="Anim" name="this" />
            </scope>
            <variable attributes="private" citdl="YAHOO.util.CustomEvent" doc="PRIVATE: Custom event that fires after onStart, useful in subclassing" line="394" name="_onStart" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Custom event that fires when animation begins&#xA;Listen via subscribe method (e.g. myAnim.onStart.subscribe(someFunction)" line="401" name="onStart" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Custom event that fires between each frame&#xA;Listen via subscribe method (e.g. myAnim.onTween.subscribe(someFunction)" line="408" name="onTween" />
            <variable attributes="private" citdl="YAHOO.util.CustomEvent" doc="PRIVATE: Custom event that fires after onTween" line="414" name="_onTween" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Custom event that fires when animation ends&#xA;Listen via subscribe method (e.g. myAnim.onComplete.subscribe(someFunction)" line="421" name="onComplete" />
            <variable attributes="private" citdl="YAHOO.util.CustomEvent" doc="PRIVATE: Custom event that fires after onComplete" line="426" name="_onComplete" />
          </scope>
          <scope ilk="class" line="35" lineend="168" name="DataSource">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The DataSource utility provides a common configurable interface for widgets&#xA;to access a variety of data, from JavaScript arrays to online servers over&#xA;XHR." ilk="function" line="35" lineend="168" name="DataSource" signature="DataSource(oLiveData, oConfigs)">
              <variable citdl="Object" doc="Pointer to live database" ilk="argument" name="oLiveData" />
              <variable citdl="Object" doc="(optional) Object literal of configuration values" ilk="argument" name="oConfigs" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this.maxCacheEntries" line="68" name="maxCacheEntries" />
            </scope>
            <variable citdl="YAHOO.util.DataSource.TYPE_JSARRAY" line="50" name="dataType" />
            <variable citdl="oLiveData" line="65" name="liveData" />
            <variable citdl="Array" line="75" name="_aCache" />
            <variable citdl="String" line="78" name="_sName" />
            <variable attributes="constant" citdl="Number" doc="CONSTANT: Type is unknown." line="186" name="TYPE_UNKNOWN" />
            <variable attributes="constant" citdl="Number" doc="CONSTANT: Type is a JavaScript Array." line="196" name="TYPE_JSARRAY" />
            <variable attributes="constant" citdl="Number" doc="CONSTANT: Type is a JavaScript Function." line="206" name="TYPE_JSFUNCTION" />
            <variable attributes="constant" citdl="Number" doc="CONSTANT: Type is hosted on a server via an XHR connection." line="216" name="TYPE_XHR" />
            <variable attributes="constant" citdl="Number" doc="CONSTANT: Type is JSON." line="226" name="TYPE_JSON" />
            <variable attributes="constant" citdl="Number" doc="CONSTANT: Type is XML." line="236" name="TYPE_XML" />
            <variable attributes="constant" citdl="Number" doc="CONSTANT: Type is plain text." line="246" name="TYPE_TEXT" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: Error message for invalid data responses." line="255" name="ERROR_DATAINVALID" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: Error message for null data responses." line="265" name="ERROR_DATANULL" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: Internal class variable to index multiple DataSource instances." line="280" name="_nIndex" />
            <scope attributes="__static__" doc="STATIC: Converts data from String to Number objects." ilk="function" line="407" lineend="409" name="convertNumber" returns="Number" signature="convertNumber(sData)">
              <variable ilk="argument" name="sData" />
              <variable citdl="DataSource" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Converts data from String to Date objects." ilk="function" line="419" lineend="425" name="convertDate" returns="Date" signature="convertDate(sData)">
              <variable ilk="argument" name="sData" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="sMarkup.substring()" line="420" name="mm" />
              <variable attributes="__local__ private" citdl="sMarkup.substring()" line="422" name="dd" />
              <variable attributes="__local__ private" citdl="sMarkup.substring()" line="423" name="yy" />
            </scope>
            <scope doc="Public accessor to the unique name of the DataSource instance." ilk="function" line="439" lineend="441" name="toString" returns="String" signature="toString()">
              <variable citdl="DataSource" name="this" />
            </scope>
            <scope doc="Overridable method passes request to cache and returns cached response if any,&#xA;refreshing the hit in the cache as the newest item. Returns null if there is&#xA;no cache hit." ilk="function" line="454" lineend="482" name="getCachedResponse" returns="Object" signature="getCachedResponse(oRequest, oCallback, oCaller)">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Function" doc="Handler function to receive the response" ilk="argument" name="oCallback" />
              <variable citdl="Object" doc="The Calling object that is making the request" ilk="argument" name="oCaller" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this._aCache" line="455" name="aCache" />
              <variable attributes="__local__ private" line="456" name="nCacheLength" />
              <variable attributes="__local__ private" citdl="oCacheElem.response" line="457" name="oResponse" />
              <variable attributes="__local__ private" citdl="aCache[i]" line="465" name="oCacheElem" />
            </scope>
            <scope doc="Default overridable method matches given request to given cached request.&#xA;Returns true if is a hit, returns false otherwise.  Implementers should&#xA;override this method to customize the cache-matching algorithm." ilk="function" line="494" lineend="496" name="isCacheHit" returns="Boolean" signature="isCacheHit(oRequest, oCachedRequest)">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="Cached request object." ilk="argument" name="oCachedRequest" />
              <variable citdl="DataSource" name="this" />
            </scope>
            <scope doc="Adds a new item to the cache. If cache is full, evicts the stalest item&#xA;before adding the new item." ilk="function" line="506" lineend="523" name="addToCache" signature="addToCache(oRequest, oResponse)">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="Response object to cache." ilk="argument" name="oResponse" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this._aCache" line="507" name="aCache" />
              <variable attributes="__local__ private" citdl="Object" line="520" lineend="520" name="oCacheElem">
                <variable citdl="oRequest" line="520" name="request" />
                <variable citdl="oResponse" line="520" name="response" />
              </variable>
            </scope>
            <scope doc="Flushes cache." ilk="function" line="530" lineend="535" name="flushCache" signature="flushCache()">
              <variable citdl="DataSource" name="this" />
            </scope>
            <scope doc="First looks for cached response, then sends request to live data." ilk="function" line="545" lineend="555" name="sendRequest" signature="sendRequest(oRequest, oCallback, oCaller)">
              <variable citdl="Object" doc="Request object" ilk="argument" name="oRequest" />
              <variable citdl="Function" doc="Handler function to receive the response" ilk="argument" name="oCallback" />
              <variable citdl="Object" doc="The Calling object that is making the request" ilk="argument" name="oCaller" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this.getCachedResponse()" line="547" name="oCachedResponse" />
            </scope>
            <scope doc="Overridable method provides default functionality to make a connection to&#xA;live data in order to send request. The response coming back is then&#xA;forwarded to the handleResponse function. This method should be customized&#xA;for more complex implementations." ilk="function" line="568" lineend="678" name="makeConnection" signature="makeConnection(oRequest, oCallback, oCaller)">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Function" doc="Handler function to receive the response" ilk="argument" name="oCallback" />
              <variable citdl="Object" doc="The Calling object that is making the request" ilk="argument" name="oCaller" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this.liveData" line="570" name="oRawResponse" />
              <scope attributes="__local__ private" ilk="function" line="603" lineend="623" name="_xhrSuccess" signature="_xhrSuccess(oResponse)">
                <variable ilk="argument" name="oResponse" />
              </scope>
              <scope attributes="__local__ private" doc="PRIVATE: Connection Manager failure handler" ilk="function" line="632" lineend="639" name="_xhrFailure" signature="_xhrFailure(oResponse)">
                <variable citdl="Object" doc="HTTPXMLRequest object" ilk="argument" name="oResponse" />
              </scope>
              <variable attributes="__local__ private" citdl="Object" doc="PRIVATE: Connection Manager callback object" line="648" lineend="652" name="_xhrCallback">
                <variable citdl="_xhrSuccess" line="649" name="success" />
                <variable citdl="_xhrFailure" line="650" name="failure" />
                <variable citdl="this" line="651" name="scope" />
                <variable citdl="this.connTimeout" line="656" name="timeout" />
              </variable>
              <variable attributes="__local__ private" citdl="this.liveData" line="664" name="sUri" />
            </scope>
            <variable citdl="this.connMgr.asyncRequest()" line="666" name="_oConn" />
            <scope doc="Handles raw data response from live data source." ilk="function" line="689" lineend="739" name="handleResponse" signature="handleResponse(oRequest, oRawResponse, oCallback, oCaller)">
              <variable citdl="Object" doc="Request object" ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The raw response from the live database" ilk="argument" name="oRawResponse" />
              <variable citdl="Function" doc="Handler function to receive the response" ilk="argument" name="oCallback" />
              <variable citdl="Object" doc="The calling object that is making the request" ilk="argument" name="oCaller" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" line="691" name="xhr" />
              <variable attributes="__local__ private" citdl="this.parseArrayData()" line="692" name="oParsedResponse" />
            </scope>
            <scope doc="Overridable method parses raw array data into a response object." ilk="function" line="749" lineend="771" name="parseArrayData" returns="Object" signature="parseArrayData(oRequest, oRawResponse)">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The raw response from the live database" ilk="argument" name="oRawResponse" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="751" name="oParsedResponse" />
              <variable attributes="__local__ private" citdl="this.responseSchema.fields" line="752" name="fields" />
              <variable attributes="__local__ private" citdl="Object" line="754" lineend="754" name="oResult" />
              <variable attributes="__local__ private" citdl="fields[j]" line="756" name="field" />
              <variable attributes="__local__ private" citdl="field.key" line="757" name="key" />
              <variable attributes="__local__ private" citdl="oRawResponse[i][j]" line="758" name="data" />
            </scope>
            <scope doc="Overridable method parses raw plain text data into a response object." ilk="function" line="781" lineend="828" name="parseTextData" returns="Object" signature="parseTextData(oRequest, oRawResponse)">
              <variable citdl="Object" doc="Request object" ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The raw response from the live database" ilk="argument" name="oRawResponse" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="786" name="oParsedResponse" />
              <variable attributes="__local__ private" citdl="this.responseSchema.recordDelim" line="787" name="recDelim" />
              <variable attributes="__local__ private" citdl="this.responseSchema.fieldDelim" line="788" name="fieldDelim" />
              <variable attributes="__local__ private" citdl="this.responseSchema.fields" line="789" name="fields" />
              <variable attributes="__local__ private" citdl="oRawResponse.length" line="792" name="newLength" />
              <variable attributes="__local__ private" citdl="oRawResponse.split()" line="797" name="recordsarray" />
              <variable attributes="__local__ private" citdl="Object" line="800" lineend="800" name="oResult" />
              <variable attributes="__local__ private" citdl="recordsarray[i].split()" line="803" name="fielddataarray" />
              <variable attributes="__local__ private" citdl="fielddataarray[j]" line="806" name="data" />
              <variable attributes="__local__ private" citdl="fields[j]" line="813" name="field" />
              <variable attributes="__local__ private" citdl="field.key" line="814" name="key" />
            </scope>
            <scope doc="Overridable method parses raw XML data into a response object." ilk="function" line="838" lineend="886" name="parseXMLData" returns="Object" signature="parseXMLData(oRequest, oRawResponse)">
              <variable citdl="Object" doc="Request object" ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The raw response from the live database" ilk="argument" name="oRawResponse" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="839" name="bError" />
              <variable attributes="__local__ private" citdl="Array" line="840" name="oParsedResponse" />
              <variable attributes="__local__ private" line="841" name="xmlList" />
              <variable attributes="__local__ private" citdl="xmlList.item()" line="850" name="result" />
              <variable attributes="__local__ private" citdl="Object" line="851" lineend="851" name="oResult" />
              <variable attributes="__local__ private" citdl="this.responseSchema.fields[m]" line="854" name="field" />
              <variable attributes="__local__ private" citdl="field.key" line="855" name="key" />
              <variable attributes="__local__ private" citdl="xmlAttr.value" line="856" name="data" />
              <variable attributes="__local__ private" citdl="result.attributes.getNamedItem()" line="858" name="xmlAttr" />
              <variable attributes="__local__ private" citdl="result.getElementsByTagName()" line="864" name="xmlNode" />
            </scope>
            <scope doc="Overridable method parses raw JSON data into a response object." ilk="function" line="896" lineend="1004" name="parseJSONData" returns="Object" signature="parseJSONData(oRequest, oRawResponse)">
              <variable citdl="Object" doc="Request object" ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The raw response from the live database" ilk="argument" name="oRawResponse" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this.responseSchema.fields" line="898" name="fields" />
              <variable attributes="__local__ private" citdl="Boolean" line="899" name="bError" />
              <variable attributes="__local__ private" citdl="Array" line="900" name="oParsedResponse" />
              <variable attributes="__local__ private" citdl="oRawResponse.parseJSON()" line="901" name="jsonObj" />
              <variable attributes="__local__ private" citdl="eval()" line="901" name="jsonList" />
              <variable attributes="__local__ private" line="906" name="isNotMac" />
              <variable attributes="__local__ private" citdl="Math.max()" line="934" name="objEnd" />
              <variable attributes="__local__ private" citdl="Object" line="979" lineend="979" name="oResult" />
              <variable attributes="__local__ private" citdl="jsonList[i]" line="980" name="jsonResult" />
              <variable attributes="__local__ private" citdl="fields[j]" line="983" name="field" />
              <variable attributes="__local__ private" citdl="field.key" line="984" name="key" />
              <variable attributes="__local__ private" citdl="eval()" line="987" name="data" />
            </scope>
          </scope>
          <variable citdl="Object" doc="Provides helper methods for DOM elements." line="130" lineend="730" name="Dom">
            <scope doc="Returns an HTMLElement reference." ilk="function" line="137" lineend="156" name="get" returns="HTMLElement" signature="get(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="143" name="c" />
            </scope>
            <scope doc="Normalizes currentStyle and ComputedStyle." ilk="function" line="165" lineend="173" name="getStyle" returns="String" signature="getStyle(el, property)">
              <variable ilk="argument" name="el" />
              <variable citdl="String" doc="The style property whose value is returned." ilk="argument" name="property" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="168" lineend="170" name="f" returns="getStyle()" signature="f(element)">
                <variable ilk="argument" name="element" />
              </scope>
            </scope>
            <scope doc="Wrapper for setting style properties of HTMLElements.  Normalizes &quot;opacity&quot; across modern browsers." ilk="function" line="182" lineend="191" name="setStyle" signature="setStyle(el, property, val)">
              <variable ilk="argument" name="el" />
              <variable citdl="String" doc="The style property to be set." ilk="argument" name="property" />
              <variable citdl="String" doc="The value to apply to the given property." ilk="argument" name="val" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="185" lineend="188" name="f" signature="f(element)">
                <variable ilk="argument" name="element" />
              </scope>
            </scope>
            <scope doc="Gets the current position of an element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="199" lineend="273" name="getXY" returns="Array" signature="getXY(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="class" line="200" lineend="270" name="f">
                <scope attributes="__local__ private __ctor__" ilk="function" line="200" lineend="270" name="f" returns="pos" signature="f(el)">
                  <variable ilk="argument" name="el" />
                  <variable citdl="f" name="this" />
                  <variable attributes="__local__ private" citdl="el.offsetParent" line="208" name="parentNode" />
                  <variable attributes="__local__ private" citdl="Array" line="209" name="pos" />
                  <variable attributes="__local__ private" citdl="el.getBoundingClientRect()" line="210" name="box" />
                  <variable attributes="__local__ private" citdl="document" line="214" name="doc" />
                  <variable attributes="__local__ private" citdl="Math.max()" line="224" name="scrollTop" />
                  <variable attributes="__local__ private" citdl="Math.max()" line="225" name="scrollLeft" />
                  <variable attributes="__local__ private" citdl="this.getStyle()" line="234" name="hasAbs" />
                </scope>
                <variable attributes="__local__ private" line="234" name="getStyle()" />
              </scope>
            </scope>
            <scope doc="Gets the current X position of an element based on page coordinates.  The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="281" lineend="287" name="getX" returns="String" signature="getX(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="282" lineend="284" name="f" returns="Y.Dom.getXY()[0]" signature="f(el)">
                <variable ilk="argument" name="el" />
              </scope>
            </scope>
            <scope doc="Gets the current Y position of an element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="295" lineend="301" name="getY" returns="String" signature="getY(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="296" lineend="298" name="f" returns="Y.Dom.getXY()[1]" signature="f(el)">
                <variable ilk="argument" name="el" />
              </scope>
            </scope>
            <scope doc="Set the position of an html element in page coordinates, regardless of how the element is positioned.&#xA;The element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="311" lineend="352" name="setXY" signature="setXY(el, pos, noRetry)">
              <variable ilk="argument" name="el" />
              <variable citdl="Array" doc="Contains X &amp; Y values for new position (coordinates are page-based)" ilk="argument" name="pos" />
              <variable citdl="Boolean" doc="By default we try and set the position a second time if the first fails" ilk="argument" name="noRetry" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="312" lineend="349" name="f" returns="Boolean" signature="f(el)">
                <variable ilk="argument" name="el" />
                <variable attributes="__local__ private" citdl="this.getStyle()" line="313" name="style_pos" />
                <variable attributes="__local__ private" citdl="this.getXY()" line="319" name="pageXY" />
                <variable attributes="__local__ private" citdl="Array" line="326" name="delta" />
                <variable attributes="__local__ private" citdl="this.getXY()" line="340" name="newXY" />
              </scope>
            </scope>
            <scope doc="Set the X position of an html element in page coordinates, regardless of how the element is positioned.&#xA;The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="361" lineend="363" name="setX" signature="setX(el, x)">
              <variable ilk="argument" name="el" />
              <variable citdl="Number" doc="The value to use as the X coordinate for the element(s)." ilk="argument" name="x" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope doc="Set the Y position of an html element in page coordinates, regardless of how the element is positioned.&#xA;The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="372" lineend="374" name="setY" signature="setY(el, y)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="y" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope doc="Returns the region position of the given element.&#xA;The element must be part of the DOM tree to have a region (display:none or elements not appended return false)." ilk="function" line="383" lineend="390" name="getRegion" returns="Region" signature="getRegion(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="384" lineend="387" name="f" returns="region" signature="f(el)">
                <variable ilk="argument" name="el" />
                <variable attributes="__local__ private" citdl="Y.Region.getRegion" line="385" name="region" />
              </scope>
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Returns the width of the client (viewport)." ilk="function" line="398" lineend="400" name="getClientWidth" returns="Number" signature="getClientWidth()">
              <variable citdl="Dom" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Returns the height of the client (viewport)." ilk="function" line="408" lineend="410" name="getClientHeight" returns="Number" signature="getClientHeight()">
              <variable citdl="Dom" name="this" />
            </scope>
            <scope doc="Returns a array of HTMLElements with the given class.&#xA;For optimized performance, include a tag and/or root node when possible." ilk="function" line="421" lineend="424" name="getElementsByClassName" returns="Array" signature="getElementsByClassName(className, tag, root)">
              <variable citdl="String" doc="The class name to match against" ilk="argument" name="className" />
              <variable citdl="String" doc="(optional) The tag name of the elements being collected" ilk="argument" name="tag" />
              <variable ilk="argument" name="root" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="422" lineend="422" name="method" returns="Y.Dom.hasClass()" signature="method(el)">
                <variable ilk="argument" name="el" />
              </scope>
            </scope>
            <scope doc="Determines whether an HTMLElement has the given className." ilk="function" line="433" lineend="441" name="hasClass" returns="Boolean" signature="hasClass(el, className)">
              <variable ilk="argument" name="el" />
              <variable citdl="String" doc="the class name to search for" ilk="argument" name="className" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="RegExp" line="434" name="re" />
              <scope attributes="__local__ private" ilk="function" line="436" lineend="438" name="f" returns="re.test()" signature="f(el)">
                <variable ilk="argument" name="el" />
              </scope>
            </scope>
            <scope doc="Adds a class name to a given element or collection of elements." ilk="function" line="449" lineend="458" name="addClass" signature="addClass(el, className)">
              <variable ilk="argument" name="el" />
              <variable citdl="String" doc="the class name to add to the class attribute" ilk="argument" name="className" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="450" lineend="455" name="f" signature="f(el)">
                <variable ilk="argument" name="el" />
              </scope>
            </scope>
            <scope doc="Removes a class name from a given element or collection of elements." ilk="function" line="466" lineend="484" name="removeClass" signature="removeClass(el, className)">
              <variable ilk="argument" name="el" />
              <variable citdl="String" doc="the class name to remove from the class attribute" ilk="argument" name="className" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="RegExp" line="467" name="re" />
              <scope attributes="__local__ private" ilk="function" line="469" lineend="481" name="f" signature="f(el)">
                <variable ilk="argument" name="el" />
                <variable attributes="__local__ private" citdl="el.className" line="475" name="c" />
              </scope>
            </scope>
            <scope doc="Replace a class with another class for a given element or collection of elements.&#xA;If no oldClassName is present, the newClassName is simply added." ilk="function" line="494" lineend="516" name="replaceClass" returns="Boolean" signature="replaceClass(el, oldClassName, newClassName)">
              <variable ilk="argument" name="el" />
              <variable citdl="String" doc="the class name to be replaced" ilk="argument" name="oldClassName" />
              <variable citdl="String" doc="the class name that will be replacing the old class name" ilk="argument" name="newClassName" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="RegExp" line="499" name="re" />
              <scope attributes="__local__ private" ilk="function" line="501" lineend="513" name="f" signature="f(el)">
                <variable ilk="argument" name="el" />
              </scope>
            </scope>
            <scope doc="Generates a unique ID" ilk="function" line="525" lineend="545" name="generateId" returns="String" signature="generateId(el, prefix)">
              <variable ilk="argument" name="el" />
              <variable citdl="String" doc="(optional) an optional prefix to use (defaults to &quot;yui-gen&quot;)." ilk="argument" name="prefix" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="529" lineend="542" name="f" returns="el.id" signature="f(el)">
                <variable ilk="argument" name="el" />
              </scope>
            </scope>
            <scope doc="Determines whether an HTMLElement is an ancestor of another HTML element in the DOM hierarchy." ilk="function" line="554" lineend="583" name="isAncestor" returns="Boolean" signature="isAncestor(haystack, needle)">
              <variable ilk="argument" name="haystack" />
              <variable ilk="argument" name="needle" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="558" lineend="580" name="f" returns="Boolean" signature="f(needle)">
                <variable ilk="argument" name="needle" />
                <variable attributes="__local__ private" citdl="needle.parentNode" line="566" name="parent" />
              </scope>
            </scope>
            <scope doc="Determines whether an HTMLElement is present in the current document." ilk="function" line="591" lineend="597" name="inDocument" returns="Boolean" signature="inDocument(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="592" lineend="594" name="f" returns="this.isAncestor()" signature="f(el)">
                <variable ilk="argument" name="el" />
              </scope>
            </scope>
            <scope doc="Returns a array of HTMLElements that pass the test applied by supplied boolean method.&#xA;For optimized performance, include a tag and/or root node when possible." ilk="function" line="609" lineend="635" name="getElementsBy" returns="Array" signature="getElementsBy(method, tag, root)">
              <variable citdl="Function" doc="- A boolean method for testing elements which receives the element as its only argument." ilk="argument" name="method" />
              <variable citdl="String" doc="(optional) The tag name of the elements being collected" ilk="argument" name="tag" />
              <variable ilk="argument" name="root" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="612" name="nodes" />
              <variable attributes="__local__ private" citdl="root.getElementsByTagName()" line="623" name="elements" />
            </scope>
            <scope doc="Returns an array of elements that have had the supplied method applied.&#xA;The method is called with the element(s) as the first arg, and the optional param as the second ( method(el, o) )." ilk="function" line="647" lineend="670" name="batch" returns="HTMLElement" signature="batch(el, method, o, override)">
              <variable ilk="argument" name="el" />
              <variable citdl="Function" doc="The method to apply to the element(s)" ilk="argument" name="method" />
              <variable citdl="Any" doc="(optional) An optional arg that is passed to the supplied method" ilk="argument" name="o" />
              <variable citdl="Boolean" doc="(optional) Whether or not to override the scope of &quot;method&quot; with &quot;o&quot;" ilk="argument" name="override" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="el" line="648" name="id" />
              <variable attributes="__local__ private" line="651" name="scope" />
              <variable attributes="__local__ private" citdl="Array" line="660" name="collection" />
            </scope>
            <scope doc="Returns the height of the document." ilk="function" line="677" lineend="682" name="getDocumentHeight" returns="Number" signature="getDocumentHeight()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" line="678" name="scrollHeight" />
              <variable attributes="__local__ private" citdl="Math.max()" line="680" name="h" />
            </scope>
            <scope doc="Returns the width of the document." ilk="function" line="689" lineend="693" name="getDocumentWidth" returns="Number" signature="getDocumentWidth()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" line="690" name="scrollWidth" />
              <variable attributes="__local__ private" citdl="Math.max()" line="691" name="w" />
            </scope>
            <scope doc="Returns the current height of the viewport." ilk="function" line="700" lineend="711" name="getViewportHeight" returns="Number" signature="getViewportHeight()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="self.innerHeight" line="701" name="height" />
              <variable attributes="__local__ private" citdl="document.compatMode" line="702" name="mode" />
              <variable citdl="Object" line="707" name="document">
                <variable citdl="Object" line="707" name="body">
                  <variable line="707" name="clientHeight" />
                </variable>
              </variable>
            </scope>
            <scope doc="Returns the current width of the viewport." ilk="function" line="719" lineend="729" name="getViewportWidth" returns="Number" signature="getViewportWidth()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="self.innerWidth" line="720" name="width" />
              <variable attributes="__local__ private" citdl="document.compatMode" line="721" name="mode" />
              <variable citdl="Object" line="726" name="document">
                <variable citdl="Object" line="726" name="body">
                  <variable line="726" name="clientWidth" />
                </variable>
              </variable>
            </scope>
          </variable>
          <scope classrefs="Object" ilk="class" line="213" lineend="431" name="AttributeProvider">
            <scope attributes="__ctor__" doc="Provides and manages YAHOO.util.Attribute instances" ilk="function" line="213" lineend="213" name="AttributeProvider" signature="AttributeProvider()">
              <variable citdl="AttributeProvider" name="this" />
            </scope>
            <variable attributes="private" citdl="Object" doc="PRIVATE: A key-value map of Attribute configurations" line="224" name="_configs" />
            <scope doc="Returns the current value of the attribute." ilk="function" line="230" lineend="239" name="get" returns="config.value" signature="get(key)">
              <variable citdl="String" doc="The attribute whose value will be returned." ilk="argument" name="key" />
              <variable citdl="AttributeProvider" name="this" />
              <variable attributes="__local__ private" citdl="this._configs" line="231" name="configs" />
              <variable attributes="__local__ private" citdl="configs[key]" line="232" name="config" />
            </scope>
            <scope doc="Sets the value of a config." ilk="function" line="249" lineend="258" name="set" returns="Boolean" signature="set(key, value, silent)">
              <variable citdl="String" doc="The name of the attribute" ilk="argument" name="key" />
              <variable citdl="Any" doc="The value to apply to the attribute" ilk="argument" name="value" />
              <variable citdl="Boolean" doc="Whether or not to suppress change events" ilk="argument" name="silent" />
              <variable citdl="AttributeProvider" name="this" />
              <variable attributes="__local__ private" citdl="this._configs" line="250" name="configs" />
              <variable attributes="__local__ private" citdl="configs[key]" line="251" name="config" />
            </scope>
            <scope doc="Returns an array of attribute names." ilk="function" line="265" lineend="278" name="getAttributeKeys" returns="Array" signature="getAttributeKeys()">
              <variable citdl="AttributeProvider" name="this" />
              <variable attributes="__local__ private" citdl="this._configs" line="266" name="configs" />
              <variable attributes="__local__ private" citdl="Array" line="267" name="keys" />
              <variable attributes="__local__ private" citdl="configs[key]" line="268" name="config" />
            </scope>
            <scope doc="Sets multiple attribute values." ilk="function" line="286" lineend="292" name="setAttributes" signature="setAttributes(map, silent)">
              <variable citdl="Object" doc="A key-value map of attributes" ilk="argument" name="map" />
              <variable citdl="Boolean" doc="Whether or not to suppress change events" ilk="argument" name="silent" />
              <variable citdl="AttributeProvider" name="this" />
            </scope>
            <scope doc="Resets the specified attribute&apos;s value to its initial value." ilk="function" line="301" lineend="308" name="resetValue" returns="Boolean" signature="resetValue(key, silent)">
              <variable citdl="String" doc="The name of the attribute" ilk="argument" name="key" />
              <variable citdl="Boolean" doc="Whether or not to suppress change events" ilk="argument" name="silent" />
              <variable citdl="AttributeProvider" name="this" />
              <variable attributes="__local__ private" citdl="this._configs" line="302" name="configs" />
            </scope>
            <scope doc="Sets the attribute&apos;s value to its current value." ilk="function" line="316" lineend="330" name="refresh" signature="refresh(key, silent)">
              <variable ilk="argument" name="key" />
              <variable citdl="Boolean" doc="Whether or not to suppress change events" ilk="argument" name="silent" />
              <variable citdl="AttributeProvider" name="this" />
              <variable attributes="__local__ private" citdl="this._configs" line="317" name="configs" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Adds an Attribute to the AttributeProvider instance." ilk="function" line="340" lineend="342" name="register" signature="register(key, map)">
              <variable citdl="String" doc="The attribute&apos;s name" ilk="argument" name="key" />
              <variable citdl="Object" doc="A key-value map containing the&#xA;attribute&apos;s properties." ilk="argument" name="map" />
              <variable citdl="AttributeProvider" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Returns the attribute&apos;s properties." ilk="function" line="353" lineend="365" name="getAttributeConfig" returns="Object" signature="getAttributeConfig(key)">
              <variable citdl="String" doc="The attribute&apos;s name" ilk="argument" name="key" />
              <variable citdl="AttributeProvider" name="this" />
              <variable attributes="__local__ private" citdl="this._configs" line="354" name="configs" />
              <variable attributes="__local__ private" citdl="configs[key]" line="355" name="config" />
              <variable attributes="__local__ private" citdl="Object" line="356" lineend="356" name="map" />
            </scope>
            <scope doc="Sets or updates an Attribute instance&apos;s properties." ilk="function" line="374" lineend="383" name="setAttributeConfig" signature="setAttributeConfig(key, map, init)">
              <variable citdl="String" doc="The attribute&apos;s name." ilk="argument" name="key" />
              <variable citdl="Object" doc="A key-value map of attribute properties" ilk="argument" name="map" />
              <variable citdl="Boolean" doc="Whether or not this should become the intial config." ilk="argument" name="init" />
              <variable citdl="AttributeProvider" name="this" />
              <variable attributes="__local__ private" citdl="this._configs" line="375" name="configs" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Sets or updates an Attribute instance&apos;s properties." ilk="function" line="393" lineend="395" name="configureAttribute" signature="configureAttribute(key, map, init)">
              <variable citdl="String" doc="The attribute&apos;s name." ilk="argument" name="key" />
              <variable citdl="Object" doc="A key-value map of attribute properties" ilk="argument" name="map" />
              <variable citdl="Boolean" doc="Whether or not this should become the intial config." ilk="argument" name="init" />
              <variable citdl="AttributeProvider" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Resets an attribute to its intial configuration." ilk="function" line="403" lineend="406" name="resetAttributeConfig" signature="resetAttributeConfig(key)">
              <variable citdl="String" doc="The attribute&apos;s name." ilk="argument" name="key" />
              <variable citdl="AttributeProvider" name="this" />
              <variable attributes="__local__ private" citdl="this._configs" line="404" name="configs" />
            </scope>
            <scope doc="Fires the attribute&apos;s beforeChange event." ilk="function" line="414" lineend="419" name="fireBeforeChangeEvent" returns="this.fireEvent()" signature="fireBeforeChangeEvent(e)">
              <variable citdl="Object" doc="The event object to pass to handlers." ilk="argument" name="e" />
              <variable citdl="AttributeProvider" name="this" />
              <variable attributes="__local__ private" citdl="String" line="415" name="type" />
            </scope>
            <scope doc="Fires the attribute&apos;s change event." ilk="function" line="427" lineend="430" name="fireChangeEvent" returns="this.fireEvent()" signature="fireChangeEvent(e)">
              <variable citdl="Object" doc="The event object to pass to the handlers." ilk="argument" name="e" />
              <variable citdl="AttributeProvider" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="302" lineend="330" name="Subscriber">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Stores the subscriber information to be used when the event fires." ilk="function" line="302" lineend="330" name="Subscriber" signature="Subscriber(fn, obj, override)">
              <variable citdl="Function" doc="The function to execute" ilk="argument" name="fn" />
              <variable citdl="Object" doc="An object to be passed along when the event fires" ilk="argument" name="obj" />
              <variable citdl="Boolean" doc="If true, the obj passed in becomes the execution&#xA;scope of the listener" ilk="argument" name="override" />
              <variable citdl="Subscriber" name="this" />
            </scope>
            <variable citdl="Function" doc="The callback that will be execute when the event fires" line="309" name="fn" />
            <variable citdl="Object" doc="An optional custom object that will passed to the callback when&#xA;the event fires" line="317" name="obj" />
            <variable citdl="Boolean" doc="The default execution scope for the event listener is defined when the&#xA;event is created (usually the object which contains the event).&#xA;By setting override to true, the execution scope becomes the custom&#xA;object passed in by the subscriber.  If override is an object, that&#xA;object becomes the scope." line="328" name="override" />
            <scope doc="Returns the execution scope for this listener.  If override was set to true&#xA;the custom obj will be the scope.  If override is an object, that is the&#xA;scope, otherwise the default scope will be used." ilk="function" line="340" lineend="349" name="getScope" returns="defaultScope" signature="getScope(defaultScope)">
              <variable citdl="Object" doc="the scope to use if this listener does not&#xA;override it." ilk="argument" name="defaultScope" />
              <variable citdl="Subscriber" name="this" />
            </scope>
            <scope doc="Returns true if the fn and obj match this objects properties.&#xA;Used by the unsubscribe method to match the right subscriber." ilk="function" line="361" lineend="367" name="contains" returns="Boolean" signature="contains(fn, obj)">
              <variable citdl="Function" doc="the function to execute" ilk="argument" name="fn" />
              <variable citdl="Object" doc="an object to be passed along when the event fires" ilk="argument" name="obj" />
              <variable citdl="Subscriber" name="this" />
            </scope>
            <scope ilk="function" line="372" lineend="375" name="toString" returns="String" signature="toString()">
              <variable citdl="Subscriber" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="401" lineend="615" name="Event">
            <variable citdl="Object" line="401" lineend="1725" name="Event">
              <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: The number of times we should look for elements that are not&#xA;in the DOM at the time the event is requested after the document&#xA;has been loaded.  The default is 200@amp;50 ms, so it will poll&#xA;for 10 seconds or until all outstanding handlers are bound&#xA;(whichever comes first)." line="513" name="POLL_RETRYS" />
              <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: The poll interval in milliseconds" line="522" name="POLL_INTERVAL" />
              <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Element to bind, int constant" line="531" name="EL" />
              <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Type of event, int constant" line="540" name="TYPE" />
              <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Function to execute, int constant" line="549" name="FN" />
              <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Function wrapped for scope correction and cleanup, int constant" line="558" name="WFN" />
              <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Object passed in by the user that will be returned as a&#xA;parameter to the callback, int constant" line="568" name="OBJ" />
              <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Adjusted scope, either the element we are registering the event&#xA;on or the custom object passed in by the listener, int constant" line="578" name="ADJ_SCOPE" />
              <variable attributes="deprecated private __static__" doc="DEPRECATED PRIVATE STATIC: Safari detection is necessary to work around the preventDefault&#xA;bug that makes it so you can&apos;t cancel a href click from the&#xA;handler.  Since this function has been used outside of this&#xA;utility, it was changed to detect all KHTML browser to be more&#xA;friendly towards the non-Safari browsers that share the engine.&#xA;Internally, the preventDefault bug detection now uses the&#xA;webkit property." line="593" name="isSafari" />
              <variable attributes="__static__" citdl="String" doc="STATIC: If WebKit is detected, we keep track of the version number of&#xA;the engine.  The webkit property will contain a string with&#xA;the webkit version number if webkit is detected, null&#xA;otherwise.&#xA;Safari 1.3.2 (312.6): 312.8.1 &lt;-- currently the latest&#xA;available on Mac OSX 10.3.&#xA;Safari 2.0.2: 416 &lt;-- hasOwnProperty introduced&#xA;Safari 2.0.4: 418 &lt;-- preventDefault fixed (I believe)&#xA;Safari 2.0.4 (419.3): 418.9.1 &lt;-- current release&#xA;&#xA;http://developer.apple.com/internet/safari/uamatrix.html" line="611" name="webkit" />
              <variable attributes="private __static__" doc="PRIVATE STATIC: IE detection needed to properly calculate pageX and pageY.&#xA;capabilities checking didn&apos;t seem to work because another&#xA;browser that does not provide the properties have the values&#xA;calculated in a different manner than IE." line="629" name="isIE" />
              <variable attributes="private" citdl="setInterval()" doc="PRIVATE: poll handle" line="636" name="_interval" />
              <scope attributes="private __static__" ilk="function" line="643" lineend="649" name="startInterval" signature="startInterval()">
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" citdl="this" line="645" name="self" />
                <scope attributes="__local__ private" ilk="function" line="646" lineend="646" name="callback" signature="callback()" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Executes the supplied callback when the item with the supplied&#xA;id is found.  This is meant to be used to execute behavior as&#xA;soon as possible as the page loads.  If you use this after the&#xA;initial page load it will poll for a fixed time for the element.&#xA;The number of times it will poll and the frequency are&#xA;configurable.  By default it will poll for 10 seconds." ilk="function" line="670" lineend="678" name="onAvailable" signature="onAvailable(p_id, p_fn, p_obj, p_override)">
                <variable citdl="String" doc="the id of the element to look for." ilk="argument" name="p_id" />
                <variable citdl="Function" doc="what to execute when the element is found." ilk="argument" name="p_fn" />
                <variable citdl="Object" doc="an optional object to be passed back as&#xA;a parameter to p_fn." ilk="argument" name="p_obj" />
                <variable citdl="Boolean" doc="If set to true, p_fn will execute&#xA;in the scope of p_obj" ilk="argument" name="p_override" />
                <variable citdl="Event" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Executes the supplied callback when the DOM is first usable." ilk="function" line="694" lineend="696" name="onDOMReady" signature="onDOMReady(p_fn, p_obj, p_override)">
                <variable citdl="Function" doc="what to execute when the element is found." ilk="argument" name="p_fn" />
                <variable citdl="Object" doc="an optional object to be passed back as&#xA;a parameter to p_fn." ilk="argument" name="p_obj" />
                <variable ilk="argument" name="p_override" />
                <variable citdl="Event" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Works the same way as onAvailable, but additionally checks the&#xA;state of sibling elements to determine if the content of the&#xA;available element is safe to modify." ilk="function" line="714" lineend="723" name="onContentReady" signature="onContentReady(p_id, p_fn, p_obj, p_override)">
                <variable citdl="String" doc="the id of the element to look for." ilk="argument" name="p_id" />
                <variable citdl="Function" doc="what to execute when the element is ready." ilk="argument" name="p_fn" />
                <variable citdl="Object" doc="an optional object to be passed back as&#xA;a parameter to p_fn." ilk="argument" name="p_obj" />
                <variable citdl="Boolean" doc="If set to true, p_fn will execute&#xA;in the scope of p_obj" ilk="argument" name="p_override" />
                <variable citdl="Event" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Appends an event handler" ilk="function" line="744" lineend="868" name="addListener" returns="Boolean" signature="addListener(el, sType, fn, obj, override)">
                <variable citdl="Object" doc="The html element to assign the&#xA;event to" ilk="argument" name="el" />
                <variable citdl="String" doc="The type of event to append" ilk="argument" name="sType" />
                <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
                <variable citdl="Object" doc="An arbitrary object that will be&#xA;passed as a parameter to the handler" ilk="argument" name="obj" />
                <variable citdl="Boolean" doc="If true, the obj passed in becomes&#xA;the execution scope of the listener" ilk="argument" name="override" />
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" citdl="Boolean" line="753" name="ok" />
                <variable attributes="__local__ private" citdl="this.getEl()" line="764" name="oEl" />
                <variable attributes="__local__ private" citdl="el" line="804" name="scope" />
                <scope attributes="__local__ private" ilk="function" line="815" lineend="818" name="wrappedFn" returns="fn.call()" signature="wrappedFn(e)">
                  <variable ilk="argument" name="e" />
                </scope>
                <variable attributes="__local__ private" citdl="Array" line="820" name="li" />
                <variable attributes="__local__ private" citdl="listeners.length" line="821" name="index" />
                <variable attributes="__local__ private" citdl="this.getLegacyIndex()" line="826" name="legacyIndex" />
              </scope>
              <variable citdl="ex" line="860" name="lastError" />
              <scope attributes="private __static__" doc="PRIVATE STATIC: When using legacy events, the handler is routed to this object&#xA;so we can fire our custom listener stack." ilk="function" line="877" lineend="900" name="fireLegacyEvent" returns="ok" signature="fireLegacyEvent(e, legacyIndex)">
                <variable ilk="argument" name="e" />
                <variable ilk="argument" name="legacyIndex" />
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" citdl="legacyEvents[legacyIndex]" line="878" name="le" />
                <variable attributes="__local__ private" citdl="Boolean" line="878" name="ok" />
                <variable attributes="__local__ private" citdl="li[this.WFN].call()" line="878" name="ret" />
                <variable attributes="__local__ private" citdl="lh[i]" line="878" name="li" />
                <variable attributes="__local__ private" citdl="legacyHandlers[legacyIndex]" line="878" name="lh" />
                <variable attributes="__local__ private" citdl="li[this.ADJ_SCOPE]" line="878" name="scope" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Returns the legacy event index that matches the supplied&#xA;signature" ilk="function" line="909" lineend="916" name="getLegacyIndex" returns="legacyMap[key]" signature="getLegacyIndex(el, sType)">
                <variable ilk="argument" name="el" />
                <variable ilk="argument" name="sType" />
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" citdl="this.generateId()" line="910" name="key" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Logic that determines when we should automatically use legacy&#xA;events instead of DOM2 events.  Currently this is limited to old&#xA;Safari browsers with a broken preventDefault" ilk="function" line="926" lineend="934" name="useLegacyEvent" returns="Boolean" signature="useLegacyEvent(el, sType)">
                <variable ilk="argument" name="el" />
                <variable ilk="argument" name="sType" />
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" citdl="parseInt()" line="928" name="v" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Removes an event handler" ilk="function" line="951" lineend="1040" name="removeListener" returns="Boolean" signature="removeListener(el, sType, fn)">
                <variable citdl="Object" doc="the html element or the id of the element to&#xA;assign the event to." ilk="argument" name="el" />
                <variable citdl="String" doc="the type of event to remove." ilk="argument" name="sType" />
                <variable citdl="Function" doc="the method the event invokes.  If fn is&#xA;undefined, then all event handlers for the type of event are&#xA;removed." ilk="argument" name="fn" />
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" line="952" name="i" />
                <variable attributes="__local__ private" line="952" name="len" />
                <variable attributes="__local__ private" citdl="Boolean" line="959" name="ok" />
                <variable attributes="__local__ private" citdl="unloadListeners[i]" line="975" name="li" />
                <variable attributes="__local__ private" citdl="listeners[index]" line="988" name="cacheItem" />
                <variable attributes="__local__ private" citdl="arguments[3]" line="993" name="index" />
                <variable attributes="__local__ private" citdl="this.getLegacyIndex()" line="1009" name="legacyIndex" />
                <variable attributes="__local__ private" citdl="legacyHandlers[legacyIndex]" line="1010" name="llist" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns the event&apos;s target element" ilk="function" line="1053" lineend="1056" name="getTarget" returns="HTMLElement" signature="getTarget(ev, resolveTextNode)">
                <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
                <variable citdl="Boolean" doc="when set to true the target&apos;s&#xA;parent will be returned if the target is a&#xA;text node.  @deprecated, the text node is&#xA;now resolved automatically" ilk="argument" name="resolveTextNode" />
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" citdl="ev.target" line="1054" name="t" />
              </scope>
              <scope attributes="__static__" doc="STATIC: In some cases, some browsers will return a text node inside&#xA;the actual element that was targeted.  This normalizes the&#xA;return value for getTarget and getRelatedTarget." ilk="function" line="1067" lineend="1075" name="resolveTextNode" returns="HTMLElement" signature="resolveTextNode(node)">
                <variable citdl="HTMLElement" doc="node to resolve" ilk="argument" name="node" />
                <variable citdl="Event" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns the event&apos;s pageX" ilk="function" line="1084" lineend="1095" name="getPageX" returns="Number" signature="getPageX(ev)">
                <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" citdl="ev.pageX" line="1085" name="x" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns the event&apos;s pageY" ilk="function" line="1104" lineend="1116" name="getPageY" returns="Number" signature="getPageY(ev)">
                <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" citdl="ev.pageY" line="1105" name="y" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns the pageX and pageY properties as an indexed array." ilk="function" line="1125" lineend="1127" name="getXY" returns="Array" signature="getXY(ev)">
                <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
                <variable citdl="Event" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns the event&apos;s related target" ilk="function" line="1136" lineend="1147" name="getRelatedTarget" returns="HTMLElement" signature="getRelatedTarget(ev)">
                <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" citdl="ev.relatedTarget" line="1137" name="t" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns the time of the event.  If the time is not included, the&#xA;event is modified using the current time." ilk="function" line="1157" lineend="1169" name="getTime" returns="Date" signature="getTime(ev)">
                <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" citdl="Date" line="1159" name="t" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Convenience method for stopPropagation + preventDefault" ilk="function" line="1177" lineend="1180" name="stopEvent" signature="stopEvent(ev)">
                <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
                <variable citdl="Event" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Stops event propagation" ilk="function" line="1188" lineend="1194" name="stopPropagation" signature="stopPropagation(ev)">
                <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
                <variable citdl="Event" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Prevents the default behavior of the event" ilk="function" line="1202" lineend="1208" name="preventDefault" signature="preventDefault(ev)">
                <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
                <variable citdl="Event" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Finds the event in the window object, the caller&apos;s arguments, or&#xA;in the arguments of another method in the callstack.  This is&#xA;executed automatically for events registered through the event&#xA;manager, so the implementer should not normally need to execute&#xA;this function at all." ilk="function" line="1221" lineend="1236" name="getEvent" returns="Event" signature="getEvent(e)">
                <variable citdl="Event" doc="the event parameter from the handler" ilk="argument" name="e" />
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" citdl="e" line="1222" name="ev" />
                <variable attributes="__local__ private" citdl="this.getEvent.caller" line="1225" name="c" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns the charcode for an event" ilk="function" line="1245" lineend="1247" name="getCharCode" returns="Number" signature="getCharCode(ev)">
                <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
                <variable citdl="Event" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Locating the saved event handler data by function ref" ilk="function" line="1256" lineend="1268" name="_getCacheIndex" returns="Number" signature="_getCacheIndex(el, sType, fn)">
                <variable ilk="argument" name="el" />
                <variable ilk="argument" name="sType" />
                <variable ilk="argument" name="fn" />
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" citdl="listeners[i]" line="1258" name="li" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Generates an unique ID for the element if it does not already&#xA;have one." ilk="function" line="1278" lineend="1288" name="generateId" returns="String" signature="generateId(el)">
                <variable doc="the element to create the id for" ilk="argument" name="el" />
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" citdl="el.id" line="1279" name="id" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: We want to be able to use getElementsByTagName as a collection&#xA;to attach a group of events to.  Unfortunately, different&#xA;browsers return different types of collections.  This function&#xA;tests to determine if the object is array-like.  It will also&#xA;fail if the object is an array, but is empty." ilk="function" line="1303" lineend="1311" name="_isValidCollection" returns="Boolean" signature="_isValidCollection(o)">
                <variable doc="the object to test" ilk="argument" name="o" />
                <variable citdl="Event" name="this" />
              </scope>
              <variable attributes="deprecated private __static__" citdl="Object" doc="DEPRECATED PRIVATE STATIC: DOM element cache" line="1320" lineend="1320" name="elCache" />
              <scope attributes="deprecated private __static__" doc="DEPRECATED PRIVATE STATIC: We cache elements bound by id because when the unload event&#xA;fires, we can no longer use document.getElementById" ilk="function" line="1330" lineend="1332" name="getEl" returns="document.getElementById()" signature="getEl(id)">
                <variable ilk="argument" name="id" />
                <variable citdl="Event" name="this" />
              </scope>
              <scope attributes="deprecated private __static__" doc="DEPRECATED PRIVATE STATIC: Clears the element cache" ilk="function" line="1341" lineend="1341" name="clearCache" signature="clearCache()">
                <variable citdl="Event" name="this" />
              </scope>
              <variable citdl="YAHOO.util.CustomEvent" doc="Custom event the fires when the dom is initially usable" line="1347" name="DOMReadyEvent" />
              <scope attributes="private __static__" doc="PRIVATE STATIC: hook up any deferred listeners" ilk="function" line="1355" lineend="1369" name="_load" signature="_load(e)">
                <variable ilk="argument" name="e" />
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="1358" name="EU" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Fires the DOMReady event listeners the first time the document is&#xA;usable." ilk="function" line="1378" lineend="1389" name="_ready" signature="_ready(e)">
                <variable ilk="argument" name="e" />
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="1381" name="EU" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Polling function that runs before the onload event fires,&#xA;attempting to attach to DOM Nodes as soon as they are&#xA;available" ilk="function" line="1399" lineend="1486" name="_tryPreloadAttach" returns="Boolean" signature="_tryPreloadAttach()">
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" line="1417" name="tryAgain" />
                <variable attributes="__local__ private" citdl="Array" line="1423" name="notAvail" />
                <scope attributes="__local__ private" ilk="function" line="1425" lineend="1435" name="executeItem" signature="executeItem(el, item)">
                  <variable ilk="argument" name="el" />
                  <variable ilk="argument" name="item" />
                  <variable attributes="__local__ private" citdl="el" line="1426" name="scope" />
                </scope>
                <variable attributes="__local__ private" citdl="this.getEl()" line="1437" name="el" />
                <variable attributes="__local__ private" line="1437" name="i" />
                <variable attributes="__local__ private" line="1437" name="len" />
                <variable attributes="__local__ private" citdl="onAvailStack[i]" line="1437" name="item" />
              </scope>
              <variable citdl="Boolean" line="1410" name="locked" />
              <scope attributes="__static__" doc="STATIC: Removes all listeners attached to the given element via addListener.&#xA;Optionally, the node&apos;s children can also be purged.&#xA;Optionally, you can specify a specific type of event to remove." ilk="function" line="1500" lineend="1516" name="purgeElement" signature="purgeElement(el, recurse, sType)">
                <variable citdl="HTMLElement" doc="the element to purge" ilk="argument" name="el" />
                <variable citdl="Boolean" doc="recursively purge this element&apos;s children&#xA;as well.  Use with caution." ilk="argument" name="recurse" />
                <variable citdl="String" doc="optional type of listener to purge. If&#xA;left out, all listeners will be removed" ilk="argument" name="sType" />
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" citdl="this.getListeners()" line="1501" name="elListeners" />
                <variable attributes="__local__ private" citdl="elListeners[i]" line="1504" name="l" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns all listeners attached to the given element via addListener.&#xA;Optionally, you can specify a specific type of event to return." ilk="function" line="1533" lineend="1563" name="getListeners" returns="Object" signature="getListeners(el, sType)">
                <variable citdl="HTMLElement" doc="the element to inspect" ilk="argument" name="el" />
                <variable citdl="String" doc="optional type of listener to return. If&#xA;left out, all listeners will be returned" ilk="argument" name="sType" />
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" citdl="Array" line="1534" name="searchLists" />
                <variable attributes="__local__ private" citdl="Array" line="1534" name="results" />
                <variable attributes="__local__ private" citdl="searchLists[j]" line="1544" name="searchList" />
                <variable attributes="__local__ private" citdl="searchList[i]" line="1547" name="l" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Removes all listeners registered by pe.event.  Called&#xA;automatically during the unload event." ilk="function" line="1572" lineend="1626" name="_unload" signature="_unload(e)">
                <variable ilk="argument" name="e" />
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" citdl="j" line="1574" name="index" />
                <variable attributes="__local__ private" line="1574" name="i" />
                <variable attributes="__local__ private" citdl="listeners.length" line="1574" name="j" />
                <variable attributes="__local__ private" citdl="unloadListeners[i]" line="1574" name="l" />
                <variable attributes="__local__ private" line="1574" name="len" />
                <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="1574" name="EU" />
                <variable attributes="__local__ private" citdl="window" line="1579" name="scope" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Returns scrollLeft" ilk="function" line="1634" lineend="1636" name="_getScrollLeft" returns="this._getScroll()[1]" signature="_getScrollLeft()">
                <variable citdl="Event" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Returns scrollTop" ilk="function" line="1644" lineend="1646" name="_getScrollTop" returns="this._getScroll()[0]" signature="_getScrollTop()">
                <variable citdl="Event" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Returns the scrollTop and scrollLeft.  Used to calculate the&#xA;pageX and pageY in Internet Explorer" ilk="function" line="1655" lineend="1664" name="_getScroll" returns="Array" signature="_getScroll()">
                <variable citdl="Event" name="this" />
                <variable attributes="__local__ private" citdl="document.documentElement" line="1656" name="dd" />
                <variable attributes="__local__ private" citdl="document.body" line="1656" name="db" />
              </scope>
              <scope attributes="private" doc="PRIVATE: Used by old versions of CustomEvent, restored for backwards&#xA;compatibility" ilk="function" line="1672" lineend="1674" name="regCE" signature="regCE()">
                <variable citdl="Event" name="this" />
              </scope>
              <variable attributes="private __static__" doc="PRIVATE STATIC: Adds a DOM event directly without the caching, cleanup, scope adj, etc" line="1687" name="_simpleAdd" />
              <variable attributes="private __static__" doc="PRIVATE STATIC: Basic remove listener" line="1712" name="_simpleRemove" />
            </variable>
          </scope>
          <variable citdl="YAHOO.lang" line="413" name="Lang" />
          <scope ilk="class" line="440" lineend="578" name="AnimMgr">
            <scope attributes="__ctor__" doc="Handles animation queueing and threading.&#xA;Used by Anim and subclasses." ilk="function" line="440" lineend="609" name="AnimMgr" signature="AnimMgr()">
              <variable citdl="AnimMgr" name="this" />
              <variable attributes="__local__ private" citdl="Number" doc="PRIVATE: Reference to the animation Interval." line="447" name="thread" />
              <variable attributes="__local__ private" citdl="Array" doc="PRIVATE: The current queue of registered animation objects." line="455" name="queue" />
              <variable attributes="__local__ private" citdl="Number" doc="PRIVATE: The number of active animations." line="463" name="tweenCount" />
              <scope attributes="__local__ private" ilk="function" line="574" lineend="581" name="getIndex" returns="Number" signature="getIndex(anim)">
                <variable ilk="argument" name="anim" />
              </scope>
              <scope attributes="__local__ private" doc="PRIVATE: On the fly frame correction to keep animation on time." ilk="function" line="589" lineend="608" name="correctFrame" signature="correctFrame(tween)">
                <variable citdl="Object" doc="The Anim instance being corrected." ilk="argument" name="tween" />
                <variable attributes="__local__ private" citdl="tween.totalFrames" line="590" name="frames" />
                <variable attributes="__local__ private" citdl="tween.currentFrame" line="591" name="frame" />
                <variable attributes="__local__ private" line="592" name="expected" />
                <variable attributes="__local__ private" line="593" name="elapsed" />
                <variable attributes="__local__ private" citdl="Number" line="594" name="tweak" />
              </scope>
            </scope>
            <variable citdl="Number" doc="Base frame rate (frames per second).&#xA;Arbitrarily high for better x-browser calibration (slower browsers drop more frames)." line="472" name="fps" />
            <variable citdl="Number" doc="Interval delay in milliseconds, defaults to fastest possible." line="480" name="delay" />
            <scope doc="Adds an animation instance to the animation queue.&#xA;All animation instances must be registered in order to animate." ilk="function" line="488" lineend="493" name="registerElement" signature="registerElement(tween)">
              <variable citdl="Object" doc="The Anim instance to be be registered" ilk="argument" name="tween" />
              <variable citdl="AnimMgr" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: removes an animation instance from the animation queue.&#xA;All animation instances must be registered in order to animate." ilk="function" line="503" lineend="514" name="unRegister" signature="unRegister(tween, index)">
              <variable citdl="Object" doc="The Anim instance to be be registered" ilk="argument" name="tween" />
              <variable citdl="Number" doc="The index of the Anim instance" ilk="argument" name="index" />
              <variable citdl="AnimMgr" name="this" />
            </scope>
            <scope doc="Starts the animation thread.&#xA;Only one thread can run at a time." ilk="function" line="521" lineend="525" name="start" signature="start()">
              <variable citdl="AnimMgr" name="this" />
            </scope>
            <scope doc="Stops the animation thread or a specific animation instance." ilk="function" line="533" lineend="550" name="stop" signature="stop(tween)">
              <variable citdl="Object" doc="A specific Anim instance to stop (optional)&#xA;If no instance given, Manager stops thread and all animations." ilk="argument" name="tween" />
              <variable citdl="AnimMgr" name="this" />
            </scope>
            <scope doc="Called per Interval to handle each animation frame." ilk="function" line="556" lineend="572" name="run" signature="run()">
              <variable citdl="AnimMgr" name="this" />
              <variable attributes="__local__ private" citdl="queue[i]" line="558" name="tween" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="460" lineend="793" name="Element">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Element provides an wrapper object to simplify adding&#xA;event listeners, using dom methods, and managing attributes." ilk="function" line="460" lineend="464" name="Element" signature="Element(el, map)">
              <variable citdl="{HTMLElement" doc="| String} The html element that&#xA;represents the Element." ilk="argument" name="el" />
              <variable citdl="Object" doc="A key-value map of initial config names and values" ilk="argument" name="map" />
              <variable citdl="Element" name="this" />
            </scope>
            <variable citdl="Object" doc="Dom events supported by the Element instance." line="472" name="DOM_EVENTS" />
            <scope doc="Wrapper for HTMLElement method." ilk="function" line="479" lineend="482" name="appendChild" signature="appendChild(child)">
              <variable ilk="argument" name="child" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for HTMLElement method." ilk="function" line="489" lineend="491" name="getElementsByTagName" returns="this.get().getElementsByTagName()" signature="getElementsByTagName(tag)">
              <variable citdl="String" doc="The tagName to collect" ilk="argument" name="tag" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for HTMLElement method." ilk="function" line="498" lineend="500" name="hasChildNodes" returns="Boolean" signature="hasChildNodes()">
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for HTMLElement method." ilk="function" line="509" lineend="514" name="insertBefore" signature="insertBefore(element, before)">
              <variable citdl="HTMLElement" doc="The HTMLElement to insert" ilk="argument" name="element" />
              <variable citdl="HTMLElement" doc="The HTMLElement to insert&#xA;the element before." ilk="argument" name="before" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for HTMLElement method." ilk="function" line="521" lineend="525" name="removeChild" returns="Boolean" signature="removeChild(child)">
              <variable citdl="HTMLElement" doc="The HTMLElement to remove" ilk="argument" name="child" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for HTMLElement method." ilk="function" line="533" lineend="537" name="replaceChild" returns="this.get().replaceChild()" signature="replaceChild(newNode, oldNode)">
              <variable citdl="HTMLElement" doc="The HTMLElement to insert" ilk="argument" name="newNode" />
              <variable citdl="HTMLElement" doc="The HTMLElement to replace" ilk="argument" name="oldNode" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Registers Element specific attributes." ilk="function" line="545" lineend="546" name="initAttributes" signature="initAttributes(map)">
              <variable citdl="Object" doc="A key-value map of initial attribute configs" ilk="argument" name="map" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Adds a listener for the given event.  These may be DOM or&#xA;customEvent listeners.  Any event that is fired via fireEvent&#xA;can be listened for.  All handlers receive an event object." ilk="function" line="558" lineend="578" name="addListener" signature="addListener(type, fn, obj, scope)">
              <variable citdl="String" doc="The name of the event to listen for" ilk="argument" name="type" />
              <variable citdl="Function" doc="The handler to call when the event fires" ilk="argument" name="fn" />
              <variable citdl="Any" doc="A variable to pass to the handler" ilk="argument" name="obj" />
              <variable citdl="Object" doc="The object to use for the scope of the handler" ilk="argument" name="scope" />
              <variable citdl="Element" name="this" />
              <variable attributes="__local__ private" citdl="this.get()" line="559" name="el" />
              <variable attributes="__local__ private" citdl="this" line="563" name="self" />
            </scope>
            <scope doc="Alias for addListener" ilk="function" line="589" lineend="589" name="on" signature="on()">
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Remove an event listener" ilk="function" line="598" lineend="600" name="removeListener" signature="removeListener(type, fn)">
              <variable citdl="String" doc="The name of the event to listen for" ilk="argument" name="type" />
              <variable citdl="Function" doc="The function call when the event fires" ilk="argument" name="fn" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" line="607" lineend="609" name="addClass" signature="addClass(className)">
              <variable citdl="String" doc="The className to add" ilk="argument" name="className" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" line="619" lineend="622" name="getElementsByClassName" returns="Array" signature="getElementsByClassName(className, tag)">
              <variable citdl="String" doc="The className to collect" ilk="argument" name="className" />
              <variable citdl="String" doc="(optional) The tag to use in&#xA;conjunction with class name" ilk="argument" name="tag" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" line="630" lineend="632" name="hasClass" returns="Boolean" signature="hasClass(className)">
              <variable citdl="String" doc="The className to add" ilk="argument" name="className" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" line="639" lineend="641" name="removeClass" returns="Dom.removeClass()" signature="removeClass(className)">
              <variable citdl="String" doc="The className to remove" ilk="argument" name="className" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" line="649" lineend="652" name="replaceClass" returns="Dom.replaceClass()" signature="replaceClass(oldClassName, newClassName)">
              <variable citdl="String" doc="The className to replace" ilk="argument" name="oldClassName" />
              <variable citdl="String" doc="The className to add" ilk="argument" name="newClassName" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" line="660" lineend="667" name="setStyle" returns="Dom.setStyle()" signature="setStyle(property, value)">
              <variable citdl="String" doc="The style property to set" ilk="argument" name="property" />
              <variable citdl="String" doc="The value to apply to the style property" ilk="argument" name="value" />
              <variable citdl="Element" name="this" />
              <variable attributes="__local__ private" citdl="this.get()" line="661" name="el" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" line="675" lineend="677" name="getStyle" returns="String" signature="getStyle(property)">
              <variable citdl="String" doc="The style property to retrieve" ilk="argument" name="property" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Apply any queued set calls." ilk="function" line="683" lineend="688" name="fireQueue" signature="fireQueue()">
              <variable citdl="Element" name="this" />
              <variable attributes="__local__ private" citdl="this._queue" line="684" name="queue" />
            </scope>
            <scope doc="Appends the HTMLElement into either the supplied parentNode." ilk="function" line="696" lineend="730" name="appendTo" returns="Boolean" signature="appendTo(parent, before)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="before" />
              <variable citdl="Element" name="this" />
              <variable attributes="__local__ private" citdl="this.get()" line="707" name="element" />
            </scope>
            <scope ilk="function" line="732" lineend="740" name="get" returns="AttributeProvider.prototype.get.call()" signature="get(key)">
              <variable ilk="argument" name="key" />
              <variable citdl="Element" name="this" />
              <variable attributes="__local__ private" citdl="this._configs" line="733" name="configs" />
              <variable attributes="__local__ private" citdl="configs.element" line="734" name="el" />
            </scope>
            <scope ilk="function" line="742" lineend="759" name="set" returns="AttributeProvider.prototype.set.apply()" signature="set(key, value, silent)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="silent" />
              <variable citdl="Element" name="this" />
              <variable attributes="__local__ private" citdl="this.get()" line="743" name="el" />
            </scope>
            <scope ilk="function" line="761" lineend="769" name="setAttributeConfig" signature="setAttributeConfig(key, map, init)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="map" />
              <variable ilk="argument" name="init" />
              <variable citdl="Element" name="this" />
              <variable attributes="__local__ private" citdl="this.get()" line="762" name="el" />
            </scope>
            <scope ilk="function" line="771" lineend="783" name="getAttributeKeys" returns="keys" signature="getAttributeKeys()">
              <variable citdl="Element" name="this" />
              <variable attributes="__local__ private" citdl="this.get()" line="772" name="el" />
              <variable attributes="__local__ private" citdl="AttributeProvider.prototype.getAttributeKeys.call()" line="773" name="keys" />
            </scope>
            <scope ilk="function" line="785" lineend="788" name="createEvent" signature="createEvent(type, scope)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="scope" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope ilk="function" line="790" lineend="792" name="init" signature="init(el, attr)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="attr" />
              <variable citdl="Element" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="616" lineend="646" name="Bezier">
            <scope attributes="__ctor__" doc="Used to calculate Bezier splines for any number of control points." ilk="function" line="616" lineend="646" name="Bezier" signature="Bezier()">
              <variable citdl="Bezier" name="this" />
            </scope>
            <scope doc="Get the current position of the animated element based on t.&#xA;Each point is an array of &quot;x&quot; and &quot;y&quot; values (0 = x, 1 = y)&#xA;At least 2 points are required (start and end).&#xA;First point is start. Last point is end.&#xA;Additional control points are optional." ilk="function" line="628" lineend="645" name="getPosition" returns="Array" signature="getPosition(points, t)">
              <variable citdl="Array" doc="An array containing Bezier points" ilk="argument" name="points" />
              <variable citdl="Number" doc="A number between 0 and 1 which is the basis for determining current position" ilk="argument" name="t" />
              <variable citdl="Bezier" name="this" />
              <variable attributes="__local__ private" citdl="points.length" line="629" name="n" />
              <variable attributes="__local__ private" citdl="Array" line="630" name="tmp" />
            </scope>
          </scope>
          <scope ilk="class" line="670" lineend="672" name="ColorAnim">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Anim subclass for color transitions.&#xA;&lt;p&gt;Usage: &lt;code&gt;var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: &apos;#FF0000&apos;, to: &apos;#FFFFFF&apos; } }, 1, Y.Easing.easeOut);&lt;/code&gt; Color values can be specified with either 112233, #112233,&#xA;[255,255,255], or rgb(255,255,255)&lt;/p&gt;" ilk="function" line="670" lineend="672" name="ColorAnim" signature="ColorAnim(el, attributes, duration, method)">
              <variable ilk="argument" name="el" />
              <variable citdl="Object" doc="The attribute(s) to be animated.&#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.&#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).&#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
              <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
              <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
              <variable citdl="ColorAnim" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="744" lineend="787" name="Region">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A region is a representation of an object on a grid.  It is defined&#xA;by the top, right, bottom, left extents, so is rectangular by default.  If&#xA;other shapes are required, this class could be extended to support it." ilk="function" line="744" lineend="787" name="Region" signature="Region(t, r, b, l)">
              <variable citdl="Number" doc="the top extent" ilk="argument" name="t" />
              <variable citdl="Number" doc="the right extent" ilk="argument" name="r" />
              <variable citdl="Number" doc="the bottom extent" ilk="argument" name="b" />
              <variable citdl="Number" doc="the left extent" ilk="argument" name="l" />
              <variable citdl="Region" name="this" />
            </scope>
            <variable citdl="Number" doc="The region&apos;s top extent" line="751" name="top" />
            <variable citdl="Number" doc="The region&apos;s right extent" line="765" name="right" />
            <variable citdl="Number" doc="The region&apos;s bottom extent" line="772" name="bottom" />
            <variable citdl="Number" doc="The region&apos;s left extent" line="779" name="left" />
            <scope doc="Returns true if this region contains the region passed in" ilk="function" line="796" lineend="802" name="contains" returns="Boolean" signature="contains(region)">
              <variable citdl="Region" doc="The region to evaluate" ilk="argument" name="region" />
              <variable citdl="Region" name="this" />
            </scope>
            <scope doc="Returns the area of the region" ilk="function" line="809" lineend="811" name="getArea" returns="Number" signature="getArea()">
              <variable citdl="Region" name="this" />
            </scope>
            <scope doc="Returns the region where the passed in region overlaps with this one" ilk="function" line="819" lineend="830" name="intersect" returns="Region" signature="intersect(region)">
              <variable citdl="Region" doc="The region that intersects" ilk="argument" name="region" />
              <variable citdl="Region" name="this" />
              <variable attributes="__local__ private" citdl="Math.max()" line="820" name="t" />
              <variable attributes="__local__ private" citdl="Math.min()" line="821" name="r" />
              <variable attributes="__local__ private" citdl="Math.min()" line="822" name="b" />
              <variable attributes="__local__ private" citdl="Math.max()" line="823" name="l" />
            </scope>
            <scope doc="Returns the region representing the smallest region that can contain both&#xA;the passed in region and this region." ilk="function" line="839" lineend="846" name="union" returns="Region" signature="union(region)">
              <variable citdl="Region" doc="The region that to create the union with" ilk="argument" name="region" />
              <variable citdl="Region" name="this" />
              <variable attributes="__local__ private" citdl="Math.min()" line="840" name="t" />
              <variable attributes="__local__ private" citdl="Math.max()" line="841" name="r" />
              <variable attributes="__local__ private" citdl="Math.max()" line="842" name="b" />
              <variable attributes="__local__ private" citdl="Math.min()" line="843" name="l" />
            </scope>
            <scope doc="toString" ilk="function" line="853" lineend="860" name="toString" signature="toString()">
              <variable citdl="Region" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns a region that is occupied by the DOM element" ilk="function" line="869" lineend="878" name="getRegion" returns="Region" signature="getRegion(el)">
              <variable citdl="HTMLElement" doc="The element" ilk="argument" name="el" />
              <variable citdl="Region" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getXY()" line="870" name="p" />
              <variable attributes="__local__ private" citdl="p[1]" line="872" name="t" />
              <variable attributes="__local__ private" citdl="p[0]" line="873" name="r" />
              <variable attributes="__local__ private" citdl="p[1]" line="874" name="b" />
              <variable attributes="__local__ private" citdl="p[0]" line="875" name="l" />
            </scope>
          </scope>
          <variable attributes="__ctor__" doc="CONSTRUCTOR: The Browser History Manager provides the ability to use the&#xA;back/forward navigation buttons in a DHTML application. It also allows&#xA;a DHTML application to be bookmarked in a specific state." line="769" name="History" />
          <variable citdl="Object" doc="Singleton that determines how an animation proceeds from start to end." line="803" lineend="1116" name="Easing">
            <scope doc="Uniform speed between points." ilk="function" line="814" lineend="816" name="easeNone" returns="Number" signature="easeNone(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Begins slowly and accelerates towards end. (quadratic)" ilk="function" line="827" lineend="829" name="easeIn" returns="Number" signature="easeIn(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Begins quickly and decelerates towards end.  (quadratic)" ilk="function" line="840" lineend="842" name="easeOut" returns="Number" signature="easeOut(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Begins slowly and decelerates towards end. (quadratic)" ilk="function" line="853" lineend="859" name="easeBoth" returns="Number" signature="easeBoth(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Begins slowly and accelerates towards end. (quartic)" ilk="function" line="870" lineend="872" name="easeInStrong" returns="Number" signature="easeInStrong(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Begins quickly and decelerates towards end.  (quartic)" ilk="function" line="883" lineend="885" name="easeOutStrong" returns="Number" signature="easeOutStrong(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Begins slowly and decelerates towards end. (quartic)" ilk="function" line="896" lineend="902" name="easeBothStrong" returns="Number" signature="easeBothStrong(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Snap in elastic effect." ilk="function" line="916" lineend="936" name="elasticIn" returns="Number" signature="elasticIn(t, b, c, d, a, p)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Amplitude (optional)" ilk="argument" name="a" />
              <variable citdl="Number" doc="Period (optional)" ilk="argument" name="p" />
              <variable citdl="Easing" name="this" />
              <variable attributes="__local__ private" citdl="p" line="929" name="s" />
            </scope>
            <scope doc="Snap out elastic effect." ilk="function" line="949" lineend="969" name="elasticOut" returns="Number" signature="elasticOut(t, b, c, d, a, p)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Amplitude (optional)" ilk="argument" name="a" />
              <variable citdl="Number" doc="Period (optional)" ilk="argument" name="p" />
              <variable citdl="Easing" name="this" />
              <variable attributes="__local__ private" citdl="p" line="962" name="s" />
            </scope>
            <scope doc="Snap both elastic effect." ilk="function" line="982" lineend="1009" name="elasticBoth" returns="Number" signature="elasticBoth(t, b, c, d, a, p)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Amplitude (optional)" ilk="argument" name="a" />
              <variable citdl="Number" doc="Period (optional)" ilk="argument" name="p" />
              <variable citdl="Easing" name="this" />
              <variable attributes="__local__ private" citdl="p" line="997" name="s" />
            </scope>
            <scope doc="Backtracks slightly, then reverses direction and moves to end." ilk="function" line="1022" lineend="1027" name="backIn" returns="Number" signature="backIn(t, b, c, d, s)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Overshoot (optional)" ilk="argument" name="s" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Overshoots end, then reverses and comes back to end." ilk="function" line="1039" lineend="1044" name="backOut" returns="Number" signature="backOut(t, b, c, d, s)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Overshoot (optional)" ilk="argument" name="s" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Backtracks slightly, then reverses direction, overshoots end,&#xA;then reverses and comes back to end." ilk="function" line="1057" lineend="1066" name="backBoth" returns="Number" signature="backBoth(t, b, c, d, s)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Overshoot (optional)" ilk="argument" name="s" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Bounce off of start." ilk="function" line="1077" lineend="1079" name="bounceIn" returns="Number" signature="bounceIn(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Bounces off end." ilk="function" line="1090" lineend="1099" name="bounceOut" returns="Number" signature="bounceOut(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Bounces off start and end." ilk="function" line="1110" lineend="1115" name="bounceBoth" returns="Number" signature="bounceBoth(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
          </variable>
          <scope classrefs="YAHOO.util.Region" ilk="class" line="893" lineend="913" name="Point">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A point is a region that is special in that it represents a single point on&#xA;the grid." ilk="function" line="893" lineend="913" name="Point" signature="Point(x, y)">
              <variable citdl="Number" doc="The X position of the point" ilk="argument" name="x" />
              <variable citdl="Number" doc="The Y position of the point" ilk="argument" name="y" />
              <variable citdl="Point" name="this" />
            </scope>
            <variable citdl="Number" doc="The X position of the point, which is also the right, left and index zero (for Dom.getXY symmetry)" line="905" name="right" />
            <variable citdl="Number" doc="The X position of the point, which is also the right, left and index zero (for Dom.getXY symmetry)" line="905" name="x" />
            <variable citdl="Number" doc="The X position of the point, which is also the right, left and index zero (for Dom.getXY symmetry)" line="905" name="left" />
            <variable citdl="Number" doc="The Y position of the point, which is also the top, bottom and index one (for Dom.getXY symmetry)" line="912" name="bottom" />
            <variable citdl="Number" doc="The Y position of the point, which is also the top, bottom and index one (for Dom.getXY symmetry)" line="912" name="top" />
            <variable citdl="Number" doc="The Y position of the point, which is also the top, bottom and index one (for Dom.getXY symmetry)" line="912" name="y" />
          </scope>
          <scope ilk="class" line="1142" lineend="1146" name="Motion">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Anim subclass for moving elements along a path defined by the &quot;points&quot;&#xA;member of &quot;attributes&quot;.  All &quot;points&quot; are arrays with x, y coordinates.&#xA;&lt;p&gt;Usage: &lt;code&gt;var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);&lt;/code&gt;&lt;/p&gt;" ilk="function" line="1142" lineend="1146" name="Motion" signature="Motion(el, attributes, duration, method)">
              <variable ilk="argument" name="el" />
              <variable citdl="Object" doc="The attribute(s) to be animated.&#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.&#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).&#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
              <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
              <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
              <variable citdl="Motion" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="1294" lineend="1298" name="Scroll">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Anim subclass for scrolling elements to a position defined by the &quot;scroll&quot;&#xA;member of &quot;attributes&quot;.  All &quot;scroll&quot; members are arrays with x, y scroll positions.&#xA;&lt;p&gt;Usage: &lt;code&gt;var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);&lt;/code&gt;&lt;/p&gt;" ilk="function" line="1294" lineend="1298" name="Scroll" signature="Scroll(el, attributes, duration, method)">
              <variable ilk="argument" name="el" />
              <variable citdl="Object" doc="The attribute(s) to be animated.&#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.&#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).&#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
              <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
              <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
              <variable citdl="Scroll" name="this" />
            </scope>
          </scope>
          <variable citdl="YAHOO.util.DragDropMgr" line="1368" name="DDM" />
          <scope classrefs="Object" ilk="class" line="1423" lineend="2519" name="DragDrop">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Defines the interface and base operation of items that that can be&#xA;dragged or can be drop targets.  It was designed to be extended, overriding&#xA;the event handlers for startDrag, onDrag, onDragOver, onDragOut.&#xA;Up to three html elements can be associated with a DragDrop instance:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;linked element: the element that is passed into the constructor.&#xA;This is the element which defines the boundaries for interaction with&#xA;other DragDrop objects.&lt;/li&gt;&#xA;&lt;li&gt;handle element(s): The drag operation only occurs if the element that&#xA;was clicked matches a handle element.  By default this is the linked&#xA;element, but there are times that you will want only a portion of the&#xA;linked element to initiate the drag operation, and the setHandleElId()&#xA;method provides a way to define this.&lt;/li&gt;&#xA;&lt;li&gt;drag element: this represents an the element that would be moved along&#xA;with the cursor during a drag operation.  By default, this is the linked&#xA;element itself as in {@link YAHOO.util.DD}.  setDragElId() lets you define&#xA;a separate element that would be moved, as in {@link YAHOO.util.DDProxy}&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;This class should not be instantiated until the onload event to ensure that&#xA;the associated elements are available.&#xA;The following would define a DragDrop obj that would interact with any&#xA;other DragDrop obj in the &quot;group1&quot; group:&#xA;&lt;pre&gt;&#xA;dd = new YAHOO.util.DragDrop(&quot;div1&quot;, &quot;group1&quot;);&#xA;&lt;/pre&gt;&#xA;Since none of the event handlers have been implemented, nothing would&#xA;actually happen if you were to run the code above.  Normally you would&#xA;override this class or one of the default implementations, but you can&#xA;also override the methods you want on an instance of the class...&#xA;&lt;pre&gt;&#xA;dd.onDragDrop = function(e, id) {&#xA;&amp;nbsp;&amp;nbsp;alert(&quot;dd was dropped on &quot; + id);&#xA;}&#xA;&lt;/pre&gt;" ilk="function" line="1423" lineend="1427" name="DragDrop" signature="DragDrop(id, sGroup, config)">
              <variable citdl="String" doc="of the element that is linked to this instance" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DragDrop:&#xA;padding, isTarget, maintainOffset, primaryButtonOnly," ilk="argument" name="config" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="String" doc="The id of the element associated with this object.  This is what we&#xA;refer to as the &quot;linked element&quot; because the size and position of&#xA;this element is used to determine when the drag and drop objects have&#xA;interacted." line="1439" name="id" />
            <variable citdl="Object" doc="Configuration attributes passed into the constructor" line="1446" name="config" />
            <variable attributes="private" citdl="String" doc="PRIVATE: The id of the element that will be dragged.  By default this is same&#xA;as the linked element , but could be changed to another element. Ex:&#xA;YAHOO.util.DDProxy" line="1456" name="dragElId" />
            <variable attributes="private" citdl="String" doc="PRIVATE: the id of the element that initiates the drag operation.  By default&#xA;this is the linked element, but could be changed to be a child of this&#xA;element.  This lets us do things like only starting the drag when the&#xA;header element within the linked html element is clicked." line="1467" name="handleElId" />
            <variable citdl="String" doc="An associative array of HTML tags that will be ignored if clicked." line="1474" lineend="1920" name="invalidHandleTypes">
              <variable citdl="String" line="1920" name="A" />
            </variable>
            <variable citdl="String" doc="An associative array of ids for elements that will be ignored if clicked" line="1481" lineend="1921" name="invalidHandleIds" />
            <variable citdl="Array" doc="An indexted array of css class names for elements that will be ignored&#xA;if clicked." line="1489" name="invalidHandleClasses" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The linked element&apos;s absolute X position at the time the drag was&#xA;started" line="1498" name="startPageX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The linked element&apos;s absolute X position at the time the drag was&#xA;started" line="1507" name="startPageY" />
            <variable citdl="String" doc="The group defines a logical collection of DragDrop objects that are&#xA;related.  Instances only get events when interacting with other&#xA;DragDrop object in the same group.  This lets us define multiple&#xA;groups using a single DragDrop subclass if we want." line="1517" lineend="1894" name="groups" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Individual drag/drop instances can be locked.  This will prevent&#xA;onmousedown start drag." line="1526" name="locked" />
            <scope doc="Lock this instance" ilk="function" line="1532" lineend="1532" name="lock" signature="lock()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Unlock this instace" ilk="function" line="1538" lineend="1538" name="unlock" signature="unlock()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="Boolean" doc="By default, all insances can be a drop target.  This can be disabled by&#xA;setting isTarget to false." line="1546" name="isTarget" />
            <variable citdl="Array" doc="The padding configured for this drag and drop object for calculating&#xA;the drop zone intersection with this object." line="1554" name="padding" />
            <variable attributes="private" citdl="Dom.get()" doc="PRIVATE: Cached reference to the linked element" line="1561" name="_domRef" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Internal typeof flag" line="1568" name="__ygDragDrop" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Set to true when horizontal contraints are applied" line="1576" name="constrainX" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Set to true when vertical contraints are applied" line="1584" name="constrainY" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The left constraint" line="1592" name="minX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The right constraint" line="1600" name="maxX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The up constraint" line="1609" name="minY" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The down constraint" line="1617" name="maxY" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The difference between the click position and the source element&apos;s location" line="1625" name="deltaX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The difference between the click position and the source element&apos;s location" line="1633" name="deltaY" />
            <variable citdl="Boolean" doc="Maintain offsets when we resetconstraints.  Set to true when you want&#xA;the position of the element relative to its parent to stay the same&#xA;when the page changes" line="1643" name="maintainOffset" />
            <variable citdl="Array" doc="Array of pixel locations the element will snap to if we specified a&#xA;horizontal graduation/interval.  This array is generated automatically&#xA;when you define a tick interval." line="1652" name="xTicks" />
            <variable citdl="Array" doc="Array of pixel locations the element will snap to if we specified a&#xA;vertical graduation/interval.  This array is generated automatically&#xA;when you define a tick interval." line="1661" name="yTicks" />
            <variable citdl="Boolean" doc="By default the drag and drop instance will only respond to the primary&#xA;button click (left button for a right-handed mouse).  Set to true to&#xA;allow drag and drop to start with any mouse click that is propogated&#xA;by the browser" line="1671" name="primaryButtonOnly" />
            <variable citdl="Boolean" doc="The availabe property is false until the linked dom element is accessible." line="1678" name="available" />
            <variable citdl="Boolean" doc="By default, drags can only be initiated if the mousedown occurs in the&#xA;region the linked element is.  This is done in part to work around a&#xA;bug in some browsers that mis-report the mousedown if the previous&#xA;mouseup happened outside of the window.  This property is set to true&#xA;if outer handles are defined." line="1691" name="hasOuterHandles" />
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the startDrag event" ilk="function" line="1698" lineend="1698" name="b4StartDrag" signature="b4StartDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called after a drag/drop object is clicked&#xA;and the drag or mousedown time thresholds have beeen met." ilk="function" line="1707" lineend="1707" name="startDrag" signature="startDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDrag event" ilk="function" line="1714" lineend="1714" name="b4Drag" signature="b4Drag(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called during the onMouseMove event while dragging an&#xA;object." ilk="function" line="1722" lineend="1722" name="onDrag" signature="onDrag(e)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this element fist begins hovering over&#xA;another DragDrop obj" ilk="function" line="1733" lineend="1733" name="onDragEnter" signature="onDragEnter(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this is hovering over.  In INTERSECT mode, an array of one or more&#xA;dragdrop items being hovered over." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDragOver event" ilk="function" line="1740" lineend="1740" name="b4DragOver" signature="b4DragOver(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this element is hovering over another&#xA;DragDrop obj" ilk="function" line="1751" lineend="1751" name="onDragOver" signature="onDragOver(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this is hovering over.  In INTERSECT mode, an array of dd items&#xA;being hovered over." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDragOut event" ilk="function" line="1758" lineend="1758" name="b4DragOut" signature="b4DragOut(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when we are no longer hovering over an element" ilk="function" line="1768" lineend="1768" name="onDragOut" signature="onDragOut(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this was hovering over.  In INTERSECT mode, an array of dd items&#xA;that the mouse is no longer over." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDragDrop event" ilk="function" line="1775" lineend="1775" name="b4DragDrop" signature="b4DragDrop(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this item is dropped on another DragDrop&#xA;obj" ilk="function" line="1786" lineend="1786" name="onDragDrop" signature="onDragDrop(e, id)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this was dropped on.  In INTERSECT mode, an array of dd items this&#xA;was dropped on." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this item is dropped on an area with no&#xA;drop target" ilk="function" line="1794" lineend="1794" name="onInvalidDrop" signature="onInvalidDrop(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the endDrag event" ilk="function" line="1801" lineend="1801" name="b4EndDrag" signature="b4EndDrag(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Fired when we are done dragging the object" ilk="function" line="1808" lineend="1808" name="endDrag" signature="endDrag(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code executed immediately before the onMouseDown event" ilk="function" line="1816" lineend="1816" name="b4MouseDown" signature="b4MouseDown(e)">
              <variable citdl="Event" doc="the mousedown event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Event handler that fires when a drag/drop obj gets a mousedown" ilk="function" line="1823" lineend="1823" name="onMouseDown" signature="onMouseDown(e)">
              <variable citdl="Event" doc="the mousedown event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Event handler that fires when a drag/drop obj gets a mouseup" ilk="function" line="1830" lineend="1830" name="onMouseUp" signature="onMouseUp(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Override the onAvailable method to do what is needed after the initial&#xA;position was determined." ilk="function" line="1837" lineend="1838" name="onAvailable" signature="onAvailable()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Returns a reference to the linked element" ilk="function" line="1845" lineend="1851" name="getEl" returns="HTMLElement" signature="getEl()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Returns a reference to the actual element to drag.  By default this is&#xA;the same as the html element, but it can be assigned to another&#xA;element. An example of this can be found in YAHOO.util.DDProxy" ilk="function" line="1860" lineend="1862" name="getDragEl" returns="HTMLElement" signature="getDragEl()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Sets up the DragDrop object.  Must be called in the constructor of any&#xA;YAHOO.util.DragDrop subclass" ilk="function" line="1872" lineend="1876" name="init" signature="init(id, sGroup, config)">
              <variable doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related items" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="configuration attributes" ilk="argument" name="config" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Initializes Targeting functionality only... the object does not&#xA;get a mousedown handler." ilk="function" line="1886" lineend="1925" name="initTarget" signature="initTarget(id, sGroup, config)">
              <variable doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related items" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="configuration attributes" ilk="argument" name="config" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="YAHOO.util.DDM" line="1892" name="DDM" />
            <scope doc="Applies the configuration parameters that were passed into the constructor.&#xA;This is supposed to happen at each level through the inheritance chain.  So&#xA;a DDProxy implentation will execute apply config on DDProxy, DD, and&#xA;DragDrop in order to get all of the parameters that are available in&#xA;each object." ilk="function" line="1935" lineend="1944" name="applyConfig" signature="applyConfig()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Executed when the linked element is available" ilk="function" line="1951" lineend="1955" name="handleOnAvailable" signature="handleOnAvailable()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Configures the padding for the target zone in px.  Effectively expands&#xA;(or reduces) the virtual object size for targeting calculations.&#xA;Supports css-style shorthand; if only one parameter is passed, all sides&#xA;will have that padding, and if only two are passed, the top and bottom&#xA;will have the first param, the left and right the second." ilk="function" line="1969" lineend="1978" name="setPadding" signature="setPadding(iTop, iRight, iBot, iLeft)">
              <variable citdl="Number" doc="Top pad" ilk="argument" name="iTop" />
              <variable citdl="Number" doc="Right pad" ilk="argument" name="iRight" />
              <variable citdl="Number" doc="Bot pad" ilk="argument" name="iBot" />
              <variable citdl="Number" doc="Left pad" ilk="argument" name="iLeft" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Stores the initial placement of the linked element." ilk="function" line="1987" lineend="2008" name="setInitPosition" signature="setInitPosition(diffX, diffY)">
              <variable citdl="Number" doc="the X offset, default 0" ilk="argument" name="diffX" />
              <variable citdl="Number" doc="the Y offset, default 0" ilk="argument" name="diffY" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="1988" name="el" />
              <variable attributes="__local__ private" citdl="diffX" line="1994" name="dx" />
              <variable attributes="__local__ private" citdl="diffY" line="1995" name="dy" />
              <variable attributes="__local__ private" citdl="Dom.getXY()" line="1997" name="p" />
            </scope>
            <variable citdl="p[0]" line="1999" name="initPageX" />
            <variable citdl="p[1]" line="2000" name="initPageY" />
            <variable citdl="p[0]" line="2002" name="lastPageX" />
            <variable citdl="p[1]" line="2003" name="lastPageY" />
            <scope attributes="private" doc="PRIVATE: Sets the start position of the element.  This is set when the obj&#xA;is initialized, the reset when a drag is started." ilk="function" line="2017" lineend="2024" name="setStartPosition" signature="setStartPosition(pos)">
              <variable doc="current position (from previous lookup)" ilk="argument" name="pos" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="pos" line="2018" name="p" />
            </scope>
            <variable line="2020" name="deltaSetXY" />
            <scope doc="Add this instance to a group of related drag/drop objects.  All&#xA;instances belong to at least one group, and can belong to as many&#xA;groups as needed." ilk="function" line="2033" lineend="2036" name="addToGroup" signature="addToGroup(sGroup)">
              <variable citdl="String" doc="the name of the group" ilk="argument" name="sGroup" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Remove&apos;s this instance from the supplied interaction group" ilk="function" line="2043" lineend="2049" name="removeFromGroup" signature="removeFromGroup(sGroup)">
              <variable citdl="String" doc="The group to drop" ilk="argument" name="sGroup" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Allows you to specify that an element other than the linked element&#xA;will be moved with the cursor during a drag" ilk="function" line="2057" lineend="2059" name="setDragElId" signature="setDragElId(id)">
              <variable citdl="String" doc="the id of the element that will be used to initiate the drag" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Allows you to specify a child of the linked element that should be&#xA;used to initiate the drag operation.  An example of this would be if&#xA;you have a content div with text and links.  Clicking anywhere in the&#xA;content area would normally start the drag operation.  Use this method&#xA;to specify that an element inside of the content div is the element&#xA;that starts the drag operation." ilk="function" line="2072" lineend="2078" name="setHandleElId" signature="setHandleElId(id)">
              <variable citdl="String" doc="the id of the element that will be used to&#xA;initiate the drag." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Allows you to set an element outside of the linked element as a drag&#xA;handle" ilk="function" line="2086" lineend="2095" name="setOuterHandleElId" signature="setOuterHandleElId(id)">
              <variable doc="the id of the element that will be used to initiate the drag" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Remove all drag and drop hooks for this element" ilk="function" line="2101" lineend="2106" name="unreg" signature="unreg()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Returns true if this instance is locked, or the drag drop mgr is locked&#xA;(meaning that all drag/drop is disabled on the page.)" ilk="function" line="2115" lineend="2117" name="isLocked" returns="Boolean" signature="isLocked()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Fired when this object is clicked" ilk="function" line="2126" lineend="2174" name="handleMouseDown" signature="handleMouseDown(e, oDD)">
              <variable citdl="Event" ilk="argument" name="e" />
              <variable citdl="YAHOO.util.DragDrop" doc="the clicked dd object (this dd obj)" ilk="argument" name="oDD" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="e.which" line="2128" name="button" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Point" line="2154" name="pt" />
            </scope>
            <scope ilk="function" line="2176" lineend="2181" name="clickValidator" signature="clickValidator(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Event.getTarget()" line="2177" name="target" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Finds the location the element should be placed if we want to move&#xA;it to where the mouse location less the click offset would place us." ilk="function" line="2192" lineend="2213" name="getTargetCoord" signature="getTargetCoord(iPageX, iPageY)">
              <variable citdl="Number" doc="the X coordinate of the click" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="the Y coordinate of the click" ilk="argument" name="iPageY" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="iPageX" line="2195" name="x" />
              <variable attributes="__local__ private" citdl="iPageY" line="2196" name="y" />
            </scope>
            <scope doc="Allows you to specify a tag name that should not start a drag operation&#xA;when clicked.  This is designed to facilitate embedding links within a&#xA;drag handle that do something other than start the drag." ilk="function" line="2222" lineend="2225" name="addInvalidHandleType" signature="addInvalidHandleType(tagName)">
              <variable citdl="String" doc="the type of element to exclude" ilk="argument" name="tagName" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="tagName.toUpperCase()" line="2223" name="type" />
            </scope>
            <scope doc="Lets you to specify an element id for a child of a drag handle&#xA;that should not initiate a drag" ilk="function" line="2233" lineend="2238" name="addInvalidHandleId" signature="addInvalidHandleId(id)">
              <variable citdl="String" doc="the element id of the element you wish to ignore" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Lets you specify a css class of elements that will not initiate a drag" ilk="function" line="2246" lineend="2248" name="addInvalidHandleClass" signature="addInvalidHandleClass(cssClass)">
              <variable citdl="String" doc="the class of the elements you wish to ignore" ilk="argument" name="cssClass" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Unsets an excluded tag name set by addInvalidHandleType" ilk="function" line="2255" lineend="2259" name="removeInvalidHandleType" signature="removeInvalidHandleType(tagName)">
              <variable citdl="String" doc="the type of element to unexclude" ilk="argument" name="tagName" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="tagName.toUpperCase()" line="2256" name="type" />
            </scope>
            <scope doc="Unsets an invalid handle id" ilk="function" line="2266" lineend="2271" name="removeInvalidHandleId" signature="removeInvalidHandleId(id)">
              <variable citdl="String" doc="the id of the element to re-enable" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Unsets an invalid css class" ilk="function" line="2279" lineend="2285" name="removeInvalidHandleClass" signature="removeInvalidHandleClass(cssClass)">
              <variable citdl="String" doc="the class of the element(s) you wish to&#xA;re-enable" ilk="argument" name="cssClass" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Checks the tag exclusion list to see if this click should be ignored" ilk="function" line="2293" lineend="2313" name="isValidHandleChild" returns="Boolean" signature="isValidHandleChild(node)">
              <variable citdl="HTMLElement" doc="the HTMLElement to evaluate" ilk="argument" name="node" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="2295" name="valid" />
              <variable attributes="__local__ private" citdl="node.nodeName.toUpperCase()" line="2297" name="nodeName" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Create the array of horizontal tick marks if an interval was specified&#xA;in setXConstraint()." ilk="function" line="2321" lineend="2342" name="setXTicks" signature="setXTicks(iStartX, iTickSize)">
              <variable ilk="argument" name="iStartX" />
              <variable ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="2325" lineend="2325" name="tickMap" />
            </scope>
            <variable citdl="iTickSize" line="2323" name="xTickSize" />
            <scope attributes="private" doc="PRIVATE: Create the array of vertical tick marks if an interval was specified in&#xA;setYConstraint()." ilk="function" line="2350" lineend="2371" name="setYTicks" signature="setYTicks(iStartY, iTickSize)">
              <variable ilk="argument" name="iStartY" />
              <variable ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="2354" lineend="2354" name="tickMap" />
            </scope>
            <variable citdl="iTickSize" line="2352" name="yTickSize" />
            <scope doc="By default, the element can be dragged any place on the screen.  Use&#xA;this method to limit the horizontal travel of the element.  Pass in&#xA;0,0 for the parameters if you want to lock the drag to the y axis." ilk="function" line="2385" lineend="2394" name="setXConstraint" signature="setXConstraint(iLeft, iRight, iTickSize)">
              <variable citdl="Number" doc="the number of pixels the element can move to the left" ilk="argument" name="iLeft" />
              <variable citdl="Number" doc="the number of pixels the element can move to the&#xA;right" ilk="argument" name="iRight" />
              <variable citdl="Number" doc="optional parameter for specifying that the&#xA;element&#xA;should move iTickSize pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="parseInt()" line="2386" name="leftConstraint" />
            <variable citdl="parseInt()" line="2387" name="rightConstraint" />
            <scope doc="Clears any constraints applied to this instance.  Also clears ticks&#xA;since they can&apos;t exist independent of a constraint at this time." ilk="function" line="2401" lineend="2405" name="clearConstraints" signature="clearConstraints()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Clears any tick interval defined for this instance" ilk="function" line="2411" lineend="2416" name="clearTicks" signature="clearTicks()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="By default, the element can be dragged any place on the screen.  Set&#xA;this to limit the vertical travel of the element.  Pass in 0,0 for the&#xA;parameters if you want to lock the drag to the x axis." ilk="function" line="2428" lineend="2438" name="setYConstraint" signature="setYConstraint(iUp, iDown, iTickSize)">
              <variable citdl="Number" doc="the number of pixels the element can move up" ilk="argument" name="iUp" />
              <variable citdl="Number" doc="the number of pixels the element can move down" ilk="argument" name="iDown" />
              <variable citdl="Number" doc="optional parameter for specifying that the&#xA;element should move iTickSize pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="parseInt()" line="2429" name="topConstraint" />
            <variable citdl="parseInt()" line="2430" name="bottomConstraint" />
            <scope doc="resetConstraints must be called if you manually reposition a dd element." ilk="function" line="2445" lineend="2472" name="resetConstraints" signature="resetConstraints()">
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" line="2451" name="dx" />
              <variable attributes="__local__ private" line="2452" name="dy" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Normally the drag element is moved pixel by pixel, but we can specify&#xA;that it move a number of pixels at a time.  This method resolves the&#xA;location when we have it set up like this." ilk="function" line="2484" lineend="2508" name="getTick" returns="Number" signature="getTick(val, tickArray)">
              <variable citdl="Number" doc="where we want to place the object" ilk="argument" name="val" />
              <variable citdl="Array" doc="sorted array of valid points" ilk="argument" name="tickArray" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="i" line="2496" name="next" />
              <variable attributes="__local__ private" citdl="val" line="2498" name="diff1" />
              <variable attributes="__local__ private" citdl="tickArray[next]" line="2499" name="diff2" />
            </scope>
            <scope doc="toString method" ilk="function" line="2515" lineend="2517" name="toString" returns="String" signature="toString()">
              <variable citdl="DragDrop" name="this" />
            </scope>
          </scope>
          <scope classrefs="Object" doc="EventProvider is designed to be used with YAHOO.augment to wrap&#xA;CustomEvents in an interface that allows events to be subscribed to&#xA;and fired by name.  This makes it possible for implementing code to&#xA;subscribe to an event that either has not been created yet, or will&#xA;not be created at all." ilk="class" line="1805" lineend="1998" name="EventProvider">
            <scope attributes="__ctor__" doc="EventProvider is designed to be used with YAHOO.augment to wrap&#xA;CustomEvents in an interface that allows events to be subscribed to&#xA;and fired by name.  This makes it possible for implementing code to&#xA;subscribe to an event that either has not been created yet, or will&#xA;not be created at all." ilk="function" line="1805" lineend="1805" name="EventProvider" signature="EventProvider()">
              <variable citdl="EventProvider" name="this" />
            </scope>
            <variable attributes="private" citdl="Array" doc="PRIVATE: Private storage of custom events" line="1815" name="__yui_events" />
            <variable attributes="private" citdl="Array" doc="PRIVATE: Private storage of custom event subscribers" line="1823" name="__yui_subscribers" />
            <scope doc="Subscribe to a CustomEvent by event type" ilk="function" line="1837" lineend="1853" name="subscribe" signature="subscribe(p_type, p_fn, p_obj, p_override)">
              <variable citdl="String" doc="the type, or name of the event" ilk="argument" name="p_type" />
              <variable citdl="Function" doc="the function to exectute when the event fires" ilk="argument" name="p_fn" />
              <variable citdl="Object" doc="An object to be passed along when the event&#xA;fires" ilk="argument" name="p_obj" />
              <variable citdl="Boolean" doc="If true, the obj passed in becomes the&#xA;execution scope of the listener" ilk="argument" name="p_override" />
              <variable citdl="EventProvider" name="this" />
              <variable attributes="__local__ private" citdl="this.__yui_events[p_type]" line="1840" name="ce" />
              <variable attributes="__local__ private" citdl="this.__yui_subscribers" line="1846" name="subs" />
            </scope>
            <scope doc="Unsubscribes one or more listeners the from the specified event" ilk="function" line="1868" lineend="1876" name="unsubscribe" returns="Boolean" signature="unsubscribe(p_type, p_fn, p_obj)">
              <variable citdl="String" doc="The type, or name of the event" ilk="argument" name="p_type" />
              <variable citdl="Function" doc="The subscribed function to unsubscribe, if not&#xA;supplied, all subscribers will be removed." ilk="argument" name="p_fn" />
              <variable citdl="Object" doc="The custom object passed to subscribe.  This is&#xA;optional, but if supplied will be used to&#xA;disambiguate multiple listeners that are the same&#xA;(e.g., you subscribe many object using a function&#xA;that lives on the prototype)" ilk="argument" name="p_obj" />
              <variable citdl="EventProvider" name="this" />
              <variable attributes="__local__ private" citdl="this.__yui_events[p_type]" line="1870" name="ce" />
            </scope>
            <scope doc="Removes all listeners from the specified event" ilk="function" line="1883" lineend="1885" name="unsubscribeAll" returns="this.unsubscribe()" signature="unsubscribeAll(p_type)">
              <variable citdl="String" doc="The type, or name of the event" ilk="argument" name="p_type" />
              <variable citdl="EventProvider" name="this" />
            </scope>
            <scope doc="Creates a new custom event of the specified type.  If a custom event&#xA;by that name already exists, it will not be re-created.  In either&#xA;case the custom event is returned." ilk="function" line="1917" lineend="1948" name="createEvent" returns="CustomEvent" signature="createEvent(p_type, p_config)">
              <variable citdl="String" doc="the type, or name of the event" ilk="argument" name="p_type" />
              <variable citdl="Object" doc="optional config params.  Valid properties are:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;scope: defines the default execution scope.  If not defined&#xA;the default scope will be this instance.&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;silent: if true, the custom event will not generate log messages.&#xA;This is false by default.&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;onSubscribeCallback: specifies a callback to execute when the&#xA;event has a new subscriber.  This will fire immediately for&#xA;each queued subscriber if any exist prior to the creation of&#xA;the event.&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="argument" name="p_config" />
              <variable citdl="EventProvider" name="this" />
              <variable attributes="__local__ private" citdl="p_config" line="1920" name="opts" />
              <variable attributes="__local__ private" citdl="this.__yui_events" line="1921" name="events" />
              <variable attributes="__local__ private" citdl="opts.scope" line="1926" name="scope" />
              <variable attributes="__local__ private" citdl="opts.silent" line="1927" name="silent" />
              <variable attributes="__local__ private" citdl="YAHOO.util.CustomEvent" line="1930" name="ce" />
              <variable attributes="__local__ private" citdl="this.__yui_subscribers[p_type]" line="1938" name="qs" />
            </scope>
            <scope doc="Fire a custom event by name.  The callback functions will be executed&#xA;from the scope specified when the event was created, and with the&#xA;following parameters:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The first argument fire() was executed with&lt;/li&gt;&#xA;&lt;li&gt;The custom object (if any) that was passed into the subscribe()&#xA;method&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="function" line="1967" lineend="1981" name="fireEvent" returns="Boolean" signature="fireEvent(p_type, arg1, arg2, etc)">
              <variable citdl="String" doc="the type, or name of the event" ilk="argument" name="p_type" />
              <variable ilk="argument" name="arg1" />
              <variable ilk="argument" name="arg2" />
              <variable ilk="argument" name="etc" />
              <variable citdl="EventProvider" name="this" />
              <variable attributes="__local__ private" citdl="this.__yui_events[p_type]" line="1970" name="ce" />
              <variable attributes="__local__ private" citdl="Array" line="1973" name="args" />
            </scope>
            <scope doc="Returns true if the custom event of the provided type has been created&#xA;with createEvent." ilk="function" line="1989" lineend="1996" name="hasEvent" returns="Boolean" signature="hasEvent(type)">
              <variable citdl="String" doc="the type, or name of the event" ilk="argument" name="type" />
              <variable citdl="EventProvider" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="2021" lineend="2084" name="KeyListener">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: KeyListener is a utility that provides an easy interface for listening for&#xA;keydown/keyup events fired against DOM elements." ilk="function" line="2021" lineend="2164" name="KeyListener" signature="KeyListener(attachTo, keyData, handler, event)">
              <variable citdl="String" doc="The element or element ID to which the key&#xA;event should be attached" ilk="argument" name="attachTo" />
              <variable citdl="Object" doc="The object literal representing the key(s)&#xA;to detect. Possible attributes are&#xA;shift(boolean), alt(boolean), ctrl(boolean)&#xA;and keys(either an int or an array of ints&#xA;representing keycodes)." ilk="argument" name="keyData" />
              <variable citdl="Object" doc="An object literal representing the handler." ilk="argument" name="handler" />
              <variable citdl="String" doc="Optional. The event (keydown or keyup) to&#xA;listen for. Defaults automatically to keydown." ilk="argument" name="event" />
              <variable citdl="KeyListener" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.CustomEvent" doc="PRIVATE: The CustomEvent fired internally when a key is pressed" line="2040" name="keyEvent" />
              <scope attributes="__local__ private" doc="PRIVATE: Handles the key event when a key is pressed." ilk="function" line="2081" lineend="2121" name="handleKeyPress" signature="handleKeyPress(e, obj)">
                <variable citdl="DOMEvent" doc="The keypress DOM event" ilk="argument" name="e" />
                <variable citdl="Object" doc="The DOM event scope object" ilk="argument" name="obj" />
                <variable citdl="Object" line="2083" name="keyData">
                  <variable citdl="Boolean" line="2083" name="shift" />
                  <variable citdl="Boolean" line="2086" name="alt" />
                  <variable citdl="Boolean" line="2089" name="ctrl" />
                </variable>
                <variable attributes="__local__ private" citdl="keyData.keys[i]" line="2097" name="dataItem" />
                <variable attributes="__local__ private" line="2098" name="keyPressed" />
              </scope>
            </scope>
            <variable citdl="YAHOO.util.CustomEvent" doc="The CustomEvent fired when the KeyListener is enabled via the enable()&#xA;function" line="2051" name="enabledEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="The CustomEvent fired when the KeyListener is disabled via the&#xA;disable() function" line="2062" name="disabledEvent" />
            <scope doc="Enables the KeyListener by attaching the DOM event listeners to the&#xA;target DOM element" ilk="function" line="2128" lineend="2139" name="enable" signature="enable()">
              <variable citdl="KeyListener" name="this" />
            </scope>
            <variable citdl="Boolean" doc="Boolean indicating the enabled/disabled state of the Tooltip" line="2138" name="enabled" />
            <scope doc="Disables the KeyListener by removing the DOM event listeners from the&#xA;target DOM element" ilk="function" line="2146" lineend="2152" name="disable" signature="disable()">
              <variable citdl="KeyListener" name="this" />
            </scope>
            <scope doc="Returns a String representation of the object." ilk="function" line="2159" lineend="2162" name="toString" returns="String" signature="toString()">
              <variable citdl="KeyListener" name="this" />
            </scope>
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the DOM &quot;keydown&quot; event." line="2173" name="KEYDOWN" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the DOM &quot;keyup&quot; event." line="2182" name="KEYUP" />
          </scope>
          <scope classrefs="YAHOO.util.DragDrop" ilk="class" line="2534" lineend="2538" name="DD">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A DragDrop implementation where the linked element follows the&#xA;mouse cursor during a drag." ilk="function" line="2534" lineend="2538" name="DD" signature="DD(id, sGroup, config)">
              <variable citdl="String" doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop items" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DD:&#xA;scroll" ilk="argument" name="config" />
              <variable citdl="DD" name="this" />
            </scope>
            <variable citdl="Boolean" doc="When set to true, the utility automatically tries to scroll the browser&#xA;window wehn a drag and drop element is dragged near the viewport boundary.&#xA;Defaults to true." line="2549" name="scroll" />
            <scope doc="Sets the pointer offset to the distance between the linked element&apos;s top&#xA;left corner and the location the element was clicked" ilk="function" line="2558" lineend="2562" name="autoOffset" signature="autoOffset(iPageX, iPageY)">
              <variable citdl="Number" doc="the X coordinate of the click" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="the Y coordinate of the click" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="iPageX" line="2559" name="x" />
              <variable attributes="__local__ private" citdl="iPageY" line="2560" name="y" />
            </scope>
            <scope doc="Sets the pointer offset.  You can call this directly to force the&#xA;offset to be in a particular location (e.g., pass in 0,0 to set it&#xA;to the center of the object, as done in YAHOO.widget.Slider)" ilk="function" line="2572" lineend="2575" name="setDelta" signature="setDelta(iDeltaX, iDeltaY)">
              <variable citdl="Number" doc="the distance from the left" ilk="argument" name="iDeltaX" />
              <variable citdl="Number" doc="the distance from the top" ilk="argument" name="iDeltaY" />
            </scope>
            <variable citdl="iDeltaX" line="2573" name="deltaX" />
            <variable citdl="iDeltaY" line="2574" name="deltaY" />
            <scope doc="Sets the drag element to the location of the mousedown or click event,&#xA;maintaining the cursor location relative to the location on the element&#xA;that was clicked.  Override this if you want to place the element in a&#xA;location other than where the cursor is." ilk="function" line="2586" lineend="2592" name="setDragElPos" signature="setDragElPos(iPageX, iPageY)">
              <variable citdl="Number" doc="the X coordinate of the mousedown or drag event" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="the Y coordinate of the mousedown or drag event" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="this.getDragEl()" line="2590" name="el" />
            </scope>
            <scope doc="Sets the element to the location of the mousedown or click event,&#xA;maintaining the cursor location relative to the location on the element&#xA;that was clicked.  Override this if you want to place the element in a&#xA;location other than where the cursor is." ilk="function" line="2604" lineend="2621" name="alignElWithMouse" signature="alignElWithMouse(el, iPageX, iPageY)">
              <variable citdl="HTMLElement" doc="the element to move" ilk="argument" name="el" />
              <variable citdl="Number" doc="the X coordinate of the mousedown or drag event" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="the Y coordinate of the mousedown or drag event" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="this.getTargetCoord()" line="2605" name="oCoord" />
              <variable attributes="__local__ private" citdl="Array" line="2608" name="aCoord" />
              <variable attributes="__local__ private" citdl="parseInt()" line="2610" name="newLeft" />
              <variable attributes="__local__ private" citdl="parseInt()" line="2611" name="newTop" />
            </scope>
            <variable citdl="Array" line="2613" name="deltaSetXY" />
            <scope doc="Saves the most recent position so that we can reset the constraints and&#xA;tick marks on-demand.  We need to know this so that we can calculate the&#xA;number of pixels the element is offset from its original position." ilk="function" line="2633" lineend="2642" name="cachePosition" signature="cachePosition(iPageX, iPageY)">
              <variable doc="the current x position (optional, this just makes it so we&#xA;don&apos;t have to look it up again)" ilk="argument" name="iPageX" />
              <variable doc="the current y position (optional, this just makes it so we&#xA;don&apos;t have to look it up again)" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getXY()" line="2638" name="aCoord" />
            </scope>
            <variable citdl="iPageX" line="2635" name="lastPageX" />
            <variable citdl="iPageY" line="2636" name="lastPageY" />
            <scope attributes="private" doc="PRIVATE: Auto-scroll the window if the dragged object has been moved beyond the&#xA;visible window boundary." ilk="function" line="2654" lineend="2717" name="autoScroll" signature="autoScroll(x, y, h, w)">
              <variable citdl="Number" doc="the drag element&apos;s x position" ilk="argument" name="x" />
              <variable citdl="Number" doc="the drag element&apos;s y position" ilk="argument" name="y" />
              <variable citdl="Number" doc="the height of the drag element" ilk="argument" name="h" />
              <variable citdl="Number" doc="the width of the drag element" ilk="argument" name="w" />
              <variable attributes="__local__ private" citdl="this.DDM.getClientHeight()" line="2658" name="clientH" />
              <variable attributes="__local__ private" citdl="this.DDM.getClientWidth()" line="2661" name="clientW" />
              <variable attributes="__local__ private" citdl="this.DDM.getScrollTop()" line="2664" name="st" />
              <variable attributes="__local__ private" citdl="this.DDM.getScrollLeft()" line="2667" name="sl" />
              <variable attributes="__local__ private" citdl="h" line="2670" name="bot" />
              <variable attributes="__local__ private" citdl="w" line="2673" name="right" />
              <variable attributes="__local__ private" line="2678" name="toBot" />
              <variable attributes="__local__ private" line="2681" name="toRight" />
              <variable attributes="__local__ private" citdl="Number" line="2686" name="thresh" />
              <variable attributes="__local__ private" line="2691" name="scrAmt" />
            </scope>
            <scope ilk="function" line="2724" lineend="2727" name="applyConfig" signature="applyConfig()" />
            <scope ilk="function" line="2733" lineend="2738" name="b4MouseDown" signature="b4MouseDown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="2744" lineend="2747" name="b4Drag" signature="b4Drag(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="2749" lineend="2751" name="toString" signature="toString()" />
          </scope>
          <scope classrefs="YAHOO.util.DD" ilk="class" line="2800" lineend="2805" name="DDProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A DragDrop implementation that inserts an empty, bordered div into&#xA;the document that follows the cursor during drag operations.  At the time of&#xA;the click, the frame div is resized to the dimensions of the linked html&#xA;element, and moved to the exact location of the linked element.&#xA;&#xA;References to the &quot;frame&quot; element refer to the single proxy element that&#xA;was created to be dragged in place of all DDProxy elements on the&#xA;page." ilk="function" line="2800" lineend="2805" name="DDProxy" signature="DDProxy(id, sGroup, config)">
              <variable citdl="String" doc="the id of the linked html element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DDProxy in addition to those in DragDrop:&#xA;resizeFrame, centerFrame, dragElId" ilk="argument" name="config" />
              <variable citdl="DDProxy" name="this" />
            </scope>
            <variable attributes="__static__" citdl="String" doc="STATIC: The default drag frame div id" line="2813" name="dragElId" />
            <variable citdl="Boolean" doc="By default we resize the drag frame to be the same size as the element&#xA;we want to drag (this is to get the frame effect).  We can turn it off&#xA;if we want a different behavior." line="2824" name="resizeFrame" />
            <variable citdl="Boolean" doc="By default the frame is positioned exactly where the drag element is, so&#xA;we use the cursor offset provided by YAHOO.util.DD.  Another option that works only if&#xA;you do not have constraints on the obj is to have the drag frame centered&#xA;around the cursor.  Set centerFrame to true for this effect." line="2834" name="centerFrame" />
            <scope doc="Creates the proxy element if it does not yet exist" ilk="function" line="2840" lineend="2867" name="createFrame" signature="createFrame()">
              <variable attributes="__local__ private" citdl="this" line="2841" name="self" />
              <variable attributes="__local__ private" citdl="document.body" line="2842" name="body" />
              <variable attributes="__local__ private" citdl="this.getDragEl()" line="2849" name="div" />
              <variable attributes="__local__ private" citdl="div.style" line="2854" name="s" />
            </scope>
            <scope doc="Initialization for the drag frame element.  Must be called in the&#xA;constructor of all subclasses" ilk="function" line="2874" lineend="2876" name="initFrame" signature="initFrame()" />
            <scope ilk="function" line="2878" lineend="2884" name="applyConfig" signature="applyConfig()" />
            <scope attributes="private" doc="PRIVATE: Resizes the drag frame to the dimensions of the clicked object, positions&#xA;it over the object, and finally displays it" ilk="function" line="2894" lineend="2909" name="showFrame" signature="showFrame(iPageX, iPageY)">
              <variable citdl="Number" doc="X click position" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="Y click position" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="2895" name="el" />
              <variable attributes="__local__ private" citdl="this.getDragEl()" line="2896" name="dragEl" />
              <variable attributes="__local__ private" citdl="dragEl.style" line="2897" name="s" />
            </scope>
            <scope attributes="private" doc="PRIVATE: The proxy is automatically resized to the dimensions of the linked&#xA;element when a drag is initiated, unless resizeFrame is set to false" ilk="function" line="2917" lineend="2941" name="_resizeProxy" signature="_resizeProxy()">
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="2919" name="DOM" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="2920" name="el" />
              <variable attributes="__local__ private" citdl="this.getDragEl()" line="2921" name="dragEl" />
              <variable attributes="__local__ private" citdl="parseInt()" line="2923" name="bt" />
              <variable attributes="__local__ private" citdl="parseInt()" line="2924" name="br" />
              <variable attributes="__local__ private" citdl="parseInt()" line="2925" name="bb" />
              <variable attributes="__local__ private" citdl="parseInt()" line="2926" name="bl" />
              <variable attributes="__local__ private" citdl="Math.max()" line="2934" name="newWidth" />
              <variable attributes="__local__ private" citdl="Math.max()" line="2935" name="newHeight" />
            </scope>
            <scope ilk="function" line="2944" lineend="2950" name="b4MouseDown" signature="b4MouseDown(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getPageX()" line="2946" name="x" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getPageY()" line="2947" name="y" />
            </scope>
            <scope ilk="function" line="2953" lineend="2956" name="b4StartDrag" signature="b4StartDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
            <scope ilk="function" line="2959" lineend="2961" name="b4EndDrag" signature="b4EndDrag(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="2966" lineend="2984" name="endDrag" signature="endDrag(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="2967" name="DOM" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="2968" name="lel" />
              <variable attributes="__local__ private" citdl="this.getDragEl()" line="2969" name="del" />
            </scope>
            <scope ilk="function" line="2986" lineend="2988" name="toString" signature="toString()" />
          </scope>
          <scope classrefs="YAHOO.util.DragDrop" ilk="class" line="3006" lineend="3010" name="DDTarget">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A DragDrop implementation that does not move, but can be a drop&#xA;target.  You would get the same result by simply omitting implementation&#xA;for the event callbacks, but this way we reduce the processing cost of the&#xA;event listener and the callbacks." ilk="function" line="3006" lineend="3010" name="DDTarget" signature="DDTarget(id, sGroup, config)">
              <variable citdl="String" doc="the id of the element that is a drop target" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DDTarget in addition to those in&#xA;DragDrop:&#xA;none" ilk="argument" name="config" />
              <variable citdl="DDTarget" name="this" />
            </scope>
            <scope ilk="function" line="3014" lineend="3016" name="toString" signature="toString()" />
          </scope>
          <variable attributes="__static__" citdl="Object" doc="STATIC: Sort static utility to support Column sorting." line="5191" lineend="5271" name="Sort">
            <scope doc="Comparator function for sort in ascending order. String sorting is case insensitive." ilk="function" line="5205" lineend="5233" name="compareAsc" returns="Number" signature="compareAsc(a, b)">
              <variable citdl="Object" doc="First sort argument." ilk="argument" name="a" />
              <variable citdl="Object" doc="Second sort argument." ilk="argument" name="b" />
              <variable citdl="Sort" name="this" />
            </scope>
            <scope doc="Comparator function for sort in descending order. String sorting is case insensitive." ilk="function" line="5242" lineend="5270" name="compareDesc" returns="Number" signature="compareDesc(a, b)">
              <variable citdl="Object" doc="First sort argument." ilk="argument" name="a" />
              <variable citdl="Object" doc="Second sort argument." ilk="argument" name="b" />
              <variable citdl="Sort" name="this" />
            </scope>
          </variable>
          <scope ilk="class" line="5287" lineend="5297" name="WidthResizer">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: WidthResizer subclasses DragDrop to support resizeable Columns." ilk="function" line="5287" lineend="5297" name="WidthResizer" signature="WidthResizer(oDataTable, colId, handleId, sGroup, config)">
              <variable ilk="argument" name="oDataTable" />
              <variable ilk="argument" name="colId" />
              <variable ilk="argument" name="handleId" />
              <variable citdl="String" doc="Group name of related DragDrop items" ilk="argument" name="sGroup" />
              <variable ilk="argument" name="config" />
              <variable citdl="WidthResizer" name="this" />
            </scope>
            <variable citdl="YAHOO.util.Dom.get()" line="5289" name="cell" />
            <variable citdl="oDataTable" line="5292" name="datatable" />
            <scope doc="Handles mousedown events on the Column resizer." ilk="function" line="5315" lineend="5331" name="onMouseDown" signature="onMouseDown(e)">
              <variable citdl="String" doc="The mousedown event" ilk="argument" name="e" />
              <variable citdl="WidthResizer" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getElementsByClassName()[0]" line="5320" name="cellText" />
              <variable attributes="__local__ private" citdl="this.cell.nextSibling" line="5322" name="sib" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getElementsByClassName()[0]" line="5323" name="sibCellText" />
              <variable attributes="__local__ private" line="5326" name="left" />
              <variable attributes="__local__ private" line="5327" name="right" />
            </scope>
            <variable citdl="this.cell.offsetWidth" line="5316" name="startWidth" />
            <variable citdl="YAHOO.util.Dom.getX()" line="5317" name="startPos" />
            <variable citdl="cellText.offsetWidth" line="5321" name="minWidth" />
            <variable citdl="sibCellText.offsetWidth" line="5324" name="sibMinWidth" />
            <scope doc="Handles mouseup events on the Column resizer." ilk="function" line="5339" lineend="5356" name="onMouseUp" signature="onMouseUp(e)">
              <variable citdl="String" doc="The mouseup event" ilk="argument" name="e" />
              <variable citdl="WidthResizer" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.get().style" line="5341" name="resizeStyle" />
            </scope>
            <scope doc="Handles drag events on the Column resizer." ilk="function" line="5364" lineend="5403" name="onDrag" signature="onDrag(e)">
              <variable citdl="String" doc="The drag event" ilk="argument" name="e" />
              <variable citdl="WidthResizer" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getX()" line="5365" name="newPos" />
              <variable attributes="__local__ private" citdl="newPos" line="5366" name="offsetX" />
              <variable attributes="__local__ private" citdl="this.startWidth" line="5367" name="newWidth" />
              <variable attributes="__local__ private" citdl="this.datatable" line="5374" name="oDataTable" />
              <variable attributes="__local__ private" citdl="this.cell" line="5375" name="elCell">
                <variable citdl="Object" line="5395" name="style">
                  <variable citdl="newWidth" line="5395" name="width" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="elCell.nextSibling" line="5381" name="sib">
                <variable citdl="Object" line="5394" name="style">
                  <variable citdl="sibnewwidth" line="5394" name="width" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="sib.offsetWidth" line="5383" name="sibnewwidth" />
            </scope>
          </scope>
        </variable>
        <scope attributes="__static__" doc="STATIC: Returns the namespace specified and creates it if it doesn&apos;t exist&#xA;&lt;pre&gt;&#xA;YAHOO.namespace(&quot;property.package&quot;);&#xA;YAHOO.namespace(&quot;YAHOO.property.package&quot;);&#xA;&lt;/pre&gt;&#xA;Either of the above would create YAHOO.property, then&#xA;YAHOO.property.package&#xA;&#xA;Be careful when naming packages. Reserved words may work in some browsers&#xA;and not others. For instance, the following will fail in Safari:&#xA;&lt;pre&gt;&#xA;YAHOO.namespace(&quot;really.long.nested.namespace&quot;);&#xA;&lt;/pre&gt;&#xA;This fails because &quot;long&quot; is a future reserved word in ECMAScript" ilk="function" line="65" lineend="79" name="namespace" returns="Object" signature="namespace()">
          <variable citdl="YAHOO" name="this" />
          <variable attributes="__local__ private" citdl="arguments" line="66" name="a" />
          <variable attributes="__local__ private" line="66" name="i" />
          <variable attributes="__local__ private" line="66" name="j" />
          <variable attributes="__local__ private" citdl="a[i].split()" line="66" name="d" />
          <variable attributes="__local__ private" citdl="YAHOO" line="66" name="o" />
        </scope>
        <scope attributes="__static__" doc="STATIC: Uses YAHOO.widget.Logger to output a log message, if the widget is&#xA;available." ilk="function" line="94" lineend="101" name="log" returns="Boolean" signature="log(msg, cat, src)">
          <variable citdl="String" doc="The message to log." ilk="argument" name="msg" />
          <variable citdl="String" doc="The log category for the message.  Default&#xA;categories are &quot;info&quot;, &quot;warn&quot;, &quot;error&quot;, time&quot;.&#xA;Custom categories can be used as well. (opt)" ilk="argument" name="cat" />
          <variable citdl="String" doc="The source of the the message (opt)" ilk="argument" name="src" />
          <variable citdl="YAHOO" name="this" />
          <variable attributes="__local__ private" citdl="YAHOO.widget.Logger" line="95" name="l" />
        </scope>
        <scope attributes="__static__" doc="STATIC: Initializes the global by creating the default namespaces and applying&#xA;any new configuration information that is detected." ilk="function" line="110" lineend="129" name="init" signature="init()">
          <variable citdl="YAHOO" name="this" />
          <variable attributes="__local__ private" line="113" name="i" />
          <variable attributes="__local__ private" citdl="Boolean" line="113" name="unique" />
          <variable attributes="__local__ private" citdl="YAHOO_config.listener" line="113" name="l" />
          <variable attributes="__local__ private" citdl="YAHOO.env.listeners" line="113" name="ls" />
        </scope>
        <scope attributes="__static__" doc="STATIC: Registers a module with the YAHOO object" ilk="function" line="145" lineend="168" name="register" signature="register(name, mainClass, data)">
          <variable citdl="String" doc="the name of the module (event, slider, etc)" ilk="argument" name="name" />
          <variable citdl="Function" doc="a reference to class in the module.  This&#xA;class will be tagged with the version info&#xA;so that it will be possible to identify the&#xA;version that is in use when multiple versions&#xA;have loaded" ilk="argument" name="mainClass" />
          <variable citdl="Object" doc="metadata object for the module.  Currently it&#xA;is expected to contain a &quot;version&quot; property&#xA;and a &quot;build&quot; property at minimum." ilk="argument" name="data" />
          <variable citdl="YAHOO" name="this" />
          <variable attributes="__local__ private" citdl="YAHOO.env.modules" line="146" name="mods" />
          <variable attributes="__local__ private" citdl="data.build" line="150" name="b" />
          <variable attributes="__local__ private" citdl="mods[name]" line="150" name="m" />
          <variable attributes="__local__ private" citdl="YAHOO.env.listeners" line="150" name="ls" />
          <variable attributes="__local__ private" citdl="data.version" line="150" name="v" />
        </scope>
        <variable citdl="Array" line="148" name="builds" />
        <variable citdl="Array" line="148" name="versions" />
        <variable attributes="__static__" citdl="Object" doc="STATIC: YAHOO.env is used to keep track of what is known about the YUI library and&#xA;the browsing environment" line="177" name="env" />
        <variable citdl="Object" doc="Provides the language utilites and extensions used by the library" line="222" lineend="405" name="lang">
          <scope doc="Determines whether or not the provided object is an array" ilk="function" line="229" lineend="236" name="isArray" returns="YAHOO.lang.isObject()" signature="isArray(obj)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="obj" />
            <variable citdl="lang" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is a boolean" ilk="function" line="244" lineend="246" name="isBoolean" signature="isBoolean(obj)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="obj" />
            <variable citdl="lang" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is a function" ilk="function" line="254" lineend="256" name="isFunction" signature="isFunction(obj)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="obj" />
            <variable citdl="lang" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is null" ilk="function" line="264" lineend="266" name="isNull" returns="Object" signature="isNull(obj)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="obj" />
            <variable citdl="lang" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is a legal number" ilk="function" line="274" lineend="276" name="isNumber" signature="isNumber(obj)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="obj" />
            <variable citdl="lang" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is of type object&#xA;or function" ilk="function" line="285" lineend="287" name="isObject" returns="Object" signature="isObject(obj)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="obj" />
            <variable citdl="lang" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is a string" ilk="function" line="295" lineend="297" name="isString" signature="isString(obj)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="obj" />
            <variable citdl="lang" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is undefined" ilk="function" line="305" lineend="307" name="isUndefined" signature="isUndefined(obj)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="obj" />
            <variable citdl="lang" name="this" />
          </scope>
          <scope doc="Determines whether or not the property was added&#xA;to the object instance.  Returns false if the property is not present&#xA;in the object, or was inherited from the prototype.&#xA;This abstraction is provided to enable hasOwnProperty for Safari 1.3.x.&#xA;There is a discrepancy between YAHOO.lang.hasOwnProperty and&#xA;Object.prototype.hasOwnProperty when the property is a primitive added to&#xA;both the instance AND prototype with the same value:&#xA;&lt;pre&gt;&#xA;var A = function() {};&#xA;A.prototype.foo = &apos;foo&apos;;&#xA;var a = new A();&#xA;a.foo = &apos;foo&apos;;&#xA;alert(a.hasOwnProperty(&apos;foo&apos;)); // true&#xA;alert(YAHOO.lang.hasOwnProperty(a, &apos;foo&apos;)); // false when using fallback&#xA;&lt;/pre&gt;" ilk="function" line="329" lineend="336" name="hasOwnProperty" signature="hasOwnProperty(obj, prop)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="obj" />
            <variable ilk="argument" name="prop" />
            <variable citdl="lang" name="this" />
          </scope>
          <scope attributes="__static__" doc="STATIC: Utility to set up the prototype, constructor and superclass properties to&#xA;support an inheritance strategy that can chain constructors and methods." ilk="function" line="351" lineend="370" name="extend" signature="extend(subc, superc, overrides)">
            <variable citdl="Function" doc="the object to modify" ilk="argument" name="subc" />
            <variable citdl="Function" doc="the object to inherit" ilk="argument" name="superc" />
            <variable citdl="Object" doc="additional properties/methods to add to the&#xA;subclass prototype.  These will override the&#xA;matching items obtained from the superclass&#xA;if present." ilk="argument" name="overrides" />
            <variable citdl="lang" name="this" />
            <scope attributes="__local__ private" classrefs="superc.prototype" ilk="class" line="356" name="F">
              <scope attributes="__local__ private __ctor__" ilk="function" line="356" lineend="356" name="F" signature="F()">
                <variable citdl="F" name="this" />
              </scope>
            </scope>
            <scope classrefs="F" ilk="class" line="358" name="subc">
              <variable citdl="superc.prototype" line="360" name="superclass" />
              <scope ilk="class" line="362" lineend="363" name="superc" />
            </scope>
          </scope>
          <scope attributes="__static__" doc="STATIC: Applies all prototype properties in the supplier to the receiver if the&#xA;receiver does not have these properties yet.  Optionally, one or more&#xA;methods/properties can be specified (as additional parameters).  This&#xA;option will overwrite the property if receiver has it already." ilk="function" line="387" lineend="404" name="augment" signature="augment(r, s)">
            <variable citdl="Function" doc="the object to receive the augmentation" ilk="argument" name="r" />
            <variable citdl="Function" doc="the object that supplies the properties to augment" ilk="argument" name="s" />
            <variable citdl="lang" name="this" />
            <variable attributes="__local__ private" citdl="arguments" line="392" name="a" />
            <variable attributes="__local__ private" line="392" name="i" />
            <variable attributes="__local__ private" citdl="s.prototype" line="392" name="sp" />
            <variable attributes="__local__ private" citdl="r.prototype" line="392" name="rp" />
            <variable attributes="__local__ private" line="392" name="p" />
          </scope>
        </variable>
        <variable attributes="__static__" citdl="YAHOO.lang.augment" doc="STATIC: An alias for &lt;a href=&quot;YAHOO.lang.html#augment&quot;&gt;YAHOO.lang.augment&lt;/a&gt;" line="427" name="augment" />
        <variable attributes="__static__" citdl="YAHOO.lang.extend" doc="STATIC: An alias for &lt;a href=&quot;YAHOO.lang.html#extend&quot;&gt;YAHOO.lang.extend&lt;/a&gt;" line="440" name="extend" />
        <variable citdl="Object" line="7579" name="widget">
          <scope ilk="class" line="18" lineend="25" name="LogMsg">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The LogMsg class defines a single log message." ilk="function" line="18" lineend="25" name="LogMsg" signature="LogMsg(oConfigs)">
              <variable citdl="Object" doc="Object literal of configuration params." ilk="argument" name="oConfigs" />
              <variable citdl="LogMsg" name="this" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="25" lineend="574" name="TreeView">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The treeview widget is a generic tree building tool." ilk="function" line="25" lineend="27" name="TreeView" signature="TreeView(id)">
              <variable citdl="{string" doc="The id of the element, or the element&#xA;itself that the tree will be inserted into." ilk="argument" name="id" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <variable citdl="String" doc="The id of tree container element" line="36" name="id" />
            <variable attributes="private" citdl="id" doc="PRIVATE: The host element for this tree" line="43" name="_el" />
            <variable attributes="private" citdl="Array" doc="PRIVATE: Flat collection of all nodes in this tree.  This is a sparse&#xA;array, so the length property can&apos;t be relied upon for a&#xA;node count for the tree." line="53" name="_nodes" />
            <variable citdl="Boolean" doc="We lock the tree control while waiting for the dynamic loader to return" line="60" name="locked" />
            <variable attributes="private" citdl="String" doc="PRIVATE: The animation to use for expanding children, if any" line="68" name="_expandAnim" />
            <variable attributes="private" citdl="String" doc="PRIVATE: The animation to use for collapsing children, if any" line="76" name="_collapseAnim" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The current number of animations that are executing" line="84" name="_animCount" />
            <variable citdl="Number" doc="The maximum number of animations to run at one time." line="91" name="maxAnim" />
            <scope doc="Sets up the animation for expanding children" ilk="function" line="99" lineend="103" name="setExpandAnim" signature="setExpandAnim(type)">
              <variable citdl="String" doc="the type of animation (acceptable values defined&#xA;in YAHOO.widget.TVAnim)" ilk="argument" name="type" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope doc="Sets up the animation for collapsing children" ilk="function" line="111" lineend="115" name="setCollapseAnim" signature="setCollapseAnim(type)">
              <variable ilk="argument" name="type" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope doc="Perform the expand animation if configured, or just show the&#xA;element if not configured or too many animations are in progress" ilk="function" line="125" lineend="145" name="animateExpand" returns="Boolean" signature="animateExpand(el, node)">
              <variable citdl="HTMLElement" doc="the element to animate" ilk="argument" name="el" />
              <variable citdl="YAHOO.util.Node" doc="the node that was expanded" ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="this" line="129" name="tree" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.TVAnim.getAnim()" line="131" name="a" />
            </scope>
            <scope doc="Perform the collapse animation if configured, or just show the&#xA;element if not configured or too many animations are in progress" ilk="function" line="155" lineend="175" name="animateCollapse" returns="Boolean" signature="animateCollapse(el, node)">
              <variable citdl="HTMLElement" doc="the element to animate" ilk="argument" name="el" />
              <variable citdl="YAHOO.util.Node" doc="the node that was expanded" ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="this" line="159" name="tree" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.TVAnim.getAnim()" line="161" name="a" />
            </scope>
            <scope doc="Function executed when the expand animation completes" ilk="function" line="181" lineend="188" name="expandComplete" signature="expandComplete(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope doc="Function executed when the collapse animation completes" ilk="function" line="194" lineend="201" name="collapseComplete" signature="collapseComplete(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Initializes the tree" ilk="function" line="209" lineend="286" name="init" signature="init(id)">
              <variable ilk="argument" name="id" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <variable citdl="YAHOO.widget.RootNode" line="280" name="root" />
            <scope doc="Renders the tree boilerplate and visible nodes" ilk="function" line="298" lineend="302" name="draw" signature="draw()">
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="this.root.getHtml()" line="299" name="html" />
            </scope>
            <variable citdl="Boolean" line="301" name="firstDraw" />
            <scope doc="Returns the tree&apos;s host element" ilk="function" line="309" lineend="314" name="getEl" returns="HTMLElement" signature="getEl()">
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Nodes register themselves with the tree instance when they are created." ilk="function" line="322" lineend="324" name="regNode" signature="regNode(node)">
              <variable citdl="Node" doc="the node to register" ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope doc="Returns the root node of this tree" ilk="function" line="331" lineend="333" name="getRoot" returns="Node" signature="getRoot()">
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope doc="Configures this tree to dynamically load all child data" ilk="function" line="344" lineend="346" name="setDynamicLoad" signature="setDynamicLoad(fnDataLoader, iconMode)">
              <variable citdl="Function" doc="the function that will be called to get the data" ilk="argument" name="fnDataLoader" />
              <variable citdl="Number" doc="configures the icon that is displayed when a dynamic&#xA;load node is expanded the first time without children.  By default, the&#xA;&quot;collapse&quot; icon will be used.  If set to 1, the leaf node icon will be&#xA;displayed." ilk="argument" name="iconMode" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope doc="Expands all child nodes.  Note: this conflicts with the &quot;multiExpand&quot;&#xA;node property.  If expand all is called in a tree with nodes that&#xA;do not allow multiple siblings to be displayed, only the last sibling&#xA;will be expanded." ilk="function" line="355" lineend="359" name="expandAll" signature="expandAll()">
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope doc="Collapses all expanded child nodes in the entire tree." ilk="function" line="365" lineend="369" name="collapseAll" signature="collapseAll()">
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope doc="Returns a node in the tree that has the specified index (this index&#xA;is created internally, so this function probably will only be used&#xA;in html generated for a given node.)" ilk="function" line="379" lineend="382" name="getNodeByIndex" returns="Node" signature="getNodeByIndex(nodeIndex)">
              <variable citdl="Number" doc="the index of the node wanted" ilk="argument" name="nodeIndex" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="this._nodes[nodeIndex]" line="380" name="n" />
            </scope>
            <scope doc="Returns a node that has a matching property and value in the data&#xA;object that was passed into its constructor." ilk="function" line="392" lineend="401" name="getNodeByProperty" returns="Node" signature="getNodeByProperty(property, value)">
              <variable citdl="Object" doc="the property to search (usually a string)" ilk="argument" name="property" />
              <variable citdl="Object" doc="the value we want to find (usuall an int or string)" ilk="argument" name="value" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="this._nodes[i]" line="394" name="n" />
            </scope>
            <scope doc="Returns a collection of nodes that have a matching property&#xA;and value in the data object that was passed into its constructor." ilk="function" line="411" lineend="421" name="getNodesByProperty" returns="Array" signature="getNodesByProperty(property, value)">
              <variable citdl="Object" doc="the property to search (usually a string)" ilk="argument" name="property" />
              <variable citdl="Object" doc="the value we want to find (usuall an int or string)" ilk="argument" name="value" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="412" name="values" />
              <variable attributes="__local__ private" citdl="this._nodes[i]" line="414" name="n" />
            </scope>
            <scope doc="Removes the node and its children, and optionally refreshes the&#xA;branch of the tree that was affected." ilk="function" line="431" lineend="453" name="removeNode" returns="Boolean" signature="removeNode(node, autoRefresh)">
              <variable ilk="argument" name="node" />
              <variable citdl="Boolean" doc="automatically refreshes branch if true" ilk="argument" name="autoRefresh" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="node.parent" line="439" name="p" />
            </scope>
            <scope doc="Deletes this nodes child collection, recursively.  Also collapses&#xA;the node, and resets the dynamic load flag.  The primary use for&#xA;this method is to purge a node and allow it to fetch its data&#xA;dynamically again." ilk="function" line="463" lineend="475" name="removeChildren" signature="removeChildren(node)">
              <variable citdl="Node" doc="the node to purge" ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Deletes the node and recurses children" ilk="function" line="482" lineend="488" name="_deleteNode" signature="_deleteNode(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope doc="Removes the node from the tree, preserving the child collection&#xA;to make it possible to insert the branch into another part of the&#xA;tree, or another tree." ilk="function" line="497" lineend="530" name="popNode" signature="popNode(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="node.parent" line="498" name="p" />
              <variable attributes="__local__ private" citdl="Array" line="501" name="a" />
            </scope>
            <scope doc="TreeView instance toString" ilk="function" line="538" lineend="540" name="toString" returns="String" signature="toString()">
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Generates an unique id for an element if it doesn&apos;t yet have one" ilk="function" line="547" lineend="556" name="generateId" returns="id" signature="generateId(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="el.id" line="548" name="id" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Abstract method that is executed when a node is expanded" ilk="function" line="564" lineend="564" name="onExpand" signature="onExpand(node)">
              <variable citdl="Node" doc="the node that was expanded" ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Abstract method that is executed when a node is collapsed." ilk="function" line="572" lineend="572" name="onCollapse" signature="onCollapse(node)">
              <variable citdl="Node" doc="the node that was collapsed." ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <variable attributes="__static__" citdl="Number" doc="STATIC: Running count of all nodes created in all trees.  This is&#xA;used to provide unique identifies for all nodes.  Deleting&#xA;nodes does not change the nodeCount." line="586" name="nodeCount" />
            <variable attributes="private __static__" citdl="Array" doc="PRIVATE STATIC: Global cache of tree instances" line="595" name="trees" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Counter for generating a new unique element id" line="603" name="counter" />
            <scope attributes="__static__" doc="STATIC: Global method for getting a tree by its id.  Used in the generated&#xA;tree html." ilk="function" line="613" lineend="616" name="getTree" returns="TreeView" signature="getTree(treeId)">
              <variable citdl="String" doc="the id of the tree instance" ilk="argument" name="treeId" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.TreeView.trees[treeId]" line="614" name="t" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Global method for getting a node by its id.  Used in the generated&#xA;tree html." ilk="function" line="628" lineend="631" name="getNode" returns="Node" signature="getNode(treeId, nodeIndex)">
              <variable citdl="String" doc="the id of the tree instance" ilk="argument" name="treeId" />
              <variable citdl="String" doc="the index of the node to return" ilk="argument" name="nodeIndex" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.TreeView.getTree()" line="629" name="t" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Add a DOM event" ilk="function" line="641" lineend="647" name="addHandler" signature="addHandler(el, sType, fn)">
              <variable doc="the elment to bind the handler to" ilk="argument" name="el" />
              <variable citdl="String" doc="the type of event handler" ilk="argument" name="sType" />
              <variable citdl="Function" doc="the callback to invoke" ilk="argument" name="fn" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Remove a DOM event" ilk="function" line="658" lineend="664" name="removeHandler" signature="removeHandler(el, sType, fn)">
              <variable doc="the elment to bind the handler to" ilk="argument" name="el" />
              <variable citdl="String" doc="the type of event handler" ilk="argument" name="sType" />
              <variable citdl="Function" doc="the callback to invoke" ilk="argument" name="fn" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Attempts to preload the images defined in the styles used to draw the tree by&#xA;rendering off-screen elements that use the styles." ilk="function" line="674" lineend="696" name="preload" signature="preload(prefix)">
              <variable citdl="String" doc="the prefix to use to generate the names of the&#xA;images to preload, default is ygtv" ilk="argument" name="prefix" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="676" name="styles" />
              <variable attributes="__local__ private" citdl="Array" line="678" name="sb" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="684" name="f" />
              <variable attributes="__local__ private" citdl="f.style" line="685" name="s" />
            </scope>
          </scope>
          <scope ilk="class" line="27" lineend="38" name="TabView">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The tabview module provides a widget for managing content bound to tabs." ilk="function" line="27" lineend="38" name="TabView" signature="TabView(el, attr)">
              <variable ilk="argument" name="el" />
              <variable citdl="Object" doc="(optional) A key map of the tabView&apos;s&#xA;initial attributes.  Ignored if first arg is attributes object." ilk="argument" name="attr" />
              <variable citdl="TabView" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="33" lineend="510" name="DataTable">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The DataTable widget provides a progressively enhanced DHTML control for&#xA;displaying tabular data across A-grade browsers." ilk="function" line="33" lineend="510" name="DataTable" signature="DataTable(elContainer, oColumnSet, oDataSource, oConfigs)">
              <variable citdl="HTMLElement" doc="Container element for the TABLE." ilk="argument" name="elContainer" />
              <variable citdl="YAHOO.widget.ColumnSet" doc="ColumnSet instance." ilk="argument" name="oColumnSet" />
              <variable citdl="YAHOO.util.DataSource" doc="DataSource instance." ilk="argument" name="oDataSource" />
              <variable citdl="Object" doc="(optional) Object literal of configuration values." ilk="argument" name="oConfigs" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this.doBeforeLoadData()" line="35" name="ok" />
              <variable attributes="__local__ private" line="35" name="i" />
              <variable attributes="__local__ private" citdl="children[i]" line="68" name="elTable" />
              <variable attributes="__local__ private" citdl="elContainer.childNodes" line="74" name="children" />
              <variable attributes="__local__ private" citdl="Array" line="87" name="aRecords" />
              <variable attributes="__local__ private" citdl="elTable.tBodies[i]" line="91" name="elBody" />
              <variable attributes="__local__ private" citdl="elBody.rows[j]" line="95" name="elRow" />
              <variable attributes="__local__ private" citdl="Object" line="96" lineend="96" name="oRecord" />
            </scope>
            <variable citdl="YAHOO.widget.DataTable._nCount" line="36" name="_nIndex" />
            <variable citdl="String" line="37" name="_sName" />
            <variable citdl="String" line="38" name="id" />
            <variable citdl="oDataSource" line="50" name="dataSource" />
            <variable citdl="oColumnSet" line="58" name="_oColumnSet" />
            <variable citdl="YAHOO.widget.RecordSet" line="65" name="_oRecordSet" />
            <variable citdl="elContainer" line="71" name="_elContainer" />
            <variable citdl="YAHOO.widget.ContextMenu" line="149" name="contextMenu" />
            <variable citdl="this.createEvent()" doc="Fired when a CHECKBOX element is clicked." line="277" name="checkboxClickEvent" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to TABLE element." line="533" name="CLASS_TABLE" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to TBODY element that holds data rows." line="544" name="CLASS_BODY" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to container element within THEAD." line="554" name="CLASS_HEADCONTAINER" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to resizer handle element within THEAD." line="565" name="CLASS_HEADRESIZER" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to text displayed within THEAD." line="576" name="CLASS_HEADTEXT" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to FIRST elements." line="587" name="CLASS_FIRST" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to LAST elements." line="598" name="CLASS_LAST" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to even TR elements." line="609" name="CLASS_EVEN" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to odd TR elements." line="620" name="CLASS_ODD" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to empty elements." line="631" name="CLASS_EMPTY" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to loading message." line="642" name="CLASS_LOADING" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to elements with error messaging." line="653" name="CLASS_ERROR" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to selected elements." line="664" name="CLASS_SELECTED" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to highlighted element." line="675" name="CLASS_HIGHLIGHT" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to container of a scrollable DataTable." line="686" name="CLASS_SCROLLABLE" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to scrolling TBODY element of a scrollable DataTable." line="697" name="CLASS_SCROLLBODY" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to column headers of sortable Columns." line="708" name="CLASS_SORTABLE" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to column headers when sorted in ascending order." line="719" name="CLASS_SORTEDBYASC" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to column headers when sorted in descending order." line="730" name="CLASS_SORTEDBYDESC" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to the paginator container element." line="741" name="CLASS_PAGINATOR" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to the pagination link &quot;&amp;lt;&amp;lt;&quot;." line="752" name="CLASS_FIRSTLINK" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to the pagination link &quot;&amp;lt;&amp;lt;&quot; when it is disabled." line="763" name="CLASS_FIRSTPAGE" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to the pagination link &quot;&amp;gt;&amp;gt;&quot;." line="774" name="CLASS_LASTLINK" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to the pagination link &quot;&amp;gt;&amp;gt;&quot; when it is disabled." line="785" name="CLASS_LASTPAGE" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to the pagination link &quot;&amp;lt;&quot;." line="796" name="CLASS_PREVLINK" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to the pagination link &quot;&amp;lt;&quot; when it is disabled." line="807" name="CLASS_PREVPAGE" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to the pagination link &quot;&amp;gt;&quot;." line="818" name="CLASS_NEXTLINK" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to the pagination link &quot;&amp;gt;&quot; when it is disabled." line="829" name="CLASS_NEXTPAGE" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to pagination links to specific page numbers." line="841" name="CLASS_PAGELINK" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to pagination links for specific page numbers that are disabled." line="852" name="CLASS_CURRENTPAGE" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to the pagination SELECT element." line="863" name="CLASS_PAGESELECT" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to the pagination links container element." line="874" name="CLASS_PAGELINKS" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to editable TD elements." line="885" name="CLASS_EDITABLE" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to editor DIV elements." line="896" name="CLASS_EDITOR" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to TD elements of type &quot;checkbox&quot;." line="907" name="CLASS_CHECKBOX" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to TD elements of type &quot;currency&quot;." line="918" name="CLASS_CURRENCY" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to TD elements of type &quot;date&quot;." line="929" name="CLASS_DATE" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to TD elements of type &quot;email&quot;." line="940" name="CLASS_EMAIL" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to TD elements of type &quot;link&quot;." line="951" name="CLASS_LINK" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to TD elements of type &quot;number&quot;." line="962" name="CLASS_NUMBER" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Class name assigned to TD elements of type &quot;string&quot;." line="973" name="CLASS_STRING" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Message to display if DataTable has no data." line="984" name="MSG_EMPTY" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Message to display while DataTable is loading data." line="995" name="MSG_LOADING" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Message to display while DataTable has data error." line="1006" name="MSG_ERROR" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Internal class variable to index multiple DataTable instances." line="1021" name="_nCount" />
            <scope attributes="private" doc="PRIVATE: Creates HTML markup for TABLE, THEAD, TBODY." ilk="function" line="1218" lineend="1267" name="_initTable" signature="_initTable()">
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this._elTable" line="1230" name="elTable" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1250" name="elMsgBody" />
              <variable attributes="__local__ private" citdl="this._elMsgRow" line="1253" name="elMsgRow" />
              <variable attributes="__local__ private" citdl="elMsgRow.appendChild()" line="1254" name="elMsgCell" />
            </scope>
            <variable citdl="String" line="1220" name="innerHTML" />
            <variable citdl="this._elContainer.appendChild()" line="1229" name="_elTable" />
            <variable citdl="elTable.appendChild()" line="1241" name="_elCaption" />
            <variable citdl="elMsgBody.appendChild()" line="1252" name="_elMsgRow" />
            <variable citdl="elMsgCell" line="1256" name="_elMsgCell" />
            <variable citdl="elTable.appendChild()" line="1257" name="_elMsgBody" />
            <variable citdl="elTable.appendChild()" line="1261" name="_elBody" />
            <variable citdl="Number" line="1262" name="tabIndex" />
            <scope attributes="private" doc="PRIVATE: Populates THEAD element with TH cells as defined by ColumnSet." ilk="function" line="1275" lineend="1331" name="_initHead" signature="_initHead()">
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="colTree[i][j]" line="1276" name="oColumn" />
              <variable attributes="__local__ private" line="1276" name="i" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1279" name="elHead" />
              <variable attributes="__local__ private" citdl="this._oColumnSet.tree" line="1283" name="colTree" />
              <variable attributes="__local__ private" citdl="elHead.appendChild()" line="1285" name="elHeadRow" />
              <variable attributes="__local__ private" citdl="elHeadRow.appendChild()" line="1291" name="elHeadCell" />
              <variable attributes="__local__ private" line="1311" name="elHeadContainer" />
              <variable attributes="__local__ private" citdl="elHeadContainer.appendChild()" line="1312" name="elHeadResizer" />
              <scope attributes="__local__ private" ilk="function" line="1317" lineend="1319" name="cancelClick" signature="cancelClick(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <variable attributes="__local__ private" line="1325" name="elHeadText">
                <variable citdl="Object" line="1326" name="style">
                  <variable citdl="String" line="1326" name="overflow" />
                </variable>
              </variable>
            </scope>
            <variable citdl="this._elTable.appendChild()" line="1297" name="_elHead" />
            <scope attributes="private" doc="PRIVATE: Populates TH cell as defined by Column." ilk="function" line="1343" lineend="1394" name="_initHeadCell" signature="_initHeadCell(elHeadCell, oColumn, row, col)">
              <variable citdl="HTMLElement" doc="TH cell element reference." ilk="argument" name="elHeadCell" />
              <variable citdl="YAHOO.widget.Column" doc="Column object." ilk="argument" name="oColumn" />
              <variable citdl="Number" doc="Row index." ilk="argument" name="row" />
              <variable citdl="Number" doc="Column index." ilk="argument" name="col" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this._nIndex" line="1346" name="index" />
              <variable attributes="__local__ private" line="1360" name="sortClass" />
              <variable attributes="__local__ private" citdl="elHeadCell.appendChild()" line="1372" name="elHeadContainer" />
              <variable attributes="__local__ private" citdl="elHeadContainer.appendChild()" line="1375" name="elHeadContent" />
              <variable attributes="__local__ private" citdl="oColumn.text" line="1379" name="contentText" />
              <variable attributes="__local__ private" citdl="String" line="1386" name="sortLink" />
            </scope>
            <variable citdl="elHeadCell.id" line="1364" name="_id" />
            <scope attributes="private" doc="PRIVATE: If pagination is enabled, initializes paginator container elements and sets&#xA;internal tracking variables." ilk="function" line="1403" lineend="1547" name="_initPaginator" signature="_initPaginator()">
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" line="1404" name="i" />
              <variable attributes="__local__ private" line="1404" name="j" />
              <variable attributes="__local__ private" citdl="Object" line="1407" lineend="1413" name="paginator">
                <variable citdl="Array" line="1408" name="elements" />
                <variable citdl="Number" line="1409" name="pageLinks" />
                <variable citdl="this.rowsPerPageDropdown" line="1410" name="dropdownOptions" />
                <variable citdl="Number" line="1411" name="rowsPerPage" />
                <variable citdl="Number" line="1412" name="currentPage" />
              </variable>
              <variable attributes="__local__ private" citdl="paginator.elements" line="1414" name="elements" />
              <variable attributes="__local__ private" citdl="this.pagers" line="1442" name="dep_containers" />
              <variable attributes="__local__ private" citdl="this.paginatorOptions.containers" line="1451" name="containers" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1462" name="pag0" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1468" name="pag1" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1495" name="links" />
              <variable attributes="__local__ private" citdl="paginator.dropdownOptions" line="1521" name="dropdownOptions" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1524" name="select" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1531" name="option" />
            </scope>
            <variable citdl="pag0" line="1474" name="container" />
            <variable citdl="paginator" line="1545" name="_paginator" />
            <variable citdl="elements" line="1546" name="elements" />
            <scope attributes="private" doc="PRIVATE: Add a new row to table body at position i if given, or to the bottom&#xA;otherwise. Does not fire any events or apply any classes." ilk="function" line="1559" lineend="1619" name="_addRow" returns="String" signature="_addRow(oRecord, index)">
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="Number" doc="Position at which to add row." ilk="argument" name="index" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="1563" name="insert" />
              <variable attributes="__local__ private" citdl="this._oColumnSet" line="1569" name="oColumnSet" />
              <variable attributes="__local__ private" citdl="this._oRecordSet" line="1570" name="oRecordSet" />
              <variable attributes="__local__ private" line="1572" name="elRow" />
              <variable attributes="__local__ private" citdl="oRecord.yuiRecordId" line="1575" name="recId" />
              <variable attributes="__local__ private" citdl="oColumnSet.keys[j]" line="1581" name="oColumn" />
              <variable attributes="__local__ private" citdl="elRow.appendChild()" line="1582" name="elCell">
                <variable citdl="Object" line="1599" name="style">
                  <variable citdl="String" line="1599" name="overflow" />
                </variable>
              </variable>
            </scope>
            <scope attributes="private" doc="PRIVATE: Resets first row being tracked by class YAHOO.widget.DataTable.CLASS_FIRST." ilk="function" line="1627" lineend="1637" name="_resetFirstRow" signature="_resetFirstRow()">
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this._elBody.rows[0]" line="1630" name="elFirstRow" />
            </scope>
            <variable citdl="elFirstRow" line="1632" name="_elFirstRow" />
            <scope attributes="private" doc="PRIVATE: Resets last row being tracked by class YAHOO.widget.DataTable.CLASS_LAST." ilk="function" line="1645" lineend="1655" name="_resetLastRow" signature="_resetLastRow()">
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this._elBody.rows[this._elBody.rows.length-1]" line="1648" name="elLastRow" />
            </scope>
            <variable citdl="elLastRow" line="1650" name="_elLastRow" />
            <scope attributes="private" doc="PRIVATE: Restripes rows by applying class YAHOO.widget.DataTable.CLASS_EVEN or&#xA;YAHOO.widget.DataTable.CLASS_ODD." ilk="function" line="1665" lineend="1682" name="_restripeRows" signature="_restripeRows(range)">
              <variable citdl="Number" doc="(optional) Range defines a subset of rows to restripe." ilk="argument" name="range" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this._elBody.rows" line="1667" name="rows" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Updates existing row at position i with data from the given Record. Does not&#xA;fire any events." ilk="function" line="1694" lineend="1705" name="_updateRow" returns="String" signature="_updateRow(oRecord, index)">
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="Number" doc="Position at which to update row." ilk="argument" name="index" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this._elBody.rows[index]" line="1697" name="elRow" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Sets elements to selected state. Does not fire any events. Does not affect&#xA;internal tracker." ilk="function" line="1716" lineend="1726" name="_select" signature="_select(els)">
              <variable citdl="{HTMLElement" doc="| String | HTMLElement[] | String[]} HTML element by&#xA;reference or ID string, or array of HTML elements by reference or ID string." ilk="argument" name="els" />
              <variable citdl="DataTable" name="this" />
            </scope>
            <variable citdl="els[els.length-1].id" line="1725" name="_lastSelectedId" />
            <scope attributes="private" doc="PRIVATE: Sets elements to the unselected state. Does not fire any events. Does not&#xA;affect internal tracker." ilk="function" line="1737" lineend="1746" name="_unselect" signature="_unselect(els)">
              <variable citdl="{HTMLElement" doc="| String | HTMLElement[] | String[]} HTMLElement by&#xA;reference or ID string, or array of HTML elements by reference or ID string." ilk="argument" name="els" />
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Unselects all selected rows. Does not fire any events. Does not affect internal&#xA;tracker." ilk="function" line="1755" lineend="1758" name="_unselectAllRows" signature="_unselectAllRows()">
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getElementsByClassName()" line="1756" name="selectedRows" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Unselects all selected cells." ilk="function" line="1766" lineend="1769" name="_unselectAllCells" signature="_unselectAllCells()">
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getElementsByClassName()" line="1767" name="selectedCells" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Deletes a given row element as well its corresponding Record in the RecordSet.&#xA;Does not fire any events." ilk="function" line="1779" lineend="1796" name="_deleteRow" signature="_deleteRow(elRow)">
              <variable citdl="Element" doc="HTML table row element reference." ilk="argument" name="elRow" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this._elBody.rows" line="1781" name="allRows" />
              <variable attributes="__local__ private" citdl="elRow.id" line="1782" name="id" />
              <variable attributes="__local__ private" citdl="elRow.yuiRecordId" line="1783" name="recordId" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles blur events on the TABLE element." ilk="function" line="1811" lineend="1813" name="_onBlur" signature="_onBlur(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The blur event." ilk="argument" name="e" />
              <variable citdl="YAHOO.widget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
              <variable citdl="DataTable" name="this" />
            </scope>
            <variable citdl="Boolean" line="1812" name="_bFocused" />
            <scope attributes="private" doc="PRIVATE: Handles mouseover events on the TABLE element." ilk="function" line="1823" lineend="1858" name="_onMouseover" signature="_onMouseover(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The mouseover event." ilk="argument" name="e" />
              <variable citdl="YAHOO.widget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="1824" name="elTarget" />
              <variable attributes="__local__ private" citdl="elTarget.tagName.toLowerCase()" line="1825" name="elTag" />
              <variable attributes="__local__ private" citdl="Boolean" line="1826" name="knownTag" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles mouseout events on the TABLE element." ilk="function" line="1868" lineend="1903" name="_onMouseout" signature="_onMouseout(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The mouseout event." ilk="argument" name="e" />
              <variable citdl="YAHOO.widget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="1869" name="elTarget" />
              <variable attributes="__local__ private" citdl="elTarget.tagName.toLowerCase()" line="1870" name="elTag" />
              <variable attributes="__local__ private" citdl="Boolean" line="1871" name="knownTag" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles mousedown events on the TABLE element." ilk="function" line="1913" lineend="1950" name="_onMousedown" signature="_onMousedown(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The mousedown event." ilk="argument" name="e" />
              <variable citdl="YAHOO.widget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="1914" name="elTarget" />
              <variable attributes="__local__ private" citdl="elTarget.tagName.toLowerCase()" line="1915" name="elTag" />
              <variable attributes="__local__ private" citdl="Boolean" line="1916" name="knownTag" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles click events on the TABLE element." ilk="function" line="1960" lineend="2006" name="_onClick" signature="_onClick(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="e" />
              <variable citdl="YAHOO.widget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="1963" name="elTarget" />
              <variable attributes="__local__ private" citdl="elTarget.tagName.toLowerCase()" line="1964" name="elTag" />
              <variable attributes="__local__ private" citdl="Boolean" line="1965" name="knownTag" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles doubleclick events on the TABLE element." ilk="function" line="2016" lineend="2048" name="_onDoubleclick" signature="_onDoubleclick(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The doubleclick event." ilk="argument" name="e" />
              <variable citdl="YAHOO.widget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="2017" name="elTarget" />
              <variable attributes="__local__ private" citdl="elTarget.tagName.toLowerCase()" line="2018" name="elTag" />
              <variable attributes="__local__ private" citdl="Boolean" line="2019" name="knownTag" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles keypress events on the TABLE. Mainly to support stopEvent on Mac." ilk="function" line="2058" lineend="2070" name="_onKeypress" signature="_onKeypress(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The key event." ilk="argument" name="e" />
              <variable citdl="YAHOO.widget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" line="2059" name="isMac" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles keydown events on the TABLE. Executes arrow selection." ilk="function" line="2080" lineend="2148" name="_onKeydown" signature="_onKeydown(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The key event." ilk="argument" name="e" />
              <variable citdl="YAHOO.widget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="oSelf._lastSelectedId" line="2081" name="oldSelectedId" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.get()" line="2086" name="oldSelected" />
              <variable attributes="__local__ private" citdl="oSelf._elBody.rows[oldSelected.sectionRowIndex+1]" line="2087" name="newSelected" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles keyup events on the TABLE. Executes deletion" ilk="function" line="2158" lineend="2164" name="_onKeyup" signature="_onKeyup(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The key event." ilk="argument" name="e" />
              <variable citdl="YAHOO.widget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getCharCode()" line="2159" name="key" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles keydown events on the DOCUMENT. Executes interaction with editor." ilk="function" line="2174" lineend="2184" name="_onDocumentKeydown" signature="_onDocumentKeydown(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The key event." ilk="argument" name="e" />
              <variable citdl="YAHOO.widget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles click events on the DOCUMENT. Hides active editor." ilk="function" line="2194" lineend="2196" name="_onDocumentClick" signature="_onDocumentClick(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="e" />
              <variable citdl="YAHOO.widget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles click events on paginator links." ilk="function" line="2206" lineend="2252" name="_onPagerClick" signature="_onPagerClick(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="e" />
              <variable citdl="YAHOO.widget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="2209" name="elTarget" />
              <variable attributes="__local__ private" citdl="elTarget.tagName.toLowerCase()" line="2210" name="elTag" />
              <variable attributes="__local__ private" citdl="Boolean" line="2211" name="knownTag" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles change events on paginator SELECT." ilk="function" line="2262" lineend="2276" name="_onPagerSelect" signature="_onPagerSelect(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The change event." ilk="argument" name="e" />
              <variable citdl="YAHOO.widget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="2263" name="elTarget" />
              <variable attributes="__local__ private" citdl="elTarget[elTarget.selectedIndex].value" line="2264" name="value" />
              <variable attributes="__local__ private" citdl="oSelf._paginator.rowsPerPage" line="2267" name="oldRowsPerPage" />
              <variable attributes="__local__ private" citdl="parseInt()" line="2268" name="rowsPerPage" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles row delete events." ilk="function" line="2291" lineend="2293" name="_onRowDelete" signature="_onRowDelete(oArgs)">
              <variable ilk="argument" name="oArgs" />
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Passes along recordSetUpdate Event when recordUpdateEvent is caught from RecordSet." ilk="function" line="2305" lineend="2307" name="_onRecordUpdate" signature="_onRecordUpdate(oArgs)">
              <variable ilk="argument" name="oArgs" />
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Public accessor to the unique name of the DataSource instance." ilk="function" line="2530" lineend="2532" name="toString" returns="String" signature="toString()">
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Returns element reference to TABLE." ilk="function" line="2540" lineend="2542" name="getTable" returns="HTMLElement" signature="getTable()">
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Returns element reference to THEAD." ilk="function" line="2550" lineend="2552" name="getHead" returns="HTMLElement" signature="getHead()">
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Returns element reference to TBODY." ilk="function" line="2560" lineend="2562" name="getBody" returns="HTMLElement" signature="getBody()">
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Returns element reference to TR element at given index." ilk="function" line="2571" lineend="2576" name="getRow" returns="HTMLElement" signature="getRow(index)">
              <variable citdl="Number" doc="Row number." ilk="argument" name="index" />
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Returns element reference to first TR element." ilk="function" line="2584" lineend="2586" name="getFirstRow" returns="HTMLElement" signature="getFirstRow()">
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Returns element reference to last TR element." ilk="function" line="2594" lineend="2596" name="getLastRow" returns="HTMLElement" signature="getLastRow()">
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Returns element reference to TD element at given row and column positions." ilk="function" line="2606" lineend="2612" name="getCell" returns="HTMLElement" signature="getCell(rowIndex, colIndex)">
              <variable citdl="Number" doc="Row index." ilk="argument" name="rowIndex" />
              <variable citdl="Number" doc="Column index." ilk="argument" name="colIndex" />
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Displays placeholder row with a message when there are no data rows." ilk="function" line="2621" lineend="2630" name="showTableMessage" signature="showTableMessage(sHTML, sClassName)">
              <variable citdl="String" doc="(optional) Value for innerHTML." ilk="argument" name="sHTML" />
              <variable citdl="String" doc="(optional) Classname." ilk="argument" name="sClassName" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this._elMsgCell" line="2622" name="elCell" />
            </scope>
            <variable citdl="String" line="2629" name="display" />
            <scope doc="Hide placeholder message." ilk="function" line="2637" lineend="2639" name="hideTableMessage" signature="hideTableMessage()">
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope attributes="deprecated" ilk="function" line="2647" lineend="2660" name="showEmptyMessage" signature="showEmptyMessage()">
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this._elMsgCell" line="2656" name="elCell" />
            </scope>
            <variable citdl="Boolean" line="2659" name="isEmpty" />
            <scope attributes="deprecated" ilk="function" line="2667" lineend="2680" name="showLoadingMessage" signature="showLoadingMessage()">
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this._elMsgCell" line="2676" name="elCell" />
            </scope>
            <variable citdl="Boolean" line="2679" name="isLoading" />
            <scope attributes="deprecated" ilk="function" line="2687" lineend="2696" name="hideTableMessages" signature="hideTableMessages()">
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Sets focus on the TABLE element." ilk="function" line="2703" lineend="2713" name="focusTable" signature="focusTable()">
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this._elTable" line="2704" name="elTable" />
            </scope>
            <scope doc="Overridable method gives implementers a hook to access data before&#xA;it gets added to RecordSet and rendered to the TBODY." ilk="function" line="2725" lineend="2727" name="doBeforeLoadData" returns="Boolean" signature="doBeforeLoadData(sRequest, oResponse)">
              <variable citdl="String" doc="Original request." ilk="argument" name="sRequest" />
              <variable citdl="Object" doc="Response object." ilk="argument" name="oResponse" />
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Add rows to bottom of table body." ilk="function" line="2735" lineend="2750" name="appendRows" signature="appendRows(aRecords)">
              <variable citdl="Array" doc="Array of Records." ilk="argument" name="aRecords" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="2739" name="rowIds" />
              <variable attributes="__local__ private" citdl="this._addRow()" line="2741" name="rowId" />
            </scope>
            <scope doc="Add rows to top of table body." ilk="function" line="2758" lineend="2773" name="insertRows" signature="insertRows(aRecords)">
              <variable citdl="Array" doc="Array of Records." ilk="argument" name="aRecords" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="2762" name="rowIds" />
              <variable attributes="__local__ private" citdl="this._addRow()" line="2764" name="rowId" />
            </scope>
            <scope doc="Replaces existing rows of table body with new Records." ilk="function" line="2781" lineend="2833" name="replaceRows" signature="replaceRows(aRecords)">
              <variable citdl="Array" doc="Array of Records." ilk="argument" name="aRecords" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" line="2782" name="i" />
              <variable attributes="__local__ private" citdl="this._elBody" line="2787" name="elBody" />
              <variable attributes="__local__ private" citdl="this._elBody.rows" line="2788" name="elRows" />
              <variable attributes="__local__ private" citdl="this.getSelectedRecordIds()" line="2796" name="selectedRecords" />
              <variable attributes="__local__ private" citdl="Array" line="2801" name="rowIds" />
              <variable attributes="__local__ private" citdl="elBody.rows" line="2816" name="allRows" />
            </scope>
            <scope doc="Convenience method to add a new row to table body at position index if given,&#xA;or to the bottom otherwise." ilk="function" line="2843" lineend="2858" name="addRow" signature="addRow(oRecord, index)">
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="Number" doc="Position at which to add row." ilk="argument" name="index" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this._addRow()" line="2845" name="rowId" />
            </scope>
            <scope doc="Updates existing row at position index with data from the given Record." ilk="function" line="2867" lineend="2872" name="updateRow" signature="updateRow(oRecord, index)">
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="Number" doc="Position at which to update row." ilk="argument" name="index" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this._updateRow()" line="2869" name="rowId" />
            </scope>
            <scope doc="Calls delete on given rows." ilk="function" line="2880" lineend="2893" name="deleteRows" signature="deleteRows(elRows)">
              <variable citdl="Array" doc="Array of HTML table row element reference." ilk="argument" name="elRows" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="2881" name="rowIndexes" />
              <variable attributes="__local__ private" line="2883" name="rowIndex" />
            </scope>
            <scope doc="Deletes a given row element as well its corresponding Record in the RecordSet." ilk="function" line="2901" lineend="2913" name="deleteRow" signature="deleteRow(elRow)">
              <variable citdl="HTMLElement" doc="HTML table row element reference." ilk="argument" name="elRow" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" line="2903" name="rowIndex" />
            </scope>
            <scope doc="Sets a row to the selected state." ilk="function" line="2921" lineend="2954" name="selectRow" signature="selectRow(row)">
              <variable citdl="{HTMLElement" doc="| String} HTML TR element reference or ID." ilk="argument" name="row" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="row.yuiRecordId" line="2925" name="recordId" />
              <variable attributes="__local__ private" citdl="this._aSelectedRecords" line="2928" name="tracker" />
            </scope>
            <variable citdl="tracker" line="2950" name="_aSelectedRecords" />
            <scope doc="Sets a row to the unselected state." ilk="function" line="2962" lineend="2991" name="unselectRow" signature="unselectRow(row)">
              <variable citdl="{HTMLElement" doc="| String} HTML TR element reference or ID." ilk="argument" name="row" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="row.yuiRecordId" line="2966" name="recordId" />
              <variable attributes="__local__ private" citdl="this._aSelectedRecords" line="2969" name="tracker" />
            </scope>
            <scope doc="Sets one or more elements to the highlighted state." ilk="function" line="3000" lineend="3008" name="highlight" signature="highlight(els)">
              <variable citdl="{HTMLElement" doc="| String | HTMLElement[] | String[]} HTML TR element&#xA;reference, TR String ID, array of HTML TR element, or array of TR element IDs." ilk="argument" name="els" />
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Sets one or more elements to the unhighlighted state." ilk="function" line="3017" lineend="3025" name="unhighlight" signature="unhighlight(els)">
              <variable citdl="{HTMLElement" doc="| String | HTMLElement[] | String[]} HTML TR element&#xA;reference, TR String ID, array of HTML TR element, or array of TR element IDs." ilk="argument" name="els" />
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Sets one or more elements to the selected state." ilk="function" line="3035" lineend="3065" name="select" signature="select(els)">
              <variable citdl="{HTMLElement" doc="| String | HTMLElement[] | String[]} HTML TR element&#xA;reference, TR String ID, array of HTML TR element, or array of TR element IDs." ilk="argument" name="els" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this._aSelectedRecords" line="3043" name="tracker" />
              <variable attributes="__local__ private" citdl="els[i].yuiRecordId" line="3045" name="id" />
            </scope>
            <scope doc="Sets one or more elements to the unselected state." ilk="function" line="3074" lineend="3101" name="unselect" signature="unselect(els)">
              <variable citdl="{HTMLElement" doc="| String | HTMLElement[] | String[]} HTML element&#xA;reference, element ID, array of HTML elements, or array of element IDs" ilk="argument" name="els" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this._aSelectedRecords" line="3081" name="tracker" />
              <variable attributes="__local__ private" citdl="els[i].yuiRecordId" line="3083" name="id" />
            </scope>
            <scope doc="Unselects all selected rows (across all pages, if applicable)." ilk="function" line="3108" lineend="3113" name="unselectAllRows" signature="unselectAllRows()">
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getElementsByClassName()" line="3109" name="selectedRows" />
            </scope>
            <scope doc="Unselects all selected cells." ilk="function" line="3120" lineend="3124" name="unselectAllCells" signature="unselectAllCells()">
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getElementsByClassName()" line="3121" name="selectedCells" />
            </scope>
            <scope doc="Returns true if given element is select, false otherwise." ilk="function" line="3134" lineend="3136" name="isSelected" returns="Boolean" signature="isSelected(el)">
              <variable citdl="HTMLElement" doc="HTML element reference or ID." ilk="argument" name="el" />
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Returns array of selected Record IDs." ilk="function" line="3144" lineend="3146" name="getSelectedRecordIds" returns="Array" signature="getSelectedRecordIds()">
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Returns array of selected rows." ilk="function" line="3154" lineend="3157" name="getSelectedRows" returns="Array" signature="getSelectedRows()">
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Returns array of selected TD cells." ilk="function" line="3165" lineend="3168" name="getSelectedCells" returns="Array" signature="getSelectedCells()">
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Returns pointer to the DataTable instance&apos;s ColumnSet instance." ilk="function" line="3176" lineend="3178" name="getColumnSet" returns="YAHOO.widget.ColumnSet" signature="getColumnSet()">
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Returns pointer to the DataTable instance&apos;s RecordSet instance." ilk="function" line="3186" lineend="3188" name="getRecordSet" returns="YAHOO.widget.RecordSet" signature="getRecordSet()">
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Returns paginator object literal." ilk="function" line="3211" lineend="3213" name="getPaginator" returns="Object" signature="getPaginator()">
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Displays a specific page of a paginated DataTable." ilk="function" line="3221" lineend="3228" name="showPage" signature="showPage(nPage)">
              <variable citdl="Number" doc="Which page." ilk="argument" name="nPage" />
              <variable citdl="DataTable" name="this" />
            </scope>
            <variable citdl="nPage" line="3226" name="currentPage" />
            <scope doc="Updates paginator links container with markup." ilk="function" line="3235" lineend="3264" name="formatPaginatorLinks" signature="formatPaginatorLinks(elLinksContainer, nCurrentPage, nPageLinksStart, nPageLinksLength, nTotalPages)">
              <variable ilk="argument" name="elLinksContainer" />
              <variable ilk="argument" name="nCurrentPage" />
              <variable ilk="argument" name="nPageLinksStart" />
              <variable ilk="argument" name="nPageLinksLength" />
              <variable ilk="argument" name="nTotalPages" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" line="3237" name="isFirstPage" />
              <variable attributes="__local__ private" line="3238" name="isLastPage" />
              <variable attributes="__local__ private" line="3239" name="firstPageLink" />
              <variable attributes="__local__ private" line="3242" name="prevPageLink" />
              <variable attributes="__local__ private" line="3245" name="nextPageLink" />
              <variable attributes="__local__ private" line="3248" name="lastPageLink" />
              <variable attributes="__local__ private" line="3252" name="maxLinks" />
            </scope>
            <scope attributes="deprecated" ilk="function" line="3271" lineend="3273" name="paginateRows" signature="paginateRows()">
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Populates TBODY rows with data from RecordSet. If pagination is enabled,&#xA;displays only rows for current page and updates paginator UI, otherwise&#xA;displays all rows." ilk="function" line="3282" lineend="3365" name="populateTable" signature="populateTable()">
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this._oRecordSet.getRecords()" line="3284" name="records" />
              <variable attributes="__local__ private" citdl="this._oRecordSet.getLength()" line="3301" name="recordsLength" />
              <variable attributes="__local__ private" line="3304" name="rowsPerPage" />
              <variable attributes="__local__ private" line="3308" name="maxRows" />
              <variable attributes="__local__ private" citdl="this._paginator.currentPage" line="3315" name="currentPage" />
              <variable attributes="__local__ private" line="3318" name="startRecordIndex" />
              <variable attributes="__local__ private" citdl="this._paginator.pageLinks" line="3321" name="pageLinksLength" />
              <variable attributes="__local__ private" line="3330" name="pageLinksStart" />
              <variable attributes="__local__ private" citdl="this._paginator.elements[i].select.options" line="3345" name="options" />
            </scope>
            <variable citdl="recordsLength" line="3309" name="rowsPerPage" />
            <variable citdl="Math.ceil()" line="3312" name="totalPages" />
            <scope doc="Sort given column." ilk="function" line="3373" lineend="3460" name="sortColumn" signature="sortColumn(oColumn)">
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" line="3384" name="sortDir" />
              <variable attributes="__local__ private" citdl="oColumn.sortOptions.descFunction" line="3401" name="sortFnc" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Sort.compareDesc()" line="3413" name="sorted" />
              <scope attributes="__local__ private" ilk="function" line="3414" lineend="3433" name="sortFnc" returns="sorted" signature="sortFnc(a, b)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="b" />
              </scope>
              <variable attributes="__local__ private" line="3446" name="newClass" />
            </scope>
            <variable citdl="Object" line="3397" lineend="3397" name="sortedBy" />
            <variable citdl="oColumn.key" line="3450" name="colKey" />
            <variable citdl="sortDir" line="3451" name="dir" />
            <scope doc="Shows editor for given cell." ilk="function" line="3468" lineend="3483" name="editCell" signature="editCell(elCell)">
              <variable citdl="HTMLElement" doc="Cell element to edit." ilk="argument" name="elCell" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this._oColumnSet.keys[elCell.columnIndex]" line="3470" name="column" />
            </scope>
            <variable citdl="column.getEditor()" line="3472" name="activeEditor" />
            <scope doc="Hides active editor, not saving any data." ilk="function" line="3490" lineend="3501" name="cancelEditorData" signature="cancelEditorData()">
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Saves data in active editor." ilk="function" line="3508" lineend="3536" name="saveEditorData" signature="saveEditorData()">
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this.activeEditor.cell" line="3510" name="elCell" />
              <variable attributes="__local__ private" citdl="this.activeEditor.column" line="3511" name="oColumn" />
              <variable attributes="__local__ private" citdl="this.activeEditor.record" line="3512" name="oRecord" />
              <variable attributes="__local__ private" citdl="oRecord[oColumn.key]" line="3513" name="oldValue" />
              <variable attributes="__local__ private" citdl="this.activeEditor.getValue()" line="3514" name="newValue" />
            </scope>
            <scope doc="Formats given cell." ilk="function" line="3544" lineend="3557" name="formatCell" signature="formatCell(elCell)">
              <variable citdl="HTMLElement" doc="Cell element to format." ilk="argument" name="elCell" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="elCell.columnIndex" line="3546" name="index" />
              <variable attributes="__local__ private" citdl="this._oColumnSet.keys[index]" line="3547" name="column" />
            </scope>
            <scope doc="Overridable custom event handler to sort column." ilk="function" line="3573" lineend="3585" name="onEventSortColumn" signature="onEventSortColumn(oArgs)">
              <variable ilk="argument" name="oArgs" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="oArgs.event" line="3574" name="evt" />
              <variable attributes="__local__ private" citdl="oArgs.target" line="3575" name="target" />
            </scope>
            <scope doc="Overridable custom event handler to select row according to desktop paradigm." ilk="function" line="3594" lineend="3733" name="onEventSelectRow" signature="onEventSelectRow(oArgs)">
              <variable ilk="argument" name="oArgs" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="oArgs.event" line="3595" name="evt" />
              <variable attributes="__local__ private" citdl="oArgs.target" line="3596" name="elTarget" />
              <variable attributes="__local__ private" citdl="elTarget.tagName.toLowerCase()" line="3597" name="elTag" />
              <variable attributes="__local__ private" citdl="this.rowSingleSelect" line="3598" name="bSingleSelect" />
              <variable attributes="__local__ private" citdl="evt.shiftKey" line="3599" name="bSHIFT" />
              <variable attributes="__local__ private" citdl="evt.ctrlKey" line="3600" name="bCTRL" />
              <variable attributes="__local__ private" line="3601" name="i" />
              <variable attributes="__local__ private" citdl="elTarget.id" line="3613" name="sTargetId" />
              <variable attributes="__local__ private" citdl="this._elBody.rows" line="3614" name="rows" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.get()" line="3615" name="anchor" />
              <variable attributes="__local__ private" citdl="anchor.sectionRowIndex" line="3616" name="anchorIndex" />
              <variable attributes="__local__ private" citdl="elTarget.sectionRowIndex" line="3617" name="targetIndex" />
            </scope>
            <variable citdl="sTargetId" line="3665" name="_selectRowAnchorId" />
            <scope doc="Overridable custom event handler to select cell." ilk="function" line="3742" lineend="3767" name="onEventSelectCell" signature="onEventSelectCell(oArgs)">
              <variable ilk="argument" name="oArgs" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="oArgs.event" line="3743" name="evt" />
              <variable attributes="__local__ private" citdl="oArgs.target" line="3744" name="target" />
              <variable attributes="__local__ private" citdl="target.tagName.toLowerCase()" line="3745" name="elTag" />
            </scope>
            <scope doc="Overridable custom event handler to format cell." ilk="function" line="3776" lineend="3793" name="onEventFormatCell" signature="onEventFormatCell(oArgs)">
              <variable ilk="argument" name="oArgs" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="oArgs.event" line="3777" name="evt" />
              <variable attributes="__local__ private" citdl="oArgs.target" line="3778" name="target" />
              <variable attributes="__local__ private" citdl="target.tagName.toLowerCase()" line="3779" name="elTag" />
            </scope>
            <scope doc="Overridable custom event handler to highlight cell." ilk="function" line="3802" lineend="3819" name="onEventHighlightCell" signature="onEventHighlightCell(oArgs)">
              <variable ilk="argument" name="oArgs" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="oArgs.event" line="3803" name="evt" />
              <variable attributes="__local__ private" citdl="oArgs.target" line="3804" name="target" />
              <variable attributes="__local__ private" citdl="target.tagName.toLowerCase()" line="3805" name="elTag" />
            </scope>
            <scope doc="Overridable custom event handler to unhighlight cell." ilk="function" line="3828" lineend="3845" name="onEventUnhighlightCell" signature="onEventUnhighlightCell(oArgs)">
              <variable ilk="argument" name="oArgs" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="oArgs.event" line="3829" name="evt" />
              <variable attributes="__local__ private" citdl="oArgs.target" line="3830" name="target" />
              <variable attributes="__local__ private" citdl="target.tagName.toLowerCase()" line="3831" name="elTag" />
            </scope>
            <scope doc="Overridable custom event handler to edit cell." ilk="function" line="3853" lineend="3870" name="onEventEditCell" signature="onEventEditCell(oArgs)">
              <variable ilk="argument" name="oArgs" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="oArgs.event" line="3854" name="evt" />
              <variable attributes="__local__ private" citdl="oArgs.target" line="3855" name="target" />
              <variable attributes="__local__ private" citdl="target.tagName.toLowerCase()" line="3856" name="elTag" />
            </scope>
            <scope attributes="deprecated" ilk="function" line="3876" lineend="3878" name="onDataReturnPaginateRows" signature="onDataReturnPaginateRows(sRequest, oResponse, bError)">
              <variable ilk="argument" name="sRequest" />
              <variable ilk="argument" name="oResponse" />
              <variable ilk="argument" name="bError" />
              <variable citdl="DataTable" name="this" />
            </scope>
            <scope doc="Handles data return for adding new rows to table, including updating pagination." ilk="function" line="3888" lineend="3906" name="onDataReturnPopulateTable" signature="onDataReturnPopulateTable(sRequest, oResponse, bError)">
              <variable citdl="String" doc="Original request." ilk="argument" name="sRequest" />
              <variable citdl="Object" doc="Response object." ilk="argument" name="oResponse" />
              <variable citdl="Boolean" doc="(optional) True if there was a data error." ilk="argument" name="bError" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this.doBeforeLoadData()" line="3891" name="ok" />
              <variable attributes="__local__ private" citdl="this._oRecordSet.append()" line="3894" name="newRecords" />
            </scope>
            <scope doc="Handles data return for adding new rows to bottom of table." ilk="function" line="3916" lineend="3928" name="onDataReturnAppendRows" signature="onDataReturnAppendRows(sRequest, oResponse, bError)">
              <variable citdl="String" doc="Original request." ilk="argument" name="sRequest" />
              <variable citdl="Object" doc="Response object." ilk="argument" name="oResponse" />
              <variable citdl="Boolean" doc="(optional) True if there was a data error." ilk="argument" name="bError" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this.doBeforeLoadData()" line="3919" name="ok" />
              <variable attributes="__local__ private" citdl="this._oRecordSet.append()" line="3922" name="newRecords" />
            </scope>
            <scope doc="Handles data return for inserting new rows to top of table." ilk="function" line="3938" lineend="3950" name="onDataReturnInsertRows" signature="onDataReturnInsertRows(sRequest, oResponse, bError)">
              <variable citdl="String" doc="Original request." ilk="argument" name="sRequest" />
              <variable citdl="Object" doc="Response object." ilk="argument" name="oResponse" />
              <variable citdl="Boolean" doc="(optional) True if there was a data error." ilk="argument" name="bError" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this.doBeforeLoadData()" line="3941" name="ok" />
              <variable attributes="__local__ private" citdl="this._oRecordSet.insert()" line="3944" name="newRecords" />
            </scope>
            <scope doc="Handles data return for replacing all existing of table with new rows." ilk="function" line="3960" lineend="3971" name="onDataReturnReplaceRows" signature="onDataReturnReplaceRows(sRequest, oResponse, bError)">
              <variable citdl="String" doc="Original request." ilk="argument" name="sRequest" />
              <variable citdl="Object" doc="Response object." ilk="argument" name="oResponse" />
              <variable citdl="Boolean" doc="(optional) True if there was a data error." ilk="argument" name="bError" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="this.doBeforeLoadData()" line="3963" name="ok" />
              <variable attributes="__local__ private" citdl="this._oRecordSet.replace()" line="3966" name="newRecords" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.util.DragDrop" ilk="class" line="38" lineend="44" name="Slider">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Slider component is a UI control that enables the user to adjust&#xA;values in a finite range along one or two axes. Typically, the Slider&#xA;control is used in a web application as a rich, visual replacement&#xA;for an input box that takes a number as input. The Slider control can&#xA;also easily accommodate a second dimension, providing x,y output for&#xA;a selection point chosen from a rectangular region." ilk="function" line="38" lineend="44" name="Slider" signature="Slider(sElementId, sGroup, oThumb, sType)">
              <variable ilk="argument" name="sElementId" />
              <variable citdl="String" doc="The group of related DragDrop items" ilk="argument" name="sGroup" />
              <variable citdl="SliderThumb" doc="The thumb for this slider" ilk="argument" name="oThumb" />
              <variable citdl="String" doc="The type of slider (horiz, vert, region)" ilk="argument" name="sType" />
              <variable citdl="Slider" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Factory method for creating a horizontal slider" ilk="function" line="59" lineend="63" name="getHorizSlider" returns="Slider" signature="getHorizSlider(sBGElId, sHandleElId, iLeft, iRight, iTickSize)">
              <variable citdl="String" doc="the id of the slider&apos;s background element" ilk="argument" name="sBGElId" />
              <variable citdl="String" doc="the id of the thumb element" ilk="argument" name="sHandleElId" />
              <variable citdl="Number" doc="the number of pixels the element can move left" ilk="argument" name="iLeft" />
              <variable citdl="Number" doc="the number of pixels the element can move right" ilk="argument" name="iRight" />
              <variable citdl="Number" doc="optional parameter for specifying that the element&#xA;should move a certain number pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="Slider" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Factory method for creating a vertical slider" ilk="function" line="78" lineend="82" name="getVertSlider" returns="Slider" signature="getVertSlider(sBGElId, sHandleElId, iUp, iDown, iTickSize)">
              <variable citdl="String" doc="the id of the slider&apos;s background element" ilk="argument" name="sBGElId" />
              <variable citdl="String" doc="the id of the thumb element" ilk="argument" name="sHandleElId" />
              <variable citdl="Number" doc="the number of pixels the element can move up" ilk="argument" name="iUp" />
              <variable citdl="Number" doc="the number of pixels the element can move down" ilk="argument" name="iDown" />
              <variable citdl="Number" doc="optional parameter for specifying that the element&#xA;should move a certain number pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="Slider" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Factory method for creating a slider region like the one in the color&#xA;picker example" ilk="function" line="100" lineend="104" name="getSliderRegion" returns="Slider" signature="getSliderRegion(sBGElId, sHandleElId, iLeft, iRight, iUp, iDown, iTickSize)">
              <variable citdl="String" doc="the id of the slider&apos;s background element" ilk="argument" name="sBGElId" />
              <variable citdl="String" doc="the id of the thumb element" ilk="argument" name="sHandleElId" />
              <variable citdl="Number" doc="the number of pixels the element can move left" ilk="argument" name="iLeft" />
              <variable citdl="Number" doc="the number of pixels the element can move right" ilk="argument" name="iRight" />
              <variable citdl="Number" doc="the number of pixels the element can move up" ilk="argument" name="iUp" />
              <variable citdl="Number" doc="the number of pixels the element can move down" ilk="argument" name="iDown" />
              <variable citdl="Number" doc="optional parameter for specifying that the element&#xA;should move a certain number pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="Slider" name="this" />
            </scope>
            <variable attributes="__static__" citdl="Boolean" doc="STATIC: By default, animation is available if the animation library is detected." line="112" name="ANIM_AVAIL" />
            <scope doc="Initializes the slider.  Executed in the constructor" ilk="function" line="121" lineend="226" name="initSlider" signature="initSlider(sType)">
              <variable citdl="String" doc="the type of slider (horiz, vert, region)" ilk="argument" name="sType" />
            </scope>
            <variable citdl="String" doc="The type of the slider (horiz, vert, region)" line="128" name="type" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Overrides the isTarget property in YAHOO.util.DragDrop" line="162" name="isTarget" />
            <variable citdl="Boolean" doc="Flag that determines if the thumb will animate when moved" line="169" name="animate" />
            <variable citdl="Boolean" doc="Set to false to disable a background click thumb move" line="176" name="backgroundEnabled" />
            <variable citdl="Number" doc="Adjustment factor for tick animation, the more ticks, the&#xA;faster the animation (by default)" line="184" name="tickPause" />
            <variable citdl="Boolean" doc="Enables the arrow, home and end keys, defaults to true." line="191" name="enableKeys" />
            <variable citdl="Number" doc="Specifies the number of pixels the arrow keys will move the slider.&#xA;Default is 25." line="199" name="keyIncrement" />
            <variable attributes="deprecated" citdl="Boolean" doc="DEPRECATED: moveComplete is set to true when the slider has moved to its final&#xA;destination.  For animated slider, this value can be checked in&#xA;the onChange handler to make it possible to execute logic only&#xA;when the move is complete rather than at all points along the way.&#xA;Deprecated because this flag is only useful when the background is&#xA;clicked and the slider is animated.  If the user drags the thumb,&#xA;the flag is updated when the drag is over ... the final onDrag event&#xA;fires before the mouseup the ends the drag, so the implementer will&#xA;never see it." line="216" name="moveComplete" />
            <variable citdl="Number" doc="If animation is configured, specifies the length of the animation&#xA;in seconds." line="225" name="animationDuration" />
            <scope doc="Initializes the slider&apos;s thumb. Executed in the constructor." ilk="function" line="233" lineend="264" name="initThumb" signature="initThumb(t)">
              <variable citdl="YAHOO.widget.SliderThumb" doc="the slider thumb" ilk="argument" name="t" />
              <variable attributes="__local__ private" citdl="this" line="235" name="self" />
              <variable citdl="Object" line="247" name="t">
                <scope ilk="function" line="247" lineend="249" name="onChange" signature="onChange()">
                  <variable citdl="t" name="this" />
                </scope>
                <scope ilk="function" line="259" lineend="259" name="onMouseDown" returns="self.focus()" signature="onMouseDown()">
                  <variable citdl="t" name="this" />
                </scope>
                <scope ilk="function" line="260" lineend="260" name="onMouseUp" signature="onMouseUp()">
                  <variable citdl="t" name="this" />
                </scope>
                <scope ilk="function" line="261" lineend="261" name="onDrag" signature="onDrag()">
                  <variable citdl="t" name="this" />
                </scope>
                <scope ilk="function" line="262" lineend="262" name="onAvailable" returns="self.setStartSliderState()" signature="onAvailable()">
                  <variable citdl="t" name="this" />
                </scope>
              </variable>
            </scope>
            <variable citdl="YAHOO.widget.SliderThumb" doc="A YAHOO.widget.SliderThumb instance that we will use to&#xA;reposition the thumb when the background is clicked" line="243" name="thumb" />
            <scope doc="Executed when the slider element is available" ilk="function" line="270" lineend="274" name="onAvailable" signature="onAvailable()">
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="271" name="Event" />
            </scope>
            <scope doc="Executed when a keypress event happens with the control focused.&#xA;Prevents the default behavior for navigation keys.  The actual&#xA;logic for moving the slider thumb in response to a key event&#xA;happens in handleKeyDown." ilk="function" line="283" lineend="299" name="handleKeyPress" signature="handleKeyPress(e)">
              <variable citdl="Event" doc="the keypress event" ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="285" name="Event" />
              <variable attributes="__local__ private" citdl="Event.getCharCode()" line="286" name="kc" />
            </scope>
            <scope doc="Executed when a keydown event happens with the control focused.&#xA;Updates the slider value and display when the keypress is an&#xA;arrow key, home, or end as long as enableKeys is set to true." ilk="function" line="307" lineend="354" name="handleKeyDown" signature="handleKeyDown(e)">
              <variable citdl="Event" doc="the keydown event" ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="309" name="Event" />
              <variable attributes="__local__ private" citdl="Event.getCharCode()" line="311" name="kc" />
              <variable attributes="__local__ private" citdl="this.thumb" line="311" name="t" />
              <variable attributes="__local__ private" citdl="this.getXValue()" line="312" name="h" />
              <variable attributes="__local__ private" citdl="this.getYValue()" line="312" name="v" />
              <variable attributes="__local__ private" citdl="Boolean" line="314" name="horiz" />
              <variable attributes="__local__ private" citdl="Boolean" line="315" name="changeValue" />
              <variable attributes="__local__ private" line="347" name="newVal" />
            </scope>
            <scope doc="Initialization that sets up the value offsets once the elements are ready" ilk="function" line="360" lineend="391" name="setStartSliderState" signature="setStartSliderState()" />
            <variable citdl="Array" doc="The basline position of the background element, used&#xA;to determine if the background has moved since the last&#xA;operation." line="372" name="baselinePos" />
            <variable citdl="this.thumb.getOffsetFromParent()" line="374" name="startOffset" />
            <variable citdl="arguments" line="379" name="deferredSetRegionValue" />
            <variable citdl="arguments" line="386" name="deferredSetValue" />
            <scope doc="When the thumb is available, we cache the centerpoint of the element so&#xA;we can position the element correctly when the background is clicked" ilk="function" line="398" lineend="415" name="setThumbCenterPoint" signature="setThumbCenterPoint()">
              <variable attributes="__local__ private" citdl="this.thumb.getEl()" line="400" name="el" />
            </scope>
            <variable citdl="int, &quot;y&quot;: int" doc="The center of the slider element is stored so we can&#xA;place it in the correct position when the background is clicked." line="409" lineend="412" name="thumbCenterPoint">
              <variable citdl="parseInt()" line="410" name="x" />
              <variable citdl="parseInt()" line="411" name="y" />
            </variable>
            <scope doc="Locks the slider, overrides YAHOO.util.DragDrop" ilk="function" line="421" lineend="424" name="lock" signature="lock()" />
            <variable citdl="Boolean" line="423" name="locked" />
            <scope doc="Unlocks the slider, overrides YAHOO.util.DragDrop" ilk="function" line="430" lineend="433" name="unlock" signature="unlock()" />
            <scope attributes="private" doc="PRIVATE: Handles mouseup event on the slider background" ilk="function" line="440" lineend="445" name="thumbMouseUp" signature="thumbMouseUp()" />
            <scope doc="Returns a reference to this slider&apos;s thumb" ilk="function" line="452" lineend="454" name="getThumb" returns="SliderThumb" signature="getThumb()" />
            <scope attributes="private" doc="PRIVATE: Try to focus the element when clicked so we can add&#xA;accessibility features" ilk="function" line="462" lineend="486" name="focus" returns="Boolean" signature="focus()">
              <variable attributes="__local__ private" citdl="this.getEl()" line="465" name="el" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event that fires when the value of the slider has changed" ilk="function" line="498" lineend="500" name="onChange" signature="onChange(firstOffset, secondOffset)">
              <variable citdl="Number" doc="the number of pixels the thumb has moved&#xA;from its start position. Normal horizontal and vertical sliders will only&#xA;have the firstOffset.  Regions will have both, the first is the horizontal&#xA;offset, the second the vertical." ilk="argument" name="firstOffset" />
              <variable citdl="Number" doc="the y offset for region sliders" ilk="argument" name="secondOffset" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event that fires when the at the beginning of the slider thumb move" ilk="function" line="507" lineend="509" name="onSlideStart" signature="onSlideStart()" />
            <scope attributes="deprecated" doc="DEPRECATED: Event that fires at the end of a slider thumb move" ilk="function" line="516" lineend="518" name="onSlideEnd" signature="onSlideEnd()" />
            <scope doc="Returns the slider&apos;s thumb offset from the start position" ilk="function" line="525" lineend="527" name="getValue" returns="Number" signature="getValue()" />
            <scope doc="Returns the slider&apos;s thumb X offset from the start position" ilk="function" line="534" lineend="536" name="getXValue" returns="Number" signature="getXValue()" />
            <scope doc="Returns the slider&apos;s thumb Y offset from the start position" ilk="function" line="543" lineend="545" name="getYValue" returns="Number" signature="getYValue()" />
            <scope attributes="private" doc="PRIVATE: Internal handler for the slider thumb&apos;s onChange event" ilk="function" line="552" lineend="562" name="handleThumbChange" signature="handleThumbChange()">
              <variable attributes="__local__ private" citdl="this.thumb" line="553" name="t" />
            </scope>
            <scope doc="Provides a way to set the value of the slider in code." ilk="function" line="574" lineend="607" name="setValue" returns="Boolean" signature="setValue(newOffset, skipAnim, force)">
              <variable citdl="Number" doc="the number of pixels the thumb should be&#xA;positioned away from the initial start point" ilk="argument" name="newOffset" />
              <variable citdl="Boolean" doc="set to true to disable the animation&#xA;for this move action (but not others)." ilk="argument" name="skipAnim" />
              <variable citdl="Boolean" doc="ignore the locked setting and set value anyway" ilk="argument" name="force" />
              <variable attributes="__local__ private" citdl="this.thumb" line="589" name="t" />
              <variable attributes="__local__ private" citdl="t.initPageX" line="590" name="newX" />
              <variable attributes="__local__ private" citdl="t.initPageY" line="590" name="newY" />
            </scope>
            <scope doc="Provides a way to set the value of the region slider in code." ilk="function" line="621" lineend="647" name="setRegionValue" returns="Boolean" signature="setRegionValue(newOffset, newOffset2, skipAnim, force)">
              <variable citdl="Number" doc="the number of pixels the thumb should be&#xA;positioned away from the initial start point (x axis for region)" ilk="argument" name="newOffset" />
              <variable citdl="Number" doc="the number of pixels the thumb should be&#xA;positioned away from the initial start point (y axis for region)" ilk="argument" name="newOffset2" />
              <variable citdl="Boolean" doc="set to true to disable the animation&#xA;for this move action (but not others)." ilk="argument" name="skipAnim" />
              <variable citdl="Boolean" doc="ignore the locked setting and set value anyway" ilk="argument" name="force" />
              <variable attributes="__local__ private" citdl="this.thumb" line="636" name="t" />
              <variable attributes="__local__ private" citdl="t.initPageX" line="639" name="newX" />
              <variable attributes="__local__ private" citdl="t.initPageY" line="640" name="newY" />
            </scope>
            <scope doc="Checks the background position element position.  If it has moved from the&#xA;baseline position, the constraints for the thumb are reset" ilk="function" line="656" lineend="669" name="verifyOffset" returns="Boolean" signature="verifyOffset(checkPos)">
              <variable citdl="Boolean" doc="check the position instead of using cached value" ilk="argument" name="checkPos" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getXY()" line="658" name="newPos" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Move the associated slider moved to a timeout to try to get around the&#xA;mousedown stealing moz does when I move the slider element between the&#xA;cursor and the background during the mouseup event" ilk="function" line="681" lineend="728" name="moveThumb" signature="moveThumb(x, y, skipAnim)">
              <variable citdl="Number" doc="the X coordinate of the click" ilk="argument" name="x" />
              <variable citdl="Number" doc="the Y coordinate of the click" ilk="argument" name="y" />
              <variable citdl="Boolean" doc="don&apos;t animate if the move happend onDrag" ilk="argument" name="skipAnim" />
              <variable attributes="__local__ private" citdl="this.thumb" line="684" name="t" />
              <variable attributes="__local__ private" citdl="this" line="685" name="self" />
              <variable attributes="__local__ private" citdl="t.getTargetCoord()" line="696" name="_p" />
              <variable attributes="__local__ private" citdl="Array" line="697" name="p" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Motion" line="719" name="oAnim" />
            </scope>
            <variable citdl="YAHOO.util.Dom.getXY()" line="707" name="curCoord" />
            <scope attributes="private" doc="PRIVATE: Move the slider one tick mark towards its final coordinate.  Used&#xA;for the animation when tick marks are defined" ilk="function" line="737" lineend="794" name="moveOneTick" signature="moveOneTick(finalCoord)">
              <variable ilk="argument" name="finalCoord" />
              <variable attributes="__local__ private" line="739" name="tmp" />
              <variable attributes="__local__ private" citdl="this.thumb" line="739" name="t" />
              <variable attributes="__local__ private" citdl="this._getNextX()" line="753" name="nextCoord" />
              <variable attributes="__local__ private" line="757" name="tmpX" />
              <variable attributes="__local__ private" citdl="this" line="783" name="self" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Returns the next X tick value based on the current coord and the target coord." ilk="function" line="801" lineend="819" name="_getNextX" returns="nextCoord" signature="_getNextX(curCoord, finalCoord)">
              <variable ilk="argument" name="curCoord" />
              <variable ilk="argument" name="finalCoord" />
              <variable attributes="__local__ private" citdl="this.thumb" line="802" name="t" />
              <variable attributes="__local__ private" citdl="t.tickSize" line="803" name="thresh" />
              <variable attributes="__local__ private" citdl="Array" line="804" name="tmp" />
              <variable attributes="__local__ private" citdl="Array" line="805" name="nextCoord" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Returns the next Y tick value based on the current coord and the target coord." ilk="function" line="826" lineend="845" name="_getNextY" returns="nextCoord" signature="_getNextY(curCoord, finalCoord)">
              <variable ilk="argument" name="curCoord" />
              <variable ilk="argument" name="finalCoord" />
              <variable attributes="__local__ private" citdl="this.thumb" line="827" name="t" />
              <variable attributes="__local__ private" citdl="t.tickSize" line="828" name="thresh" />
              <variable attributes="__local__ private" citdl="Array" line="829" name="tmp" />
              <variable attributes="__local__ private" citdl="Array" line="830" name="nextCoord" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Resets the constraints before moving the thumb." ilk="function" line="852" lineend="855" name="b4MouseDown" signature="b4MouseDown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles the mousedown event for the slider background" ilk="function" line="863" lineend="875" name="onMouseDown" signature="onMouseDown(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getPageX()" line="868" name="x" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getPageY()" line="869" name="y" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles the onDrag event for the slider background" ilk="function" line="882" lineend="888" name="onDrag" signature="onDrag(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getPageX()" line="884" name="x" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getPageY()" line="885" name="y" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Fired when the slider movement ends" ilk="function" line="895" lineend="900" name="endMove" signature="endMove()" />
            <scope attributes="private" doc="PRIVATE: Fires the change event if the value has been changed.  Ignored if we are in&#xA;the middle of an animation as the event will fire when the animation is&#xA;complete" ilk="function" line="914" lineend="951" name="fireEvents" signature="fireEvents(thumbEvent)">
              <variable citdl="Boolean" doc="set to true if this event is fired from an event&#xA;that occurred on the thumb.  If it is, the state of the&#xA;thumb dd object should be correct.  Otherwise, the event&#xA;originated on the background, so the thumb state needs to&#xA;be refreshed before proceeding." ilk="argument" name="thumbEvent" />
              <variable attributes="__local__ private" citdl="this.thumb" line="916" name="t" />
              <variable attributes="__local__ private" citdl="t.getXValue()" line="924" name="newX" />
              <variable attributes="__local__ private" citdl="t.getYValue()" line="925" name="newY" />
              <variable attributes="__local__ private" citdl="t.getValue()" line="936" name="newVal" />
            </scope>
            <variable citdl="newX" line="932" name="previousX" />
            <variable citdl="newY" line="933" name="previousY" />
            <variable citdl="newVal" line="941" name="previousVal" />
            <scope doc="Slider toString" ilk="function" line="958" lineend="960" name="toString" returns="String" signature="toString()" />
          </scope>
          <scope ilk="class" line="42" lineend="144" name="AutoComplete">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The AutoComplete control provides the front-end logic for text-entry suggestion and&#xA;completion functionality." ilk="function" line="42" lineend="144" name="AutoComplete" signature="AutoComplete(elInput, elContainer, oDataSource, oConfigs)">
              <variable citdl="String" doc="String ID of an input field." ilk="argument" name="elInput" />
              <variable citdl="String" doc="String ID of an existing DIV." ilk="argument" name="elContainer" />
              <variable citdl="YAHOO.widget.DataSource" doc="DataSource instance." ilk="argument" name="oDataSource" />
              <variable citdl="Object" doc="(optional) Object literal of configuration params." ilk="argument" name="oConfigs" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this" line="100" name="oSelf" />
              <variable attributes="__local__ private" citdl="this._oTextbox" line="101" name="oTextbox" />
              <variable attributes="__local__ private" citdl="this._oContainer._oContent" line="103" name="oContent" />
            </scope>
            <variable citdl="oDataSource" line="46" name="dataSource" />
            <variable citdl="String" line="55" name="_sName" />
            <variable citdl="document.getElementById()" line="56" name="_oTextbox" />
            <variable citdl="document.getElementById()" line="72" name="_oContainer" />
            <variable citdl="YAHOO.util.CustomEvent" line="120" name="textboxFocusEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="121" name="textboxKeyEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="122" name="dataRequestEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="123" name="dataReturnEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="124" name="dataErrorEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="125" name="containerExpandEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="126" name="typeAheadEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="127" name="itemMouseOverEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="128" name="itemMouseOutEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="129" name="itemArrowToEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="130" name="itemArrowFromEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="131" name="itemSelectEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="132" name="unmatchedItemSelectEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="133" name="selectionEnforceEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="134" name="containerCollapseEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="135" name="textboxBlurEvent" />
            <scope doc="Public accessor to the unique name of the AutoComplete instance." ilk="function" line="342" lineend="344" name="toString" returns="String" signature="toString()">
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope doc="Returns true if container is in an expanded state, false otherwise." ilk="function" line="352" lineend="354" name="isContainerOpen" returns="Boolean" signature="isContainerOpen()">
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope doc="Public accessor to the internal array of DOM &amp;lt;li&amp;gt; elements that&#xA;display query results within the results container." ilk="function" line="363" lineend="365" name="getListItems" returns="Array" signature="getListItems()">
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope doc="Public accessor to the data held in an &amp;lt;li&amp;gt; element of the&#xA;results container." ilk="function" line="374" lineend="381" name="getListItemData" returns="Object" signature="getListItemData(oListItem)">
              <variable ilk="argument" name="oListItem" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope doc="Sets HTML markup for the results container header. This markup will be&#xA;inserted within a &amp;lt;div&amp;gt; tag with a class of &quot;yui-ac-hd&quot;." ilk="function" line="390" lineend="401" name="setHeader" signature="setHeader(sHeader)">
              <variable citdl="String" doc="HTML markup for results container header." ilk="argument" name="sHeader" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <variable citdl="sHeader" line="393" name="innerHTML" />
            <variable citdl="String" line="394" name="display" />
            <scope doc="Sets HTML markup for the results container footer. This markup will be&#xA;inserted within a &amp;lt;div&amp;gt; tag with a class of &quot;yui-ac-ft&quot;." ilk="function" line="410" lineend="421" name="setFooter" signature="setFooter(sFooter)">
              <variable citdl="String" doc="HTML markup for results container footer." ilk="argument" name="sFooter" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope doc="Sets HTML markup for the results container body. This markup will be&#xA;inserted within a &amp;lt;div&amp;gt; tag with a class of &quot;yui-ac-bd&quot;." ilk="function" line="430" lineend="443" name="setBody" signature="setBody(sBody)">
              <variable citdl="String" doc="HTML markup for results container body." ilk="argument" name="sBody" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <variable citdl="Number" line="442" name="_maxResultsDisplayed" />
            <scope doc="Overridable method that converts a result item object into HTML markup&#xA;for display. Return data values are accessible via the oResultItem object,&#xA;and the key return value will always be oResultItem[0]. Markup will be&#xA;displayed within &amp;lt;li&amp;gt; element tags in the container." ilk="function" line="456" lineend="464" name="formatResult" returns="String" signature="formatResult(oResultItem, sQuery)">
              <variable citdl="Object" doc="Result item representing one query result. Data is held in an array." ilk="argument" name="oResultItem" />
              <variable citdl="String" doc="The current query string." ilk="argument" name="sQuery" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="oResultItem[0]" line="457" name="sResult" />
            </scope>
            <scope doc="Overridable method called before container expands allows implementers to access data&#xA;and DOM elements." ilk="function" line="473" lineend="475" name="doBeforeExpandContainer" returns="Boolean" signature="doBeforeExpandContainer(oResultItem, sQuery)">
              <variable ilk="argument" name="oResultItem" />
              <variable ilk="argument" name="sQuery" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope doc="Makes query request to the DataSource." ilk="function" line="483" lineend="485" name="sendQuery" signature="sendQuery(sQuery)">
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <variable attributes="private" citdl="Number" doc="PRIVATE: Internal class variable to index multiple AutoComplete instances." line="656" name="_nIndex" />
            <scope attributes="private" doc="PRIVATE: Updates and validates latest public config properties." ilk="function" line="850" lineend="886" name="_initProps" signature="_initProps()">
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this.minQueryLength" line="852" name="minQueryLength" />
              <variable attributes="__local__ private" citdl="this.maxResultsDisplayed" line="856" name="maxResultsDisplayed" />
              <variable attributes="__local__ private" citdl="this.queryDelay" line="860" name="queryDelay" />
              <variable attributes="__local__ private" citdl="this.delimChar" line="864" name="delimChar" />
              <variable attributes="__local__ private" citdl="this.animSpeed" line="871" name="animSpeed" />
            </scope>
            <variable citdl="oAnim" line="878" name="_oAnim" />
            <variable citdl="animSpeed" line="881" name="duration" />
            <scope attributes="private" doc="PRIVATE: Initializes the results container helpers if they are enabled and do&#xA;not exist" ilk="function" line="895" lineend="912" name="_initContainerHelpers" signature="_initContainerHelpers()">
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="897" name="oShadow" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="902" name="oIFrame">
                <variable citdl="Object" line="906" name="style">
                  <variable citdl="String" line="906" name="position" />
                  <variable citdl="String" line="907" name="width" />
                  <variable citdl="String" line="908" name="height" />
                </variable>
              </variable>
            </scope>
            <variable citdl="this._oContainer.appendChild()" line="899" name="_oShadow" />
            <variable citdl="this._oContainer.appendChild()" line="910" name="_oIFrame" />
            <scope attributes="private" doc="PRIVATE: Initializes the results container once at object creation" ilk="function" line="920" lineend="944" name="_initContainer" signature="_initContainer()">
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="923" name="oContent">
                <variable citdl="Object" line="925" name="style">
                  <variable citdl="String" line="925" name="display" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="document.createElement()" line="928" name="oHeader">
                <variable citdl="Object" line="930" name="style">
                  <variable citdl="String" line="930" name="display" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="document.createElement()" line="933" name="oBody" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="937" name="oFooter">
                <variable citdl="Object" line="939" name="style">
                  <variable citdl="String" line="939" name="display" />
                </variable>
              </variable>
            </scope>
            <variable citdl="this._oContainer.appendChild()" line="926" name="_oContent" />
            <variable citdl="this._oContainer._oContent.appendChild()" line="931" name="_oHeader" />
            <variable citdl="this._oContainer._oContent.appendChild()" line="935" name="_oBody" />
            <variable citdl="this._oContainer._oContent.appendChild()" line="940" name="_oFooter" />
            <scope attributes="private" doc="PRIVATE: Clears out contents of container body and creates up to&#xA;YAHOO.widget.AutoComplete#maxResultsDisplayed &amp;lt;li&amp;gt; elements in an&#xA;&amp;lt;ul&amp;gt; element." ilk="function" line="954" lineend="975" name="_initList" signature="_initList()">
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this.getListItems()" line="957" name="oldListItems" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="966" name="oList" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="969" name="oItem" />
            </scope>
            <variable citdl="Array" line="955" name="_aListItems" />
            <scope attributes="private" doc="PRIVATE: Initializes each &amp;lt;li&amp;gt; element in the container list." ilk="function" line="985" lineend="994" name="_initListItem" signature="_initListItem(oItem, nItemIndex)">
              <variable citdl="HTMLElement" doc="The &amp;lt;li&amp;gt; DOM element." ilk="argument" name="oItem" />
              <variable citdl="Number" doc="The index of the element." ilk="argument" name="nItemIndex" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this" line="986" name="oSelf" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Enables interval detection for  Korean IME support." ilk="function" line="1003" lineend="1005" name="_onIMEDetected" signature="_onIMEDetected(oSelf)">
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Enables query triggers based on text input detection by intervals (rather&#xA;than by key events)." ilk="function" line="1014" lineend="1021" name="_enableIntervalDetection" signature="_enableIntervalDetection()">
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this._oTextbox.value" line="1015" name="currValue" />
              <variable attributes="__local__ private" citdl="this._sLastTextboxValue" line="1016" name="lastValue" />
            </scope>
            <variable citdl="currValue" line="1018" name="_sLastTextboxValue" />
            <scope attributes="private" doc="PRIVATE: Cancels text input detection by intervals." ilk="function" line="1031" lineend="1035" name="_cancelIntervalDetection" signature="_cancelIntervalDetection(oSelf)">
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Whether or not key is functional or should be ignored. Note that the right&#xA;arrow key is NOT an ignored key since it triggers queries for certain intl&#xA;charsets." ilk="function" line="1048" lineend="1060" name="_isIgnoreKey" returns="Boolean" signature="_isIgnoreKey(nKeyCode)">
              <variable ilk="argument" name="nKeyCode" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Makes query request to the DataSource." ilk="function" line="1069" lineend="1128" name="_sendQuery" signature="_sendQuery(sQuery)">
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" line="1076" name="aDelimChar" />
              <variable attributes="__local__ private" citdl="Number" line="1081" name="nDelimIndex" />
              <variable attributes="__local__ private" citdl="sQuery.lastIndexOf()" line="1083" name="nNewIndex" />
              <variable attributes="__local__ private" citdl="nDelimIndex" line="1100" name="nQueryStart" />
            </scope>
            <variable citdl="sQuery.substring()" line="1106" name="_sSavedQuery" />
            <variable citdl="Number" line="1125" name="_nDelayID" />
            <scope attributes="private" doc="PRIVATE: Populates the array of &amp;lt;li&amp;gt; elements in the container with query&#xA;results. This method is passed to YAHOO.widget.DataSource#getResults as a&#xA;callback function so results from the DataSource instance are returned to the&#xA;AutoComplete instance." ilk="function" line="1142" lineend="1208" name="_populateList" signature="_populateList(sQuery, aResults, oSelf)">
              <variable citdl="String" doc="The query string." ilk="argument" name="sQuery" />
              <variable citdl="Array" doc="An array of query result objects from the DataSource." ilk="argument" name="aResults" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" line="1150" name="isOpera" />
              <variable attributes="__local__ private" citdl="oSelf._oContainer._oContent.style" line="1151" name="contentStyle" />
              <variable attributes="__local__ private" citdl="decodeURIComponent()" line="1155" name="sCurQuery" />
              <variable attributes="__local__ private" citdl="Math.min()" line="1163" name="nItems" />
              <variable attributes="__local__ private" citdl="oSelf._aListItems" line="1167" name="aItems" />
              <variable attributes="__local__ private" citdl="aItems[i]" line="1171" name="oItemi">
                <variable citdl="Object" line="1174" name="style">
                  <variable citdl="String" line="1174" name="display" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="aResults[i]" line="1172" name="oResultItemi" />
              <variable attributes="__local__ private" citdl="aItems[j]" line="1182" name="oItemj">
                <variable citdl="Object" line="1184" name="style">
                  <variable citdl="String" line="1184" name="display" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="aItems[0]" line="1191" name="oFirstItem" />
              <variable attributes="__local__ private" citdl="oSelf.doBeforeExpandContainer()" line="1201" name="ok" />
            </scope>
            <scope attributes="private" doc="PRIVATE: When forceSelection is true and the user attempts&#xA;leave the text input box without selecting an item from the query results,&#xA;the user selection is cleared." ilk="function" line="1218" lineend="1232" name="_clearSelection" signature="_clearSelection()">
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this._oTextbox.value" line="1219" name="sValue" />
              <variable attributes="__local__ private" line="1220" name="sChar" />
              <variable attributes="__local__ private" line="1221" name="nIndex" />
            </scope>
            <variable citdl="sValue.substring()" line="1223" name="value" />
            <scope attributes="private" doc="PRIVATE: Whether or not user-typed value in the text input box matches any of the&#xA;query results." ilk="function" line="1242" lineend="1254" name="_textMatchesOption" returns="Boolean" signature="_textMatchesOption()">
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="1243" name="foundMatch" />
              <variable attributes="__local__ private" citdl="this._aListItems[i]" line="1246" name="oItem" />
              <variable attributes="__local__ private" citdl="oItem._sResultKey.toLowerCase()" line="1247" name="sMatch" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Updates in the text input box with the first query result as the user types,&#xA;selecting the substring that the user has not typed." ilk="function" line="1265" lineend="1286" name="_typeAhead" signature="_typeAhead(oItem, sQuery)">
              <variable citdl="HTMLElement" doc="The &amp;lt;li&amp;gt; element item whose data populates the input field." ilk="argument" name="oItem" />
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this._oTextbox" line="1271" name="oTextbox" />
              <variable attributes="__local__ private" citdl="this._oTextbox.value" line="1272" name="sValue" />
              <variable attributes="__local__ private" citdl="sValue.length" line="1280" name="nStart" />
              <variable attributes="__local__ private" citdl="oTextbox.value.length" line="1282" name="nEnd" />
              <variable attributes="__local__ private" citdl="oTextbox.value.substr()" line="1284" name="sPrefill" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Selects text in the input field." ilk="function" line="1297" lineend="1310" name="_selectText" signature="_selectText(oTextbox, nStart, nEnd)">
              <variable citdl="HTMLElement" doc="Text input box element in which to select text." ilk="argument" name="oTextbox" />
              <variable citdl="Number" doc="Starting index of text string to select." ilk="argument" name="nStart" />
              <variable citdl="Number" doc="Ending index of text selection." ilk="argument" name="nEnd" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="oTextbox.createTextRange()" line="1302" name="oTextRange" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Syncs results container with its helpers." ilk="function" line="1319" lineend="1346" name="_toggleContainerHelpers" signature="_toggleContainerHelpers(bShow)">
              <variable citdl="Boolean" doc="True if container is expanded, false if collapsed" ilk="argument" name="bShow" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="1320" name="bFireEvent" />
              <variable attributes="__local__ private" citdl="this._oContainer._oContent.offsetWidth" line="1321" name="width" />
              <variable attributes="__local__ private" citdl="this._oContainer._oContent.offsetHeight" line="1322" name="height" />
            </scope>
            <variable citdl="width" line="1327" lineend="1419" name="width">
              <variable citdl="wExp" line="1418" name="to" />
            </variable>
            <variable citdl="height" line="1328" lineend="1419" name="height">
              <variable citdl="hExp" line="1418" name="to" />
            </variable>
            <scope attributes="private" doc="PRIVATE: Animates expansion or collapse of the container." ilk="function" line="1355" lineend="1470" name="_toggleContainer" signature="_toggleContainer(bShow)">
              <variable citdl="Boolean" doc="True if container should be expanded, false if container should be collapsed" ilk="argument" name="bShow" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this._oContainer" line="1356" name="oContainer">
                <variable citdl="Object" line="1385" name="_oContent">
                  <variable citdl="Object" line="1385" name="style">
                    <variable citdl="String" line="1385" name="display" />
                    <variable citdl="wColl" line="1423" name="width" />
                    <variable citdl="hColl" line="1424" name="height" />
                  </variable>
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="this._aListItems" line="1366" name="aItems" />
              <variable attributes="__local__ private" citdl="this._oAnim" line="1390" name="oAnim" />
              <variable attributes="__local__ private" citdl="oContainer._oContent.cloneNode()" line="1403" name="oClone">
                <variable citdl="Object" line="1405" name="style">
                  <variable citdl="String" line="1405" name="top" />
                  <variable citdl="String" line="1406" name="display" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="oClone.offsetWidth" line="1409" name="wExp" />
              <variable attributes="__local__ private" citdl="oClone.offsetHeight" line="1410" name="hExp" />
              <variable attributes="__local__ private" line="1413" name="wColl" />
              <variable attributes="__local__ private" line="1414" name="hColl" />
              <variable attributes="__local__ private" citdl="this" line="1435" name="oSelf" />
              <scope attributes="__local__ private" ilk="function" line="1436" lineend="1448" name="onAnimComplete" signature="onAnimComplete()" />
            </scope>
            <variable citdl="Number" line="1365" name="scrollTop" />
            <variable citdl="oNewItem" line="1378" name="_oCurItem" />
            <variable citdl="Number" line="1379" name="_nDisplayedItems" />
            <variable line="1380" name="_sCurQuery" />
            <variable citdl="bShow" line="1454" name="_bContainerOpen" />
            <scope attributes="private" doc="PRIVATE: Toggles the highlight on or off for an item in the container, and also cleans&#xA;up highlighting of any previous item." ilk="function" line="1481" lineend="1493" name="_toggleHighlight" signature="_toggleHighlight(oNewItem, sType)">
              <variable citdl="HTMLElement" doc="The &amp;lt;li&amp;gt; element item to receive highlight behavior." ilk="argument" name="oNewItem" />
              <variable citdl="String" doc="Type &quot;mouseover&quot; will toggle highlight on, and &quot;mouseout&quot; will toggle highlight off." ilk="argument" name="sType" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this.highlightClassName" line="1482" name="sHighlight" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Toggles the pre-highlight on or off for an item in the container." ilk="function" line="1503" lineend="1517" name="_togglePrehighlight" signature="_togglePrehighlight(oNewItem, sType)">
              <variable citdl="HTMLElement" doc="The &amp;lt;li&amp;gt; element item to receive highlight behavior." ilk="argument" name="oNewItem" />
              <variable citdl="String" doc="Type &quot;mouseover&quot; will toggle highlight on, and &quot;mouseout&quot; will toggle highlight off." ilk="argument" name="sType" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this.prehighlightClassName" line="1508" name="sPrehighlight" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Updates the text input box value with selected query result. If a delimiter&#xA;has been defined, then the value gets appended with the delimiter." ilk="function" line="1527" lineend="1558" name="_updateValue" signature="_updateValue(oItem)">
              <variable citdl="HTMLElement" doc="The &amp;lt;li&amp;gt; element item with which to update the value." ilk="argument" name="oItem" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this._oTextbox" line="1528" name="oTextbox" />
              <variable attributes="__local__ private" line="1529" name="sDelimChar" />
              <variable attributes="__local__ private" citdl="this._sSavedQuery" line="1530" name="sSavedQuery" />
              <variable attributes="__local__ private" citdl="oItem._sResultKey" line="1531" name="sResultKey" />
              <variable attributes="__local__ private" citdl="oTextbox.value.length" line="1554" name="end" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Selects a result item from the container" ilk="function" line="1567" lineend="1573" name="_selectItem" signature="_selectItem(oItem)">
              <variable citdl="HTMLElement" doc="The selected &amp;lt;li&amp;gt; element item." ilk="argument" name="oItem" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <variable citdl="Boolean" line="1568" name="_bItemSelected" />
            <scope attributes="private" doc="PRIVATE: For values updated by type-ahead, the right arrow key jumps to the end&#xA;of the textbox, otherwise the container is closed." ilk="function" line="1582" lineend="1589" name="_jumpSelection" signature="_jumpSelection()">
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Triggered by up and down arrow keys, changes the current highlighted&#xA;&amp;lt;li&amp;gt; element item. Scrolls container if necessary." ilk="function" line="1599" lineend="1687" name="_moveSelection" signature="_moveSelection(nKeyCode)">
              <variable citdl="Number" doc="Code of key pressed." ilk="argument" name="nKeyCode" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this._oCurItem" line="1602" name="oCurItem" />
              <variable attributes="__local__ private" citdl="Number" line="1603" name="nCurItemIndex" />
              <variable attributes="__local__ private" line="1610" name="nNewItemIndex" />
              <variable attributes="__local__ private" citdl="this._aListItems[nNewItemIndex]" line="1644" name="oNewItem" />
              <variable attributes="__local__ private" citdl="this._oContainer._oContent" line="1647" name="oContent" />
              <variable attributes="__local__ private" line="1649" name="scrollOn" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles &amp;lt;li&amp;gt; element mouseover events in the container." ilk="function" line="1703" lineend="1712" name="_onItemMouseover" signature="_onItemMouseover(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The mouseover event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles &amp;lt;li&amp;gt; element mouseout events in the container." ilk="function" line="1722" lineend="1731" name="_onItemMouseout" signature="_onItemMouseout(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The mouseout event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles &amp;lt;li&amp;gt; element click events in the container." ilk="function" line="1741" lineend="1745" name="_onItemMouseclick" signature="_onItemMouseclick(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles container mouseover events." ilk="function" line="1755" lineend="1757" name="_onContainerMouseover" signature="_onContainerMouseover(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The mouseover event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles container mouseout events." ilk="function" line="1767" lineend="1773" name="_onContainerMouseout" signature="_onContainerMouseout(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The mouseout event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles container scroll events." ilk="function" line="1783" lineend="1785" name="_onContainerScroll" signature="_onContainerScroll(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The scroll event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles container resize events." ilk="function" line="1795" lineend="1797" name="_onContainerResize" signature="_onContainerResize(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The resize event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles textbox keydown events of functional keys, mainly for UI behavior." ilk="function" line="1808" lineend="1856" name="_onTextboxKeyDown" signature="_onTextboxKeyDown(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The keydown event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="v.keyCode" line="1809" name="nKeyCode" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles textbox keypress events." ilk="function" line="1865" lineend="1896" name="_onTextboxKeyPress" signature="_onTextboxKeyPress(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The keypress event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="v.keyCode" line="1866" name="nKeyCode" />
              <variable attributes="__local__ private" line="1869" name="isMac" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles textbox keyup events that trigger queries." ilk="function" line="1906" lineend="1937" name="_onTextboxKeyUp" signature="_onTextboxKeyUp(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The keyup event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="v.keyCode" line="1910" name="nKeyCode" />
              <variable attributes="__local__ private" citdl="this.value" line="1912" name="sText" />
              <variable attributes="__local__ private" citdl="setTimeout()" line="1925" name="nDelayID" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles text input box receiving focus." ilk="function" line="1947" lineend="1953" name="_onTextboxFocus" signature="_onTextboxFocus(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The focus event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles text input box losing focus." ilk="function" line="1963" lineend="1985" name="_onTextboxBlur" signature="_onTextboxBlur(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The focus event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles form submission event." ilk="function" line="1995" lineend="2002" name="_onFormSubmit" signature="_onFormSubmit(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The submit event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="87" lineend="94" name="LogWriter">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The LogWriter class provides a mechanism to log messages through&#xA;YAHOO.widget.Logger from a named source." ilk="function" line="87" lineend="94" name="LogWriter" signature="LogWriter(sSource)">
              <variable citdl="String" doc="Source of LogWriter instance." ilk="argument" name="sSource" />
              <variable citdl="LogWriter" name="this" />
            </scope>
            <variable citdl="sSource" line="93" name="_source" />
            <scope doc="Public accessor to the unique name of the LogWriter instance." ilk="function" line="108" lineend="110" name="toString" returns="String" signature="toString()">
              <variable citdl="LogWriter" name="this" />
            </scope>
            <scope doc="Logs a message attached to the source of the LogWriter." ilk="function" line="119" lineend="121" name="log" signature="log(sMsg, sCategory)">
              <variable citdl="String" doc="The log message." ilk="argument" name="sMsg" />
              <variable citdl="String" doc="Category name." ilk="argument" name="sCategory" />
              <variable citdl="LogWriter" name="this" />
            </scope>
            <scope doc="Public accessor to get the source name." ilk="function" line="129" lineend="131" name="getSource" returns="String" signature="getSource()">
              <variable citdl="LogWriter" name="this" />
            </scope>
            <scope doc="Public accessor to set the source name." ilk="function" line="139" lineend="147" name="setSource" signature="setSource(sSource)">
              <variable citdl="String" doc="Source of LogWriter instance." ilk="argument" name="sSource" />
              <variable citdl="LogWriter" name="this" />
            </scope>
            <variable citdl="sSource" line="145" name="_sSource" />
          </scope>
          <scope ilk="class" line="94" lineend="125" name="Button">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Button class creates a rich, graphical button." ilk="function" line="94" lineend="222" name="Button" signature="Button(p_oElement, p_oAttributes)">
              <variable citdl="Object" doc="Object literal specifying a set of configuration&#xA;attributes used to create the button." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying a set of&#xA;configuration attributes used to create the button." ilk="argument" name="p_oAttributes" />
              <variable citdl="Button" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Button.superclass.constructor" line="96" name="fnSuperClass" />
              <variable attributes="__local__ private" citdl="Object" line="122" lineend="127" name="oConfig">
                <variable citdl="this._createButtonElement()" line="124" name="element" />
                <variable line="125" name="attributes" />
              </variable>
              <variable attributes="__local__ private" citdl="oElement.tagName.toUpperCase()" line="129" name="sTagName" />
              <variable attributes="__local__ private" citdl="Dom.get()" line="134" name="oElement" />
            </scope>
            <scope doc="&quot;keydown&quot; event handler for the button&apos;s form." ilk="function" line="3006" lineend="3074" name="onFormKeyDown" signature="onFormKeyDown(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object passed&#xA;back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
              <variable citdl="Button" name="this" />
              <variable attributes="__local__ private" citdl="Event.getCharCode()" line="3009" name="nCharCode" />
              <variable attributes="__local__ private" citdl="Event.getTarget()" line="3009" name="oTarget" />
              <variable attributes="__local__ private" citdl="oTarget.type" line="3018" name="sType" />
              <scope attributes="__local__ private" ilk="function" line="3027" lineend="3051" name="isYUISubmitButton" signature="isYUISubmitButton(p_oElement)">
                <variable ilk="argument" name="p_oElement" />
                <variable attributes="__local__ private" citdl="p_oElement.id" line="3029" name="sId" />
                <variable attributes="__local__ private" citdl="m_oButtons[sId]" line="3033" name="oButton" />
                <variable attributes="__local__ private" citdl="oButton.get()" line="3037" name="oSrcElement" />
              </scope>
              <variable attributes="__local__ private" citdl="Dom.getElementsBy()" line="3060" name="aButtons" />
              <variable attributes="__local__ private" citdl="aButtons.length" line="3060" name="nButtons" />
            </scope>
            <scope doc="Searches the specified form and adds hidden fields for instances&#xA;of YAHOO.widget.Button that are of type &quot;radio,&quot; &quot;checkbox,&quot; &quot;menubutton,&quot;&#xA;and &quot;splitbutton.&quot;" ilk="function" line="3086" lineend="3172" name="addHiddenFieldsToForm" signature="addHiddenFieldsToForm(p_oForm)">
              <variable ilk="argument" name="p_oForm" />
              <variable citdl="Button" name="this" />
              <variable attributes="__local__ private" citdl="Dom.getElementsByClassName()" line="3089" name="aButtons" />
              <variable attributes="__local__ private" citdl="aButtons.length" line="3089" name="nButtons" />
              <variable attributes="__local__ private" citdl="m_oButtons[aButtons[i].id]" line="3098" name="oButton" />
              <variable attributes="__local__ private" citdl="oButton.get()" line="3098" name="oMenuItem" />
              <variable attributes="__local__ private" citdl="oButton.getMenu()" line="3098" name="oMenu" />
              <variable attributes="__local__ private" citdl="oButton.get()" line="3098" name="sType" />
              <variable attributes="__local__ private" citdl="oMenu.srcElement" line="3120" name="oSrcElement" />
              <variable attributes="__local__ private" line="3136" name="oValue" />
              <variable attributes="__local__ private" citdl="oButton.getHiddenField()" line="3147" name="oHiddenField" />
              <variable attributes="__local__ private" citdl="createInputElement()" line="3147" name="oField" />
            </scope>
          </scope>
          <scope ilk="class" line="180" lineend="349" name="LogReader">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The LogReader class provides UI to read messages logged to YAHOO.widget.Logger." ilk="function" line="180" lineend="349" name="LogReader" signature="LogReader(elContainer, oConfigs)">
              <variable citdl="String" doc="(optional) String ID of an existing DIV." ilk="argument" name="elContainer" />
              <variable citdl="Object" doc="(optional) Object literal of configuration params." ilk="argument" name="oConfigs" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this" line="181" name="oSelf" />
              <variable attributes="__local__ private" citdl="this._elContainer.style" line="209" name="containerStyle" />
              <variable attributes="__local__ private" citdl="YAHOO.util.DD" line="309" name="ylog_dd" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Logger.categories.length" line="330" name="catsLen" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Logger.sources.length" line="338" name="sourcesLen" />
            </scope>
            <variable citdl="YAHOO.widget.LogReader._index" line="182" name="_sName" />
            <variable citdl="elContainer" line="196" name="_elContainer" />
            <variable citdl="this._elContainer.appendChild()" line="239" name="_elHd" />
            <variable citdl="String" line="240" name="id" />
            <variable citdl="String" line="241" name="className" />
            <variable citdl="this._elHd.appendChild()" line="243" name="_elCollapse" />
            <variable citdl="document.createElement()" line="246" name="_btnCollapse" />
            <variable citdl="String" line="247" name="type" />
            <variable citdl="YAHOO.util.Dom.getStyle()" line="249" name="fontSize" />
            <variable citdl="String" line="251" name="value" />
            <variable citdl="this._elHd.appendChild()" line="256" name="_title" />
            <variable citdl="String" line="257" name="innerHTML" />
            <variable citdl="this._elContainer.appendChild()" line="262" name="_elConsole" />
            <variable citdl="this.height" line="267" name="height" />
            <variable citdl="this._elContainer.appendChild()" line="272" name="_elFt" />
            <variable citdl="this._elFt.appendChild()" line="275" name="_elBtns" />
            <variable citdl="document.createElement()" line="278" name="_btnPause" />
            <variable citdl="document.createElement()" line="288" name="_btnClear" />
            <variable citdl="this._elFt.appendChild()" line="298" name="_elCategoryFilters" />
            <variable citdl="this._elFt.appendChild()" line="300" name="_elSourceFilters" />
            <variable citdl="String" line="311" name="cursor" />
            <variable citdl="Array" line="316" name="_buffer" />
            <variable citdl="YAHOO.widget.Logger.getStartTime()" line="319" name="_lastTime" />
            <variable citdl="Object" line="326" lineend="326" name="_filterCheckboxes" />
            <variable citdl="Array" line="329" name="_categoryFilters" />
            <variable citdl="Array" line="337" name="_sourceFilters" />
            <scope doc="Public accessor to the unique name of the LogReader instance." ilk="function" line="516" lineend="518" name="toString" returns="String" signature="toString()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope doc="Pauses output of log messages. While paused, log messages are not lost, but&#xA;get saved to a buffer and then output upon resume of LogReader." ilk="function" line="525" lineend="530" name="pause" signature="pause()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <variable citdl="Boolean" line="526" name="isPaused" />
            <variable line="528" name="_timeout" />
            <variable citdl="Boolean" line="529" name="logReaderEnabled" />
            <scope doc="Resumes output of log messages, including outputting any log messages that&#xA;have been saved to buffer while paused." ilk="function" line="538" lineend="543" name="resume" signature="resume()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope doc="Hides UI of LogReader. Logging functionality is not disrupted." ilk="function" line="550" lineend="552" name="hide" signature="hide()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <variable citdl="String" line="551" name="display" />
            <scope doc="Shows UI of LogReader. Logging functionality is not disrupted." ilk="function" line="559" lineend="561" name="show" signature="show()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope doc="Collapses UI of LogReader. Logging functionality is not disrupted." ilk="function" line="568" lineend="575" name="collapse" signature="collapse()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <variable citdl="Boolean" line="574" name="isCollapsed" />
            <scope doc="Expands UI of LogReader. Logging functionality is not disrupted." ilk="function" line="582" lineend="589" name="expand" signature="expand()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope doc="Returns related checkbox element for given filter (i.e., category or source)." ilk="function" line="598" lineend="600" name="getCheckbox" returns="Array" signature="getCheckbox(filter)">
              <variable ilk="argument" name="filter" />
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope doc="Returns array of enabled categories." ilk="function" line="608" lineend="610" name="getCategories" returns="Array" signature="getCategories()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope doc="Shows log messages associated with given category." ilk="function" line="618" lineend="639" name="showCategory" signature="showCategory(sCategory)">
              <variable ilk="argument" name="sCategory" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this._categoryFilters" line="619" name="filtersArray" />
            </scope>
            <scope doc="Hides log messages associated with given category." ilk="function" line="647" lineend="657" name="hideCategory" signature="hideCategory(sCategory)">
              <variable ilk="argument" name="sCategory" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this._categoryFilters" line="648" name="filtersArray" />
            </scope>
            <scope doc="Returns array of enabled sources." ilk="function" line="665" lineend="667" name="getSources" returns="Array" signature="getSources()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope doc="Shows log messages associated with given source." ilk="function" line="675" lineend="695" name="showSource" signature="showSource(sSource)">
              <variable ilk="argument" name="sSource" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this._sourceFilters" line="676" name="filtersArray" />
            </scope>
            <scope doc="Hides log messages associated with given source." ilk="function" line="703" lineend="713" name="hideSource" signature="hideSource(sSource)">
              <variable ilk="argument" name="sSource" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this._sourceFilters" line="704" name="filtersArray" />
            </scope>
            <scope doc="Does not delete any log messages, but clears all printed log messages from&#xA;the console. Log messages will be printed out again if user re-filters. The&#xA;static method YAHOO.widget.Logger.reset() should be called in order to&#xA;actually delete log messages." ilk="function" line="723" lineend="733" name="clearConsole" signature="clearConsole()">
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this._elConsole" line="729" name="elConsole" />
            </scope>
            <variable citdl="Number" line="727" name="_consoleMsgCount" />
            <scope doc="Updates title to given string." ilk="function" line="741" lineend="743" name="setTitle" signature="setTitle(sTitle)">
              <variable citdl="String" doc="New title." ilk="argument" name="sTitle" />
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope doc="Gets timestamp of the last log." ilk="function" line="751" lineend="753" name="getLastTime" returns="Date" signature="getLastTime()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope doc="Formats message string to HTML for output to console." ilk="function" line="762" lineend="810" name="formatMsg" returns="String" signature="formatMsg(oLogMsg)">
              <variable citdl="Object" doc="Log message object." ilk="argument" name="oLogMsg" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="oLogMsg.category" line="763" name="category" />
              <variable attributes="__local__ private" citdl="category.substring().toUpperCase()" line="766" name="label" />
              <variable attributes="__local__ private" citdl="oLogMsg.time" line="771" name="time" />
              <variable attributes="__local__ private" citdl="time.toLocaleTimeString()" line="773" name="localTime" />
              <variable attributes="__local__ private" citdl="time.getTime()" line="779" name="msecs" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Logger.getStartTime()" line="780" name="startTime" />
              <variable attributes="__local__ private" citdl="msecs" line="781" name="totalTime" />
              <variable attributes="__local__ private" citdl="msecs" line="782" name="elapsedTime" />
              <variable attributes="__local__ private" citdl="oLogMsg.source" line="784" name="source" />
              <variable attributes="__local__ private" citdl="oLogMsg.sourceDetail" line="785" name="sourceDetail" />
              <variable attributes="__local__ private" line="786" name="sourceAndDetail" />
              <variable attributes="__local__ private" citdl="this.html2Text()" line="790" name="msg" />
              <variable attributes="__local__ private" line="807" name="output" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Converts input chars &quot;&lt;&quot;, &quot;&gt;&quot;, and &quot;&amp;&quot; to HTML entities." ilk="function" line="819" lineend="825" name="html2Text" returns="String" signature="html2Text(sHtml)">
              <variable citdl="String" doc="String to convert." ilk="argument" name="sHtml" />
              <variable citdl="LogReader" name="this" />
            </scope>
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Internal class member to index multiple LogReader instances." line="842" name="_index" />
            <scope attributes="private" doc="PRIVATE: Creates the UI for a category filter in the LogReader footer element." ilk="function" line="1050" lineend="1083" name="_createCategoryCheckbox" signature="_createCategoryCheckbox(sCategory)">
              <variable citdl="String" doc="Category name." ilk="argument" name="sCategory" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this" line="1051" name="oSelf" />
              <variable attributes="__local__ private" citdl="this._elCategoryFilters" line="1054" name="elParent" />
              <variable attributes="__local__ private" citdl="this._categoryFilters" line="1055" name="filters" />
              <variable attributes="__local__ private" citdl="elParent.appendChild()" line="1057" name="elFilter" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1062" name="chkCategory" />
              <variable attributes="__local__ private" citdl="elFilter.appendChild()" line="1076" name="lblCategory" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Creates a checkbox in the LogReader footer element to filter by source." ilk="function" line="1092" lineend="1125" name="_createSourceCheckbox" signature="_createSourceCheckbox(sSource)">
              <variable citdl="String" doc="Source name." ilk="argument" name="sSource" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this" line="1093" name="oSelf" />
              <variable attributes="__local__ private" citdl="this._elSourceFilters" line="1096" name="elParent" />
              <variable attributes="__local__ private" citdl="this._sourceFilters" line="1097" name="filters" />
              <variable attributes="__local__ private" citdl="elParent.appendChild()" line="1099" name="elFilter" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1104" name="chkSource" />
              <variable attributes="__local__ private" citdl="elFilter.appendChild()" line="1118" name="lblSource" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Reprints all log messages in the stack through filters." ilk="function" line="1133" lineend="1139" name="_filterLogs" signature="_filterLogs()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Sends buffer of log messages to output and clears buffer." ilk="function" line="1147" lineend="1169" name="_printBuffer" signature="_printBuffer()">
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this.thresholdMax" line="1151" name="thresholdMax" />
              <variable attributes="__local__ private" citdl="Array" line="1154" name="entries" />
            </scope>
            <variable citdl="this._elConsole.scrollHeight" line="1166" name="scrollTop" />
            <scope attributes="private" doc="PRIVATE: Cycles through an array of log messages, and outputs each one to the console&#xA;if its category has not been filtered out." ilk="function" line="1179" lineend="1227" name="_printToConsole" signature="_printToConsole(aEntries)">
              <variable citdl="Array" doc="Array of LogMsg objects to output to console." ilk="argument" name="aEntries" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="aEntries.length" line="1181" name="entriesLen" />
              <variable attributes="__local__ private" citdl="this.thresholdMin" line="1182" name="thresholdMin" />
              <variable attributes="__local__ private" line="1186" name="entriesStartIndex" />
              <variable attributes="__local__ private" citdl="this._sourceFilters.length" line="1189" name="sourceFiltersLen" />
              <variable attributes="__local__ private" citdl="this._categoryFilters.length" line="1190" name="categoryFiltersLen" />
              <variable attributes="__local__ private" citdl="Boolean" line="1193" name="okToPrint" />
              <variable attributes="__local__ private" citdl="Boolean" line="1194" name="okToFilterCats" />
              <variable attributes="__local__ private" citdl="aEntries[i]" line="1197" name="entry" />
              <variable attributes="__local__ private" citdl="entry.source" line="1198" name="source" />
              <variable attributes="__local__ private" citdl="entry.category" line="1199" name="category" />
              <variable attributes="__local__ private" citdl="this.formatMsg()" line="1216" name="output" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles Logger&apos;s categoryCreateEvent." ilk="function" line="1244" lineend="1249" name="_onCategoryCreate" signature="_onCategoryCreate(sType, aArgs, oSelf)">
              <variable citdl="String" doc="The event." ilk="argument" name="sType" />
              <variable citdl="Array" doc="Data passed from event firer." ilk="argument" name="aArgs" />
              <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="aArgs[0]" line="1245" name="category" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles Logger&apos;s sourceCreateEvent." ilk="function" line="1260" lineend="1265" name="_onSourceCreate" signature="_onSourceCreate(sType, aArgs, oSelf)">
              <variable citdl="String" doc="The event." ilk="argument" name="sType" />
              <variable citdl="Array" doc="Data passed from event firer." ilk="argument" name="aArgs" />
              <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="aArgs[0]" line="1261" name="source" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles check events on the category filter checkboxes." ilk="function" line="1275" lineend="1283" name="_onCheckCategory" signature="_onCheckCategory(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="v" />
              <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this.category" line="1276" name="category" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles check events on the category filter checkboxes." ilk="function" line="1293" lineend="1301" name="_onCheckSource" signature="_onCheckSource(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="v" />
              <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this.source" line="1294" name="source" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles click events on the collapse button." ilk="function" line="1311" lineend="1318" name="_onClickCollapseBtn" signature="_onClickCollapseBtn(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="v" />
              <variable citdl="Object" doc="The LogReader instance" ilk="argument" name="oSelf" />
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles click events on the pause button." ilk="function" line="1328" lineend="1335" name="_onClickPauseBtn" signature="_onClickPauseBtn(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="v" />
              <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles click events on the clear button." ilk="function" line="1345" lineend="1347" name="_onClickClearBtn" signature="_onClickClearBtn(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="v" />
              <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles Logger&apos;s newLogEvent." ilk="function" line="1358" lineend="1365" name="_onNewLog" signature="_onNewLog(sType, aArgs, oSelf)">
              <variable citdl="String" doc="The event." ilk="argument" name="sType" />
              <variable citdl="Array" doc="Data passed from event firer." ilk="argument" name="aArgs" />
              <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="aArgs[0]" line="1359" name="logEntry" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles Logger&apos;s resetEvent." ilk="function" line="1376" lineend="1378" name="_onReset" signature="_onReset(sType, aArgs, oSelf)">
              <variable citdl="String" doc="The event." ilk="argument" name="sType" />
              <variable citdl="Array" doc="Data passed from event firer." ilk="argument" name="aArgs" />
              <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
              <variable citdl="LogReader" name="this" />
            </scope>
          </scope>
          <variable citdl="Object" doc="YAHOO.widget.DateMath is used for simple date manipulation. The class is a static utility&#xA;used for adding, subtracting, and comparing dates." line="483" lineend="748" name="DateMath">
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant field representing Day" line="491" name="DAY" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant field representing Week" line="500" name="WEEK" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant field representing Year" line="509" name="YEAR" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant field representing Month" line="518" name="MONTH" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Constant field representing one day, in milliseconds" line="527" name="ONE_DAY_MS" />
            <scope doc="Adds the specified amount of time to the this instance." ilk="function" line="537" lineend="571" name="add" returns="Date" signature="add(date, field, amount)">
              <variable citdl="Date" doc="The JavaScript Date object to perform addition on" ilk="argument" name="date" />
              <variable citdl="String" doc="The field constant to be used for performing addition." ilk="argument" name="field" />
              <variable citdl="Number" doc="The number of units (measured in the field constant) to add to the date." ilk="argument" name="amount" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" citdl="Date" line="538" name="d" />
              <variable attributes="__local__ private" citdl="date.getMonth()" line="541" name="newMonth" />
              <variable attributes="__local__ private" citdl="Number" line="542" name="years" />
            </scope>
            <scope doc="Subtracts the specified amount of time from the this instance." ilk="function" line="581" lineend="583" name="subtract" returns="Date" signature="subtract(date, field, amount)">
              <variable citdl="Date" doc="The JavaScript Date object to perform subtraction on" ilk="argument" name="date" />
              <variable citdl="Number" doc="The this field constant to be used for performing subtraction." ilk="argument" name="field" />
              <variable citdl="Number" doc="The number of units (measured in the field constant) to subtract from the date." ilk="argument" name="amount" />
              <variable citdl="DateMath" name="this" />
            </scope>
            <scope doc="Determines whether a given date is before another date on the calendar." ilk="function" line="592" lineend="599" name="before" returns="Boolean" signature="before(date, compareTo)">
              <variable citdl="Date" doc="The Date object to compare with the compare argument" ilk="argument" name="date" />
              <variable citdl="Date" doc="The Date object to use for the comparison" ilk="argument" name="compareTo" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" citdl="compareTo.getTime()" line="593" name="ms" />
            </scope>
            <scope doc="Determines whether a given date is after another date on the calendar." ilk="function" line="608" lineend="615" name="after" returns="Boolean" signature="after(date, compareTo)">
              <variable citdl="Date" doc="The Date object to compare with the compare argument" ilk="argument" name="date" />
              <variable citdl="Date" doc="The Date object to use for the comparison" ilk="argument" name="compareTo" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" citdl="compareTo.getTime()" line="609" name="ms" />
            </scope>
            <scope doc="Determines whether a given date is between two other dates on the calendar." ilk="function" line="625" lineend="631" name="between" returns="Boolean" signature="between(date, dateBegin, dateEnd)">
              <variable citdl="Date" doc="The date to check for" ilk="argument" name="date" />
              <variable citdl="Date" doc="The start of the range" ilk="argument" name="dateBegin" />
              <variable citdl="Date" doc="The end of the range" ilk="argument" name="dateEnd" />
              <variable citdl="DateMath" name="this" />
            </scope>
            <scope doc="Retrieves a JavaScript Date object representing January 1 of any given year." ilk="function" line="639" lineend="641" name="getJan1" returns="Date" signature="getJan1(calendarYear)">
              <variable citdl="Number" doc="The calendar year for which to retrieve January 1" ilk="argument" name="calendarYear" />
              <variable citdl="DateMath" name="this" />
            </scope>
            <scope doc="Calculates the number of days the specified date is from January 1 of the specified calendar year.&#xA;Passing January 1 to this function would return an offset value of zero." ilk="function" line="651" lineend="657" name="getDayOffset" returns="Number" signature="getDayOffset(date, calendarYear)">
              <variable citdl="Date" doc="The JavaScript date for which to find the offset" ilk="argument" name="date" />
              <variable citdl="Number" doc="The calendar year to use for determining the offset" ilk="argument" name="calendarYear" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" citdl="this.getJan1()" line="652" name="beginYear" />
              <variable attributes="__local__ private" citdl="Math.ceil()" line="655" name="dayOffset" />
            </scope>
            <scope doc="Calculates the week number for the given date. This function assumes that week 1 is the&#xA;week in which January 1 appears, regardless of whether the week consists of a full 7 days.&#xA;The calendar year can be specified to help find what a the week number would be for a given&#xA;date if the date overlaps years. For instance, a week may be considered week 1 of 2005, or&#xA;week 53 of 2004. Specifying the optional calendarYear allows one to make this distinction&#xA;easily." ilk="function" line="673" lineend="682" name="getWeekNumber" returns="Number" signature="getWeekNumber(date, calendarYear)">
              <variable citdl="Date" doc="The JavaScript date for which to find the week number" ilk="argument" name="date" />
              <variable citdl="Number" doc="OPTIONAL - The calendar year to use for determining the week number. Default is" ilk="argument" name="calendarYear" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" citdl="Date" line="675" name="nearestThurs" />
              <variable attributes="__local__ private" citdl="Date" line="677" name="jan1" />
              <variable attributes="__local__ private" line="678" name="dayOfYear" />
              <variable attributes="__local__ private" citdl="Math.ceil()" line="680" name="weekNum" />
            </scope>
            <scope doc="Determines if a given week overlaps two different years." ilk="function" line="690" lineend="697" name="isYearOverlapWeek" returns="Boolean" signature="isYearOverlapWeek(weekBeginDate)">
              <variable citdl="Date" doc="The JavaScript Date representing the first day of the week." ilk="argument" name="weekBeginDate" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="691" name="overlaps" />
              <variable attributes="__local__ private" citdl="this.add()" line="692" name="nextWeek" />
            </scope>
            <scope doc="Determines if a given week overlaps two different months." ilk="function" line="705" lineend="712" name="isMonthOverlapWeek" returns="Boolean" signature="isMonthOverlapWeek(weekBeginDate)">
              <variable citdl="Date" doc="The JavaScript Date representing the first day of the week." ilk="argument" name="weekBeginDate" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="706" name="overlaps" />
              <variable attributes="__local__ private" citdl="this.add()" line="707" name="nextWeek" />
            </scope>
            <scope doc="Gets the first day of a month containing a given date." ilk="function" line="720" lineend="723" name="findMonthStart" returns="Date" signature="findMonthStart(date)">
              <variable citdl="Date" doc="The JavaScript Date used to calculate the month start" ilk="argument" name="date" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" citdl="Date" line="721" name="start" />
            </scope>
            <scope doc="Gets the last day of a month containing a given date." ilk="function" line="731" lineend="736" name="findMonthEnd" returns="Date" signature="findMonthEnd(date)">
              <variable citdl="Date" doc="The JavaScript Date used to calculate the month end" ilk="argument" name="date" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" citdl="this.findMonthStart()" line="732" name="start" />
              <variable attributes="__local__ private" citdl="this.add()" line="733" name="nextMonth" />
              <variable attributes="__local__ private" citdl="this.subtract()" line="734" name="end" />
            </scope>
            <scope doc="Clears the time fields from a given date, effectively setting the time to 12 noon." ilk="function" line="744" lineend="747" name="clearTime" returns="Date" signature="clearTime(date)">
              <variable citdl="Date" doc="The JavaScript Date for which the time fields will be cleared" ilk="argument" name="date" />
              <variable citdl="DateMath" name="this" />
            </scope>
          </variable>
          <scope classrefs="Object" ilk="class" line="492" lineend="1311" name="Module">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Container family of components is designed to enable developers to create different kinds of content-containing modules on the web. Module and Overlay are the most basic containers, and they can be used directly or extended to build custom containers. Also part of the Container family are four UI controls that extend Module and Overlay: Tooltip, Panel, Dialog, and SimpleDialog." ilk="function" line="492" lineend="497" name="Module" signature="Module(el, userConfig)">
              <variable citdl="HTMLElement" doc="The element representing the Module" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration Object literal containing the configuration that should be set for this module. See configuration documentation for more details." ilk="argument" name="userConfig" />
              <variable citdl="Module" name="this" />
            </scope>
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the prefix path to use for non-secure images" line="506" name="IMG_ROOT" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the prefix path to use for securely served images" line="515" name="IMG_ROOT_SSL" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant for the default CSS class name that represents a Module" line="524" name="CSS_MODULE" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the module header" line="533" name="CSS_HEADER" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the module body" line="542" name="CSS_BODY" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the module footer" line="551" name="CSS_FOOTER" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the url for the &quot;src&quot; attribute of the iframe used to monitor changes to the browser&apos;s base font size" line="560" name="RESIZE_MONITOR_SECURE_URL" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Singleton CustomEvent fired when the font size is changed in the browser.&#xA;Opera&apos;s &quot;zoom&quot; functionality currently does not support text size detection." line="567" name="textResizeEvent" />
            <variable attributes="private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="576" lineend="593" name="_EVENT_TYPES">
              <variable citdl="String" line="578" name="BEFORE_INIT" />
              <variable citdl="String" line="579" name="INIT" />
              <variable citdl="String" line="580" name="APPEND" />
              <variable citdl="String" line="581" name="BEFORE_RENDER" />
              <variable citdl="String" line="582" name="RENDER" />
              <variable citdl="String" line="583" name="CHANGE_HEADER" />
              <variable citdl="String" line="584" name="CHANGE_BODY" />
              <variable citdl="String" line="585" name="CHANGE_FOOTER" />
              <variable citdl="String" line="586" name="CHANGE_CONTENT" />
              <variable citdl="String" line="587" name="DESTORY" />
              <variable citdl="String" line="588" name="BEFORE_SHOW" />
              <variable citdl="String" line="589" name="SHOW" />
              <variable citdl="String" line="590" name="BEFORE_HIDE" />
              <variable citdl="String" line="591" name="HIDE" />
            </variable>
            <variable attributes="private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the Module&apos;s configuration properties" line="602" lineend="621" name="_DEFAULT_CONFIG">
              <variable citdl="Object" line="604" lineend="608" name="VISIBLE">
                <variable citdl="String" line="605" name="key" />
                <variable citdl="Boolean" line="606" name="value" />
                <variable citdl="YAHOO.lang.isBoolean" line="607" name="validator" />
              </variable>
              <variable citdl="Object" line="610" lineend="614" name="EFFECT">
                <variable citdl="String" line="611" name="key" />
                <variable citdl="Boolean" line="612" name="suppressEvent" />
                <variable citdl="Array" line="613" name="supercedes" />
              </variable>
              <variable citdl="Object" line="616" lineend="619" name="MONITOR_RESIZE">
                <variable citdl="String" line="617" name="key" />
                <variable citdl="Boolean" line="618" name="value" />
              </variable>
            </variable>
            <variable citdl="Function" doc="The class&apos;s constructor function" line="631" name="constructor" />
            <variable citdl="HTMLElement" doc="The main module element that contains the header, body, and footer" line="638" name="element" />
            <variable citdl="HTMLElement" doc="The header element, denoted with CSS class &quot;hd&quot;" line="645" name="header" />
            <variable citdl="HTMLElement" doc="The body element, denoted with CSS class &quot;bd&quot;" line="652" name="body" />
            <variable citdl="HTMLElement" doc="The footer element, denoted with CSS class &quot;ft&quot;" line="659" name="footer" />
            <variable citdl="String" doc="The id of the element" line="666" name="id" />
            <variable citdl="String" doc="The String representing the image root" line="673" name="imageRoot" />
            <scope doc="Initializes the custom events for Module which are fired automatically at appropriate times by the Module class." ilk="function" line="679" lineend="771" name="initEvents" signature="initEvents()">
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Module._EVENT_TYPES" line="681" name="EVENT_TYPES" />
            </scope>
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired prior to class initalization." line="688" name="beforeInitEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired after class initalization." line="695" name="initEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired when the Module is appended to the DOM" line="701" name="appendEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired before the Module is rendered" line="707" name="beforeRenderEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired after the Module is rendered" line="713" name="renderEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired when the header content of the Module is modified" line="720" name="changeHeaderEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired when the body content of the Module is modified" line="727" name="changeBodyEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired when the footer content of the Module is modified" line="734" name="changeFooterEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired when the content of the Module is modified" line="740" name="changeContentEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired when the Module is destroyed" line="746" name="destroyEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired before the Module is shown" line="752" name="beforeShowEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired after the Module is shown" line="758" name="showEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired before the Module is hidden" line="764" name="beforeHideEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired after the Module is hidden" line="770" name="hideEvent" />
            <variable citdl="String" doc="String representing the current user-agent platform" line="778" name="platform" />
            <variable citdl="String" doc="String representing the current user-agent browser" line="794" name="browser" />
            <variable citdl="Boolean" doc="Boolean representing whether or not the current browsing context is secure (https)" line="816" name="isSecure" />
            <scope doc="Initializes the custom events for Module which are fired automatically at appropriate times by the Module class." ilk="function" line="827" lineend="875" name="initDefaultConfig" signature="initDefaultConfig()">
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Module._DEFAULT_CONFIG" line="830" name="DEFAULT_CONFIG" />
            </scope>
            <scope doc="The Module class&apos;s initialization method, which is executed for Module and all of its subclasses. This method is automatically called by the constructor, and  sets up all DOM references for pre-existing markup, and creates required markup if it is not already present." ilk="function" line="884" lineend="951" name="init" signature="init(el, userConfig)">
              <variable citdl="HTMLElement" doc="The element representing the Module" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration Object literal containing the configuration that should be set for this module. See configuration documentation for more details." ilk="argument" name="userConfig" />
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="el" line="902" name="elId" />
              <variable attributes="__local__ private" citdl="this.element.childNodes" line="917" name="childNodes" />
              <variable attributes="__local__ private" citdl="childNodes[i]" line="921" name="child" />
            </scope>
            <variable citdl="YAHOO.util.Config" doc="The Module&apos;s Config object used for monitoring configuration properties." line="895" name="cfg" />
            <scope doc="Initialized an empty IFRAME that is placed out of the visible area that can be used to detect text resize." ilk="function" line="957" lineend="1024" name="initResizeMonitor" signature="initResizeMonitor()">
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="document.getElementById()" line="961" name="resizeMonitor">
                <variable citdl="Object" line="974" name="style">
                  <variable citdl="String" line="974" name="visibility" />
                  <variable citdl="String" line="978" name="width" />
                  <variable citdl="String" line="979" name="height" />
                  <variable citdl="String" line="980" name="position" />
                  <variable citdl="nTop" line="985" name="top" />
                  <variable citdl="nLeft" line="986" name="left" />
                  <variable citdl="String" line="987" name="borderStyle" />
                  <variable citdl="String" line="988" name="borderWidth" />
                </variable>
              </variable>
              <variable attributes="__local__ private" line="967" name="bIE" />
              <variable attributes="__local__ private" citdl="Number" line="982" name="nLeft" />
              <variable attributes="__local__ private" citdl="Number" line="983" name="nTop" />
              <variable attributes="__local__ private" citdl="resizeMonitor.contentWindow.document" line="995" name="doc" />
              <scope attributes="__local__ private" ilk="function" line="1003" lineend="1005" name="fireTextResize" signature="fireTextResize()" />
            </scope>
            <variable citdl="resizeMonitor" line="1008" name="resizeMonitor" />
            <variable citdl="Boolean" line="1018" name="textResizeInitialized" />
            <scope doc="Event handler fired when the resize monitor element is resized." ilk="function" line="1032" lineend="1040" name="onDomResize" signature="onDomResize(e, obj)">
              <variable citdl="DOMEvent" doc="The DOM resize event" ilk="argument" name="e" />
              <variable citdl="Object" doc="The scope object passed to the handler" ilk="argument" name="obj" />
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="Number" line="1035" name="nLeft" />
              <variable attributes="__local__ private" citdl="Number" line="1035" name="nTop" />
            </scope>
            <variable citdl="nTop" line="1037" name="top" />
            <variable citdl="nLeft" line="1038" name="left" />
            <scope doc="Sets the Module&apos;s header content to the HTML specified, or appends the passed element to the header. If no header is present, one will be automatically created." ilk="function" line="1048" lineend="1063" name="setHeader" signature="setHeader(headerContent)">
              <variable citdl="HTMLElement" doc="The HTMLElement to append to the header" ilk="argument" name="headerContent" />
              <variable citdl="Module" name="this" />
            </scope>
            <variable citdl="YAHOO.widget.Module.CSS_HEADER" line="1051" name="className" />
            <variable citdl="headerContent" line="1055" name="innerHTML" />
            <scope doc="Appends the passed element to the header. If no header is present, one will be automatically created." ilk="function" line="1070" lineend="1079" name="appendToHeader" signature="appendToHeader(element)">
              <variable citdl="HTMLElement" doc="The element to append to the header" ilk="argument" name="element" />
              <variable citdl="Module" name="this" />
            </scope>
            <scope doc="Sets the Module&apos;s body content to the HTML specified, or appends the passed element to the body. If no body is present, one will be automatically created." ilk="function" line="1087" lineend="1103" name="setBody" signature="setBody(bodyContent)">
              <variable citdl="HTMLElement" doc="The HTMLElement to append to the body" ilk="argument" name="bodyContent" />
              <variable citdl="Module" name="this" />
            </scope>
            <scope doc="Appends the passed element to the body. If no body is present, one will be automatically created." ilk="function" line="1110" lineend="1119" name="appendToBody" signature="appendToBody(element)">
              <variable citdl="HTMLElement" doc="The element to append to the body" ilk="argument" name="element" />
              <variable citdl="Module" name="this" />
            </scope>
            <scope doc="Sets the Module&apos;s footer content to the HTML specified, or appends the passed element to the footer. If no footer is present, one will be automatically created." ilk="function" line="1127" lineend="1142" name="setFooter" signature="setFooter(footerContent)">
              <variable citdl="HTMLElement" doc="The HTMLElement to append to the footer" ilk="argument" name="footerContent" />
              <variable citdl="Module" name="this" />
            </scope>
            <scope doc="Appends the passed element to the footer. If no footer is present, one will be automatically created." ilk="function" line="1149" lineend="1158" name="appendToFooter" signature="appendToFooter(element)">
              <variable citdl="HTMLElement" doc="The element to append to the footer" ilk="argument" name="element" />
              <variable citdl="Module" name="this" />
            </scope>
            <scope doc="Renders the Module by inserting the elements that are not already in the main Module into their correct places. Optionally appends the Module to the specified node prior to the render&apos;s execution. NOTE: For Modules without existing markup, the appendToNode argument is REQUIRED. If this argument is ommitted and the current element is not present in the document, the function will return false, indicating that the render was a failure." ilk="function" line="1168" lineend="1223" name="render" returns="Boolean" signature="render(appendToNode, moduleElement)">
              <variable citdl="HTMLElement" doc="The element to which the Module should be appended to prior to rendering" ilk="argument" name="appendToNode" />
              <variable citdl="HTMLElement" doc="OPTIONAL. The element that represents the actual Standard Module container." ilk="argument" name="moduleElement" />
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="this" line="1175" name="me" />
              <scope attributes="__local__ private" ilk="function" line="1176" lineend="1185" name="appendTo" signature="appendTo(element)">
                <variable ilk="argument" name="element" />
              </scope>
              <variable attributes="__local__ private" citdl="moduleElement.firstChild" line="1199" name="firstChild" />
            </scope>
            <scope doc="Removes the Module element from the DOM and sets all child elements to null." ilk="function" line="1229" lineend="1254" name="destroy" signature="destroy()">
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="this.element.parentNode" line="1230" name="parent" />
            </scope>
            <scope doc="Shows the Module element by setting the visible configuration property to true. Also fires two events: beforeShowEvent prior to the visibility change, and showEvent after." ilk="function" line="1260" lineend="1262" name="show" signature="show()">
              <variable citdl="Module" name="this" />
            </scope>
            <scope doc="Hides the Module element by setting the visible configuration property to false. Also fires two events: beforeHideEvent prior to the visibility change, and hideEvent after." ilk="function" line="1268" lineend="1270" name="hide" signature="hide()">
              <variable citdl="Module" name="this" />
            </scope>
            <scope doc="Default event handler for changing the visibility property of a Module. By default, this is achieved by switching the &quot;display&quot; style between &quot;block&quot; and &quot;none&quot;.&#xA;This method is responsible for firing showEvent and hideEvent." ilk="function" line="1282" lineend="1293" name="configVisible" signature="configVisible(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1283" name="visible" />
            </scope>
            <scope doc="Default event handler for the &quot;monitorresize&quot; configuration property" ilk="function" line="1302" lineend="1310" name="configMonitorResize" signature="configMonitorResize(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1303" name="monitor" />
            </scope>
            <scope doc="Returns a String representation of the Object." ilk="function" line="1318" lineend="1320" name="toString" returns="String" signature="toString()">
              <variable citdl="Module" name="this" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="713" lineend="1672" name="Node">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The base class for all tree nodes.  The node&apos;s presentation and behavior in&#xA;response to mouse events is handled in Node subclasses." ilk="function" line="713" lineend="715" name="Node" signature="Node(oData, oParent, expanded)">
              <variable citdl="Object" doc="a string or object containing the data that will&#xA;be used to render this node" ilk="argument" name="oData" />
              <variable citdl="Node" doc="this node&apos;s parent node" ilk="argument" name="oParent" />
              <variable citdl="Boolean" doc="the initial expanded/collapsed state" ilk="argument" name="expanded" />
              <variable citdl="Node" name="this" />
            </scope>
            <variable citdl="Number" doc="The index for this instance obtained from global counter in YAHOO.widget.TreeView." line="724" name="index" />
            <variable citdl="Array" doc="This node&apos;s child node collection." line="731" name="children" />
            <variable citdl="TreeView" doc="Tree instance this node is part of" line="738" name="tree" />
            <variable citdl="Object" doc="The data linked to this node.  This can be any object or primitive&#xA;value, and the data can be used in getNodeHtml()." line="746" name="data" />
            <variable citdl="Node" doc="Parent node" line="753" name="parent" />
            <variable citdl="Number" doc="The depth of this node.  We start at -1 for the root node." line="760" name="depth" />
            <variable citdl="String" doc="The href for the node&apos;s label.  If one is not specified, the href will&#xA;be set so that it toggles the node." line="768" name="href" />
            <variable citdl="String" doc="The label href target, defaults to current window" line="775" name="target" />
            <variable citdl="Boolean" doc="The node&apos;s expanded/collapsed state" line="782" name="expanded" />
            <variable citdl="Boolean" doc="Can multiple children be expanded at once?" line="789" name="multiExpand" />
            <variable citdl="Boolean" doc="Should we render children for a collapsed node?  It is possible that the&#xA;implementer will want to render the hidden data...  @todo verify that we&#xA;need this, and implement it if we do." line="798" name="renderHidden" />
            <variable citdl="Boolean" doc="This flag is set to true when the html is generated for this node&apos;s&#xA;children, and set to false when new children are added." line="806" name="childrenRendered" />
            <variable citdl="Boolean" doc="Dynamically loaded nodes only fetch the data the first time they are&#xA;expanded.  This flag is set to true once the data has been fetched." line="814" name="dynamicLoadComplete" />
            <variable citdl="Node" doc="This node&apos;s previous sibling" line="821" name="previousSibling" />
            <variable citdl="Node" doc="This node&apos;s next sibling" line="828" name="nextSibling" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: We can set the node up to call an external method to get the child&#xA;data dynamically." line="837" name="_dynLoad" />
            <variable citdl="Function" doc="Function to execute when we need to get this node&apos;s child data." line="844" name="dataLoader" />
            <variable citdl="Boolean" doc="This is true for dynamically loading nodes while waiting for the&#xA;callback to return." line="852" name="isLoading" />
            <variable citdl="Boolean" doc="The toggle/branch icon will not show if this is set to false.  This&#xA;could be useful if the implementer wants to have the child contain&#xA;extra info about the parent, rather than an actual node." line="861" name="hasIcon" />
            <variable citdl="Number" doc="Used to configure what happens when a dynamic load node is expanded&#xA;and we discover that it does not have children.  By default, it is&#xA;treated as if it still could have children (plus/minus icon).  Set&#xA;iconMode to have it display like a leaf node instead." line="871" name="iconMode" />
            <variable citdl="Boolean" doc="Specifies whether or not the content area of the node should be allowed&#xA;to wrap." line="880" name="nowrap" />
            <variable attributes="private" citdl="String" doc="PRIVATE: The node type" line="887" name="_type" />
            <scope doc="Initializes this node, gets some of the properties from the parent" ilk="function" line="904" lineend="927" name="init" signature="init(oData, oParent, expanded)">
              <variable citdl="Object" doc="a string or object containing the data that will&#xA;be used to render this node" ilk="argument" name="oData" />
              <variable citdl="Node" doc="this node&apos;s parent node" ilk="argument" name="oParent" />
              <variable citdl="Boolean" doc="the initial expanded/collapsed state" ilk="argument" name="expanded" />
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Certain properties for the node cannot be set until the parent&#xA;is known. This is called after the node is inserted into a tree.&#xA;the parent is also applied to this node&apos;s children in order to&#xA;make it possible to move a branch from one tree to another." ilk="function" line="938" lineend="968" name="applyParent" returns="Boolean" signature="applyParent(parentNode)">
              <variable citdl="Node" doc="this node&apos;s parent node" ilk="argument" name="parentNode" />
              <variable citdl="Node" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Appends a node to the child collection." ilk="function" line="977" lineend="987" name="appendChild" returns="Node" signature="appendChild(childNode)">
              <variable citdl="Node" doc="the new node" ilk="argument" name="childNode" />
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="this.children[this.children.length-1]" line="979" name="sib" />
            </scope>
            <scope doc="Appends this node to the supplied node&apos;s child collection" ilk="function" line="995" lineend="997" name="appendTo" returns="Node" signature="appendTo(parentNode)">
              <variable citdl="Node" doc="the node to append to." ilk="argument" name="parentNode" />
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Inserts this node before this supplied node" ilk="function" line="1005" lineend="1026" name="insertBefore" returns="Node" signature="insertBefore(node)">
              <variable citdl="Node" doc="the node to insert this node before" ilk="argument" name="node" />
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="node.parent" line="1006" name="p" />
              <variable attributes="__local__ private" citdl="node.isChildOf()" line="1013" name="refIndex" />
            </scope>
            <scope doc="Inserts this node after the supplied node" ilk="function" line="1034" lineend="1060" name="insertAfter" returns="Node" signature="insertAfter(node)">
              <variable citdl="Node" doc="the node to insert after" ilk="argument" name="node" />
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="node.parent" line="1035" name="p" />
              <variable attributes="__local__ private" citdl="node.isChildOf()" line="1042" name="refIndex" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Returns true if the Node is a child of supplied Node" ilk="function" line="1070" lineend="1080" name="isChildOf" returns="Boolean" signature="isChildOf(parentNode)">
              <variable citdl="Node" doc="the Node to check" ilk="argument" name="parentNode" />
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Returns a node array of this node&apos;s siblings, null if none." ilk="function" line="1087" lineend="1089" name="getSiblings" returns="this.parent.children" signature="getSiblings()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Shows this node&apos;s children" ilk="function" line="1095" lineend="1101" name="showChildren" signature="showChildren()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Hides this node&apos;s children" ilk="function" line="1107" lineend="1112" name="hideChildren" signature="hideChildren()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Returns the id for this node&apos;s container div" ilk="function" line="1119" lineend="1121" name="getElId" returns="String" signature="getElId()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Returns the id for this node&apos;s children div" ilk="function" line="1128" lineend="1130" name="getChildrenElId" returns="String" signature="getChildrenElId()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Returns the id for this node&apos;s toggle element" ilk="function" line="1137" lineend="1139" name="getToggleElId" returns="String" signature="getToggleElId()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Returns this node&apos;s container html element" ilk="function" line="1159" lineend="1161" name="getEl" returns="HTMLElement" signature="getEl()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Returns the div that was generated for this node&apos;s children" ilk="function" line="1168" lineend="1170" name="getChildrenEl" returns="HTMLElement" signature="getChildrenEl()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Returns the element that is being used for this node&apos;s toggle." ilk="function" line="1177" lineend="1179" name="getToggleEl" returns="HTMLElement" signature="getToggleEl()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Generates the link that will invoke this node&apos;s toggle method" ilk="function" line="1213" lineend="1216" name="getToggleLink" returns="String" signature="getToggleLink()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Hides this nodes children (creating them if necessary), changes the" ilk="function" line="1223" lineend="1255" name="collapse" signature="collapse()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="this.tree.onCollapse()" line="1228" name="ret" />
            </scope>
            <scope doc="Shows this nodes children (creating them if necessary), changes the&#xA;toggle style, and collapses its siblings if multiExpand is not set." ilk="function" line="1262" lineend="1316" name="expand" signature="expand()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="this.tree.onExpand()" line="1267" name="ret" />
              <variable attributes="__local__ private" citdl="this.getSiblings()" line="1305" name="sibs" />
            </scope>
            <scope ilk="function" line="1318" lineend="1325" name="updateIcon" signature="updateIcon()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="this.getToggleEl()" line="1320" name="el" />
            </scope>
            <scope doc="Returns the css style name for the toggle" ilk="function" line="1332" lineend="1348" name="getStyle" returns="String" signature="getStyle()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" line="1337" name="loc" />
              <variable attributes="__local__ private" citdl="String" line="1340" name="type" />
            </scope>
            <scope doc="Returns the hover style for the icon" ilk="function" line="1355" lineend="1361" name="getHoverStyle" returns="String" signature="getHoverStyle()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="this.getStyle()" line="1356" name="s" />
            </scope>
            <scope doc="Recursively expands all of this node&apos;s children." ilk="function" line="1367" lineend="1381" name="expandAll" signature="expandAll()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="this.children[i]" line="1369" name="c" />
            </scope>
            <scope doc="Recursively collapses all of this node&apos;s children." ilk="function" line="1387" lineend="1392" name="collapseAll" signature="collapseAll()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Configures this node for dynamically obtaining the child data&#xA;when the node is first expanded.  Calling it without the callback&#xA;will turn off dynamic load for the node." ilk="function" line="1405" lineend="1417" name="setDynamicLoad" signature="setDynamicLoad(fnDataLoader, iconMode)">
              <variable ilk="argument" name="fnDataLoader" />
              <variable citdl="Number" doc="configures the icon that is displayed when a dynamic&#xA;load node is expanded the first time without children.  By default, the&#xA;&quot;collapse&quot; icon will be used.  If set to 1, the leaf node icon will be&#xA;displayed." ilk="argument" name="iconMode" />
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Evaluates if this node is the root node of the tree" ilk="function" line="1424" lineend="1426" name="isRoot" returns="Boolean" signature="isRoot()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Evaluates if this node&apos;s children should be loaded dynamically.  Looks for&#xA;the property both in this instance and the root node.  If the tree is&#xA;defined to load all children dynamically, the data callback function is&#xA;defined in the root node" ilk="function" line="1436" lineend="1439" name="isDynamic" returns="Boolean" signature="isDynamic()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" line="1437" name="lazy" />
            </scope>
            <scope doc="Returns the current icon mode.  This refers to the way childless dynamic&#xA;load nodes appear." ilk="function" line="1447" lineend="1449" name="getIconMode" returns="Number" signature="getIconMode()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Checks if this node has children.  If this node is lazy-loading and the&#xA;children have not been rendered, we do not know whether or not there&#xA;are actual children.  In most cases, we need to assume that there are&#xA;children (for instance, the toggle needs to show the expandable&#xA;presentation state).  In other times we want to know if there are rendered&#xA;children.  For the latter, &quot;checkForLazyLoad&quot; should be false." ilk="function" line="1463" lineend="1466" name="hasChildren" returns="Boolean" signature="hasChildren(checkForLazyLoad)">
              <variable citdl="Boolean" doc="should we check for unloaded children?" ilk="argument" name="checkForLazyLoad" />
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Expands if node is collapsed, collapses otherwise." ilk="function" line="1472" lineend="1476" name="toggle" signature="toggle()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Returns the markup for this node and its children." ilk="function" line="1483" lineend="1493" name="getHtml" returns="String" signature="getHtml()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="1487" name="sb" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Called when first rendering the tree.  We always build the div that will&#xA;contain this nodes children, but we don&apos;t render the children themselves&#xA;unless this node is expanded." ilk="function" line="1503" lineend="1522" name="getChildrenHtml" returns="String" signature="getChildrenHtml()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="1505" name="sb" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Generates the markup for the child nodes.  This is not done until the node&#xA;is expanded." ilk="function" line="1531" lineend="1569" name="renderChildren" returns="String" signature="renderChildren()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="this" line="1534" name="node" />
            </scope>
            <variable citdl="Boolean" line="1538" name="locked" />
            <scope doc="Called when we know we have all the child data." ilk="function" line="1576" lineend="1587" name="completeRender" returns="String" signature="completeRender()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="1577" name="sb" />
            </scope>
            <scope doc="Load complete is the callback function we pass to the data provider&#xA;in dynamic load situations." ilk="function" line="1594" lineend="1600" name="loadComplete" signature="loadComplete()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Returns this node&apos;s ancestor at the specified depth." ilk="function" line="1608" lineend="1620" name="getAncestor" returns="Node" signature="getAncestor(depth)">
              <variable citdl="Number" doc="the depth of the ancestor." ilk="argument" name="depth" />
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="this.parent" line="1613" name="p" />
            </scope>
            <scope doc="Returns the css class for the spacer at the specified depth for&#xA;this node.  If this node&apos;s ancestor at the specified depth&#xA;has a next sibling the presentation is different than if it&#xA;does not have a next sibling" ilk="function" line="1631" lineend="1634" name="getDepthStyle" returns="String" signature="getDepthStyle(depth)">
              <variable citdl="Number" doc="the depth of the ancestor." ilk="argument" name="depth" />
              <variable citdl="Node" name="this" />
            </scope>
            <variable citdl="String" line="1633" name="ygtvdepthcell" />
            <scope doc="Get the markup for the node.  This is designed to be overrided so that we can&#xA;support different types of nodes." ilk="function" line="1642" lineend="1644" name="getNodeHtml" returns="String" signature="getNodeHtml()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Regenerates the html for this node and its children.  To be used when the&#xA;node is expanded and new children have been added." ilk="function" line="1651" lineend="1661" name="refresh" signature="refresh()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="this.getToggleEl()" line="1656" name="el" />
            </scope>
            <scope doc="Node toString" ilk="function" line="1668" lineend="1670" name="toString" returns="String" signature="toString()">
              <variable citdl="Node" name="this" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="777" lineend="1085" name="Calendar">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Calendar component is a UI control that enables users to choose one or more dates from a graphical calendar presented in a one-month (&quot;one-up&quot;) or two-month (&quot;two-up&quot;) interface. Calendars are generated entirely via script and can be navigated without any page refreshes." ilk="function" line="777" lineend="779" name="Calendar" signature="Calendar(id, containerId, config)">
              <variable citdl="String" doc="The id of the table element that will represent the calendar widget" ilk="argument" name="id" />
              <variable citdl="String" doc="The id of the container div element that will wrap the calendar table" ilk="argument" name="containerId" />
              <variable citdl="Object" doc="The configuration object containing the Calendar&apos;s arguments" ilk="argument" name="config" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <variable attributes="deprecated __static__" citdl="String" doc="DEPRECATED STATIC: The path to be used for images loaded for the Calendar" line="788" name="IMG_ROOT" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Type constant used for renderers to represent an individual date (M/D/Y)" line="797" name="DATE" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Type constant used for renderers to represent an individual date across any year (M/D)" line="806" name="MONTH_DAY" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Type constant used for renderers to represent a weekday" line="815" name="WEEKDAY" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Type constant used for renderers to represent a range of individual dates (M/D/Y-M/D/Y)" line="824" name="RANGE" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Type constant used for renderers to represent a month across any year" line="833" name="MONTH" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Constant that represents the total number of date cells that are displayed in a given month" line="842" name="DISPLAY_DAYS" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant used for halting the execution of the remainder of the render stack" line="851" name="STOP_RENDER" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant used to represent short date field string formats (e.g. Tu or Feb)" line="860" name="SHORT" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant used to represent long date field string formats (e.g. Monday or February)" line="869" name="LONG" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant used to represent medium date field string formats (e.g. Mon)" line="878" name="MEDIUM" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant used to represent single character date field string formats (e.g. M, T, W)" line="887" name="ONE_CHAR" />
            <variable attributes="private __static__ constant" citdl="Object" doc="PRIVATE STATIC CONSTANT: The set of default Config property keys and values for the Calendar" line="897" lineend="932" name="_DEFAULT_CONFIG">
              <variable citdl="Object" line="899" lineend="899" name="PAGEDATE">
                <variable line="899" name="value" />
                <variable citdl="String" line="899" name="key" />
              </variable>
              <variable citdl="Object" line="900" lineend="900" name="SELECTED">
                <variable line="900" name="value" />
                <variable citdl="String" line="900" name="key" />
              </variable>
              <variable citdl="Object" line="901" lineend="901" name="TITLE">
                <variable citdl="String" line="901" name="value" />
                <variable citdl="String" line="901" name="key" />
              </variable>
              <variable citdl="Object" line="902" lineend="902" name="CLOSE">
                <variable citdl="Boolean" line="902" name="value" />
                <variable citdl="String" line="902" name="key" />
              </variable>
              <variable citdl="Object" line="903" lineend="903" name="IFRAME">
                <variable citdl="Boolean" line="903" name="value" />
                <variable citdl="String" line="903" name="key" />
              </variable>
              <variable citdl="Object" line="904" lineend="904" name="MINDATE">
                <variable line="904" name="value" />
                <variable citdl="String" line="904" name="key" />
              </variable>
              <variable citdl="Object" line="905" lineend="905" name="MAXDATE">
                <variable line="905" name="value" />
                <variable citdl="String" line="905" name="key" />
              </variable>
              <variable citdl="Object" line="906" lineend="906" name="MULTI_SELECT">
                <variable citdl="Boolean" line="906" name="value" />
                <variable citdl="String" line="906" name="key" />
              </variable>
              <variable citdl="Object" line="907" lineend="907" name="START_WEEKDAY">
                <variable citdl="Number" line="907" name="value" />
                <variable citdl="String" line="907" name="key" />
              </variable>
              <variable citdl="Object" line="908" lineend="908" name="SHOW_WEEKDAYS">
                <variable citdl="Boolean" line="908" name="value" />
                <variable citdl="String" line="908" name="key" />
              </variable>
              <variable citdl="Object" line="909" lineend="909" name="SHOW_WEEK_HEADER">
                <variable citdl="Boolean" line="909" name="value" />
                <variable citdl="String" line="909" name="key" />
              </variable>
              <variable citdl="Object" line="910" lineend="910" name="SHOW_WEEK_FOOTER">
                <variable citdl="Boolean" line="910" name="value" />
                <variable citdl="String" line="910" name="key" />
              </variable>
              <variable citdl="Object" line="911" lineend="911" name="HIDE_BLANK_WEEKS">
                <variable citdl="Boolean" line="911" name="value" />
                <variable citdl="String" line="911" name="key" />
              </variable>
              <variable citdl="Object" line="912" lineend="912" name="NAV_ARROW_LEFT">
                <variable line="912" name="value" />
                <variable citdl="String" line="912" name="key" />
              </variable>
              <variable citdl="Object" line="913" lineend="913" name="NAV_ARROW_RIGHT">
                <variable line="913" name="value" />
                <variable citdl="String" line="913" name="key" />
              </variable>
              <variable citdl="Object" line="914" lineend="914" name="MONTHS_SHORT">
                <variable citdl="Array" line="914" name="value" />
                <variable citdl="String" line="914" name="key" />
              </variable>
              <variable citdl="Object" line="915" lineend="915" name="MONTHS_LONG">
                <variable citdl="Array" line="915" name="value" />
                <variable citdl="String" line="915" name="key" />
              </variable>
              <variable citdl="Object" line="916" lineend="916" name="WEEKDAYS_1CHAR">
                <variable citdl="Array" line="916" name="value" />
                <variable citdl="String" line="916" name="key" />
              </variable>
              <variable citdl="Object" line="917" lineend="917" name="WEEKDAYS_SHORT">
                <variable citdl="Array" line="917" name="value" />
                <variable citdl="String" line="917" name="key" />
              </variable>
              <variable citdl="Object" line="918" lineend="918" name="WEEKDAYS_MEDIUM">
                <variable citdl="Array" line="918" name="value" />
                <variable citdl="String" line="918" name="key" />
              </variable>
              <variable citdl="Object" line="919" lineend="919" name="WEEKDAYS_LONG">
                <variable citdl="Array" line="919" name="value" />
                <variable citdl="String" line="919" name="key" />
              </variable>
              <variable citdl="Object" line="920" lineend="920" name="LOCALE_MONTHS">
                <variable citdl="String" line="920" name="value" />
                <variable citdl="String" line="920" name="key" />
              </variable>
              <variable citdl="Object" line="921" lineend="921" name="LOCALE_WEEKDAYS">
                <variable citdl="String" line="921" name="value" />
                <variable citdl="String" line="921" name="key" />
              </variable>
              <variable citdl="Object" line="922" lineend="922" name="DATE_DELIMITER">
                <variable citdl="String" line="922" name="value" />
                <variable citdl="String" line="922" name="key" />
              </variable>
              <variable citdl="Object" line="923" lineend="923" name="DATE_FIELD_DELIMITER">
                <variable citdl="String" line="923" name="value" />
                <variable citdl="String" line="923" name="key" />
              </variable>
              <variable citdl="Object" line="924" lineend="924" name="DATE_RANGE_DELIMITER">
                <variable citdl="String" line="924" name="value" />
                <variable citdl="String" line="924" name="key" />
              </variable>
              <variable citdl="Object" line="925" lineend="925" name="MY_MONTH_POSITION">
                <variable citdl="Number" line="925" name="value" />
                <variable citdl="String" line="925" name="key" />
              </variable>
              <variable citdl="Object" line="926" lineend="926" name="MY_YEAR_POSITION">
                <variable citdl="Number" line="926" name="value" />
                <variable citdl="String" line="926" name="key" />
              </variable>
              <variable citdl="Object" line="927" lineend="927" name="MD_MONTH_POSITION">
                <variable citdl="Number" line="927" name="value" />
                <variable citdl="String" line="927" name="key" />
              </variable>
              <variable citdl="Object" line="928" lineend="928" name="MD_DAY_POSITION">
                <variable citdl="Number" line="928" name="value" />
                <variable citdl="String" line="928" name="key" />
              </variable>
              <variable citdl="Object" line="929" lineend="929" name="MDY_MONTH_POSITION">
                <variable citdl="Number" line="929" name="value" />
                <variable citdl="String" line="929" name="key" />
              </variable>
              <variable citdl="Object" line="930" lineend="930" name="MDY_DAY_POSITION">
                <variable citdl="Number" line="930" name="value" />
                <variable citdl="String" line="930" name="key" />
              </variable>
              <variable citdl="Object" line="931" lineend="931" name="MDY_YEAR_POSITION">
                <variable citdl="Number" line="931" name="value" />
                <variable citdl="String" line="931" name="key" />
              </variable>
            </variable>
            <variable attributes="private __static__ constant" citdl="Object" doc="PRIVATE STATIC CONSTANT: The set of Custom Event types supported by the Calendar" line="942" lineend="952" name="_EVENT_TYPES">
              <variable citdl="String" line="943" name="BEFORE_SELECT" />
              <variable citdl="String" line="944" name="SELECT" />
              <variable citdl="String" line="945" name="BEFORE_DESELECT" />
              <variable citdl="String" line="946" name="DESELECT" />
              <variable citdl="String" line="947" name="CHANGE_PAGE" />
              <variable citdl="String" line="948" name="BEFORE_RENDER" />
              <variable citdl="String" line="949" name="RENDER" />
              <variable citdl="String" line="950" name="RESET" />
              <variable citdl="String" line="951" name="CLEAR" />
            </variable>
            <variable attributes="private __static__ constant" citdl="Object" doc="PRIVATE STATIC CONSTANT: The set of default style constants for the Calendar" line="962" lineend="994" name="_STYLES">
              <variable citdl="String" line="963" name="CSS_ROW_HEADER" />
              <variable citdl="String" line="964" name="CSS_ROW_FOOTER" />
              <variable citdl="String" line="965" name="CSS_CELL" />
              <variable citdl="String" line="966" name="CSS_CELL_SELECTOR" />
              <variable citdl="String" line="967" name="CSS_CELL_SELECTED" />
              <variable citdl="String" line="968" name="CSS_CELL_SELECTABLE" />
              <variable citdl="String" line="969" name="CSS_CELL_RESTRICTED" />
              <variable citdl="String" line="970" name="CSS_CELL_TODAY" />
              <variable citdl="String" line="971" name="CSS_CELL_OOM" />
              <variable citdl="String" line="972" name="CSS_CELL_OOB" />
              <variable citdl="String" line="973" name="CSS_HEADER" />
              <variable citdl="String" line="974" name="CSS_HEADER_TEXT" />
              <variable citdl="String" line="975" name="CSS_BODY" />
              <variable citdl="String" line="976" name="CSS_WEEKDAY_CELL" />
              <variable citdl="String" line="977" name="CSS_WEEKDAY_ROW" />
              <variable citdl="String" line="978" name="CSS_FOOTER" />
              <variable citdl="String" line="979" name="CSS_CALENDAR" />
              <variable citdl="String" line="980" name="CSS_SINGLE" />
              <variable citdl="String" line="981" name="CSS_CONTAINER" />
              <variable citdl="String" line="982" name="CSS_NAV_LEFT" />
              <variable citdl="String" line="983" name="CSS_NAV_RIGHT" />
              <variable citdl="String" line="984" name="CSS_CLOSE" />
              <variable citdl="String" line="985" name="CSS_CELL_TOP" />
              <variable citdl="String" line="986" name="CSS_CELL_LEFT" />
              <variable citdl="String" line="987" name="CSS_CELL_RIGHT" />
              <variable citdl="String" line="988" name="CSS_CELL_BOTTOM" />
              <variable citdl="String" line="989" name="CSS_CELL_HOVER" />
              <variable citdl="String" line="990" name="CSS_CELL_HIGHLIGHT1" />
              <variable citdl="String" line="991" name="CSS_CELL_HIGHLIGHT2" />
              <variable citdl="String" line="992" name="CSS_CELL_HIGHLIGHT3" />
              <variable citdl="String" line="993" name="CSS_CELL_HIGHLIGHT4" />
            </variable>
            <variable attributes="deprecated private" citdl="Object" doc="DEPRECATED PRIVATE: The configuration object used to set up the calendars various locale and style options." line="1005" name="Config" />
            <variable citdl="CalendarGroup" doc="The parent CalendarGroup, only to be set explicitly by the parent group" line="1012" name="parent" />
            <variable citdl="Number" doc="The index of this item in the parent group" line="1019" name="index" />
            <variable citdl="Array" doc="The collection of calendar table cells" line="1026" name="cells" />
            <variable citdl="Array" doc="The collection of calendar cell dates that is parallel to the cells collection. The array contains dates field arrays in the format of [YYYY, M, D]." line="1033" name="cellDates" />
            <variable citdl="String" doc="The id that uniquely identifies this calendar. This id should match the id of the placeholder element on the page." line="1040" name="id" />
            <variable citdl="HTMLElement" doc="The DOM element reference that points to this calendar&apos;s container element. The calendar will be inserted into this element when the shell is rendered." line="1047" name="oDomContainer" />
            <variable citdl="Date" doc="A Date object representing today&apos;s date." line="1054" name="today" />
            <variable citdl="Array" doc="The list of render functions, along with required parameters, used to render cells." line="1061" name="renderStack" />
            <variable attributes="private" citdl="Array" doc="PRIVATE: A copy of the initial render functions created before rendering." line="1069" name="_renderStack" />
            <variable attributes="private" citdl="Array" doc="PRIVATE: The private list of initially selected dates." line="1077" name="_selectedDates" />
            <variable citdl="Object" doc="A map of DOM event handlers to attach to cells associated with specific CSS class names" line="1084" name="domEventMap" />
            <scope doc="Initializes the Calendar widget." ilk="function" line="1096" lineend="1142" name="init" signature="init(id, containerId, config)">
              <variable citdl="String" doc="The id of the table element that will represent the calendar widget" ilk="argument" name="id" />
              <variable citdl="String" doc="The id of the container div element that will wrap the calendar table" ilk="argument" name="containerId" />
              <variable citdl="Object" doc="The configuration object containing the Calendar&apos;s arguments" ilk="argument" name="config" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <variable citdl="YAHOO.util.Config" doc="The Config object used to hold the configuration variables for the Calendar" line="1109" name="cfg" />
            <variable citdl="Object" doc="The local object which contains the Calendar&apos;s options" line="1116" lineend="1116" name="Options" />
            <variable citdl="Object" doc="The local object which contains the Calendar&apos;s locale settings" line="1123" lineend="1123" name="Locale" />
            <scope doc="Renders the built-in IFRAME shim for the IE6 and below" ilk="function" line="1148" lineend="1174" name="configIframe" signature="configIframe(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1149" name="useIframe" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getStyle()" line="1154" name="pos" />
            </scope>
            <variable citdl="document.createElement()" line="1158" name="iframe" />
            <variable citdl="String" line="1159" name="src" />
            <scope doc="Default handler for the &quot;title&quot; property" ilk="function" line="1180" lineend="1203" name="configTitle" signature="configTitle(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1181" name="title" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="1182" name="close" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getElementsByClassName()[0]" line="1184" name="titleDiv" />
            </scope>
            <scope doc="Default handler for the &quot;close&quot; property" ilk="function" line="1209" lineend="1244" name="configClose" signature="configClose(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1210" name="close" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="1211" name="title" />
              <variable attributes="__local__ private" citdl="String" line="1213" name="DEPR_CLOSE_PATH" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getElementsByClassName()[0]" line="1215" name="linkClose" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1224" name="imgClose" />
            </scope>
            <scope doc="Initializes Calendar&apos;s built-in CustomEvents" ilk="function" line="1250" lineend="1318" name="initEvents" signature="initEvents()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._EVENT_TYPES" line="1252" name="defEvents" />
            </scope>
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired before a selection is made" line="1258" name="beforeSelectEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when a selection is made" line="1265" name="selectEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired before a selection is made" line="1271" name="beforeDeselectEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when a selection is made" line="1278" name="deselectEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when the Calendar page is changed" line="1284" name="changePageEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired before the Calendar is rendered" line="1290" name="beforeRenderEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when the Calendar is rendered" line="1296" name="renderEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when the Calendar is reset" line="1302" name="resetEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when the Calendar is cleared" line="1308" name="clearEvent" />
            <scope doc="The default event function that is attached to a date link within a calendar cell&#xA;when the calendar is rendered." ilk="function" line="1327" lineend="1384" name="doSelectCell" signature="doSelectCell(e, cal)">
              <variable citdl="DOMEvent" doc="The event" ilk="argument" name="e" />
              <variable citdl="Calendar" doc="A reference to the calendar passed by the Event utility" ilk="argument" name="cal" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="cell.id.split()[1]" line="1328" name="index" />
              <variable attributes="__local__ private" citdl="cal.cellDates[index]" line="1328" name="d" />
              <variable attributes="__local__ private" citdl="target" line="1328" name="cell" />
              <variable attributes="__local__ private" citdl="Date" line="1328" name="date" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="1330" name="target" />
              <variable attributes="__local__ private" citdl="target.tagName.toLowerCase()" line="1331" name="tagName" />
              <variable attributes="__local__ private" citdl="Boolean" line="1332" name="defSelector" />
              <variable attributes="__local__ private" citdl="cell.getElementsByTagName()[0]" line="1359" name="link" />
              <variable attributes="__local__ private" citdl="cal.cellDates[index]" line="1367" name="cellDate" />
              <variable attributes="__local__ private" citdl="cal._indexOfSelectedFieldArray()" line="1368" name="cellDateIndex" />
            </scope>
            <scope doc="The event that is executed when the user hovers over a cell" ilk="function" line="1392" lineend="1410" name="doCellMouseOver" signature="doCellMouseOver(e, cal)">
              <variable citdl="DOMEvent" doc="The event" ilk="argument" name="e" />
              <variable citdl="Calendar" doc="A reference to the calendar passed by the Event utility" ilk="argument" name="cal" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="1393" name="target" />
            </scope>
            <scope doc="The event that is executed when the user moves the mouse out of a cell" ilk="function" line="1418" lineend="1436" name="doCellMouseOut" signature="doCellMouseOut(e, cal)">
              <variable citdl="DOMEvent" doc="The event" ilk="argument" name="e" />
              <variable citdl="Calendar" doc="A reference to the calendar passed by the Event utility" ilk="argument" name="cal" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="1419" name="target" />
            </scope>
            <scope ilk="function" line="1438" lineend="1730" name="setupConfig" signature="setupConfig()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="1440" name="defCfg" />
              <scope attributes="__local__ private" doc="PRIVATE: Refreshes the locale values used to build the Calendar." ilk="function" line="1622" lineend="1625" name="refreshLocale" signature="refreshLocale()" />
            </scope>
            <scope doc="The default handler for the &quot;pagedate&quot; property" ilk="function" line="1736" lineend="1738" name="configPageDate" signature="configPageDate(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="The default handler for the &quot;mindate&quot; property" ilk="function" line="1744" lineend="1750" name="configMinDate" signature="configMinDate(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1745" name="val" />
            </scope>
            <scope doc="The default handler for the &quot;maxdate&quot; property" ilk="function" line="1756" lineend="1762" name="configMaxDate" signature="configMaxDate(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1757" name="val" />
            </scope>
            <scope doc="The default handler for the &quot;selected&quot; property" ilk="function" line="1768" lineend="1780" name="configSelected" signature="configSelected(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1769" name="selected" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.SELECTED.key" line="1770" name="cfgSelected" />
            </scope>
            <scope doc="The default handler for all configuration options properties" ilk="function" line="1786" lineend="1788" name="configOptions" signature="configOptions(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="The default handler for all configuration locale properties" ilk="function" line="1794" lineend="1800" name="configLocale" signature="configLocale(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="1795" name="defCfg" />
            </scope>
            <scope doc="The default handler for all configuration locale field length properties" ilk="function" line="1806" lineend="1848" name="configLocaleValues" signature="configLocaleValues(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="1807" name="defCfg" />
              <variable attributes="__local__ private" citdl="args[0]" line="1810" name="val" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="1839" name="START_WEEKDAY" />
            </scope>
            <variable citdl="this.cfg.getProperty().concat()" line="1816" name="LOCALE_MONTHS" />
            <variable citdl="this.cfg.getProperty().concat()" line="1826" name="LOCALE_WEEKDAYS" />
            <scope doc="Defines the style constants for the Calendar" ilk="function" line="1854" lineend="1984" name="initStyles" signature="initStyles()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._STYLES" line="1856" name="defStyle" />
            </scope>
            <variable citdl="Object" line="1858" lineend="1983" name="Style">
              <variable citdl="defStyle.CSS_ROW_HEADER" line="1862" name="CSS_ROW_HEADER" />
              <variable citdl="defStyle.CSS_ROW_FOOTER" line="1866" name="CSS_ROW_FOOTER" />
              <variable citdl="defStyle.CSS_CELL" line="1870" name="CSS_CELL" />
              <variable citdl="defStyle.CSS_CELL_SELECTOR" line="1874" name="CSS_CELL_SELECTOR" />
              <variable citdl="defStyle.CSS_CELL_SELECTED" line="1878" name="CSS_CELL_SELECTED" />
              <variable citdl="defStyle.CSS_CELL_SELECTABLE" line="1882" name="CSS_CELL_SELECTABLE" />
              <variable citdl="defStyle.CSS_CELL_RESTRICTED" line="1886" name="CSS_CELL_RESTRICTED" />
              <variable citdl="defStyle.CSS_CELL_TODAY" line="1890" name="CSS_CELL_TODAY" />
              <variable citdl="defStyle.CSS_CELL_OOM" line="1894" name="CSS_CELL_OOM" />
              <variable citdl="defStyle.CSS_CELL_OOB" line="1898" name="CSS_CELL_OOB" />
              <variable citdl="defStyle.CSS_HEADER" line="1902" name="CSS_HEADER" />
              <variable citdl="defStyle.CSS_HEADER_TEXT" line="1906" name="CSS_HEADER_TEXT" />
              <variable citdl="defStyle.CSS_BODY" line="1910" name="CSS_BODY" />
              <variable citdl="defStyle.CSS_WEEKDAY_CELL" line="1914" name="CSS_WEEKDAY_CELL" />
              <variable citdl="defStyle.CSS_WEEKDAY_ROW" line="1918" name="CSS_WEEKDAY_ROW" />
              <variable citdl="defStyle.CSS_FOOTER" line="1922" name="CSS_FOOTER" />
              <variable citdl="defStyle.CSS_CALENDAR" line="1926" name="CSS_CALENDAR" />
              <variable citdl="defStyle.CSS_SINGLE" line="1930" name="CSS_SINGLE" />
              <variable citdl="defStyle.CSS_CONTAINER" line="1934" name="CSS_CONTAINER" />
              <variable citdl="defStyle.CSS_NAV_LEFT" line="1938" name="CSS_NAV_LEFT" />
              <variable citdl="defStyle.CSS_NAV_RIGHT" line="1942" name="CSS_NAV_RIGHT" />
              <variable citdl="defStyle.CSS_CLOSE" line="1946" name="CSS_CLOSE" />
              <variable citdl="defStyle.CSS_CELL_TOP" line="1950" name="CSS_CELL_TOP" />
              <variable citdl="defStyle.CSS_CELL_LEFT" line="1954" name="CSS_CELL_LEFT" />
              <variable citdl="defStyle.CSS_CELL_RIGHT" line="1958" name="CSS_CELL_RIGHT" />
              <variable citdl="defStyle.CSS_CELL_BOTTOM" line="1962" name="CSS_CELL_BOTTOM" />
              <variable citdl="defStyle.CSS_CELL_HOVER" line="1966" name="CSS_CELL_HOVER" />
              <variable citdl="defStyle.CSS_CELL_HIGHLIGHT1" line="1970" name="CSS_CELL_HIGHLIGHT1" />
              <variable citdl="defStyle.CSS_CELL_HIGHLIGHT2" line="1974" name="CSS_CELL_HIGHLIGHT2" />
              <variable citdl="defStyle.CSS_CELL_HIGHLIGHT3" line="1978" name="CSS_CELL_HIGHLIGHT3" />
              <variable citdl="defStyle.CSS_CELL_HIGHLIGHT4" line="1982" name="CSS_CELL_HIGHLIGHT4" />
            </variable>
            <scope doc="Builds the date label that will be displayed in the calendar header or&#xA;footer, depending on configuration." ilk="function" line="1992" lineend="1995" name="buildMonthLabel" returns="String" signature="buildMonthLabel()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="1993" name="pageDate" />
            </scope>
            <scope doc="Builds the date digit that will be displayed in calendar cells" ilk="function" line="2003" lineend="2005" name="buildDayLabel" returns="String" signature="buildDayLabel(workingDate)">
              <variable citdl="Date" doc="The current working date" ilk="argument" name="workingDate" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders the calendar header." ilk="function" line="2013" lineend="2079" name="renderHeader" returns="Array" signature="renderHeader(html)">
              <variable citdl="Array" doc="The current working HTML array" ilk="argument" name="html" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="Number" line="2014" name="colSpan" />
              <variable attributes="__local__ private" citdl="String" line="2016" name="DEPR_NAV_LEFT" />
              <variable attributes="__local__ private" citdl="String" line="2017" name="DEPR_NAV_RIGHT" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="2018" name="defCfg" />
              <variable attributes="__local__ private" citdl="Boolean" line="2033" name="renderRight" />
              <variable attributes="__local__ private" citdl="Boolean" line="2033" name="renderLeft" />
              <variable attributes="__local__ private" citdl="this.parent" line="2047" name="cal" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2050" name="leftArrow" />
              <variable attributes="__local__ private" line="2055" name="leftStyle" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2062" name="rightArrow" />
              <variable attributes="__local__ private" line="2066" name="rightStyle" />
            </scope>
            <scope doc="Renders the Calendar&apos;s weekday headers." ilk="function" line="2087" lineend="2108" name="buildWeekdays" returns="Array" signature="buildWeekdays(html)">
              <variable citdl="Array" doc="The current working HTML array" ilk="argument" name="html" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="2089" name="defCfg" />
            </scope>
            <scope doc="Renders the calendar body." ilk="function" line="2117" lineend="2345" name="renderBody" returns="Array" signature="renderBody(workingDate, html)">
              <variable citdl="Date" doc="The current working Date being used for the render process" ilk="argument" name="workingDate" />
              <variable citdl="Array" doc="The current working HTML array" ilk="argument" name="html" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="2118" name="defCfg" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2120" name="startDay" />
              <variable attributes="__local__ private" citdl="weekPrefix" line="2135" name="weekClass" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.DateMath.getWeekNumber()" line="2135" name="weekNum" />
              <variable attributes="__local__ private" citdl="String" line="2136" name="weekPrefix" />
              <variable attributes="__local__ private" citdl="String" line="2137" name="cellPrefix" />
              <variable attributes="__local__ private" citdl="String" line="2138" name="workingDayPrefix" />
              <variable attributes="__local__ private" citdl="String" line="2139" name="dayPrefix" />
              <variable attributes="__local__ private" citdl="Array" line="2141" name="cellRenderers" />
              <variable attributes="__local__ private" citdl="rArray[2]" line="2142" name="renderer" />
              <variable attributes="__local__ private" citdl="this.today.getFullYear()" line="2144" name="todayYear" />
              <variable attributes="__local__ private" citdl="this.today.getMonth()" line="2145" name="todayMonth" />
              <variable attributes="__local__ private" citdl="this.today.getDate()" line="2146" name="todayDate" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2148" name="useDate" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2149" name="hideBlankWeeks" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2150" name="showWeekFooter" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2151" name="showWeekHeader" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2152" name="mindate" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2153" name="maxdate" />
              <variable attributes="__local__ private" citdl="Number" line="2164" name="i" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="2166" name="tempDiv" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="2167" name="cell" />
              <variable attributes="__local__ private" citdl="Date" line="2170" name="jan1" />
              <variable attributes="__local__ private" citdl="this.parent" line="2172" name="cal" />
              <variable attributes="__local__ private" citdl="Array" line="2203" name="workingArray" />
              <variable attributes="__local__ private" citdl="this.renderStack[s]" line="2215" name="rArray" />
              <variable attributes="__local__ private" citdl="rArray[0]" line="2216" name="type" />
              <variable attributes="__local__ private" citdl="rArray[1][1]" line="2218" name="month" />
              <variable attributes="__local__ private" citdl="rArray[1][2]" line="2219" name="day" />
              <variable attributes="__local__ private" citdl="rArray[1][0]" line="2220" name="year" />
              <variable attributes="__local__ private" citdl="rArray[1][0]" line="2243" name="date1" />
              <variable attributes="__local__ private" citdl="rArray[1][1]" line="2244" name="date2" />
              <variable attributes="__local__ private" citdl="date1[1]" line="2246" name="d1month" />
              <variable attributes="__local__ private" citdl="date1[2]" line="2247" name="d1day" />
              <variable attributes="__local__ private" citdl="date1[0]" line="2248" name="d1year" />
              <variable attributes="__local__ private" citdl="Date" line="2250" name="d1" />
              <variable attributes="__local__ private" citdl="date2[1]" line="2252" name="d2month" />
              <variable attributes="__local__ private" citdl="date2[2]" line="2253" name="d2day" />
              <variable attributes="__local__ private" citdl="date2[0]" line="2254" name="d2year" />
              <variable attributes="__local__ private" citdl="Date" line="2256" name="d2" />
              <variable attributes="__local__ private" citdl="rArray[1][0]" line="2268" name="weekday" />
              <variable attributes="__local__ private" citdl="this.postMonthDays" line="2320" name="postDays" />
              <variable attributes="__local__ private" citdl="Math.floor()" line="2322" name="blankWeeks" />
            </scope>
            <variable citdl="workingDate.getDay()" line="2122" name="preMonthDays" />
            <variable citdl="YAHOO.widget.DateMath.findMonthEnd().getDate()" line="2130" name="monthDays" />
            <variable citdl="YAHOO.widget.Calendar.DISPLAY_DAYS" line="2131" name="postMonthDays" />
            <scope doc="Renders the calendar footer. In the default implementation, there is&#xA;no footer." ilk="function" line="2354" lineend="2354" name="renderFooter" returns="Array" signature="renderFooter(html)">
              <variable citdl="Array" doc="The current working HTML array" ilk="argument" name="html" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders the calendar after it has been configured. The render() method has a specific call chain that will execute&#xA;when the method is called: renderHeader, renderBody, renderFooter.&#xA;Refer to the documentation for those methods for information on&#xA;individual render tasks." ilk="function" line="2363" lineend="2394" name="render" signature="render()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="2366" name="defCfg" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.DateMath.findMonthStart()" line="2369" name="workingDate" />
              <variable attributes="__local__ private" citdl="Array" line="2376" name="html" />
            </scope>
            <variable citdl="Number" line="2372" name="length" />
            <variable citdl="html.join()" line="2384" name="innerHTML" />
            <scope doc="Applies the Calendar&apos;s DOM listeners to applicable elements." ilk="function" line="2400" lineend="2447" name="applyListeners" signature="applyListeners()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="this.oDomContainer" line="2402" name="root" />
              <variable attributes="__local__ private" citdl="this.parent" line="2403" name="cal" />
              <variable attributes="__local__ private" citdl="String" line="2405" name="anchor" />
              <variable attributes="__local__ private" citdl="String" line="2406" name="mousedown" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getElementsByClassName()" line="2408" name="linkLeft" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getElementsByClassName()" line="2409" name="linkRight" />
              <variable attributes="__local__ private" citdl="elements[c]" line="2422" name="el" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getElementsByClassName()" line="2422" name="elements" />
              <variable attributes="__local__ private" citdl="this.domEventMap[cls]" line="2425" name="items" />
              <variable attributes="__local__ private" citdl="items[i]" line="2432" name="item" />
            </scope>
            <variable citdl="linkLeft[0]" line="2412" name="linkLeft" />
            <variable citdl="linkRight[0]" line="2417" name="linkRight" />
            <scope doc="Retrieves the Date object for the specified Calendar cell" ilk="function" line="2455" lineend="2458" name="getDateByCellId" returns="Date" signature="getDateByCellId(id)">
              <variable citdl="String" doc="The id of the cell" ilk="argument" name="id" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="this.getDateFieldsByCellId()" line="2456" name="date" />
            </scope>
            <scope doc="Retrieves the Date object for the specified Calendar cell" ilk="function" line="2466" lineend="2470" name="getDateFieldsByCellId" returns="Array" signature="getDateFieldsByCellId(id)">
              <variable citdl="String" doc="The id of the cell" ilk="argument" name="id" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders a cell that falls before the minimum date or after the maximum date.&#xA;widget class." ilk="function" line="2483" lineend="2487" name="renderOutOfBoundsDate" returns="String" signature="renderOutOfBoundsDate(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders the row header for a week." ilk="function" line="2495" lineend="2498" name="renderRowHeader" returns="html" signature="renderRowHeader(weekNum, html)">
              <variable citdl="Number" doc="The week number of the current row" ilk="argument" name="weekNum" />
              <variable ilk="argument" name="html" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders the row footer for a week." ilk="function" line="2506" lineend="2509" name="renderRowFooter" returns="html" signature="renderRowFooter(weekNum, html)">
              <variable citdl="Number" doc="The week number of the current row" ilk="argument" name="weekNum" />
              <variable ilk="argument" name="html" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders a single standard calendar cell in the calendar widget table.&#xA;All logic for determining how a standard default cell will be rendered is&#xA;encapsulated in this method, and must be accounted for when extending the&#xA;widget class." ilk="function" line="2520" lineend="2522" name="renderCellDefault" signature="renderCellDefault(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Styles a selectable cell." ilk="function" line="2530" lineend="2532" name="styleCellDefault" signature="styleCellDefault(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders a single standard calendar cell using the CSS hightlight1 style" ilk="function" line="2541" lineend="2543" name="renderCellStyleHighlight1" signature="renderCellStyleHighlight1(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders a single standard calendar cell using the CSS hightlight2 style" ilk="function" line="2551" lineend="2553" name="renderCellStyleHighlight2" signature="renderCellStyleHighlight2(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders a single standard calendar cell using the CSS hightlight3 style" ilk="function" line="2561" lineend="2563" name="renderCellStyleHighlight3" signature="renderCellStyleHighlight3(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders a single standard calendar cell using the CSS hightlight4 style" ilk="function" line="2571" lineend="2573" name="renderCellStyleHighlight4" signature="renderCellStyleHighlight4(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Applies the default style used for rendering today&apos;s date to the current calendar cell" ilk="function" line="2581" lineend="2583" name="renderCellStyleToday" signature="renderCellStyleToday(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Applies the default style used for rendering selected dates to the current calendar cell" ilk="function" line="2593" lineend="2595" name="renderCellStyleSelected" returns="String" signature="renderCellStyleSelected(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Applies the default style used for rendering dates that are not a part of the current&#xA;month (preceding or trailing the cells for the current month)" ilk="function" line="2606" lineend="2610" name="renderCellNotThisMonth" returns="String" signature="renderCellNotThisMonth(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders the current calendar cell as a non-selectable &quot;black-out&quot; date using the default&#xA;restricted style." ilk="function" line="2621" lineend="2626" name="renderBodyCellRestricted" returns="String" signature="renderBodyCellRestricted(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Adds the designated number of months to the current calendar month, and sets the current&#xA;calendar page date to the new month." ilk="function" line="2638" lineend="2643" name="addMonths" signature="addMonths(count)">
              <variable citdl="Number" doc="The number of months to add to the current calendar" ilk="argument" name="count" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.PAGEDATE.key" line="2639" name="cfgPageDate" />
            </scope>
            <scope doc="Subtracts the designated number of months from the current calendar month, and sets the current&#xA;calendar page date to the new month." ilk="function" line="2651" lineend="2656" name="subtractMonths" signature="subtractMonths(count)">
              <variable citdl="Number" doc="The number of months to subtract from the current calendar" ilk="argument" name="count" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.PAGEDATE.key" line="2652" name="cfgPageDate" />
            </scope>
            <scope doc="Adds the designated number of years to the current calendar, and sets the current&#xA;calendar page date to the new month." ilk="function" line="2664" lineend="2669" name="addYears" signature="addYears(count)">
              <variable citdl="Number" doc="The number of years to add to the current calendar" ilk="argument" name="count" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.PAGEDATE.key" line="2665" name="cfgPageDate" />
            </scope>
            <scope doc="Subtcats the designated number of years from the current calendar, and sets the current&#xA;calendar page date to the new month." ilk="function" line="2677" lineend="2682" name="subtractYears" signature="subtractYears(count)">
              <variable citdl="Number" doc="The number of years to subtract from the current calendar" ilk="argument" name="count" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.PAGEDATE.key" line="2678" name="cfgPageDate" />
            </scope>
            <scope doc="Navigates to the next month page in the calendar widget." ilk="function" line="2688" lineend="2690" name="nextMonth" signature="nextMonth()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Navigates to the previous month page in the calendar widget." ilk="function" line="2696" lineend="2698" name="previousMonth" signature="previousMonth()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Navigates to the next year in the currently selected month in the calendar widget." ilk="function" line="2704" lineend="2706" name="nextYear" signature="nextYear()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Navigates to the previous year in the currently selected month in the calendar widget." ilk="function" line="2712" lineend="2714" name="previousYear" signature="previousYear()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Resets the calendar widget to the originally selected month and year, and&#xA;sets the calendar to the initial selection(s)." ilk="function" line="2725" lineend="2730" name="reset" signature="reset()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="2726" name="defCfg" />
            </scope>
            <scope doc="Clears the selected dates in the current calendar widget and sets the calendar&#xA;to the current month and year." ilk="function" line="2737" lineend="2742" name="clear" signature="clear()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="2738" name="defCfg" />
            </scope>
            <scope doc="Selects a date or a collection of dates on the current calendar. This method, by default,&#xA;does not call the render method explicitly. Once selection has completed, render must be&#xA;called for the changes to be reflected visually." ilk="function" line="2755" lineend="2779" name="select" returns="Array" signature="select(date)">
              <variable citdl="Array" doc="The date string of dates to select in the current calendar. Valid formats are" ilk="argument" name="date" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.SELECTED.key" line="2758" name="cfgSelected" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2760" name="selected" />
              <variable attributes="__local__ private" citdl="this._toFieldArray()" line="2761" name="aToBeSelected" />
              <variable attributes="__local__ private" citdl="aToBeSelected[a]" line="2764" name="toSelect" />
            </scope>
            <scope doc="Selects a date on the current calendar by referencing the index of the cell that should be selected.&#xA;This method is used to easily select a single cell (usually with a mouse click) without having to do&#xA;a full render. The selected style is applied to the cell directly." ilk="function" line="2789" lineend="2819" name="selectCell" returns="Array" signature="selectCell(cellIndex)">
              <variable citdl="Number" doc="The index of the cell to select in the current calendar." ilk="argument" name="cellIndex" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.SELECTED.key" line="2792" name="cfgSelected" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2793" name="selected" />
              <variable attributes="__local__ private" citdl="this.cells[cellIndex]" line="2795" name="cell" />
              <variable attributes="__local__ private" citdl="this.cellDates[cellIndex]" line="2796" name="cellDate" />
              <variable attributes="__local__ private" citdl="this._toDate()" line="2798" name="dCellDate" />
              <variable attributes="__local__ private" citdl="cellDate.concat()" line="2800" name="selectDate" />
            </scope>
            <scope doc="Deselects a date or a collection of dates on the current calendar. This method, by default,&#xA;does not call the render method explicitly. Once deselection has completed, render must be&#xA;called for the changes to be reflected visually." ilk="function" line="2832" lineend="2858" name="deselect" returns="Array" signature="deselect(date)">
              <variable citdl="Array" doc="The date string of dates to deselect in the current calendar. Valid formats are" ilk="argument" name="date" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.SELECTED.key" line="2834" name="cfgSelected" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2836" name="selected" />
              <variable attributes="__local__ private" citdl="this._toFieldArray()" line="2838" name="aToBeSelected" />
              <variable attributes="__local__ private" citdl="aToBeSelected[a]" line="2841" name="toSelect" />
              <variable attributes="__local__ private" citdl="this._indexOfSelectedFieldArray()" line="2842" name="index" />
            </scope>
            <scope doc="Deselects a date on the current calendar by referencing the index of the cell that should be deselected.&#xA;This method is used to easily deselect a single cell (usually with a mouse click) without having to do&#xA;a full render. The selected style is removed from the cell directly." ilk="function" line="2868" lineend="2900" name="deselectCell" returns="Array" signature="deselectCell(i)">
              <variable ilk="argument" name="i" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="2871" name="defCfg" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2873" name="selected" />
              <variable attributes="__local__ private" citdl="this.cells[i]" line="2875" name="cell" />
              <variable attributes="__local__ private" citdl="this.cellDates[i]" line="2876" name="cellDate" />
              <variable attributes="__local__ private" citdl="this._indexOfSelectedFieldArray()" line="2877" name="cellDateIndex" />
              <variable attributes="__local__ private" citdl="this._toDate()" line="2879" name="dCellDate" />
              <variable attributes="__local__ private" citdl="cellDate.concat()" line="2881" name="selectDate" />
            </scope>
            <scope doc="Deselects all dates on the current calendar." ilk="function" line="2910" lineend="2930" name="deselectAll" returns="Array" signature="deselectAll()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.SELECTED.key" line="2913" name="cfgSelected" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2915" name="selected" />
              <variable attributes="__local__ private" citdl="selected.length" line="2916" name="count" />
              <variable attributes="__local__ private" citdl="selected.concat()" line="2917" name="sel" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Converts a date (either a JavaScript Date object, or a date string) to the internal data structure&#xA;used to represent dates: [[yyyy,mm,dd],[yyyy,mm,dd]]." ilk="function" line="2947" lineend="2962" name="_toFieldArray" returns="Array" signature="_toFieldArray(date)">
              <variable citdl="Array" doc="The date string of dates to deselect in the current calendar. Valid formats are" ilk="argument" name="date" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="2948" name="returnDate" />
              <variable attributes="__local__ private" citdl="date[i]" line="2956" name="d" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Converts a date field array [yyyy,mm,dd] to a JavaScript Date object." ilk="function" line="2971" lineend="2977" name="_toDate" returns="Date" signature="_toDate(dateFieldArray)">
              <variable citdl="Array" doc="The date field array to convert to a JavaScript Date." ilk="argument" name="dateFieldArray" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Converts a date field array [yyyy,mm,dd] to a JavaScript Date object." ilk="function" line="2991" lineend="2999" name="_fieldArraysAreEqual" returns="Boolean" signature="_fieldArraysAreEqual(array1, array2)">
              <variable citdl="Array" doc="The first date field array to compare" ilk="argument" name="array1" />
              <variable citdl="Array" doc="The first date field array to compare" ilk="argument" name="array2" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="2992" name="match" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Gets the index of a date field array [yyyy,mm,dd] in the current list of selected dates." ilk="function" line="3009" lineend="3022" name="_indexOfSelectedFieldArray" returns="Number" signature="_indexOfSelectedFieldArray(find)">
              <variable citdl="Array" doc="The date field array to search for" ilk="argument" name="find" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="Number" line="3010" name="selected" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="3011" name="seldates" />
              <variable attributes="__local__ private" citdl="seldates[s]" line="3014" name="sArray" />
            </scope>
            <scope doc="Determines whether a given date is OOM (out of month)." ilk="function" line="3030" lineend="3032" name="isDateOOM" returns="Boolean" signature="isDateOOM(date)">
              <variable citdl="Date" doc="The JavaScript Date object for which to check the OOM status" ilk="argument" name="date" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Parses a pagedate configuration property value. The value can either be specified as a string of form &quot;mm/yyyy&quot; or a Date object&#xA;and is parsed into a Date object normalized to the first day of the month. If no value is passed in, the month and year from today&apos;s date are used to create the Date object" ilk="function" line="3042" lineend="3062" name="_parsePageDate" returns="Date" signature="_parsePageDate(date)">
              <variable citdl="{Date" doc="Pagedate value which needs to be parsed" ilk="argument" name="date" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.DateMath.findMonthStart()" line="3043" name="parsedDate" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="3045" name="defCfg" />
              <variable attributes="__local__ private" citdl="date.split()" line="3051" name="aMonthYear" />
              <variable attributes="__local__ private" citdl="parseInt()" line="3051" name="month" />
              <variable attributes="__local__ private" citdl="parseInt()" line="3051" name="year" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event executed before a date is selected in the calendar widget." ilk="function" line="3072" lineend="3082" name="onBeforeSelect" signature="onBeforeSelect()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event executed when a date is selected in the calendar widget." ilk="function" line="3089" lineend="3089" name="onSelect" signature="onSelect(selected)">
              <variable citdl="Array" doc="An array of date field arrays representing which date or dates were selected. Example: [ [2006,8,6],[2006,8,7],[2006,8,8] ]" ilk="argument" name="selected" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event executed before a date is deselected in the calendar widget." ilk="function" line="3095" lineend="3095" name="onBeforeDeselect" signature="onBeforeDeselect()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event executed when a date is deselected in the calendar widget." ilk="function" line="3102" lineend="3102" name="onDeselect" signature="onDeselect(deselected)">
              <variable ilk="argument" name="deselected" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event executed when the user navigates to a different calendar page." ilk="function" line="3108" lineend="3110" name="onChangePage" signature="onChangePage()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event executed when the calendar widget is rendered." ilk="function" line="3116" lineend="3116" name="onRender" signature="onRender()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event executed when the calendar widget is reset to its original state." ilk="function" line="3122" lineend="3122" name="onReset" signature="onReset()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event executed when the calendar widget is completely cleared to the current month with no selections." ilk="function" line="3128" lineend="3128" name="onClear" signature="onClear()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope citdl="Boolean" doc="Validates the calendar widget. This method has no default implementation&#xA;and must be extended by subclassing the widget." ilk="function" line="3137" lineend="3137" name="validate" returns="Boolean" signature="validate()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="private" citdl="Array" doc="PRIVATE: Converts a date string to a date field array" ilk="function" line="3150" lineend="3167" name="_parseDate" returns="rArray" signature="_parseDate(sDate)">
              <variable citdl="String" doc="Date string. Valid formats are mm/dd and mm/dd/yyyy." ilk="argument" name="sDate" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="sDate.split()" line="3151" name="aDate" />
              <variable attributes="__local__ private" citdl="Array" line="3152" name="rArray" />
            </scope>
            <scope attributes="private" citdl="Array" doc="PRIVATE: Converts a multi or single-date string to an array of date field arrays" ilk="function" line="3176" lineend="3200" name="_parseDates" returns="aReturn" signature="_parseDates(sDates)">
              <variable citdl="String" doc="Date string with one or more comma-delimited dates. Valid formats are mm/dd, mm/dd/yyyy, mm/dd/yyyy-mm/dd/yyyy" ilk="argument" name="sDates" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="3177" name="aReturn" />
              <variable attributes="__local__ private" citdl="sDates.split()" line="3179" name="aDates" />
              <variable attributes="__local__ private" citdl="aDates[d]" line="3182" name="sDate" />
              <variable attributes="__local__ private" citdl="sDate.split()" line="3186" name="aRange" />
              <variable attributes="__local__ private" citdl="this._parseDate()" line="3188" name="dateStart" />
              <variable attributes="__local__ private" citdl="this._parseDate()" line="3189" name="dateEnd" />
              <variable attributes="__local__ private" citdl="this._parseRange()" line="3191" name="fullRange" />
              <variable attributes="__local__ private" citdl="this._parseDate()" line="3195" name="aDate" />
            </scope>
            <scope attributes="private" citdl="Array" doc="PRIVATE: Converts a date range to the full list of included dates" ilk="function" line="3210" lineend="3222" name="_parseRange" returns="results" signature="_parseRange(startDate, endDate)">
              <variable citdl="Array" doc="Date field array representing the first date in the range" ilk="argument" name="startDate" />
              <variable citdl="Array" doc="Date field array representing the last date in the range" ilk="argument" name="endDate" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="Date" line="3211" name="dStart" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.DateMath.add()" line="3212" name="dCurrent" />
              <variable attributes="__local__ private" citdl="Date" line="3213" name="dEnd" />
              <variable attributes="__local__ private" citdl="Array" line="3215" name="results" />
            </scope>
            <scope doc="Resets the render stack of the current calendar to its original pre-render value." ilk="function" line="3231" lineend="3233" name="resetRenderers" signature="resetRenderers()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Clears the inner HTML, CSS class and style information from the specified cell." ilk="function" line="3240" lineend="3243" name="clearElement" signature="clearElement(cell)">
              <variable ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Adds a renderer to the render stack. The function reference passed to this method will be executed&#xA;when a date cell matches the conditions specified in the date string for this renderer." ilk="function" line="3253" lineend="3268" name="addRenderer" signature="addRenderer(sDates, fnRender)">
              <variable citdl="String" doc="A date string to associate with the specified renderer. Valid formats" ilk="argument" name="sDates" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="this._parseDates()" line="3254" name="aDates" />
              <variable attributes="__local__ private" citdl="aDates[i]" line="3256" name="aDate" />
            </scope>
            <scope attributes="private" doc="PRIVATE: The private method used for adding cell renderers to the local render stack.&#xA;This method is called by other methods that set the renderer type prior to the method call." ilk="function" line="3282" lineend="3286" name="_addRenderer" signature="_addRenderer(type, aDates, fnRender)">
              <variable citdl="String" doc="The type string that indicates the type of date renderer being added." ilk="argument" name="type" />
              <variable citdl="Array" doc="An array of dates used to construct the renderer. The format varies based" ilk="argument" name="aDates" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="3283" name="add" />
            </scope>
            <scope doc="Adds a month to the render stack. The function reference passed to this method will be executed&#xA;when a date cell matches the month passed to this method." ilk="function" line="3295" lineend="3297" name="addMonthRenderer" signature="addMonthRenderer(month, fnRender)">
              <variable citdl="Number" doc="The month (1-12) to associate with this renderer" ilk="argument" name="month" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Adds a weekday to the render stack. The function reference passed to this method will be executed&#xA;when a date cell matches the weekday passed to this method." ilk="function" line="3306" lineend="3308" name="addWeekdayRenderer" signature="addWeekdayRenderer(weekday, fnRender)">
              <variable citdl="Number" doc="The weekday (0-6) to associate with this renderer" ilk="argument" name="weekday" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Removes all styles from all body cells in the current calendar table." ilk="function" line="3319" lineend="3323" name="clearAllBodyCellStyles" signature="clearAllBodyCellStyles(style)">
              <variable ilk="argument" name="style" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Sets the calendar&apos;s month explicitly" ilk="function" line="3333" lineend="3338" name="setMonth" signature="setMonth(month)">
              <variable citdl="Number" doc="The numeric month, from 0 (January) to 11 (December)" ilk="argument" name="month" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.PAGEDATE.key" line="3334" name="cfgPageDate" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="3335" name="current" />
            </scope>
            <scope doc="Sets the calendar&apos;s year explicitly." ilk="function" line="3345" lineend="3350" name="setYear" signature="setYear(year)">
              <variable citdl="Number" doc="The numeric 4-digit year" ilk="argument" name="year" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.PAGEDATE.key" line="3346" name="cfgPageDate" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="3347" name="current" />
            </scope>
            <scope doc="Gets the list of currently selected dates from the calendar." ilk="function" line="3357" lineend="3370" name="getSelectedDates" returns="Array" signature="getSelectedDates()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="3358" name="returnDates" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="3359" name="selected" />
              <variable attributes="__local__ private" citdl="selected[d]" line="3362" name="dateArray" />
              <variable attributes="__local__ private" citdl="Date" line="3364" name="date" />
            </scope>
            <scope doc="Hides the Calendar&apos;s outer container from view." ilk="function" line="3378" lineend="3380" name="hide" signature="hide()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <variable citdl="String" line="3379" name="display" />
            <scope doc="Shows the Calendar&apos;s outer container." ilk="function" line="3386" lineend="3388" name="show" signature="show()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <variable citdl="String" doc="Returns a string representing the current browser." line="3395" name="browser" />
            <scope doc="Returns a string representation of the object." ilk="function" line="3416" lineend="3418" name="toString" returns="String" signature="toString()">
              <variable citdl="Calendar" name="this" />
            </scope>
          </scope>
          <variable citdl="Tab" line="922" name="Tab" />
          <scope ilk="class" line="980" lineend="1033" name="SliderThumb">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A drag and drop implementation to be used as the thumb of a slider." ilk="function" line="980" lineend="1033" name="SliderThumb" signature="SliderThumb(id, sGroup, iLeft, iRight, iUp, iDown, iTickSize)">
              <variable citdl="String" doc="the id of the slider html element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop items" ilk="argument" name="sGroup" />
              <variable citdl="Number" doc="the number of pixels the element can move left" ilk="argument" name="iLeft" />
              <variable citdl="Number" doc="the number of pixels the element can move right" ilk="argument" name="iRight" />
              <variable citdl="Number" doc="the number of pixels the element can move up" ilk="argument" name="iUp" />
              <variable citdl="Number" doc="the number of pixels the element can move down" ilk="argument" name="iDown" />
              <variable citdl="Number" doc="optional parameter for specifying that the element&#xA;should move a certain number pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="SliderThumb" name="this" />
            </scope>
            <variable citdl="String" doc="The id of the thumbs parent HTML element (the slider background&#xA;element)." line="992" name="parentElId" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Overrides the isTarget property in YAHOO.util.DragDrop" line="1004" name="isTarget" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The tick size for this slider" line="1012" name="tickSize" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Informs the drag and drop util that the offsets should remain when&#xA;resetting the constraints.  This preserves the slider value when&#xA;the constraints are reset" line="1022" name="maintainOffset" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Turns off the autoscroll feature in drag and drop" line="1031" name="scroll" />
          </scope>
          <scope ilk="class" line="1331" lineend="1333" name="Overlay">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Overlay is a Module that is absolutely positioned above the page flow. It has convenience methods for positioning and sizing, as well as options for controlling zIndex and constraining the Overlay&apos;s position to the current visible viewport. Overlay also contains a dynamicly generated IFRAME which is placed beneath it for Internet Explorer 6 and 5.x so that it will be properly rendered above SELECT elements." ilk="function" line="1331" lineend="1333" name="Overlay" signature="Overlay(el, userConfig)">
              <variable citdl="HTMLElement" doc="The element representing the Overlay" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing 10/23/2006the configuration that should be set for this Overlay. See configuration documentation for more details." ilk="argument" name="userConfig" />
              <variable citdl="Overlay" name="this" />
            </scope>
            <variable attributes="private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Overlay&apos;s events" line="1344" lineend="1349" name="_EVENT_TYPES">
              <variable citdl="String" line="1346" name="BEFORE_MOVE" />
              <variable citdl="String" line="1347" name="MOVE" />
            </variable>
            <variable attributes="private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the Overlay&apos;s configuration properties" line="1358" lineend="1422" name="_DEFAULT_CONFIG">
              <variable citdl="Object" line="1360" lineend="1364" name="X">
                <variable citdl="String" line="1361" name="key" />
                <variable citdl="YAHOO.lang.isNumber" line="1362" name="validator" />
                <variable citdl="Boolean" line="1363" name="suppressEvent" />
                <variable citdl="Array" line="1363" name="supercedes" />
              </variable>
              <variable citdl="Object" line="1366" lineend="1370" name="Y">
                <variable citdl="String" line="1367" name="key" />
                <variable citdl="YAHOO.lang.isNumber" line="1368" name="validator" />
                <variable citdl="Boolean" line="1369" name="suppressEvent" />
                <variable citdl="Array" line="1369" name="supercedes" />
              </variable>
              <variable citdl="Object" line="1372" lineend="1376" name="XY">
                <variable citdl="String" line="1373" name="key" />
                <variable citdl="Boolean" line="1374" name="suppressEvent" />
                <variable citdl="Array" line="1375" name="supercedes" />
              </variable>
              <variable citdl="Object" line="1378" lineend="1382" name="CONTEXT">
                <variable citdl="String" line="1379" name="key" />
                <variable citdl="Boolean" line="1380" name="suppressEvent" />
                <variable citdl="Array" line="1381" name="supercedes" />
              </variable>
              <variable citdl="Object" line="1384" lineend="1389" name="FIXED_CENTER">
                <variable citdl="String" line="1385" name="key" />
                <variable citdl="Boolean" line="1386" name="value" />
                <variable citdl="YAHOO.lang.isBoolean" line="1387" name="validator" />
                <variable citdl="Array" line="1388" name="supercedes" />
              </variable>
              <variable citdl="Object" line="1391" lineend="1395" name="WIDTH">
                <variable citdl="String" line="1392" name="key" />
                <variable citdl="Boolean" line="1393" name="suppressEvent" />
                <variable citdl="Array" line="1394" name="supercedes" />
              </variable>
              <variable citdl="Object" line="1397" lineend="1401" name="HEIGHT">
                <variable citdl="String" line="1398" name="key" />
                <variable citdl="Boolean" line="1399" name="suppressEvent" />
                <variable citdl="Array" line="1400" name="supercedes" />
              </variable>
              <variable citdl="Object" line="1403" lineend="1406" name="ZINDEX">
                <variable citdl="String" line="1404" name="key" />
                <variable line="1405" name="value" />
              </variable>
              <variable citdl="Object" line="1408" lineend="1413" name="CONSTRAIN_TO_VIEWPORT">
                <variable citdl="String" line="1409" name="key" />
                <variable citdl="Boolean" line="1410" name="value" />
                <variable citdl="YAHOO.lang.isBoolean" line="1411" name="validator" />
                <variable citdl="Array" line="1412" name="supercedes" />
              </variable>
              <variable citdl="Object" line="1415" lineend="1420" name="IFRAME">
                <variable citdl="String" line="1416" name="key" />
                <variable line="1417" name="value" />
                <variable citdl="YAHOO.lang.isBoolean" line="1418" name="validator" />
                <variable citdl="Array" line="1419" name="supercedes" />
              </variable>
            </variable>
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: The URL that will be placed in the iframe" line="1431" name="IFRAME_SRC" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the top left corner of an element, used for configuring the context element alignment" line="1440" name="TOP_LEFT" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the top right corner of an element, used for configuring the context element alignment" line="1449" name="TOP_RIGHT" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the top bottom left corner of an element, used for configuring the context element alignment" line="1458" name="BOTTOM_LEFT" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the bottom right corner of an element, used for configuring the context element alignment" line="1467" name="BOTTOM_RIGHT" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the default CSS class used for an Overlay" line="1476" name="CSS_OVERLAY" />
            <scope doc="The Overlay initialization method, which is executed for Overlay and all of its subclasses. This method is automatically called by the constructor, and  sets up all DOM references for pre-existing markup, and creates required markup if it is not already present." ilk="function" line="1485" lineend="1507" name="init" signature="init(el, userConfig)">
              <variable citdl="HTMLElement" doc="The element representing the Overlay" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing the configuration that should be set for this Overlay. See configuration documentation for more details." ilk="argument" name="userConfig" />
              <variable citdl="Overlay" name="this" />
            </scope>
            <scope doc="Initializes the custom events for Overlay which are fired automatically at appropriate times by the Overlay class." ilk="function" line="1513" lineend="1533" name="initEvents" signature="initEvents()">
              <variable citdl="Overlay" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Overlay._EVENT_TYPES" line="1516" name="EVENT_TYPES" />
            </scope>
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired before the Overlay is moved." line="1524" name="beforeMoveEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired after the Overlay is moved." line="1532" name="moveEvent" />
            <scope doc="Initializes the class&apos;s configurable properties which can be changed using the Overlay&apos;s Config object (cfg)." ilk="function" line="1539" lineend="1701" name="initDefaultConfig" signature="initDefaultConfig()">
              <variable citdl="Overlay" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Overlay._DEFAULT_CONFIG" line="1545" name="DEFAULT_CONFIG" />
            </scope>
            <scope doc="Moves the Overlay to the specified position. This function is identical to calling this.cfg.setProperty(&quot;xy&quot;, [x,y]);" ilk="function" line="1709" lineend="1711" name="moveTo" signature="moveTo(x, y)">
              <variable citdl="Number" doc="The Overlay&apos;s new x position" ilk="argument" name="x" />
              <variable citdl="Number" doc="The Overlay&apos;s new y position" ilk="argument" name="y" />
              <variable citdl="Overlay" name="this" />
            </scope>
            <scope doc="Adds a special CSS class to the Overlay when Mac/Gecko is in use, to work around a Gecko bug where&#xA;scrollbars cannot be hidden. See https://bugzilla.mozilla.org/show_bug.cgi?id=187435" ilk="function" line="1718" lineend="1721" name="hideMacGeckoScrollbars" signature="hideMacGeckoScrollbars()">
              <variable citdl="Overlay" name="this" />
            </scope>
            <scope doc="Removes a special CSS class from the Overlay when Mac/Gecko is in use, to work around a Gecko bug where&#xA;scrollbars cannot be hidden. See https://bugzilla.mozilla.org/show_bug.cgi?id=187435" ilk="function" line="1728" lineend="1731" name="showMacGeckoScrollbars" signature="showMacGeckoScrollbars()">
              <variable citdl="Overlay" name="this" />
            </scope>
            <scope doc="The default event handler fired when the &quot;visible&quot; property is changed. This method is responsible for firing showEvent and hideEvent." ilk="function" line="1742" lineend="1828" name="configVisible" signature="configVisible(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Overlay" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1743" name="visible" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getStyle()" line="1744" name="currentVis" />
              <variable attributes="__local__ private" citdl="this.element.parentNode" line="1747" name="e" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="1758" name="effect" />
              <variable attributes="__local__ private" citdl="Array" line="1760" name="effectInstances" />
              <variable attributes="__local__ private" citdl="effect[i]" line="1764" name="eff" />
              <variable attributes="__local__ private" line="1772" name="isMacGecko" />
              <variable attributes="__local__ private" citdl="effectInstances[j]" line="1784" name="ei" />
              <variable attributes="__local__ private" citdl="effectInstances[k]" line="1810" name="h" />
            </scope>
            <scope doc="Center event handler used for centering on scroll/resize, but only if the Overlay is visible" ilk="function" line="1834" lineend="1838" name="doCenterOnDOMEvent" signature="doCenterOnDOMEvent()">
              <variable citdl="Overlay" name="this" />
            </scope>
            <scope doc="The default event handler fired when the &quot;fixedcenter&quot; property is changed." ilk="function" line="1847" lineend="1868" name="configFixedCenter" signature="configFixedCenter(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Overlay" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1848" name="val" />
            </scope>
            <scope doc="The default event handler fired when the &quot;height&quot; property is changed." ilk="function" line="1877" lineend="1882" name="configHeight" signature="configHeight(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Overlay" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1878" name="height" />
              <variable attributes="__local__ private" citdl="this.element" line="1879" name="el" />
            </scope>
            <scope doc="The default event handler fired when the &quot;width&quot; property is changed." ilk="function" line="1891" lineend="1896" name="configWidth" signature="configWidth(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Overlay" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1892" name="width" />
              <variable attributes="__local__ private" citdl="this.element" line="1893" name="el" />
            </scope>
            <scope doc="The default event handler fired when the &quot;zIndex&quot; property is changed." ilk="function" line="1905" lineend="1926" name="configzIndex" signature="configzIndex(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Overlay" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1906" name="zIndex" />
              <variable attributes="__local__ private" citdl="this.element" line="1908" name="el" />
            </scope>
            <scope doc="The default event handler fired when the &quot;xy&quot; property is changed." ilk="function" line="1935" lineend="1951" name="configXY" signature="configXY(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Overlay" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1936" name="pos" />
              <variable attributes="__local__ private" citdl="pos[0]" line="1937" name="x" />
              <variable attributes="__local__ private" citdl="pos[1]" line="1938" name="y" />
            </scope>
            <scope doc="The default event handler fired when the &quot;x&quot; property is changed." ilk="function" line="1960" lineend="1978" name="configX" signature="configX(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Overlay" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1961" name="x" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="1962" name="y" />
            </scope>
            <scope doc="The default event handler fired when the &quot;y&quot; property is changed." ilk="function" line="1987" lineend="2005" name="configY" signature="configY(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Overlay" name="this" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="1988" name="x" />
              <variable attributes="__local__ private" citdl="args[0]" line="1989" name="y" />
            </scope>
            <scope doc="Shows the iframe shim, if it has been enabled" ilk="function" line="2011" lineend="2015" name="showIframe" signature="showIframe()">
              <variable citdl="Overlay" name="this" />
            </scope>
            <variable citdl="String" line="2013" name="display" />
            <scope doc="Hides the iframe shim, if it has been enabled" ilk="function" line="2021" lineend="2025" name="hideIframe" signature="hideIframe()">
              <variable citdl="Overlay" name="this" />
            </scope>
            <scope doc="The default event handler fired when the &quot;iframe&quot; property is changed." ilk="function" line="2034" lineend="2108" name="configIframe" signature="configIframe(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Overlay" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="2036" name="val" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2047" name="x" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2048" name="y" />
              <variable attributes="__local__ private" citdl="this.element.parentNode" line="2064" name="parent" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getStyle()" line="2083" name="iframeDisplay" />
              <variable attributes="__local__ private" citdl="this.element.clientWidth" line="2091" name="width" />
              <variable attributes="__local__ private" citdl="this.element.clientHeight" line="2092" name="height" />
            </scope>
            <variable citdl="document.createElement()" line="2059" name="iframe" />
            <variable citdl="YAHOO.widget.Overlay.IFRAME_SRC" line="2061" name="src" />
            <scope doc="The default event handler fired when the &quot;constraintoviewport&quot; property is changed." ilk="function" line="2118" lineend="2127" name="configConstrainToViewport" signature="configConstrainToViewport(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Overlay" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="2119" name="val" />
            </scope>
            <scope doc="The default event handler fired when the &quot;context&quot; property is changed." ilk="function" line="2136" lineend="2154" name="configContext" signature="configContext(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Overlay" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="2137" name="contextArgs" />
              <variable attributes="__local__ private" citdl="contextArgs[0]" line="2140" name="contextEl" />
              <variable attributes="__local__ private" citdl="contextArgs[1]" line="2141" name="elementMagnetCorner" />
              <variable attributes="__local__ private" citdl="contextArgs[2]" line="2142" name="contextMagnetCorner" />
            </scope>
            <scope doc="Aligns the Overlay to its context element using the specified corner points (represented by the constants TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT, and BOTTOM_RIGHT." ilk="function" line="2165" lineend="2217" name="align" signature="align(elementAlign, contextAlign)">
              <variable citdl="String" doc="The String representing the corner of the Overlay that should be aligned to the context element" ilk="argument" name="elementAlign" />
              <variable citdl="String" doc="The corner of the context element that the elementAlign corner should stick to." ilk="argument" name="contextAlign" />
              <variable citdl="Overlay" name="this" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2166" name="contextArgs" />
              <variable attributes="__local__ private" citdl="contextArgs[0]" line="2168" name="context" />
              <variable attributes="__local__ private" citdl="this.element" line="2170" name="element" />
              <variable attributes="__local__ private" citdl="this" line="2171" name="me" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getRegion()" line="2182" name="contextRegion" />
              <scope attributes="__local__ private" ilk="function" line="2184" lineend="2199" name="doAlign" signature="doAlign(v, h)">
                <variable ilk="argument" name="v" />
                <variable ilk="argument" name="h" />
              </scope>
            </scope>
            <scope doc="The default event handler executed when the moveEvent is fired, if the &quot;constraintoviewport&quot; is set to true." ilk="function" line="2226" lineend="2261" name="enforceConstraints" signature="enforceConstraints(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Overlay" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="2227" name="pos" />
              <variable attributes="__local__ private" citdl="pos[0]" line="2229" name="x" />
              <variable attributes="__local__ private" citdl="pos[1]" line="2230" name="y" />
              <variable attributes="__local__ private" citdl="this.element.offsetHeight" line="2232" name="offsetHeight" />
              <variable attributes="__local__ private" citdl="this.element.offsetWidth" line="2233" name="offsetWidth" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getViewportWidth()" line="2235" name="viewPortWidth" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getViewportHeight()" line="2236" name="viewPortHeight" />
              <variable attributes="__local__ private" citdl="document.documentElement.scrollLeft" line="2238" name="scrollX" />
              <variable attributes="__local__ private" citdl="document.documentElement.scrollTop" line="2239" name="scrollY" />
              <variable attributes="__local__ private" citdl="scrollY" line="2241" name="topConstraint" />
              <variable attributes="__local__ private" citdl="scrollX" line="2242" name="leftConstraint" />
              <variable attributes="__local__ private" citdl="scrollY" line="2243" name="bottomConstraint" />
              <variable attributes="__local__ private" citdl="scrollX" line="2244" name="rightConstraint" />
            </scope>
            <scope doc="Centers the container in the viewport." ilk="function" line="2267" lineend="2283" name="center" signature="center()">
              <variable citdl="Overlay" name="this" />
              <variable attributes="__local__ private" citdl="document.documentElement.scrollLeft" line="2268" name="scrollX" />
              <variable attributes="__local__ private" citdl="document.documentElement.scrollTop" line="2269" name="scrollY" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getClientWidth()" line="2271" name="viewPortWidth" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getClientHeight()" line="2272" name="viewPortHeight" />
              <variable attributes="__local__ private" citdl="this.element.offsetWidth" line="2274" name="elementWidth" />
              <variable attributes="__local__ private" citdl="this.element.offsetHeight" line="2275" name="elementHeight" />
              <variable attributes="__local__ private" line="2277" name="x" />
              <variable attributes="__local__ private" line="2278" name="y" />
            </scope>
            <scope doc="Synchronizes the Panel&apos;s &quot;xy&quot;, &quot;x&quot;, and &quot;y&quot; properties with the Panel&apos;s position in the DOM. This is primarily used to update position information during drag &amp; drop." ilk="function" line="2289" lineend="2294" name="syncPosition" signature="syncPosition()">
              <variable citdl="Overlay" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getXY()" line="2290" name="pos" />
            </scope>
            <scope doc="Event handler fired when the resize monitor element is resized." ilk="function" line="2302" lineend="2310" name="onDomResize" signature="onDomResize(e, obj)">
              <variable citdl="DOMEvent" doc="The resize DOM event" ilk="argument" name="e" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
              <variable citdl="Overlay" name="this" />
              <variable attributes="__local__ private" citdl="this" line="2304" name="me" />
            </scope>
            <scope doc="Removes the Overlay element from the DOM and sets all child elements to null." ilk="function" line="2316" lineend="2327" name="destroy" signature="destroy()">
              <variable citdl="Overlay" name="this" />
            </scope>
            <scope doc="Returns a String representation of the object." ilk="function" line="2334" lineend="2336" name="toString" returns="String" signature="toString()">
              <variable citdl="Overlay" name="this" />
            </scope>
            <variable citdl="YAHOO.util.CustomEvent" doc="A singleton CustomEvent used for reacting to the DOM event for window scroll" line="2342" name="windowScrollEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="A singleton CustomEvent used for reacting to the DOM event for window resize" line="2348" name="windowResizeEvent" />
            <scope attributes="__static__" doc="STATIC: The DOM event handler used to fire the CustomEvent for window scroll" ilk="function" line="2356" lineend="2366" name="windowScrollHandler" signature="windowScrollHandler(e)">
              <variable citdl="DOMEvent" doc="The DOM scroll event" ilk="argument" name="e" />
              <variable citdl="Overlay" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: The DOM event handler used to fire the CustomEvent for window resize" ilk="function" line="2374" lineend="2384" name="windowResizeHandler" signature="windowResizeHandler(e)">
              <variable citdl="DOMEvent" doc="The DOM resize event" ilk="argument" name="e" />
              <variable citdl="Overlay" name="this" />
            </scope>
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: A boolean that indicated whether the window resize and scroll events have already been subscribed to." line="2392" name="_initialized" />
          </scope>
          <variable attributes="__static__" citdl="Object" doc="STATIC: The Logger widget provides a simple way to read or write log messages in&#xA;JavaScript code. Integration with the YUI Library&apos;s debug builds allow&#xA;implementers to access under-the-hood events, errors, and debugging messages.&#xA;Output may be read through a LogReader console and/or output to a browser&#xA;console." line="1408" lineend="1418" name="Logger">
            <variable citdl="Boolean" line="1410" name="loggerEnabled" />
            <variable citdl="Boolean" line="1411" name="_browserConsoleEnabled" />
            <variable citdl="Array" line="1412" name="categories" />
            <variable citdl="Array" line="1413" name="sources" />
            <variable citdl="Array" line="1414" name="_stack" />
            <variable citdl="Number" line="1415" name="maxStackEntries" />
            <variable citdl="Date" line="1416" name="_startTime" />
            <variable citdl="msecs" line="1417" name="_lastTime" />
            <scope attributes="private __static__" citdl="Date" doc="PRIVATE STATIC: True if Logger is enabled, false otherwise." ilk="function" line="1516" lineend="1571" name="log" returns="Boolean" signature="log(sMsg, sCategory, sSource)">
              <variable citdl="String" doc="The log message." ilk="argument" name="sMsg" />
              <variable citdl="String" doc="Category of log message, or null." ilk="argument" name="sCategory" />
              <variable citdl="String" doc="Source of LogWriter, or null if global." ilk="argument" name="sSource" />
              <variable citdl="Logger" name="this" />
              <variable attributes="__local__ private" citdl="String" line="1527" name="sClass" />
              <variable attributes="__local__ private" citdl="sSource.substring()" line="1528" name="sDetail" />
              <variable attributes="__local__ private" citdl="sSource.indexOf()" line="1530" name="spaceIndex" />
              <variable attributes="__local__ private" citdl="Date" line="1545" name="timestamp" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.LogMsg" line="1552" name="logEntry" />
              <variable attributes="__local__ private" citdl="this._stack" line="1554" name="stack" />
              <variable attributes="__local__ private" citdl="this.maxStackEntries" line="1555" name="maxStackEntries" />
            </scope>
            <scope doc="Resets internal stack and startTime, enables Logger, and fires logResetEvent." ilk="function" line="1578" lineend="1584" name="reset" signature="reset()">
              <variable citdl="Logger" name="this" />
            </scope>
            <scope doc="Public accessor to internal stack of log message objects." ilk="function" line="1592" lineend="1594" name="getStack" returns="Array" signature="getStack()">
              <variable citdl="Logger" name="this" />
            </scope>
            <scope doc="Public accessor to internal start time." ilk="function" line="1602" lineend="1604" name="getStartTime" returns="Date" signature="getStartTime()">
              <variable citdl="Logger" name="this" />
            </scope>
            <scope doc="Disables output to the browser&apos;s global console.log() function, which is used&#xA;by the Firebug extension to Firefox as well as Safari." ilk="function" line="1612" lineend="1615" name="disableBrowserConsole" signature="disableBrowserConsole()">
              <variable citdl="Logger" name="this" />
            </scope>
            <scope doc="Enables output to the browser&apos;s global console.log() function, which is used&#xA;by the Firebug extension to Firefox as well as Safari." ilk="function" line="1623" lineend="1626" name="enableBrowserConsole" signature="enableBrowserConsole()">
              <variable citdl="Logger" name="this" />
            </scope>
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when a new category has been created." line="1641" name="categoryCreateEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when a new source has been named." line="1650" name="sourceCreateEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when a new log message has been created." line="1658" name="newLogEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when the Logger has been reset has been created." line="1665" name="logResetEvent" />
            <scope attributes="private" doc="PRIVATE: Creates a new category of log messages and fires categoryCreateEvent." ilk="function" line="1680" lineend="1683" name="_createNewCategory" signature="_createNewCategory(sCategory)">
              <variable citdl="String" doc="Category name." ilk="argument" name="sCategory" />
              <variable citdl="Logger" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Checks to see if a category has already been created." ilk="function" line="1693" lineend="1700" name="_isNewCategory" returns="Boolean" signature="_isNewCategory(sCategory)">
              <variable citdl="String" doc="Category name." ilk="argument" name="sCategory" />
              <variable citdl="Logger" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Creates a new source of log messages and fires sourceCreateEvent." ilk="function" line="1709" lineend="1712" name="_createNewSource" signature="_createNewSource(sSource)">
              <variable citdl="String" doc="Source name." ilk="argument" name="sSource" />
              <variable citdl="Logger" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Checks to see if a source already exists." ilk="function" line="1722" lineend="1731" name="_isNewSource" returns="Boolean" signature="_isNewSource(sSource)">
              <variable citdl="String" doc="Source name." ilk="argument" name="sSource" />
              <variable citdl="Logger" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Outputs a log message to global console.log() function." ilk="function" line="1740" lineend="1766" name="_printToBrowserConsole" signature="_printToBrowserConsole(oEntry)">
              <variable citdl="Object" doc="Log entry object." ilk="argument" name="oEntry" />
              <variable citdl="Logger" name="this" />
              <variable attributes="__local__ private" citdl="oEntry.category" line="1742" name="category" />
              <variable attributes="__local__ private" citdl="oEntry.category.substring().toUpperCase()" line="1743" name="label" />
              <variable attributes="__local__ private" citdl="oEntry.time" line="1745" name="time" />
              <variable attributes="__local__ private" citdl="time.toLocaleTimeString()" line="1747" name="localTime" />
              <variable attributes="__local__ private" citdl="time.getTime()" line="1753" name="msecs" />
              <variable attributes="__local__ private" line="1755" name="elapsedTime" />
              <variable attributes="__local__ private" citdl="localTime" line="1759" name="output" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles logging of messages due to window error events." ilk="function" line="1783" lineend="1794" name="_onWindowError" returns="Boolean" signature="_onWindowError(sMsg, sUrl, sLine)">
              <variable citdl="String" doc="The error message." ilk="argument" name="sMsg" />
              <variable citdl="String" doc="URL of the error." ilk="argument" name="sUrl" />
              <variable citdl="String" doc="Line number of the error." ilk="argument" name="sLine" />
              <variable citdl="Logger" name="this" />
            </scope>
            <variable citdl="window.onerror" line="1805" name="_origOnWindowError" />
          </variable>
          <scope classrefs="YAHOO.widget.Node" ilk="class" line="1692" lineend="1699" name="TextNode">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The default node presentation.  The first parameter should be&#xA;either a string that will be used as the node&apos;s label, or an object&#xA;that has a string propery called label.  By default, the clicking the&#xA;label will toggle the expanded/collapsed state of the node.  By&#xA;changing the href property of the instance, this behavior can be&#xA;changed so that the label will go to the specified href." ilk="function" line="1692" lineend="1699" name="TextNode" signature="TextNode(oData, oParent, expanded)">
              <variable citdl="Object" doc="a string or object containing the data that will&#xA;be used to render this node" ilk="argument" name="oData" />
              <variable citdl="YAHOO.widget.Node" doc="this node&apos;s parent node" ilk="argument" name="oParent" />
              <variable citdl="Boolean" doc="the initial expanded/collapsed state" ilk="argument" name="expanded" />
              <variable citdl="TextNode" name="this" />
            </scope>
            <variable citdl="String" doc="The CSS class for the label href.  Defaults to ygtvlabel, but can be&#xA;overridden to provide a custom presentation for a specific node." line="1709" name="labelStyle" />
            <variable citdl="String" doc="The derived element id of the label for this node" line="1716" name="labelElId" />
            <variable citdl="String" doc="The text for the label.  It is assumed that the oData parameter will&#xA;either be a string that will be used as the label, or an object that&#xA;has a property called &quot;label&quot; that we will use." line="1725" name="label" />
            <scope ilk="function" line="1727" lineend="1743" name="textNodeParentChange" signature="textNodeParentChange()" />
            <scope doc="Sets up the node label" ilk="function" line="1750" lineend="1777" name="setUpLabel" signature="setUpLabel(oData)">
              <variable doc="string containing the label, or an object with a label property" ilk="argument" name="oData" />
            </scope>
            <variable citdl="oData.href" line="1764" name="href" />
            <variable citdl="oData.target" line="1769" name="target" />
            <scope doc="Returns the label element" ilk="function" line="1785" lineend="1787" name="getLabelEl" returns="Object" signature="getLabelEl()" />
            <scope ilk="function" line="1790" lineend="1859" name="getNodeHtml" returns="sb.join()" signature="getNodeHtml()">
              <variable attributes="__local__ private" citdl="Array" line="1791" name="sb" />
              <variable attributes="__local__ private" citdl="String" line="1802" name="getNode" />
            </scope>
            <scope doc="Executed when the label is clicked.  Fires the labelClick custom event." ilk="function" line="1869" lineend="1872" name="onLabelClick" returns="me.tree.fireEvent()" signature="onLabelClick(me)">
              <variable citdl="Node" doc="this node" ilk="argument" name="me" />
            </scope>
            <scope ilk="function" line="1874" lineend="1876" name="toString" returns="String" signature="toString()" />
          </scope>
          <scope classrefs="YAHOO.widget.Node" ilk="class" line="1888" lineend="1899" name="RootNode">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A custom YAHOO.widget.Node that handles the unique nature of&#xA;the virtual, presentationless root node." ilk="function" line="1888" lineend="1899" name="RootNode" signature="RootNode(oTree)">
              <variable citdl="YAHOO.widget.TreeView" doc="The tree instance this node belongs to" ilk="argument" name="oTree" />
              <variable citdl="RootNode" name="this" />
            </scope>
            <variable citdl="oTree" line="1898" name="tree" />
            <scope ilk="function" line="1904" lineend="1906" name="getNodeHtml" returns="String" signature="getNodeHtml()" />
            <scope ilk="function" line="1908" lineend="1910" name="toString" returns="String" signature="toString()" />
            <scope ilk="function" line="1912" lineend="1914" name="loadComplete" signature="loadComplete()" />
            <scope ilk="function" line="1916" lineend="1916" name="collapse" signature="collapse()" />
            <scope ilk="function" line="1917" lineend="1917" name="expand" signature="expand()" />
          </scope>
          <scope classrefs="YAHOO.widget.Node" ilk="class" line="1937" lineend="1942" name="HTMLNode">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This implementation takes either a string or object for the&#xA;oData argument.  If is it a string, we will use it for the display&#xA;of this node (and it can contain any html code).  If the parameter&#xA;is an object, we look for a parameter called &quot;html&quot; that will be&#xA;used for this node&apos;s display." ilk="function" line="1937" lineend="1942" name="HTMLNode" signature="HTMLNode(oData, oParent, expanded, hasIcon)">
              <variable citdl="Object" doc="a string or object containing the data that will&#xA;be used to render this node" ilk="argument" name="oData" />
              <variable citdl="YAHOO.widget.Node" doc="this node&apos;s parent node" ilk="argument" name="oParent" />
              <variable citdl="Boolean" doc="the initial expanded/collapsed state" ilk="argument" name="expanded" />
              <variable citdl="Boolean" doc="specifies whether or not leaf nodes should&#xA;have an icon" ilk="argument" name="hasIcon" />
              <variable citdl="HTMLNode" name="this" />
            </scope>
            <variable citdl="String" doc="The CSS class for the html content container.  Defaults to ygtvhtml, but&#xA;can be overridden to provide a custom presentation for a specific node." line="1952" name="contentStyle" />
            <variable citdl="String" doc="The generated id that will contain the data passed in by the implementer." line="1959" name="contentElId" />
            <variable citdl="String" doc="The HTML content to use for this node&apos;s display" line="1966" name="content" />
            <scope doc="Sets up the node label" ilk="function" line="1975" lineend="1984" name="initContent" signature="initContent(oData, hasIcon)">
              <variable ilk="argument" name="oData" />
              <variable citdl="Boolean" doc="determines if the node will be rendered with an&#xA;icon or not" ilk="argument" name="hasIcon" />
            </scope>
            <variable citdl="oData.html" line="1980" name="html" />
            <variable citdl="hasIcon" line="1982" name="hasIcon" />
            <scope doc="Returns the outer html element for this node&apos;s content" ilk="function" line="1991" lineend="1993" name="getContentEl" returns="HTMLElement" signature="getContentEl()" />
            <scope ilk="function" line="1996" lineend="2035" name="getNodeHtml" returns="sb.join()" signature="getNodeHtml()">
              <variable attributes="__local__ private" citdl="Array" line="1997" name="sb" />
            </scope>
            <scope ilk="function" line="2037" lineend="2039" name="toString" returns="String" signature="toString()" />
          </scope>
          <scope ilk="class" line="2017" lineend="2019" name="DataSource">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The DataSource classes manages sending a request and returning response from a live&#xA;database. Supported data include local JavaScript arrays and objects and databases&#xA;accessible via XHR connections. Supported response formats include JavaScript arrays,&#xA;JSON, XML, and flat-file textual data." ilk="function" line="2017" lineend="2019" name="DataSource" signature="DataSource()">
              <variable citdl="DataSource" name="this" />
            </scope>
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Error message for null data responses." line="2036" name="ERROR_DATANULL" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Error message for data responses with parsing errors." line="2046" name="ERROR_DATAPARSE" />
            <scope doc="Public accessor to the unique name of the DataSource instance." ilk="function" line="2119" lineend="2121" name="toString" returns="String" signature="toString()">
              <variable citdl="DataSource" name="this" />
            </scope>
            <scope doc="Retrieves query results, first checking the local cache, then making the&#xA;query request to the live data source as defined by the function doQuery." ilk="function" line="2132" lineend="2141" name="getResults" signature="getResults(oCallbackFn, sQuery, oParent)">
              <variable citdl="HTMLFunction" doc="Callback function defined by oParent object to which to return results." ilk="argument" name="oCallbackFn" />
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="The object instance that has requested data." ilk="argument" name="oParent" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this._doQueryCache()" line="2135" name="aResults" />
            </scope>
            <scope doc="Abstract method implemented by subclasses to make a query to the live data&#xA;source. Must call the callback function with the response returned from the&#xA;query. Populates cache (if enabled)." ilk="function" line="2153" lineend="2155" name="doQuery" signature="doQuery(oCallbackFn, sQuery, oParent)">
              <variable citdl="HTMLFunction" doc="Callback function implemented by oParent to which to return results." ilk="argument" name="oCallbackFn" />
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="The object instance that has requested data." ilk="argument" name="oParent" />
              <variable citdl="DataSource" name="this" />
            </scope>
            <scope doc="Flushes cache." ilk="function" line="2162" lineend="2170" name="flushCache" signature="flushCache()">
              <variable citdl="DataSource" name="this" />
            </scope>
            <variable citdl="Array" line="2164" name="_aCache" />
            <variable citdl="Array" line="2167" name="_aCacheHelper" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Internal class variable to index multiple DataSource instances." line="2253" name="_nIndex" />
            <scope attributes="private" doc="PRIVATE: Initializes DataSource instance." ilk="function" line="2286" lineend="2306" name="_init" signature="_init()">
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this.maxCacheEntries" line="2288" name="maxCacheEntries" />
            </scope>
            <variable citdl="String" line="2297" name="_sName" />
            <variable citdl="YAHOO.util.CustomEvent" line="2300" name="queryEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="2301" name="cacheQueryEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="2302" name="getResultsEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="2303" name="getCachedResultsEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="2304" name="dataErrorEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="2305" name="cacheFlushEvent" />
            <scope attributes="private" doc="PRIVATE: Adds a result object to the local cache, evicting the oldest element if the&#xA;cache is full. Newer items will have higher indexes, the oldest item will have&#xA;index of 0." ilk="function" line="2317" lineend="2331" name="_addCacheElem" signature="_addCacheElem(oResult)">
              <variable citdl="Object" doc="Data result object, including array of results." ilk="argument" name="oResult" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this._aCache" line="2318" name="aCache" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Queries the local cache for results. If query has been cached, the callback&#xA;function is called with the results, and the cached is refreshed so that it&#xA;is now the newest element." ilk="function" line="2345" lineend="2434" name="_doQueryCache" returns="Array" signature="_doQueryCache(oCallbackFn, sQuery, oParent)">
              <variable citdl="HTMLFunction" doc="Callback function defined by oParent object to which to return results." ilk="argument" name="oCallbackFn" />
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="The object instance that has requested data." ilk="argument" name="oParent" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="2346" name="aResults" />
              <variable attributes="__local__ private" citdl="Boolean" line="2347" name="bMatchFound" />
              <variable attributes="__local__ private" citdl="this._aCache" line="2348" name="aCache" />
              <variable attributes="__local__ private" line="2349" name="nCacheLength" />
              <variable attributes="__local__ private" citdl="this.queryMatchContains" line="2350" name="bMatchContains" />
              <variable attributes="__local__ private" citdl="sQuery" line="2357" name="sOrigQuery" />
              <variable attributes="__local__ private" citdl="aCache[i]" line="2363" lineend="2414" name="resultObj" />
              <variable attributes="__local__ private" citdl="resultObj.results" line="2364" name="aAllResultItems" />
              <variable attributes="__local__ private" line="2366" name="matchKey" />
              <variable attributes="__local__ private" citdl="sQuery.substr()" line="2390" name="subQuery" />
              <variable attributes="__local__ private" citdl="aAllResultItems[k]" line="2398" name="aRecord" />
              <variable attributes="__local__ private" line="2399" name="sKeyIndex" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.widget.TextNode" ilk="class" line="2054" lineend="2066" name="MenuNode">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A menu-specific implementation that differs from TextNode in that only&#xA;one sibling can be expanded at a time." ilk="function" line="2054" lineend="2066" name="MenuNode" signature="MenuNode(oData, oParent, expanded)">
              <variable citdl="Object" doc="a string or object containing the data that will&#xA;be used to render this node" ilk="argument" name="oData" />
              <variable citdl="YAHOO.widget.Node" doc="this node&apos;s parent node" ilk="argument" name="oParent" />
              <variable citdl="Boolean" doc="the initial expanded/collapsed state" ilk="argument" name="expanded" />
              <variable citdl="MenuNode" name="this" />
            </scope>
            <variable citdl="Boolean" line="2063" name="multiExpand" />
            <scope ilk="function" line="2070" lineend="2072" name="toString" returns="String" signature="toString()" />
          </scope>
          <scope ilk="class" line="2080" lineend="2110" name="TVAnim">
            <variable citdl="Object" line="2080" lineend="2125" name="TVAnim">
              <variable attributes="__static__" citdl="String" doc="STATIC: Constant for the fade in animation" line="2088" name="FADE_IN" />
              <variable attributes="__static__" citdl="String" doc="STATIC: Constant for the fade out animation" line="2096" name="FADE_OUT" />
              <scope attributes="__static__" doc="STATIC: Returns a ygAnim instance of the given type" ilk="function" line="2107" lineend="2113" name="getAnim" returns="YAHOO.util.Animation" signature="getAnim(type, el, callback)">
                <variable citdl="String" doc="the type of animation" ilk="argument" name="type" />
                <variable citdl="HTMLElement" doc="the element to element (probably the children div)" ilk="argument" name="el" />
                <variable citdl="Function" doc="function to invoke when the animation is done." ilk="argument" name="callback" />
                <variable citdl="TVAnim" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns true if the specified animation class is available" ilk="function" line="2122" lineend="2124" name="isValid" returns="Boolean" signature="isValid(type)">
                <variable citdl="String" doc="the type of animation" ilk="argument" name="type" />
                <variable citdl="TVAnim" name="this" />
              </scope>
            </variable>
          </scope>
          <scope classrefs="Object" ilk="class" line="2135" lineend="2187" name="TVFadeIn">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A 1/2 second fade-in animation." ilk="function" line="2135" lineend="2150" name="TVFadeIn" signature="TVFadeIn(el, callback)">
              <variable citdl="HTMLElement" doc="the element to animate" ilk="argument" name="el" />
              <variable citdl="Function" doc="function to invoke when the animation is finished" ilk="argument" name="callback" />
              <variable citdl="TVFadeIn" name="this" />
            </scope>
            <variable citdl="HTMLElement" doc="The element to animate" line="2141" name="el" />
            <variable citdl="Function" doc="the callback to invoke when the animation is complete" line="2148" name="callback" />
            <scope doc="Performs the animation" ilk="function" line="2157" lineend="2169" name="animate" signature="animate()">
              <variable citdl="TVFadeIn" name="this" />
              <variable attributes="__local__ private" citdl="this" line="2158" name="tvanim" />
              <variable attributes="__local__ private" citdl="this.el.style" line="2160" name="s" />
              <variable attributes="__local__ private" citdl="Number" line="2165" name="dur" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Anim" line="2166" name="a" />
            </scope>
            <scope doc="Clean up and invoke callback" ilk="function" line="2175" lineend="2177" name="onComplete" signature="onComplete()">
              <variable citdl="TVFadeIn" name="this" />
            </scope>
            <scope doc="toString" ilk="function" line="2184" lineend="2186" name="toString" returns="String" signature="toString()">
              <variable citdl="TVFadeIn" name="this" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="2196" lineend="2246" name="TVFadeOut">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A 1/2 second fade out animation." ilk="function" line="2196" lineend="2211" name="TVFadeOut" signature="TVFadeOut(el, callback)">
              <variable citdl="HTMLElement" doc="the element to animate" ilk="argument" name="el" />
              <variable citdl="Function" doc="function to invoke when the animation is finished" ilk="argument" name="callback" />
              <variable citdl="TVFadeOut" name="this" />
            </scope>
            <variable citdl="HTMLElement" doc="The element to animate" line="2202" name="el" />
            <variable citdl="Function" doc="the callback to invoke when the animation is complete" line="2209" name="callback" />
            <scope doc="Performs the animation" ilk="function" line="2218" lineend="2224" name="animate" signature="animate()">
              <variable citdl="TVFadeOut" name="this" />
              <variable attributes="__local__ private" citdl="this" line="2219" name="tvanim" />
              <variable attributes="__local__ private" citdl="Number" line="2220" name="dur" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Anim" line="2221" name="a" />
            </scope>
            <scope doc="Clean up and invoke callback" ilk="function" line="2230" lineend="2236" name="onComplete" signature="onComplete()">
              <variable citdl="TVFadeOut" name="this" />
              <variable attributes="__local__ private" citdl="this.el.style" line="2231" name="s" />
            </scope>
            <scope doc="toString" ilk="function" line="2243" lineend="2245" name="toString" returns="String" signature="toString()">
              <variable citdl="TVFadeOut" name="this" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="2408" lineend="2788" name="OverlayManager">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: OverlayManager is used for maintaining the focus status of multiple Overlays.* @namespace YAHOO.widget" ilk="function" line="2408" lineend="2410" name="OverlayManager" signature="OverlayManager(userConfig)">
              <variable citdl="Object" doc="The object literal representing the user configuration of the OverlayManager" ilk="argument" name="userConfig" />
              <variable citdl="OverlayManager" name="this" />
            </scope>
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: The CSS class representing a focused Overlay" line="2419" name="CSS_FOCUSED" />
            <variable citdl="Function" doc="The class&apos;s constructor function" line="2427" name="constructor" />
            <variable citdl="Array" doc="The array of Overlays that are currently registered" line="2434" name="overlays" />
            <scope doc="Initializes the default configuration of the OverlayManager" ilk="function" line="2440" lineend="2456" name="initDefaultConfig" signature="initDefaultConfig()">
              <variable citdl="OverlayManager" name="this" />
            </scope>
            <scope doc="Initializes the OverlayManager" ilk="function" line="2464" lineend="2603" name="init" signature="init(userConfig)">
              <variable citdl="Object" doc="The object literal representing the user configuration of the OverlayManager" ilk="argument" name="userConfig" />
              <variable citdl="OverlayManager" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Overlay" doc="PRIVATE: The currently activated Overlay" line="2485" name="activeOverlay" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2593" name="overlays" />
            </scope>
            <variable citdl="YAHOO.util.Config" doc="The OverlayManager&apos;s Config object used for monitoring configuration properties." line="2470" name="cfg" />
            <scope doc="Returns the currently focused Overlay" ilk="function" line="2492" lineend="2494" name="getActive" returns="YAHOO.widget.Overlay" signature="getActive()">
              <variable citdl="OverlayManager" name="this" />
            </scope>
            <scope doc="Focuses the specified Overlay" ilk="function" line="2502" lineend="2538" name="focus" signature="focus(overlay)">
              <variable citdl="String" doc="The id of the Overlay to focus" ilk="argument" name="overlay" />
              <variable citdl="OverlayManager" name="this" />
              <variable attributes="__local__ private" citdl="this.find()" line="2504" name="o" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getStyle()" line="2522" name="topZIndex" />
            </scope>
            <scope doc="Removes the specified Overlay from the manager" ilk="function" line="2546" lineend="2575" name="remove" signature="remove(overlay)">
              <variable citdl="String" doc="The id of the Overlay to remove" ilk="argument" name="overlay" />
              <variable citdl="OverlayManager" name="this" />
              <variable attributes="__local__ private" citdl="this.find()" line="2547" name="o" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getStyle()" line="2549" name="originalZ" />
            </scope>
            <scope doc="Removes focus from all registered Overlays in the manager" ilk="function" line="2581" lineend="2585" name="blurAll" signature="blurAll()">
              <variable citdl="OverlayManager" name="this" />
            </scope>
            <scope ilk="function" line="2588" lineend="2590" name="_onOverlayBlur" signature="_onOverlayBlur(p_sType, p_aArgs)">
              <variable ilk="argument" name="p_sType" />
              <variable ilk="argument" name="p_aArgs" />
              <variable citdl="OverlayManager" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Event handler for the DOM event that is used to focus&#xA;the Overlay instance as specified by the &quot;focusevent&quot;&#xA;configuration property." ilk="function" line="2615" lineend="2638" name="_onOverlayElementFocus" signature="_onOverlayElementFocus(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object passed&#xA;back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
              <variable citdl="OverlayManager" name="this" />
              <variable attributes="__local__ private" citdl="this.close" line="2618" name="oClose" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="2618" name="oTarget" />
            </scope>
            <scope attributes="private" doc="PRIVATE: &quot;destroy&quot; event handler for the Overlay." ilk="function" line="2651" lineend="2655" name="_onOverlayDestroy" signature="_onOverlayDestroy(p_sType, p_aArgs, p_oOverlay)">
              <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.Overlay" doc="Object representing the menu that&#xA;fired the event." ilk="argument" name="p_oOverlay" />
              <variable citdl="OverlayManager" name="this" />
            </scope>
            <scope doc="Registers an Overlay or an array of Overlays with the manager. Upon registration, the Overlay receives functions for focus and blur, along with CustomEvents for each." ilk="function" line="2664" lineend="2714" name="register" returns="Boolean" signature="register(overlay)">
              <variable citdl="Array" doc="An array of Overlays to register with the manager." ilk="argument" name="overlay" />
              <variable citdl="OverlayManager" name="this" />
              <variable attributes="__local__ private" citdl="this" line="2671" name="mgr" />
              <variable citdl="Object" line="2673" name="overlay">
                <scope ilk="function" line="2673" lineend="2675" name="focus" signature="focus()">
                  <variable citdl="overlay" name="this" />
                </scope>
                <scope ilk="function" line="2677" lineend="2682" name="blur" signature="blur()">
                  <variable citdl="overlay" name="this" />
                </scope>
              </variable>
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getStyle()" line="2692" name="zIndex" />
              <variable attributes="__local__ private" citdl="Number" line="2702" name="regcount" />
            </scope>
            <scope doc="Attempts to locate an Overlay by instance or ID." ilk="function" line="2723" lineend="2738" name="find" returns="YAHOO.widget.Overlay" signature="find(overlay)">
              <variable citdl="String" doc="An Overlay id to locate within the manager" ilk="argument" name="overlay" />
              <variable citdl="OverlayManager" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Used for sorting the manager&apos;s Overlays by z-index." ilk="function" line="2746" lineend="2757" name="compareZIndexDesc" returns="Number" signature="compareZIndexDesc(o1, o2)">
              <variable ilk="argument" name="o1" />
              <variable ilk="argument" name="o2" />
              <variable citdl="OverlayManager" name="this" />
              <variable attributes="__local__ private" citdl="o1.cfg.getProperty()" line="2747" name="zIndex1" />
              <variable attributes="__local__ private" citdl="o2.cfg.getProperty()" line="2748" name="zIndex2" />
            </scope>
            <scope doc="Shows all Overlays in the manager." ilk="function" line="2763" lineend="2767" name="showAll" signature="showAll()">
              <variable citdl="OverlayManager" name="this" />
            </scope>
            <scope doc="Hides all Overlays in the manager." ilk="function" line="2773" lineend="2777" name="hideAll" signature="hideAll()">
              <variable citdl="OverlayManager" name="this" />
            </scope>
            <scope doc="Returns a string representation of the object." ilk="function" line="2784" lineend="2786" name="toString" returns="String" signature="toString()">
              <variable citdl="OverlayManager" name="this" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.widget.DataSource" ilk="class" line="2454" lineend="2471" name="DS_XHR">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Implementation of YAHOO.widget.DataSource using XML HTTP requests that return&#xA;query results." ilk="function" line="2454" lineend="2471" name="DS_XHR" signature="DS_XHR(sScriptURI, aSchema, oConfigs)">
              <variable citdl="String" doc="Absolute or relative URI to script that returns query&#xA;results as JSON, XML, or delimited flat-file data." ilk="argument" name="sScriptURI" />
              <variable citdl="Array" doc="Data schema definition of results." ilk="argument" name="aSchema" />
              <variable citdl="Object" doc="(optional) Object literal of config params." ilk="argument" name="oConfigs" />
              <variable citdl="DS_XHR" name="this" />
            </scope>
            <variable citdl="aSchema" line="2467" name="schema" />
            <variable citdl="sScriptURI" line="2468" name="scriptURI" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: JSON data type." line="2489" name="TYPE_JSON" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: XML data type." line="2499" name="TYPE_XML" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Flat-file data type." line="2509" name="TYPE_FLAT" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Error message for XHR failure." line="2519" name="ERROR_DATAXHR" />
            <scope doc="Queries the live data source defined by scriptURI for results. Results are&#xA;passed back to a callback function." ilk="function" line="2615" lineend="2684" name="doQuery" signature="doQuery(oCallbackFn, sQuery, oParent)">
              <variable citdl="HTMLFunction" doc="Callback function defined by oParent object to which to return results." ilk="argument" name="oCallbackFn" />
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="The object instance that has requested data." ilk="argument" name="oParent" />
              <variable citdl="DS_XHR" name="this" />
              <variable attributes="__local__ private" line="2616" name="isXML" />
              <variable attributes="__local__ private" citdl="this.scriptURI" line="2617" name="sUri" />
              <variable attributes="__local__ private" line="2621" name="oResponse" />
              <variable attributes="__local__ private" citdl="this" line="2623" name="oSelf" />
              <scope attributes="__local__ private" ilk="function" line="2630" lineend="2663" name="responseSuccess" signature="responseSuccess(oResp)">
                <variable ilk="argument" name="oResp" />
                <variable attributes="__local__ private" citdl="oSelf.parseResponse()" line="2650" name="aResults" />
                <variable attributes="__local__ private" citdl="Object" line="2651" lineend="2651" name="resultObj">
                  <variable citdl="decodeURIComponent()" line="2652" name="query" />
                  <variable citdl="aResults" line="2653" name="results" />
                </variable>
              </scope>
              <scope attributes="__local__ private" ilk="function" line="2665" lineend="2668" name="responseFailure" signature="responseFailure(oResp)">
                <variable ilk="argument" name="oResp" />
              </scope>
              <variable attributes="__local__ private" citdl="Object" line="2670" lineend="2673" name="oCallback">
                <variable citdl="responseSuccess" line="2671" name="success" />
                <variable citdl="responseFailure" line="2672" name="failure" />
                <variable citdl="this.connTimeout" line="2676" name="timeout" />
              </variable>
            </scope>
            <scope doc="Parses raw response data into an array of result objects. The result data key&#xA;is always stashed in the [0] element of each result object." ilk="function" line="2696" lineend="2858" name="parseResponse" returns="Array" signature="parseResponse(sQuery, oResponse, oParent)">
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="The raw response data to parse." ilk="argument" name="oResponse" />
              <variable citdl="Object" doc="The object instance that has requested data." ilk="argument" name="oParent" />
              <variable citdl="DS_XHR" name="this" />
              <variable attributes="__local__ private" citdl="this.schema" line="2697" name="aSchema" />
              <variable attributes="__local__ private" citdl="Array" line="2698" name="aResults" />
              <variable attributes="__local__ private" citdl="Boolean" line="2699" name="bError" />
              <variable attributes="__local__ private" line="2702" name="nEnd" />
              <variable attributes="__local__ private" citdl="eval()" line="2710" name="jsonList" />
              <variable attributes="__local__ private" citdl="JSON.parse()" line="2714" name="jsonObjParsed" />
              <variable attributes="__local__ private" citdl="eval()" line="2751" name="jsonObjRaw" />
              <variable attributes="__local__ private" citdl="Array" line="2778" name="aResultItem" />
              <variable attributes="__local__ private" citdl="jsonList[i]" line="2779" name="jsonResult" />
              <variable attributes="__local__ private" citdl="jsonResult[aSchema[j]]" line="2783" name="dataFieldValue" />
              <variable attributes="__local__ private" citdl="oResponse.getElementsByTagName()" line="2799" name="xmlList" />
              <variable attributes="__local__ private" citdl="xmlList.item()" line="2806" name="result" />
              <variable attributes="__local__ private" citdl="Array" line="2807" name="aFieldSet" />
              <variable attributes="__local__ private" citdl="xmlAttr.value" line="2810" name="sValue" />
              <variable attributes="__local__ private" citdl="result.attributes.getNamedItem()" line="2812" name="xmlAttr" />
              <variable attributes="__local__ private" citdl="result.getElementsByTagName()" line="2818" name="xmlNode" />
              <variable attributes="__local__ private" citdl="oResponse.length" line="2836" name="newLength" />
              <variable attributes="__local__ private" citdl="oResponse.split()" line="2840" name="aRecords" />
            </scope>
          </scope>
          <scope ilk="class" line="2799" lineend="2801" name="Tooltip">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Tooltip is an implementation of Overlay that behaves like an OS tooltip, displaying when the user mouses over a particular element, and disappearing on mouse out." ilk="function" line="2799" lineend="2801" name="Tooltip" signature="Tooltip(el, userConfig)">
              <variable citdl="HTMLElement" doc="The element representing the Tooltip" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing the configuration that should be set for this Overlay. See configuration documentation for more details." ilk="argument" name="userConfig" />
              <variable citdl="Tooltip" name="this" />
            </scope>
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the Tooltip CSS class" line="2812" name="CSS_TOOLTIP" />
            <variable attributes="private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the Tooltip&apos;s configuration properties" line="2821" lineend="2857" name="_DEFAULT_CONFIG">
              <variable citdl="Object" line="2823" lineend="2828" name="PREVENT_OVERLAP">
                <variable citdl="String" line="2824" name="key" />
                <variable citdl="Boolean" line="2825" name="value" />
                <variable citdl="YAHOO.lang.isBoolean" line="2826" name="validator" />
                <variable citdl="Array" line="2827" name="supercedes" />
              </variable>
              <variable citdl="Object" line="2830" lineend="2834" name="SHOW_DELAY">
                <variable citdl="String" line="2831" name="key" />
                <variable citdl="Number" line="2832" name="value" />
                <variable citdl="YAHOO.lang.isNumber" line="2833" name="validator" />
              </variable>
              <variable citdl="Object" line="2836" lineend="2840" name="AUTO_DISMISS_DELAY">
                <variable citdl="String" line="2837" name="key" />
                <variable citdl="Number" line="2838" name="value" />
                <variable citdl="YAHOO.lang.isNumber" line="2839" name="validator" />
              </variable>
              <variable citdl="Object" line="2842" lineend="2846" name="HIDE_DELAY">
                <variable citdl="String" line="2843" name="key" />
                <variable citdl="Number" line="2844" name="value" />
                <variable citdl="YAHOO.lang.isNumber" line="2845" name="validator" />
              </variable>
              <variable citdl="Object" line="2848" lineend="2851" name="TEXT">
                <variable citdl="String" line="2849" name="key" />
                <variable citdl="Boolean" line="2850" name="suppressEvent" />
              </variable>
              <variable citdl="Object" line="2853" lineend="2855" name="CONTAINER">
                <variable citdl="String" line="2854" name="key" />
              </variable>
            </variable>
            <scope doc="The Tooltip initialization method. This method is automatically called by the constructor. A Tooltip is automatically rendered by the init method, and it also is set to be invisible by default, and constrained to viewport by default as well." ilk="function" line="2866" lineend="2892" name="init" signature="init(el, userConfig)">
              <variable citdl="HTMLElement" doc="The element representing the Tooltip" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing the configuration that should be set for this Tooltip. See configuration documentation for more details." ilk="argument" name="userConfig" />
              <variable citdl="Tooltip" name="this" />
              <scope attributes="__local__ private" ilk="function" line="2869" lineend="2871" name="deferredInit" signature="deferredInit()" />
            </scope>
            <scope doc="Initializes the class&apos;s configurable properties which can be changed using the Overlay&apos;s Config object (cfg)." ilk="function" line="2898" lineend="2998" name="initDefaultConfig" signature="initDefaultConfig()">
              <variable citdl="Tooltip" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Tooltip._DEFAULT_CONFIG" line="2901" name="DEFAULT_CONFIG" />
            </scope>
            <scope doc="The default event handler fired when the &quot;text&quot; property is changed." ilk="function" line="3009" lineend="3014" name="configText" signature="configText(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Tooltip" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="3010" name="text" />
            </scope>
            <scope doc="The default event handler fired when the &quot;container&quot; property is changed." ilk="function" line="3023" lineend="3028" name="configContainer" signature="configContainer(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Tooltip" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="3024" name="container" />
            </scope>
            <scope doc="Removes all of the DOM event handlers from the HTML element(s)&#xA;that trigger the display of the tooltip." ilk="function" line="3036" lineend="3064" name="_removeEventListeners" signature="_removeEventListeners()">
              <variable citdl="Tooltip" name="this" />
              <variable attributes="__local__ private" citdl="this._context" line="3038" name="aElements" />
              <variable attributes="__local__ private" citdl="aElements.length" line="3042" name="nElements" />
              <variable attributes="__local__ private" citdl="nElements" line="3047" name="i" />
              <variable attributes="__local__ private" citdl="aElements[i]" line="3047" name="oElement" />
            </scope>
            <scope doc="The default event handler fired when the &quot;context&quot; property is changed." ilk="function" line="3073" lineend="3121" name="configContext" signature="configContext(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Tooltip" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="3074" name="context" />
              <variable attributes="__local__ private" citdl="this._context" line="3094" name="aElements" />
              <variable attributes="__local__ private" citdl="aElements.length" line="3098" name="nElements" />
              <variable attributes="__local__ private" citdl="nElements" line="3103" name="i" />
              <variable attributes="__local__ private" citdl="aElements[i]" line="3103" name="oElement" />
            </scope>
            <variable citdl="context" line="3092" name="_context" />
            <scope doc="The default event handler fired when the user moves the mouse while over the context element." ilk="function" line="3133" lineend="3137" name="onContextMouseMove" signature="onContextMouseMove(e, obj)">
              <variable citdl="DOMEvent" doc="The current DOM event" ilk="argument" name="e" />
              <variable citdl="Object" doc="The object argument" ilk="argument" name="obj" />
              <variable citdl="Tooltip" name="this" />
            </scope>
            <scope doc="The default event handler fired when the user mouses over the context element." ilk="function" line="3145" lineend="3165" name="onContextMouseOver" signature="onContextMouseOver(e, obj)">
              <variable citdl="DOMEvent" doc="The current DOM event" ilk="argument" name="e" />
              <variable citdl="Object" doc="The object argument" ilk="argument" name="obj" />
              <variable citdl="Tooltip" name="this" />
              <variable attributes="__local__ private" citdl="this" line="3152" name="context" />
            </scope>
            <scope doc="The default event handler fired when the user mouses out of the context element." ilk="function" line="3173" lineend="3195" name="onContextMouseOut" signature="onContextMouseOut(e, obj)">
              <variable citdl="DOMEvent" doc="The current DOM event" ilk="argument" name="e" />
              <variable citdl="Object" doc="The object argument" ilk="argument" name="obj" />
              <variable citdl="Tooltip" name="this" />
              <variable attributes="__local__ private" citdl="this" line="3174" name="el" />
            </scope>
            <scope doc="Processes the showing of the Tooltip by setting the timeout delay and offset of the Tooltip." ilk="function" line="3205" lineend="3232" name="doShow" returns="Number" signature="doShow(e, context)">
              <variable citdl="DOMEvent" doc="The current DOM event" ilk="argument" name="e" />
              <variable ilk="argument" name="context" />
              <variable citdl="Tooltip" name="this" />
              <variable attributes="__local__ private" citdl="Number" line="3207" name="yOffset" />
              <variable attributes="__local__ private" citdl="this" line="3212" name="me" />
            </scope>
            <scope doc="Sets the timeout for the auto-dismiss delay, which by default is 5 seconds, meaning that a tooltip will automatically dismiss itself after 5 seconds of being displayed." ilk="function" line="3238" lineend="3245" name="doHide" returns="setTimeout()" signature="doHide()">
              <variable citdl="Tooltip" name="this" />
              <variable attributes="__local__ private" citdl="this" line="3239" name="me" />
            </scope>
            <scope doc="Fired when the Tooltip is moved, this event handler is used to prevent the Tooltip from overlapping with its context element." ilk="function" line="3253" lineend="3270" name="preventOverlap" signature="preventOverlap(pageX, pageY)">
              <variable citdl="Number" doc="The x coordinate position of the mouse pointer" ilk="argument" name="pageX" />
              <variable citdl="Number" doc="The y coordinate position of the mouse pointer" ilk="argument" name="pageY" />
              <variable citdl="Tooltip" name="this" />
              <variable attributes="__local__ private" citdl="this.element.offsetHeight" line="3255" name="height" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getRegion()" line="3257" name="elementRegion" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Point" line="3264" name="mousePoint" />
            </scope>
            <scope doc="Removes the Tooltip element from the DOM and sets all child elements to null." ilk="function" line="3276" lineend="3283" name="destroy" signature="destroy()">
              <variable citdl="Tooltip" name="this" />
            </scope>
            <scope doc="Returns a string representation of the object." ilk="function" line="3290" lineend="3292" name="toString" returns="String" signature="toString()">
              <variable citdl="Tooltip" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="2800" lineend="2835" name="ContainerEffect">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: ContainerEffect encapsulates animation transitions that are executed when an Overlay is shown or hidden." ilk="function" line="2800" lineend="2835" name="ContainerEffect" signature="ContainerEffect(overlay, attrIn, attrOut, targetElement, animClass)">
              <variable citdl="YAHOO.widget.Overlay" doc="The Overlay that the animation should be associated with" ilk="argument" name="overlay" />
              <variable citdl="Object" doc="The object literal representing the animation arguments to be used for the animate-in transition. The arguments for this literal are: attributes(object, see YAHOO.util.Anim for description), duration(Number), and method(i.e. YAHOO.util.Easing.easeIn)." ilk="argument" name="attrIn" />
              <variable citdl="Object" doc="The object literal representing the animation arguments to be used for the animate-out transition. The arguments for this literal are: attributes(object, see YAHOO.util.Anim for description), duration(Number), and method(i.e. YAHOO.util.Easing.easeIn)." ilk="argument" name="attrOut" />
              <variable citdl="HTMLElement" doc="Optional. The target element that should be animated during the transition. Defaults to overlay.element." ilk="argument" name="targetElement" />
              <variable ilk="argument" name="animClass" />
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <variable citdl="YAHOO.widget.Overlay" doc="The overlay to animate" line="2810" name="overlay" />
            <variable citdl="Object" doc="The animation attributes to use when transitioning into view" line="2816" name="attrIn" />
            <variable citdl="Object" doc="The animation attributes to use when transitioning out of view" line="2822" name="attrOut" />
            <variable citdl="HTMLElement" doc="The target element to be animated" line="2828" name="targetElement" />
            <variable citdl="class" doc="The animation class to use for animating the overlay" line="2834" name="animClass" />
            <scope doc="Initializes the animation classes and events." ilk="function" line="2841" lineend="2857" name="init" signature="init()">
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <variable citdl="YAHOO.util.CustomEvent" line="2842" name="beforeAnimateInEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="2843" name="beforeAnimateOutEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="2845" name="animateInCompleteEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="2846" name="animateOutCompleteEvent" />
            <variable line="2848" name="animIn" />
            <variable line="2853" name="animOut" />
            <scope doc="Triggers the in-animation." ilk="function" line="2863" lineend="2866" name="animateIn" signature="animateIn()">
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <scope doc="Triggers the out-animation." ilk="function" line="2872" lineend="2875" name="animateOut" signature="animateOut()">
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <scope doc="The default onStart handler for the in-animation." ilk="function" line="2884" lineend="2884" name="handleStartAnimateIn" signature="handleStartAnimateIn(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments" ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <scope doc="The default onTween handler for the in-animation." ilk="function" line="2892" lineend="2892" name="handleTweenAnimateIn" signature="handleTweenAnimateIn(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments" ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <scope doc="The default onComplete handler for the in-animation." ilk="function" line="2900" lineend="2900" name="handleCompleteAnimateIn" signature="handleCompleteAnimateIn(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments" ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <scope doc="The default onStart handler for the out-animation." ilk="function" line="2909" lineend="2909" name="handleStartAnimateOut" signature="handleStartAnimateOut(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments" ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <scope doc="The default onTween handler for the out-animation." ilk="function" line="2917" lineend="2917" name="handleTweenAnimateOut" signature="handleTweenAnimateOut(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments" ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <scope doc="The default onComplete handler for the out-animation." ilk="function" line="2925" lineend="2925" name="handleCompleteAnimateOut" signature="handleCompleteAnimateOut(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments" ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <scope doc="Returns a string representation of the object." ilk="function" line="2932" lineend="2938" name="toString" returns="String" signature="toString()">
              <variable citdl="ContainerEffect" name="this" />
              <variable attributes="__local__ private" citdl="String" line="2933" name="output" />
            </scope>
            <scope attributes="__static__" doc="STATIC: A pre-configured ContainerEffect instance that can be used for fading an overlay in and out." ilk="function" line="2948" lineend="3005" name="FADE" returns="ContainerEffect" signature="FADE(overlay, dur)">
              <variable citdl="Overlay" doc="The Overlay object to animate" ilk="argument" name="overlay" />
              <variable citdl="Number" doc="The duration of the animation" ilk="argument" name="dur" />
              <variable citdl="ContainerEffect" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.ContainerEffect" line="2949" name="fade">
                <scope ilk="function" line="2951" lineend="2965" name="handleStartAnimateIn" signature="handleStartAnimateIn(type, args, obj)">
                  <variable ilk="argument" name="type" />
                  <variable ilk="argument" name="args" />
                  <variable ilk="argument" name="obj" />
                  <variable citdl="fade" name="this" />
                </scope>
                <scope ilk="function" line="2967" lineend="2980" name="handleCompleteAnimateIn" signature="handleCompleteAnimateIn(type, args, obj)">
                  <variable ilk="argument" name="type" />
                  <variable ilk="argument" name="args" />
                  <variable ilk="argument" name="obj" />
                  <variable citdl="fade" name="this" />
                </scope>
                <scope ilk="function" line="2982" lineend="2988" name="handleStartAnimateOut" signature="handleStartAnimateOut(type, args, obj)">
                  <variable ilk="argument" name="type" />
                  <variable ilk="argument" name="args" />
                  <variable ilk="argument" name="obj" />
                  <variable citdl="fade" name="this" />
                </scope>
                <scope ilk="function" line="2990" lineend="3001" name="handleCompleteAnimateOut" signature="handleCompleteAnimateOut(type, args, obj)">
                  <variable ilk="argument" name="type" />
                  <variable ilk="argument" name="args" />
                  <variable ilk="argument" name="obj" />
                  <variable citdl="fade" name="this" />
                </scope>
              </variable>
            </scope>
            <scope attributes="__static__" doc="STATIC: A pre-configured ContainerEffect instance that can be used for sliding an overlay in and out." ilk="function" line="3016" lineend="3096" name="SLIDE" returns="ContainerEffect" signature="SLIDE(overlay, dur)">
              <variable citdl="Overlay" doc="The Overlay object to animate" ilk="argument" name="overlay" />
              <variable citdl="Number" doc="The duration of the animation" ilk="argument" name="dur" />
              <variable citdl="ContainerEffect" name="this" />
              <variable attributes="__local__ private" citdl="overlay.cfg.getProperty()" line="3017" name="x" />
              <variable attributes="__local__ private" citdl="overlay.cfg.getProperty()" line="3018" name="y" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getClientWidth()" line="3020" name="clientWidth" />
              <variable attributes="__local__ private" citdl="overlay.element.offsetWidth" line="3021" name="offsetWidth" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.ContainerEffect" line="3034" name="slide">
                <scope ilk="function" line="3037" lineend="3040" name="handleStartAnimateIn" signature="handleStartAnimateIn(type, args, obj)">
                  <variable ilk="argument" name="type" />
                  <variable ilk="argument" name="args" />
                  <variable ilk="argument" name="obj" />
                  <variable citdl="slide" name="this" />
                </scope>
                <scope ilk="function" line="3042" lineend="3056" name="handleTweenAnimateIn" signature="handleTweenAnimateIn(type, args, obj)">
                  <variable ilk="argument" name="type" />
                  <variable ilk="argument" name="args" />
                  <variable ilk="argument" name="obj" />
                  <variable citdl="slide" name="this" />
                  <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getXY()" line="3045" name="pos" />
                  <variable attributes="__local__ private" citdl="pos[0]" line="3047" name="currentX" />
                  <variable attributes="__local__ private" citdl="pos[1]" line="3048" name="currentY" />
                </scope>
                <scope ilk="function" line="3058" lineend="3064" name="handleCompleteAnimateIn" signature="handleCompleteAnimateIn(type, args, obj)">
                  <variable ilk="argument" name="type" />
                  <variable ilk="argument" name="args" />
                  <variable ilk="argument" name="obj" />
                  <variable citdl="slide" name="this" />
                </scope>
                <scope ilk="function" line="3066" lineend="3075" name="handleStartAnimateOut" signature="handleStartAnimateOut(type, args, obj)">
                  <variable ilk="argument" name="type" />
                  <variable ilk="argument" name="args" />
                  <variable ilk="argument" name="obj" />
                  <variable citdl="slide" name="this" />
                  <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getViewportWidth()" line="3067" name="vw" />
                  <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getXY()" line="3069" name="pos" />
                  <variable attributes="__local__ private" citdl="pos[1]" line="3071" name="yso" />
                  <variable attributes="__local__ private" citdl="obj.animOut.attributes.points.to" line="3073" name="currentTo" />
                </scope>
                <scope ilk="function" line="3077" lineend="3085" name="handleTweenAnimateOut" signature="handleTweenAnimateOut(type, args, obj)">
                  <variable ilk="argument" name="type" />
                  <variable ilk="argument" name="args" />
                  <variable ilk="argument" name="obj" />
                  <variable citdl="slide" name="this" />
                  <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getXY()" line="3078" name="pos" />
                  <variable attributes="__local__ private" citdl="pos[0]" line="3080" name="xto" />
                  <variable attributes="__local__ private" citdl="pos[1]" line="3081" name="yto" />
                </scope>
                <scope ilk="function" line="3087" lineend="3092" name="handleCompleteAnimateOut" signature="handleCompleteAnimateOut(type, args, obj)">
                  <variable ilk="argument" name="type" />
                  <variable ilk="argument" name="args" />
                  <variable ilk="argument" name="obj" />
                  <variable citdl="slide" name="this" />
                </scope>
              </variable>
            </scope>
          </scope>
          <scope classrefs="YAHOO.widget.DataSource" ilk="class" line="2890" lineend="2906" name="DS_JSFunction">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Implementation of YAHOO.widget.DataSource using a native Javascript function as&#xA;its live data source." ilk="function" line="2890" lineend="2906" name="DS_JSFunction" signature="DS_JSFunction(oFunction, oConfigs)">
              <variable citdl="HTMLFunction" doc="In-memory Javascript function that returns query results as an array of objects." ilk="argument" name="oFunction" />
              <variable citdl="Object" doc="(optional) Object literal of config params." ilk="argument" name="oConfigs" />
              <variable citdl="DS_JSFunction" name="this" />
            </scope>
            <variable citdl="oFunction" line="2903" name="dataFunction" />
            <scope doc="Queries the live data source defined by function for results. Results are&#xA;passed back to a callback function." ilk="function" line="2939" lineend="2957" name="doQuery" signature="doQuery(oCallbackFn, sQuery, oParent)">
              <variable citdl="HTMLFunction" doc="Callback function defined by oParent object to which to return results." ilk="argument" name="oCallbackFn" />
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="The object instance that has requested data." ilk="argument" name="oParent" />
              <variable citdl="DS_JSFunction" name="this" />
              <variable attributes="__local__ private" citdl="this.dataFunction" line="2940" name="oFunction" />
              <variable attributes="__local__ private" citdl="Array" line="2941" name="aResults" />
              <variable attributes="__local__ private" citdl="Object" line="2949" lineend="2949" name="resultObj">
                <variable citdl="decodeURIComponent()" line="2950" name="query" />
                <variable citdl="aResults" line="2951" name="results" />
              </variable>
            </scope>
          </scope>
          <scope classrefs="YAHOO.widget.DataSource" ilk="class" line="2973" lineend="2989" name="DS_JSArray">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Implementation of YAHOO.widget.DataSource using a native Javascript array as&#xA;its live data source." ilk="function" line="2973" lineend="2989" name="DS_JSArray" signature="DS_JSArray(aData, oConfigs)">
              <variable citdl="Array" doc="In-memory Javascript array of simple string data." ilk="argument" name="aData" />
              <variable citdl="Object" doc="(optional) Object literal of config params." ilk="argument" name="oConfigs" />
              <variable citdl="DS_JSArray" name="this" />
            </scope>
            <variable citdl="aData" line="2986" name="data" />
            <scope doc="Queries the live data source defined by data for results. Results are passed&#xA;back to a callback function." ilk="function" line="3022" lineend="3073" name="doQuery" signature="doQuery(oCallbackFn, sQuery, oParent)">
              <variable citdl="HTMLFunction" doc="Callback function defined by oParent object to which to return results." ilk="argument" name="oCallbackFn" />
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="The object instance that has requested data." ilk="argument" name="oParent" />
              <variable citdl="DS_JSArray" name="this" />
              <variable attributes="__local__ private" line="3023" name="i" />
              <variable attributes="__local__ private" citdl="this.data" line="3024" name="aData" />
              <variable attributes="__local__ private" citdl="Array" line="3025" name="aResults" />
              <variable attributes="__local__ private" citdl="Boolean" line="3026" name="bMatchFound" />
              <variable attributes="__local__ private" citdl="this.queryMatchContains" line="3027" name="bMatchContains" />
              <variable attributes="__local__ private" citdl="Array" line="3036" name="aDataset" />
              <variable attributes="__local__ private" line="3046" name="sKeyIndex" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.util.Element" ilk="class" line="3244" lineend="3304" name="ButtonGroup">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The ButtonGroup class creates a set of buttons that are mutually exclusive;&#xA;checking one button in the set will uncheck all others in the button group." ilk="function" line="3244" lineend="3304" name="ButtonGroup" signature="ButtonGroup(p_oElement, p_oAttributes)">
              <variable citdl="Object" doc="Object literal specifying a set of&#xA;configuration attributes used to create the button group." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying a set of&#xA;configuration attributes used to create the button group." ilk="argument" name="p_oAttributes" />
              <variable citdl="ButtonGroup" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.ButtonGroup.superclass.constructor" line="3246" name="fnSuperClass" />
              <variable attributes="__local__ private" citdl="Dom.generateId()" line="3256" name="sId" />
              <variable attributes="__local__ private" citdl="Dom.get()" line="3270" name="oElement" />
              <variable attributes="__local__ private" citdl="p_oElement.nodeName" line="3286" name="sNodeName" />
            </scope>
            <variable citdl="Array" doc="Array of buttons in the button group." line="3320" name="_buttons" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: The name of the tag to be used for the button group&apos;s element." line="3334" name="TAG_NAME" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: String representing the CSS class(es) to be applied to the&#xA;button group&apos;s element." line="3345" name="CSS_CLASS_NAME" />
            <scope doc="Creates the button group&apos;s element." ilk="function" line="3359" lineend="3367" name="_createGroupElement" returns="HTMLDivElement" signature="_createGroupElement()">
              <variable attributes="__local__ private" citdl="document.createElement()" line="3361" name="oElement" />
            </scope>
            <scope doc="Sets the value of the button groups&apos;s &quot;disabled&quot; attribute." ilk="function" line="3381" lineend="3398" name="_setDisabled" signature="_setDisabled(p_bDisabled)">
              <variable citdl="Boolean" doc="Boolean indicating the value for the button&#xA;group&apos;s &quot;disabled&quot; attribute." ilk="argument" name="p_bDisabled" />
              <variable attributes="__local__ private" citdl="this.getCount()" line="3383" name="nButtons" />
              <variable attributes="__local__ private" citdl="nButtons" line="3387" name="i" />
            </scope>
            <scope doc="&quot;keydown&quot; event handler for the button group." ilk="function" line="3412" lineend="3442" name="_onKeyDown" signature="_onKeyDown(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object passed&#xA;back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
              <variable attributes="__local__ private" citdl="Event.getCharCode()" line="3418" name="nCharCode" />
              <variable attributes="__local__ private" citdl="Number" line="3418" name="nIndex" />
              <variable attributes="__local__ private" citdl="oTarget.parentNode.parentNode.id" line="3418" name="sId" />
              <variable attributes="__local__ private" citdl="m_oButtons[sId]" line="3418" name="oButton" />
              <variable attributes="__local__ private" citdl="Event.getTarget()" line="3418" name="oTarget" />
            </scope>
            <scope doc="&quot;appendTo&quot; event handler for the button group." ilk="function" line="3451" lineend="3462" name="_onAppendTo" signature="_onAppendTo(p_oEvent)">
              <variable citdl="Event" doc="Object representing the event that was fired." ilk="argument" name="p_oEvent" />
              <variable attributes="__local__ private" citdl="this._buttons" line="3454" name="aButtons" />
              <variable attributes="__local__ private" citdl="aButtons.length" line="3454" name="nButtons" />
            </scope>
            <scope doc="&quot;checkedChange&quot; event handler for each button in the&#xA;button group." ilk="function" line="3474" lineend="3497" name="_onButtonCheckedChange" signature="_onButtonCheckedChange(p_oEvent, p_oButton)">
              <variable citdl="Event" doc="Object representing the event that was fired." ilk="argument" name="p_oEvent" />
              <variable ilk="argument" name="p_oButton" />
              <variable attributes="__local__ private" citdl="this.get()" line="3477" name="oCheckedButton" />
              <variable attributes="__local__ private" citdl="p_oEvent.newValue" line="3477" name="bChecked" />
            </scope>
            <scope doc="The ButtonGroup class&apos;s initialization method." ilk="function" line="3517" lineend="3584" name="init" signature="init(p_oElement, p_oAttributes)">
              <variable citdl="Object" doc="Object literal specifying a set of configuration&#xA;attributes used to create the button group." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying a set of&#xA;configuration attributes used to create the button group." ilk="argument" name="p_oAttributes" />
              <variable attributes="__local__ private" citdl="this.getElementsByClassName()" line="3528" name="aButtons" />
              <scope attributes="__local__ private" ilk="function" line="3540" lineend="3544" name="isRadioButton" signature="isRadioButton(p_oElement)">
                <variable ilk="argument" name="p_oElement" />
              </scope>
              <variable attributes="__local__ private" citdl="this.get()" line="3559" name="oContainer" />
              <variable attributes="__local__ private" citdl="this" line="3565" name="me" />
            </scope>
            <scope doc="Initializes all of the configuration attributes used to create&#xA;the button group." ilk="function" line="3594" lineend="3679" name="initAttributes" signature="initAttributes(p_oAttributes)">
              <variable citdl="Object" doc="Object literal specifying a set of&#xA;configuration attributes used to create the button group." ilk="argument" name="p_oAttributes" />
              <variable attributes="__local__ private" citdl="p_oAttributes" line="3596" name="oAttributes" />
            </scope>
            <scope doc="Adds the button to the button group." ilk="function" line="3702" lineend="3766" name="addButton" returns="YAHOO.widget.Button" signature="addButton(p_oButton)">
              <variable citdl="Object" doc="Object literal specifying a set of&#xA;&lt;a href=&quot;YAHOO.widget.Button.html&quot;&gt;YAHOO.widget.Button&lt;/a&gt; configuration&#xA;attributes used to configure the button to be added to the button group." ilk="argument" name="p_oButton" />
              <variable attributes="__local__ private" citdl="p_oButton" line="3704" name="oButton" />
              <variable attributes="__local__ private" citdl="this._buttons.length" line="3730" name="nIndex" />
              <variable attributes="__local__ private" citdl="this.get()" line="3730" name="sGroupName" />
              <variable attributes="__local__ private" citdl="oButton.get()" line="3730" name="sButtonName" />
            </scope>
            <scope doc="Adds the array of buttons to the button group." ilk="function" line="3786" lineend="3819" name="addButtons" returns="Array" signature="addButtons(p_aButtons)">
              <variable citdl="Array" doc="Array of object literals, each containing a set of&#xA;&lt;a href=&quot;YAHOO.widget.Button.html&quot;&gt;YAHOO.widget.Button&lt;/a&gt; configuration&#xA;attributes used to configure each button to be added to the button group." ilk="argument" name="p_aButtons" />
              <variable attributes="__local__ private" citdl="Array" line="3792" name="aButtons" />
              <variable attributes="__local__ private" citdl="p_aButtons.length" line="3792" name="nButtons" />
              <variable attributes="__local__ private" citdl="this.addButton()" line="3792" name="oButton" />
            </scope>
            <scope doc="Removes the button at the specified index from the button group." ilk="function" line="3828" lineend="3860" name="removeButton" signature="removeButton(p_nIndex)">
              <variable citdl="Number" doc="Number specifying the index of the button to be&#xA;removed from the button group." ilk="argument" name="p_nIndex" />
              <variable attributes="__local__ private" citdl="this.getButton()" line="3830" name="oButton" />
              <variable attributes="__local__ private" citdl="this._buttons.length" line="3842" name="nButtons" />
              <variable attributes="__local__ private" citdl="this._buttons.length" line="3846" name="i" />
            </scope>
            <scope doc="Returns the button at the specified index." ilk="function" line="3870" lineend="3878" name="getButton" returns="YAHOO.widget.Button" signature="getButton(p_nIndex)">
              <variable citdl="Number" doc="The index of the button to retrieve from the&#xA;button group." ilk="argument" name="p_nIndex" />
            </scope>
            <scope doc="Returns an array of the buttons in the button group." ilk="function" line="3886" lineend="3890" name="getButtons" returns="Array" signature="getButtons()" />
            <scope doc="Returns the number of buttons in the button group." ilk="function" line="3898" lineend="3902" name="getCount" returns="Number" signature="getCount()" />
            <scope doc="Sets focus to the button at the specified index." ilk="function" line="3910" lineend="3944" name="focus" signature="focus(p_nIndex)">
              <variable citdl="Number" doc="Number indicating the index of the button to focus." ilk="argument" name="p_nIndex" />
              <variable attributes="__local__ private" citdl="this._buttons[p_nIndex]" line="3912" name="oButton" />
              <variable attributes="__local__ private" citdl="this.getCount()" line="3927" name="nButtons" />
            </scope>
            <scope doc="Checks the button at the specified index." ilk="function" line="3952" lineend="3962" name="check" signature="check(p_nIndex)">
              <variable citdl="Number" doc="Number indicating the index of the button to check." ilk="argument" name="p_nIndex" />
              <variable attributes="__local__ private" citdl="this.getButton()" line="3954" name="oButton" />
            </scope>
            <scope doc="Removes the button group&apos;s element from its parent element and&#xA;removes all event handlers." ilk="function" line="3970" lineend="3996" name="destroy" signature="destroy()">
              <variable attributes="__local__ private" citdl="this._buttons.length" line="3975" name="nButtons" />
              <variable attributes="__local__ private" citdl="oElement.parentNode" line="3975" name="oParentNode" />
              <variable attributes="__local__ private" citdl="this.get()" line="3975" name="oElement" />
              <variable attributes="__local__ private" citdl="this._buttons.length" line="3979" name="i" />
            </scope>
            <scope doc="Returns a string representing the button group." ilk="function" line="4004" lineend="4008" name="toString" returns="String" signature="toString()" />
          </scope>
          <scope ilk="class" line="3303" lineend="3305" name="Panel">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Panel is an implementation of Overlay that behaves like an OS window, with a draggable header and an optional close icon at the top right." ilk="function" line="3303" lineend="3305" name="Panel" signature="Panel(el, userConfig)">
              <variable citdl="HTMLElement" doc="The element representing the Panel" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing the configuration that should be set for this Panel. See configuration documentation for more details." ilk="argument" name="userConfig" />
              <variable citdl="Panel" name="this" />
            </scope>
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the default CSS class used for a Panel" line="3316" name="CSS_PANEL" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the default CSS class used for a Panel&apos;s wrapping container" line="3325" name="CSS_PANEL_CONTAINER" />
            <variable attributes="private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Panel&apos;s events" line="3334" lineend="3340" name="_EVENT_TYPES">
              <variable citdl="String" line="3336" name="SHOW_MASK" />
              <variable citdl="String" line="3337" name="HIDE_MASK" />
              <variable citdl="String" line="3338" name="DRAG" />
            </variable>
            <variable attributes="private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the Panel&apos;s configuration properties" line="3349" lineend="3384" name="_DEFAULT_CONFIG">
              <variable citdl="Object" line="3351" lineend="3356" name="CLOSE">
                <variable citdl="String" line="3352" name="key" />
                <variable citdl="Boolean" line="3353" name="value" />
                <variable citdl="YAHOO.lang.isBoolean" line="3354" name="validator" />
                <variable citdl="Array" line="3355" name="supercedes" />
              </variable>
              <variable citdl="Object" line="3358" lineend="3363" name="DRAGGABLE">
                <variable citdl="String" line="3359" name="key" />
                <variable line="3360" name="value" />
                <variable citdl="YAHOO.lang.isBoolean" line="3361" name="validator" />
                <variable citdl="Array" line="3362" name="supercedes" />
              </variable>
              <variable citdl="Object" line="3365" lineend="3369" name="UNDERLAY">
                <variable citdl="String" line="3366" name="key" />
                <variable citdl="String" line="3367" name="value" />
                <variable citdl="Array" line="3368" name="supercedes" />
              </variable>
              <variable citdl="Object" line="3371" lineend="3376" name="MODAL">
                <variable citdl="String" line="3372" name="key" />
                <variable citdl="Boolean" line="3373" name="value" />
                <variable citdl="YAHOO.lang.isBoolean" line="3374" name="validator" />
                <variable citdl="Array" line="3375" name="supercedes" />
              </variable>
              <variable citdl="Object" line="3378" lineend="3382" name="KEY_LISTENERS">
                <variable citdl="String" line="3379" name="key" />
                <variable citdl="Boolean" line="3380" name="suppressEvent" />
                <variable citdl="Array" line="3381" name="supercedes" />
              </variable>
            </variable>
            <scope doc="The Overlay initialization method, which is executed for Overlay and all of its subclasses. This method is automatically called by the constructor, and  sets up all DOM references for pre-existing markup, and creates required markup if it is not already present." ilk="function" line="3393" lineend="3494" name="init" signature="init(el, userConfig)">
              <variable citdl="HTMLElement" doc="The element representing the Overlay" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing the configuration that should be set for this Overlay. See configuration documentation for more details." ilk="argument" name="userConfig" />
              <variable citdl="Panel" name="this" />
              <variable attributes="__local__ private" citdl="this" line="3436" name="me" />
              <scope attributes="__local__ private" ilk="function" line="3438" lineend="3440" name="doBlur" signature="doBlur()" />
            </scope>
            <scope doc="Initializes the custom events for Module which are fired automatically at appropriate times by the Module class." ilk="function" line="3499" lineend="3521" name="initEvents" signature="initEvents()">
              <variable citdl="Panel" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Panel._EVENT_TYPES" line="3502" name="EVENT_TYPES" />
            </scope>
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired after the modality mask is shown" line="3508" name="showMaskEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired after the modality mask is hidden" line="3514" name="hideMaskEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent when the Panel is dragged" line="3520" name="dragEvent" />
            <scope doc="Initializes the class&apos;s configurable properties which can be changed using the Panel&apos;s Config object (cfg)." ilk="function" line="3527" lineend="3612" name="initDefaultConfig" signature="initDefaultConfig()">
              <variable citdl="Panel" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Panel._DEFAULT_CONFIG" line="3532" name="DEFAULT_CONFIG" />
            </scope>
            <scope doc="The default event handler fired when the &quot;close&quot; property is changed. The method controls the appending or hiding of the close icon at the top right of the Panel." ilk="function" line="3623" lineend="3645" name="configClose" signature="configClose(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Panel" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="3624" name="val" />
              <scope attributes="__local__ private" ilk="function" line="3626" lineend="3628" name="doHide" signature="doHide(e, obj)">
                <variable ilk="argument" name="e" />
                <variable ilk="argument" name="obj" />
              </scope>
            </scope>
            <variable citdl="document.createElement()" line="3632" name="close" />
            <variable citdl="String" line="3634" name="innerHTML" />
            <variable citdl="String" line="3638" name="display" />
            <scope doc="The default event handler fired when the &quot;draggable&quot; property is changed." ilk="function" line="3654" lineend="3680" name="configDraggable" signature="configDraggable(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Panel" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="3656" name="val" />
            </scope>
            <scope doc="The default event handler fired when the &quot;underlay&quot; property is changed." ilk="function" line="3689" lineend="3715" name="configUnderlay" signature="configUnderlay(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Panel" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="3690" name="val" />
            </scope>
            <variable citdl="document.createElement()" line="3698" name="underlay" />
            <variable citdl="String" line="3699" name="className" />
            <scope doc="The default event handler fired when the &quot;modal&quot; property is changed. This handler subscribes or unsubscribes to the show and hide events to handle the display or hide of the modality mask." ilk="function" line="3724" lineend="3750" name="configModal" signature="configModal(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Panel" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="3725" name="modal" />
            </scope>
            <scope doc="Removes the modality mask." ilk="function" line="3756" lineend="3780" name="removeMask" signature="removeMask()">
              <variable citdl="Panel" name="this" />
              <variable attributes="__local__ private" citdl="this.mask" line="3758" name="oMask" />
              <variable attributes="__local__ private" citdl="oMask.parentNode" line="3769" name="oParentNode" />
            </scope>
            <variable citdl="document.createElement()" line="3777" name="mask" />
            <scope doc="The default event handler fired when the &quot;keylisteners&quot; property is changed." ilk="function" line="3789" lineend="3815" name="configKeyListeners" signature="configKeyListeners(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Panel" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="3790" name="listeners" />
              <variable attributes="__local__ private" citdl="listeners[i]" line="3795" name="listener" />
            </scope>
            <scope doc="The default event handler fired when the &quot;height&quot; property is changed." ilk="function" line="3824" lineend="3830" name="configHeight" signature="configHeight(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Panel" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="3825" name="height" />
              <variable attributes="__local__ private" citdl="this.innerElement" line="3826" name="el" />
            </scope>
            <scope doc="The default event handler fired when the &quot;width&quot; property is changed." ilk="function" line="3839" lineend="3845" name="configWidth" signature="configWidth(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Panel" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="3840" name="width" />
              <variable attributes="__local__ private" citdl="this.innerElement" line="3841" name="el" />
            </scope>
            <scope doc="The default event handler fired when the &quot;zIndex&quot; property is changed." ilk="function" line="3854" lineend="3873" name="configzIndex" signature="configzIndex(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Panel" name="this" />
              <variable attributes="__local__ private" citdl="Number" line="3857" name="maskZ" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getStyle()" line="3858" name="currentZ" />
            </scope>
            <scope doc="Builds the wrapping container around the Panel that is used for positioning the shadow and matte underlays. The container element is assigned to a  local instance variable called container, and the element is reinserted inside of it." ilk="function" line="3882" lineend="3900" name="buildWrapper" signature="buildWrapper()">
              <variable citdl="Panel" name="this" />
              <variable attributes="__local__ private" citdl="this.element.parentNode" line="3883" name="elementParent" />
              <variable attributes="__local__ private" citdl="this.element" line="3884" name="originalElement" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="3886" name="wrapper" />
            </scope>
            <variable citdl="wrapper" line="3896" name="element" />
            <variable citdl="originalElement" line="3897" name="innerElement" />
            <scope doc="Adjusts the size of the shadow based on the size of the element." ilk="function" line="3906" lineend="3911" name="sizeUnderlay" signature="sizeUnderlay()">
              <variable citdl="Panel" name="this" />
            </scope>
            <variable citdl="this.innerElement.offsetWidth" line="3908" name="width" />
            <variable citdl="this.innerElement.offsetHeight" line="3909" name="height" />
            <scope doc="Event handler fired when the resize monitor element is resized." ilk="function" line="3919" lineend="3925" name="onDomResize" signature="onDomResize(e, obj)">
              <variable citdl="DOMEvent" doc="The resize DOM event" ilk="argument" name="e" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
              <variable citdl="Panel" name="this" />
              <variable attributes="__local__ private" citdl="this" line="3921" name="me" />
            </scope>
            <scope doc="Registers the Panel&apos;s header for drag &amp; drop capability." ilk="function" line="3931" lineend="4008" name="registerDragDrop" signature="registerDragDrop()">
              <variable citdl="Panel" name="this" />
              <variable attributes="__local__ private" citdl="this" line="3947" name="me" />
              <variable citdl="Object" line="3949" name="dd">
                <scope ilk="function" line="3949" lineend="3983" name="startDrag" signature="startDrag()">
                  <variable citdl="dd" name="this" />
                  <variable attributes="__local__ private" citdl="me.element.offsetHeight" line="3956" name="offsetHeight" />
                  <variable attributes="__local__ private" citdl="me.element.offsetWidth" line="3957" name="offsetWidth" />
                  <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getViewportWidth()" line="3959" name="viewPortWidth" />
                  <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getViewportHeight()" line="3960" name="viewPortHeight" />
                  <variable attributes="__local__ private" citdl="window.scrollX" line="3962" name="scrollX" />
                  <variable attributes="__local__ private" citdl="window.scrollY" line="3963" name="scrollY" />
                  <variable attributes="__local__ private" citdl="scrollY" line="3965" name="topConstraint" />
                  <variable attributes="__local__ private" citdl="scrollX" line="3966" name="leftConstraint" />
                  <variable attributes="__local__ private" citdl="scrollY" line="3967" name="bottomConstraint" />
                  <variable attributes="__local__ private" citdl="scrollX" line="3968" name="rightConstraint" />
                </scope>
                <variable citdl="leftConstraint" line="3970" name="minX" />
                <variable citdl="rightConstraint" line="3971" name="maxX" />
                <variable citdl="Boolean" line="3972" name="constrainX" />
                <variable citdl="topConstraint" line="3974" name="minY" />
                <variable citdl="bottomConstraint" line="3975" name="maxY" />
                <variable citdl="Boolean" line="3976" name="constrainY" />
                <scope ilk="function" line="3985" lineend="3993" name="onDrag" signature="onDrag()">
                  <variable citdl="dd" name="this" />
                </scope>
                <scope ilk="function" line="3995" lineend="4001" name="endDrag" signature="endDrag()">
                  <variable citdl="dd" name="this" />
                </scope>
              </variable>
            </scope>
            <variable citdl="YAHOO.util.DD" line="3941" name="dd" />
            <variable citdl="this.id" line="3944" name="id" />
            <scope doc="Builds the mask that is laid over the document when the Panel is configured to be modal." ilk="function" line="4014" lineend="4032" name="buildMask" signature="buildMask()">
              <variable citdl="Panel" name="this" />
              <scope attributes="__local__ private" ilk="function" line="4021" lineend="4023" name="maskClick" signature="maskClick(e, obj)">
                <variable ilk="argument" name="e" />
                <variable ilk="argument" name="obj" />
              </scope>
              <variable attributes="__local__ private" citdl="document.body.firstChild" line="4025" name="firstChild" />
            </scope>
            <scope doc="Hides the modality mask." ilk="function" line="4038" lineend="4044" name="hideMask" signature="hideMask()">
              <variable citdl="Panel" name="this" />
            </scope>
            <scope doc="Shows the modality mask." ilk="function" line="4050" lineend="4057" name="showMask" signature="showMask()">
              <variable citdl="Panel" name="this" />
            </scope>
            <scope doc="Sets the size of the modality mask to cover the entire scrollable area of the document" ilk="function" line="4063" lineend="4068" name="sizeMask" signature="sizeMask()">
              <variable citdl="Panel" name="this" />
            </scope>
            <scope doc="Renders the Panel by inserting the elements that are not already in the main Panel into their correct places. Optionally appends the Panel to the specified node prior to the render&apos;s execution. NOTE: For Panels without existing markup, the appendToNode argument is REQUIRED. If this argument is ommitted and the current element is not present in the document, the function will return false, indicating that the render was a failure." ilk="function" line="4077" lineend="4079" name="render" returns="Boolean" signature="render(appendToNode)">
              <variable citdl="HTMLElement" doc="The element to which the Module should be appended to prior to rendering" ilk="argument" name="appendToNode" />
              <variable citdl="Panel" name="this" />
            </scope>
            <scope doc="Removes the Panel element from the DOM and sets all child elements to null." ilk="function" line="4085" lineend="4097" name="destroy" signature="destroy()">
              <variable citdl="Panel" name="this" />
            </scope>
            <scope doc="Returns a String representation of the object." ilk="function" line="4104" lineend="4106" name="toString" returns="String" signature="toString()">
              <variable citdl="Panel" name="this" />
            </scope>
          </scope>
          <variable attributes="deprecated" citdl="YAHOO.widget.Calendar" line="3426" name="Calendar_Core" />
          <variable citdl="YAHOO.widget.Calendar" line="3428" name="Cal_Core" />
          <scope ilk="class" line="3450" lineend="3454" name="CalendarGroup">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: YAHOO.widget.CalendarGroup is a special container class for YAHOO.widget.Calendar. This class facilitates&#xA;the ability to have multi-page calendar views that share a single dataset and are&#xA;dependent on each other.&#xA;&#xA;The calendar group instance will refer to each of its elements using a 0-based index.&#xA;For example, to construct the placeholder for a calendar group widget with id &quot;cal1&quot; and&#xA;containerId of &quot;cal1Container&quot;, the markup would be as follows:&#xA;The tables for the calendars (&quot;cal1_0&quot; and &quot;cal1_1&quot;) will be inserted into those containers." ilk="function" line="3450" lineend="3454" name="CalendarGroup" signature="CalendarGroup(id, containerId, config)">
              <variable citdl="String" doc="The id of the table element that will represent the calendar widget" ilk="argument" name="id" />
              <variable citdl="String" doc="The id of the container div element that will wrap the calendar table" ilk="argument" name="containerId" />
              <variable citdl="Object" doc="The configuration object containing the Calendar&apos;s arguments" ilk="argument" name="config" />
              <variable citdl="CalendarGroup" name="this" />
            </scope>
            <scope doc="Initializes the calendar group. All subclasses must call this method in order for the&#xA;group to be initialized properly." ilk="function" line="3464" lineend="3543" name="init" signature="init(id, containerId, config)">
              <variable citdl="String" doc="The id of the table element that will represent the calendar widget" ilk="argument" name="id" />
              <variable citdl="String" doc="The id of the container div element that will wrap the calendar table" ilk="argument" name="containerId" />
              <variable citdl="Object" doc="The configuration object containing the Calendar&apos;s arguments" ilk="argument" name="config" />
              <variable citdl="CalendarGroup" name="this" />
              <scope attributes="__local__ private" ilk="class" line="3530" lineend="3540" name="fixWidth">
                <scope attributes="__local__ private __ctor__" ilk="function" line="3530" lineend="3540" name="fixWidth" signature="fixWidth()">
                  <variable citdl="fixWidth" name="this" />
                  <variable attributes="__local__ private" citdl="this.oDomContainer.offsetWidth" line="3531" name="startW" />
                  <variable attributes="__local__ private" citdl="Number" line="3532" name="w" />
                  <variable attributes="__local__ private" citdl="this.pages[p]" line="3534" name="cal" />
                </scope>
                <variable citdl="w" line="3538" name="width" />
              </scope>
            </scope>
            <variable citdl="Array" doc="The collection of Calendar pages contained within the CalendarGroup" line="3473" name="pages" />
            <variable citdl="String" doc="The unique id associated with the CalendarGroup" line="3480" name="id" />
            <variable citdl="String" doc="The unique id associated with the CalendarGroup container" line="3487" name="containerId" />
            <variable citdl="HTMLElement" doc="The outer containing element for the CalendarGroup" line="3494" name="oDomContainer" />
            <variable citdl="YAHOO.util.Config" doc="The Config object used to hold the configuration variables for the CalendarGroup" line="3504" name="cfg" />
            <variable citdl="Object" doc="The local object which contains the CalendarGroup&apos;s options" line="3511" lineend="3511" name="Options" />
            <variable citdl="Object" doc="The local object which contains the CalendarGroup&apos;s locale settings" line="3518" lineend="3518" name="Locale" />
            <scope ilk="function" line="3546" lineend="3828" name="setupConfig" signature="setupConfig()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarGroup._DEFAULT_CONFIG" line="3548" name="defCfg" />
            </scope>
            <scope doc="Initializes CalendarGroup&apos;s built-in CustomEvents" ilk="function" line="3834" lineend="3934" name="initEvents" signature="initEvents()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this" line="3835" name="me" />
              <variable attributes="__local__ private" citdl="String" line="3836" name="strEvent" />
              <scope attributes="__local__ private" doc="PRIVATE: Proxy subscriber to subscribe to the CalendarGroup&apos;s child Calendars&apos; CustomEvents" ilk="function" line="3846" lineend="3851" name="sub" signature="sub(fn, obj, bOverride)">
                <variable citdl="Function" doc="The function to subscribe to this CustomEvent" ilk="argument" name="fn" />
                <variable citdl="Object" doc="The CustomEvent&apos;s scope object" ilk="argument" name="obj" />
                <variable citdl="Boolean" doc="Whether or not to apply scope correction" ilk="argument" name="bOverride" />
                <variable attributes="__local__ private" citdl="me.pages[p]" line="3848" name="cal" />
              </scope>
              <scope attributes="__local__ private" doc="PRIVATE: Proxy unsubscriber to unsubscribe from the CalendarGroup&apos;s child Calendars&apos; CustomEvents" ilk="function" line="3860" lineend="3865" name="unsub" signature="unsub(fn, obj)">
                <variable citdl="Function" doc="The function to subscribe to this CustomEvent" ilk="argument" name="fn" />
                <variable citdl="Object" doc="The CustomEvent&apos;s scope object" ilk="argument" name="obj" />
                <variable attributes="__local__ private" citdl="me.pages[p]" line="3862" name="cal" />
              </scope>
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._EVENT_TYPES" line="3867" name="defEvents" />
            </scope>
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired before a selection is made" line="3873" name="beforeSelectEvent" />
            <variable citdl="sub" line="3874" name="subscribe" />
            <variable citdl="unsub" line="3874" name="unsubscribe" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when a selection is made" line="3881" name="selectEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired before a selection is made" line="3888" name="beforeDeselectEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when a selection is made" line="3896" name="deselectEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when the Calendar page is changed" line="3903" name="changePageEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired before the Calendar is rendered" line="3910" name="beforeRenderEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when the Calendar is rendered" line="3917" name="renderEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when the Calendar is reset" line="3924" name="resetEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when the Calendar is cleared" line="3931" name="clearEvent" />
            <scope doc="The default Config handler for the &quot;pages&quot; property" ilk="function" line="3943" lineend="3983" name="configPages" signature="configPages(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="3944" name="pageCount" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarGroup._DEFAULT_CONFIG.PAGEDATE.key" line="3946" name="cfgPageDate" />
              <variable attributes="__local__ private" citdl="String" line="3949" name="sep" />
              <variable attributes="__local__ private" citdl="String" line="3950" name="groupCalClass" />
              <variable attributes="__local__ private" citdl="String" line="3951" name="firstClass" />
              <variable attributes="__local__ private" citdl="String" line="3952" name="lastClass" />
              <variable attributes="__local__ private" citdl="this.id" line="3955" name="calId" />
              <variable attributes="__local__ private" citdl="this.containerId" line="3956" name="calContainerId" />
              <variable attributes="__local__ private" citdl="this.cfg.getConfig()" line="3958" name="childConfig" />
              <variable attributes="__local__ private" citdl="this.constructChild()" line="3962" name="cal" />
              <variable attributes="__local__ private" citdl="cal.cfg.getProperty()" line="3963" name="caldate" />
            </scope>
            <scope doc="The default Config handler for the &quot;pagedate&quot; property" ilk="function" line="3992" lineend="4009" name="configPageDate" signature="configPageDate(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="3993" name="val" />
              <variable attributes="__local__ private" citdl="cal._parsePageDate()" line="3994" name="firstPageDate" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarGroup._DEFAULT_CONFIG.PAGEDATE.key" line="3996" name="cfgPageDate" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="3999" name="cal" />
              <variable attributes="__local__ private" citdl="Date" line="4004" name="pageDate" />
            </scope>
            <scope doc="The default Config handler for the CalendarGroup &quot;selected&quot; property" ilk="function" line="4018" lineend="4023" name="configSelected" signature="configSelected(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarGroup._DEFAULT_CONFIG.SELECTED.key" line="4019" name="cfgSelected" />
              <variable attributes="__local__ private" line="4021" name="selected" />
            </scope>
            <scope doc="Delegates a configuration property to the CustomEvents associated with the CalendarGroup&apos;s children" ilk="function" line="4033" lineend="4041" name="delegateConfig" signature="delegateConfig(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="4034" name="val" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="4035" name="cal" />
            </scope>
            <scope doc="Adds a function to all child Calendars within this CalendarGroup." ilk="function" line="4050" lineend="4056" name="setChildFunction" signature="setChildFunction(fnName, fn)">
              <variable citdl="String" doc="The name of the function" ilk="argument" name="fnName" />
              <variable citdl="Function" doc="The function to apply to each Calendar page object" ilk="argument" name="fn" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="4051" name="pageCount" />
            </scope>
            <scope doc="Calls a function within all child Calendars within this CalendarGroup." ilk="function" line="4064" lineend="4074" name="callChildFunction" signature="callChildFunction(fnName, args)">
              <variable citdl="String" doc="The name of the function" ilk="argument" name="fnName" />
              <variable citdl="Array" doc="The arguments to pass to the function" ilk="argument" name="args" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="4065" name="pageCount" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="4068" name="page" />
              <variable attributes="__local__ private" citdl="page[fnName]" line="4070" name="fn" />
            </scope>
            <scope doc="Constructs a child calendar. This method can be overridden if a subclassed version of the default&#xA;calendar is to be used." ilk="function" line="4085" lineend="4093" name="constructChild" returns="YAHOO.widget.Calendar" signature="constructChild(id, containerId, config)">
              <variable citdl="String" doc="The id of the table element that will represent the calendar widget" ilk="argument" name="id" />
              <variable citdl="String" doc="The id of the container div element that will wrap the calendar table" ilk="argument" name="containerId" />
              <variable citdl="Object" doc="The configuration object containing the Calendar&apos;s arguments" ilk="argument" name="config" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="document.getElementById()" line="4086" name="container" />
            </scope>
            <scope doc="Sets the calendar group&apos;s month explicitly. This month will be set into the first&#xA;page of the multi-page calendar, and all other months will be iterated appropriately." ilk="function" line="4102" lineend="4119" name="setMonth" signature="setMonth(month)">
              <variable citdl="Number" doc="The numeric month, from 0 (January) to 11 (December)" ilk="argument" name="month" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="pageDate.getFullYear()" line="4104" name="currYear" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarGroup._DEFAULT_CONFIG.PAGEDATE.key" line="4106" name="cfgPageDate" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="4109" name="cal" />
              <variable attributes="__local__ private" citdl="cal.cfg.getProperty()" line="4110" name="pageDate" />
            </scope>
            <scope doc="Sets the calendar group&apos;s year explicitly. This year will be set into the first&#xA;page of the multi-page calendar, and all other months will be iterated appropriately." ilk="function" line="4127" lineend="4141" name="setYear" signature="setYear(year)">
              <variable citdl="Number" doc="The numeric 4-digit year" ilk="argument" name="year" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarGroup._DEFAULT_CONFIG.PAGEDATE.key" line="4129" name="cfgPageDate" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="4133" name="cal" />
              <variable attributes="__local__ private" citdl="cal.cfg.getProperty()" line="4134" name="pageDate" />
            </scope>
            <scope doc="Calls the render function of all child calendars within the group." ilk="function" line="4146" lineend="4153" name="render" signature="render()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="4149" name="cal" />
            </scope>
            <scope doc="Selects a date or a collection of dates on the current calendar. This method, by default,&#xA;does not call the render method explicitly. Once selection has completed, render must be&#xA;called for the changes to be reflected visually." ilk="function" line="4166" lineend="4172" name="select" returns="Array" signature="select(date)">
              <variable citdl="Array" doc="The date string of dates to select in the current calendar. Valid formats are" ilk="argument" name="date" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="4168" name="cal" />
            </scope>
            <scope doc="Selects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.&#xA;The value of the MULTI_SELECT Configuration attribute will determine the set of dates which get selected.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If MULTI_SELECT is false, selectCell will select the cell at the specified index for only the last displayed Calendar page.&lt;/li&gt;&#xA;&lt;li&gt;If MULTI_SELECT is true, selectCell will select the cell at the specified index, on each displayed Calendar page.&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="function" line="4185" lineend="4191" name="selectCell" returns="Array" signature="selectCell(cellIndex)">
              <variable citdl="Number" doc="The index of the cell to be selected." ilk="argument" name="cellIndex" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="4187" name="cal" />
            </scope>
            <scope doc="Deselects a date or a collection of dates on the current calendar. This method, by default,&#xA;does not call the render method explicitly. Once deselection has completed, render must be&#xA;called for the changes to be reflected visually." ilk="function" line="4204" lineend="4210" name="deselect" returns="Array" signature="deselect(date)">
              <variable citdl="Array" doc="The date string of dates to deselect in the current calendar. Valid formats are" ilk="argument" name="date" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="4206" name="cal" />
            </scope>
            <scope doc="Deselects all dates on the current calendar." ilk="function" line="4220" lineend="4226" name="deselectAll" returns="Array" signature="deselectAll()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="4222" name="cal" />
            </scope>
            <scope doc="Deselects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.&#xA;deselectCell will deselect the cell at the specified index on each displayed Calendar page." ilk="function" line="4236" lineend="4242" name="deselectCell" returns="Array" signature="deselectCell(cellIndex)">
              <variable citdl="Number" doc="The index of the cell to deselect." ilk="argument" name="cellIndex" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="4238" name="cal" />
            </scope>
            <scope doc="Resets the calendar widget to the originally selected month and year, and&#xA;sets the calendar to the initial selection(s)." ilk="function" line="4249" lineend="4254" name="reset" signature="reset()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="4251" name="cal" />
            </scope>
            <scope doc="Clears the selected dates in the current calendar widget and sets the calendar&#xA;to the current month and year." ilk="function" line="4261" lineend="4266" name="clear" signature="clear()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="4263" name="cal" />
            </scope>
            <scope doc="Navigates to the next month page in the calendar widget." ilk="function" line="4272" lineend="4277" name="nextMonth" signature="nextMonth()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="4274" name="cal" />
            </scope>
            <scope doc="Navigates to the previous month page in the calendar widget." ilk="function" line="4283" lineend="4288" name="previousMonth" signature="previousMonth()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="4285" name="cal" />
            </scope>
            <scope doc="Navigates to the next year in the currently selected month in the calendar widget." ilk="function" line="4294" lineend="4299" name="nextYear" signature="nextYear()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="4296" name="cal" />
            </scope>
            <scope doc="Navigates to the previous year in the currently selected month in the calendar widget." ilk="function" line="4305" lineend="4310" name="previousYear" signature="previousYear()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="4307" name="cal" />
            </scope>
            <scope citdl="Array" doc="Gets the list of currently selected dates from the calendar." ilk="function" line="4318" lineend="4330" name="getSelectedDates" returns="returnDates" signature="getSelectedDates()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="4319" name="returnDates" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="4320" name="selected" />
              <variable attributes="__local__ private" citdl="selected[d]" line="4322" name="dateArray" />
              <variable attributes="__local__ private" citdl="Date" line="4324" name="date" />
            </scope>
            <scope doc="Adds a renderer to the render stack. The function reference passed to this method will be executed&#xA;when a date cell matches the conditions specified in the date string for this renderer." ilk="function" line="4340" lineend="4345" name="addRenderer" signature="addRenderer(sDates, fnRender)">
              <variable citdl="String" doc="A date string to associate with the specified renderer. Valid formats" ilk="argument" name="sDates" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="4342" name="cal" />
            </scope>
            <scope doc="Adds a month to the render stack. The function reference passed to this method will be executed&#xA;when a date cell matches the month passed to this method." ilk="function" line="4354" lineend="4359" name="addMonthRenderer" signature="addMonthRenderer(month, fnRender)">
              <variable citdl="Number" doc="The month (1-12) to associate with this renderer" ilk="argument" name="month" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="4356" name="cal" />
            </scope>
            <scope doc="Adds a weekday to the render stack. The function reference passed to this method will be executed&#xA;when a date cell matches the weekday passed to this method." ilk="function" line="4368" lineend="4373" name="addWeekdayRenderer" signature="addWeekdayRenderer(weekday, fnRender)">
              <variable citdl="Number" doc="The weekday (0-6) to associate with this renderer" ilk="argument" name="weekday" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="4370" name="cal" />
            </scope>
            <scope doc="Renders the header for the CalendarGroup." ilk="function" line="4379" lineend="4379" name="renderHeader" signature="renderHeader()">
              <variable citdl="CalendarGroup" name="this" />
            </scope>
            <scope doc="Renders a footer for the 2-up calendar container. By default, this method is&#xA;unimplemented." ilk="function" line="4386" lineend="4386" name="renderFooter" signature="renderFooter()">
              <variable citdl="CalendarGroup" name="this" />
            </scope>
            <scope doc="Adds the designated number of months to the current calendar month, and sets the current&#xA;calendar page date to the new month." ilk="function" line="4394" lineend="4396" name="addMonths" signature="addMonths(count)">
              <variable citdl="Number" doc="The number of months to add to the current calendar" ilk="argument" name="count" />
              <variable citdl="CalendarGroup" name="this" />
            </scope>
            <scope doc="Subtracts the designated number of months from the current calendar month, and sets the current&#xA;calendar page date to the new month." ilk="function" line="4405" lineend="4407" name="subtractMonths" signature="subtractMonths(count)">
              <variable citdl="Number" doc="The number of months to subtract from the current calendar" ilk="argument" name="count" />
              <variable citdl="CalendarGroup" name="this" />
            </scope>
            <scope doc="Adds the designated number of years to the current calendar, and sets the current&#xA;calendar page date to the new month." ilk="function" line="4415" lineend="4417" name="addYears" signature="addYears(count)">
              <variable citdl="Number" doc="The number of years to add to the current calendar" ilk="argument" name="count" />
              <variable citdl="CalendarGroup" name="this" />
            </scope>
            <scope doc="Subtcats the designated number of years from the current calendar, and sets the current&#xA;calendar page date to the new month." ilk="function" line="4425" lineend="4427" name="subtractYears" signature="subtractYears(count)">
              <variable citdl="Number" doc="The number of years to subtract from the current calendar" ilk="argument" name="count" />
              <variable citdl="CalendarGroup" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Sets the month on a Date object, taking into account year rollover if the month is less than 0 or greater than 11.&#xA;The Date object passed in is modified. It should be cloned before passing it into this method if the original value needs to be maintained" ilk="function" line="4437" lineend="4446" name="_setMonthOnDate" signature="_setMonthOnDate(date, iMonth)">
              <variable citdl="Date" doc="The Date object on which to set the month index" ilk="argument" name="date" />
              <variable citdl="Number" doc="The month index to set" ilk="argument" name="iMonth" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.DateMath" line="4440" name="DM" />
              <variable attributes="__local__ private" citdl="DM.add()" line="4441" name="newDate" />
            </scope>
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: CSS class representing the container for the calendar" line="4456" name="CSS_CONTAINER" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: CSS class representing the container for the calendar" line="4465" name="CSS_MULTI_UP" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: CSS class representing the title for the 2-up calendar" line="4474" name="CSS_2UPTITLE" />
            <variable attributes="deprecated __static__ constant" citdl="String" doc="DEPRECATED STATIC CONSTANT: CSS class representing the close icon for the 2-up calendar" line="4485" name="CSS_2UPCLOSE" />
            <variable attributes="private __static__ constant" citdl="Object" doc="PRIVATE STATIC CONSTANT: The set of default Config property keys and values for the CalendarGroup" line="4518" name="_DEFAULT_CONFIG">
              <variable citdl="Object" line="4519" lineend="4519" name="PAGES">
                <variable citdl="Number" line="4519" name="value" />
                <variable citdl="String" line="4519" name="key" />
              </variable>
            </variable>
            <scope doc="Returns a string representation of the object." ilk="function" line="4526" lineend="4528" name="toString" returns="String" signature="toString()">
              <variable citdl="CalendarGroup" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="3987" lineend="4008" name="ColumnSet">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The ColumnSet class defines and manages a DataTable&apos;s Columns,&#xA;including nested hierarchies and access to individual Column instances." ilk="function" line="3987" lineend="4138" name="ColumnSet" signature="ColumnSet(aHeaders)">
              <variable citdl="Array" doc="Array of object literals that define header cells." ilk="argument" name="aHeaders" />
              <variable citdl="ColumnSet" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="3992" name="tree" />
              <variable attributes="__local__ private" citdl="Array" line="3994" name="flat" />
              <variable attributes="__local__ private" citdl="Array" line="3996" name="keys" />
              <variable attributes="__local__ private" citdl="Array" line="3998" name="headers" />
              <variable attributes="__local__ private" citdl="Number" line="4000" name="nodelevel" />
              <scope attributes="__local__ private" ilk="function" line="4003" lineend="4111" name="parseColumns" signature="parseColumns(nodeList, parent)">
                <variable ilk="argument" name="nodeList" />
                <variable ilk="argument" name="parent" />
                <variable attributes="__local__ private" citdl="Number" line="4011" name="nodeLevelMaxChildren" />
                <scope attributes="__local__ private" ilk="function" line="4012" lineend="4023" name="recurseChildren" signature="recurseChildren(nodeList)">
                  <variable ilk="argument" name="nodeList" />
                  <variable attributes="__local__ private" citdl="Number" line="4013" name="tmpMax" />
                </scope>
                <variable attributes="__local__ private" citdl="YAHOO.widget.Column" line="4029" name="oColumn" />
                <variable attributes="__local__ private" citdl="nodeList[j].children" line="4043" name="children" />
                <variable attributes="__local__ private" citdl="children.length" line="4044" name="length" />
                <variable attributes="__local__ private" citdl="children[k]" line="4048" name="child" />
              </scope>
              <scope attributes="__local__ private" ilk="function" line="4119" lineend="4124" name="recurseAncestors" signature="recurseAncestors(i, oColumn)">
                <variable ilk="argument" name="i" />
                <variable ilk="argument" name="oColumn" />
              </scope>
            </scope>
            <variable citdl="String" line="3989" name="_sName" />
            <variable citdl="tree" line="4132" name="tree" />
            <variable citdl="flat" line="4133" name="flat" />
            <variable citdl="keys" line="4134" name="keys" />
            <variable citdl="headers" line="4135" name="headers" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Internal class variable to index multiple data table instances." line="4154" name="_nCount" />
            <scope doc="Public accessor to the unique name of the ColumnSet instance." ilk="function" line="4219" lineend="4221" name="toString" returns="String" signature="toString()">
              <variable citdl="ColumnSet" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="4117" lineend="4119" name="Dialog">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Dialog is an implementation of Panel that can be used to submit form data. Built-in functionality for buttons with event handlers is included, and button sets can be build dynamically, or the preincluded ones for Submit/Cancel and OK/Cancel can be utilized. Forms can be processed in 3 ways -- via an asynchronous Connection utility call, a simple form POST or GET, or manually." ilk="function" line="4117" lineend="4119" name="Dialog" signature="Dialog(el, userConfig)">
              <variable citdl="HTMLElement" doc="The element representing the Dialog" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing the configuration that should be set for this Dialog. See configuration documentation for more details." ilk="argument" name="userConfig" />
              <variable citdl="Dialog" name="this" />
            </scope>
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the default CSS class used for a Dialog" line="4130" name="CSS_DIALOG" />
            <variable attributes="private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Dialog&apos;s events" line="4139" lineend="4148" name="_EVENT_TYPES">
              <variable citdl="String" line="4141" name="BEFORE_SUBMIT" />
              <variable citdl="String" line="4142" name="SUBMIT" />
              <variable citdl="String" line="4143" name="MANUAL_SUBMIT" />
              <variable citdl="String" line="4144" name="ASYNC_SUBMIT" />
              <variable citdl="String" line="4145" name="FORM_SUBMIT" />
              <variable citdl="String" line="4146" name="CANCEL" />
            </variable>
            <variable attributes="private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the Dialog&apos;s configuration properties" line="4157" lineend="4169" name="_DEFAULT_CONFIG">
              <variable citdl="Object" line="4159" lineend="4162" name="POST_METHOD">
                <variable citdl="String" line="4160" name="key" />
                <variable citdl="String" line="4161" name="value" />
              </variable>
              <variable citdl="Object" line="4164" lineend="4167" name="BUTTONS">
                <variable citdl="String" line="4165" name="key" />
                <variable citdl="String" line="4166" name="value" />
              </variable>
            </variable>
            <scope doc="Initializes the class&apos;s configurable properties which can be changed using the Dialog&apos;s Config object (cfg)." ilk="function" line="4175" lineend="4243" name="initDefaultConfig" signature="initDefaultConfig()">
              <variable citdl="Dialog" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Dialog._DEFAULT_CONFIG" line="4206" name="DEFAULT_CONFIG" />
            </scope>
            <variable citdl="Object" doc="The internally maintained callback object for use with the Connection utility" line="4183" lineend="4202" name="callback">
              <variable citdl="Function" doc="The function to execute upon success of the Connection submission" line="4189" name="success" />
              <variable citdl="Function" doc="The function to execute upon failure of the Connection submission" line="4195" name="failure" />
              <variable citdl="Object" doc="The arbitraty argument or arguments to pass to the Connection callback functions" line="4201" name="argument" />
            </variable>
            <scope doc="Initializes the custom events for Dialog which are fired automatically at appropriate times by the Dialog class." ilk="function" line="4249" lineend="4289" name="initEvents" signature="initEvents()">
              <variable citdl="Dialog" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Dialog._EVENT_TYPES" line="4252" name="EVENT_TYPES" />
            </scope>
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired prior to submission" line="4258" name="beforeSubmitEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired after submission" line="4264" name="submitEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired prior to manual submission" line="4270" name="manualSubmitEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired prior to asynchronous submission" line="4276" name="asyncSubmitEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired prior to form-based submission" line="4282" name="formSubmitEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="CustomEvent fired after cancel" line="4288" name="cancelEvent" />
            <scope doc="The Dialog initialization method, which is executed for Dialog and all of its subclasses. This method is automatically called by the constructor, and  sets up all DOM references for pre-existing markup, and creates required markup if it is not already present." ilk="function" line="4298" lineend="4324" name="init" signature="init(el, userConfig)">
              <variable citdl="HTMLElement" doc="The element representing the Dialog" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing the configuration that should be set for this Dialog. See configuration documentation for more details." ilk="argument" name="userConfig" />
              <variable citdl="Dialog" name="this" />
            </scope>
            <scope doc="Performs the submission of the Dialog form depending on the value of &quot;postmethod&quot; property." ilk="function" line="4330" lineend="4349" name="doSubmit" signature="doSubmit()">
              <variable citdl="Dialog" name="this" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="4331" name="pm" />
              <variable attributes="__local__ private" citdl="this.form.getAttribute()" line="4334" name="method" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Connect.asyncRequest()" line="4337" name="cObj" />
            </scope>
            <scope doc="&quot;keydown&quot; event handler for the dialog&apos;s form." ilk="function" line="4358" lineend="4383" name="_onFormKeyDown" signature="_onFormKeyDown(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object passed&#xA;back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
              <variable citdl="Dialog" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getCharCode()" line="4361" name="nCharCode" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="4361" name="oTarget" />
              <variable attributes="__local__ private" citdl="oTarget.type" line="4369" name="sType" />
            </scope>
            <scope doc="Prepares the Dialog&apos;s internal FORM object, creating one if one is not currently present." ilk="function" line="4389" lineend="4449" name="registerForm" signature="registerForm()">
              <variable citdl="Dialog" name="this" />
              <variable attributes="__local__ private" citdl="this.element.getElementsByTagName()[0]" line="4390" name="form" />
              <variable attributes="__local__ private" citdl="String" line="4393" name="formHTML" />
              <variable attributes="__local__ private" citdl="this" line="4433" name="me" />
              <variable attributes="__local__ private" citdl="this.firstFormElement" line="4435" name="firstElement" />
              <variable attributes="__local__ private" citdl="this.lastButton" line="4442" name="lastElement" />
            </scope>
            <variable line="4398" name="firstFormElement" />
            <variable line="4410" name="lastFormElement" />
            <variable citdl="form" line="4422" name="form" />
            <variable citdl="YAHOO.util.KeyListener" line="4437" name="preventBackTab" />
            <variable citdl="YAHOO.util.KeyListener" line="4444" name="preventTabOut" />
            <scope doc="The default event handler fired when the &quot;close&quot; property is changed. The method controls the appending or hiding of the close icon at the top right of the Dialog." ilk="function" line="4460" lineend="4483" name="configClose" signature="configClose(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Dialog" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="4461" name="val" />
              <scope attributes="__local__ private" ilk="function" line="4463" lineend="4465" name="doCancel" signature="doCancel(e, obj)">
                <variable ilk="argument" name="e" />
                <variable ilk="argument" name="obj" />
              </scope>
            </scope>
            <variable citdl="document.createElement()" line="4469" name="close" />
            <variable citdl="String" line="4472" name="innerHTML" />
            <variable citdl="String" line="4476" name="display" />
            <scope doc="The default event handler for the &quot;buttons&quot; configuration property" ilk="function" line="4492" lineend="4542" name="configButtons" signature="configButtons(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Dialog" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="4493" name="buttons" />
              <variable attributes="__local__ private" citdl="buttons[b]" line="4500" name="button" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="4502" name="htmlButton" />
            </scope>
            <variable citdl="document.createElement()" line="4495" name="buttonSpan" />
            <variable citdl="String" line="4497" name="className" />
            <variable citdl="htmlButton" line="4507" name="defaultHtmlButton" />
            <variable citdl="button.htmlButton" line="4517" name="firstButton" />
            <variable citdl="button.htmlButton" line="4521" name="lastButton" />
            <scope doc="The default event handler used to focus the first field of the form when the Dialog is shown." ilk="function" line="4549" lineend="4562" name="focusFirst" signature="focusFirst(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Dialog" name="this" />
              <variable attributes="__local__ private" citdl="args[1]" line="4551" name="e" />
            </scope>
            <scope doc="Sets the focus to the last button in the button or form element in the Dialog" ilk="function" line="4568" lineend="4584" name="focusLast" signature="focusLast(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Dialog" name="this" />
              <variable attributes="__local__ private" citdl="args[1]" line="4570" name="e" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="4576" name="buttons" />
            </scope>
            <scope doc="Sets the focus to the button that is designated as the default. By default, his handler is executed when the show event is fired." ilk="function" line="4590" lineend="4594" name="focusDefaultButton" signature="focusDefaultButton()">
              <variable citdl="Dialog" name="this" />
            </scope>
            <scope doc="Blurs all the html buttons" ilk="function" line="4600" lineend="4608" name="blurButtons" signature="blurButtons()">
              <variable citdl="Dialog" name="this" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="4601" name="buttons" />
              <variable attributes="__local__ private" citdl="buttons[0].htmlButton" line="4603" name="html" />
            </scope>
            <scope doc="Sets the focus to the first button in the button list" ilk="function" line="4614" lineend="4622" name="focusFirstButton" signature="focusFirstButton()">
              <variable citdl="Dialog" name="this" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="4615" name="buttons" />
              <variable attributes="__local__ private" citdl="buttons[0].htmlButton" line="4617" name="html" />
            </scope>
            <scope doc="Sets the focus to the first button in the button list" ilk="function" line="4628" lineend="4636" name="focusLastButton" signature="focusLastButton()">
              <variable citdl="Dialog" name="this" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="4629" name="buttons" />
              <variable attributes="__local__ private" citdl="buttons[buttons.length-1].htmlButton" line="4631" name="html" />
            </scope>
            <scope doc="The default event handler for the &quot;postmethod&quot; configuration property" ilk="function" line="4645" lineend="4654" name="configPostMethod" signature="configPostMethod(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Dialog" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="4646" name="postmethod" />
            </scope>
            <scope doc="Built-in function hook for writing a validation function that will be checked for a &quot;true&quot; value prior to a submit. This function, as implemented by default, always returns true, so it should be overridden if validation is necessary." ilk="function" line="4662" lineend="4664" name="validate" returns="Boolean" signature="validate()">
              <variable citdl="Dialog" name="this" />
            </scope>
            <scope doc="Executes a submit of the Dialog followed by a hide, if validation is successful." ilk="function" line="4670" lineend="4680" name="submit" returns="Boolean" signature="submit()">
              <variable citdl="Dialog" name="this" />
            </scope>
            <scope doc="Executes the cancel of the Dialog followed by a hide." ilk="function" line="4686" lineend="4689" name="cancel" signature="cancel()">
              <variable citdl="Dialog" name="this" />
            </scope>
            <scope doc="Returns a JSON-compatible data structure representing the data currently contained in the form." ilk="function" line="4696" lineend="4869" name="getData" returns="Object" signature="getData()">
              <variable citdl="Dialog" name="this" />
              <variable attributes="__local__ private" citdl="this.form" line="4698" name="oForm" />
              <variable attributes="__local__ private" citdl="aElements.length" line="4704" name="nTotalElements" />
              <variable attributes="__local__ private" citdl="Object" line="4704" lineend="4704" name="oData" />
              <variable attributes="__local__ private" citdl="oForm.elements" line="4704" name="aElements" />
              <variable attributes="__local__ private" citdl="aElements[i].name" line="4705" name="sName" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getElementsBy()" line="4706" name="oElement" />
              <variable attributes="__local__ private" citdl="oElement.length" line="4707" name="nElements" />
              <scope attributes="__local__ private" ilk="function" line="4713" lineend="4726" name="isFormElement" signature="isFormElement(p_oElement)">
                <variable ilk="argument" name="p_oElement" />
                <variable attributes="__local__ private" citdl="p_oElement.tagName.toUpperCase()" line="4715" name="sTagName" />
              </scope>
              <variable attributes="__local__ private" citdl="oElement.tagName.toUpperCase()" line="4748" name="sTagName" />
              <variable attributes="__local__ private" citdl="oElement.type" line="4748" name="sType" />
              <variable attributes="__local__ private" citdl="oOption.value" line="4779" name="sValue" />
              <variable attributes="__local__ private" citdl="aOptions[n]" line="4779" name="oOption" />
              <variable attributes="__local__ private" citdl="aOptions.length" line="4779" name="nOptions" />
              <variable attributes="__local__ private" citdl="oElement.options" line="4779" name="aOptions" />
              <variable attributes="__local__ private" citdl="Array" line="4779" name="aValues" />
              <variable attributes="__local__ private" citdl="oElement[n]" line="4818" name="oRadio" />
              <variable attributes="__local__ private" citdl="oElement[n]" line="4838" name="oCheckbox" />
            </scope>
            <scope doc="Removes the Panel element from the DOM and sets all child elements to null." ilk="function" line="4875" lineend="4913" name="destroy" signature="destroy()">
              <variable citdl="Dialog" name="this" />
              <variable attributes="__local__ private" citdl="this.form" line="4879" name="oForm" />
              <variable attributes="__local__ private" citdl="this.footer" line="4879" name="oFooter" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="4879" name="Event" />
              <variable attributes="__local__ private" citdl="oFooter.getElementsByTagName()" line="4883" name="aButtons" />
              <variable attributes="__local__ private" citdl="aButtons.length" line="4887" name="i" />
            </scope>
            <scope doc="Returns a string representation of the object." ilk="function" line="4920" lineend="4922" name="toString" returns="String" signature="toString()">
              <variable citdl="Dialog" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="4235" lineend="4249" name="Column">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Column class defines and manages attributes of DataTable Columns" ilk="function" line="4235" lineend="4249" name="Column" signature="Column(oConfigs)">
              <variable citdl="Object" doc="Object literal of configuration values." ilk="argument" name="oConfigs" />
              <variable citdl="Column" name="this" />
            </scope>
            <variable citdl="String" line="4237" name="_id" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: Internal instance counter." line="4265" name="_nCount" />
            <scope doc="Public accessor returns Column&apos;s ID string." ilk="function" line="4495" lineend="4497" name="getId" returns="String" signature="getId()">
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Public accessor returns Column&apos;s index within its ColumnSet&apos;s key array, or&#xA;null if not applicable." ilk="function" line="4506" lineend="4508" name="getIndex" returns="Number" signature="getIndex()">
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Public accessor returns Column&apos;s colspan number." ilk="function" line="4516" lineend="4518" name="getColSpan" returns="Number" signature="getColSpan()">
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Public accessor returns Column&apos;s rowspan number." ilk="function" line="4526" lineend="4528" name="getRowSpan" returns="Number" signature="getRowSpan()">
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Outputs markup into the given TD based on given Record." ilk="function" line="4539" lineend="4593" name="format" returns="HTML" signature="format(elCell, oRecord)">
              <variable citdl="HTMLElement" doc="TD to format for display." ilk="argument" name="elCell" />
              <variable citdl="YAHOO.widget.Record" doc="Record that holds data for the row." ilk="argument" name="oRecord" />
              <variable citdl="Column" name="this" />
              <variable attributes="__local__ private" line="4540" name="oData" />
              <variable attributes="__local__ private" citdl="this.type" line="4545" name="type" />
              <variable attributes="__local__ private" citdl="String" line="4546" name="markup" />
              <variable attributes="__local__ private" citdl="String" line="4547" name="classname" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Formats cells in Columns of type &quot;checkbox&quot;." ilk="function" line="4606" lineend="4611" name="formatCheckbox" signature="formatCheckbox(elCell, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="Table cell element." ilk="argument" name="elCell" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="Data value for the cell, or null" ilk="argument" name="oData" />
              <variable citdl="Column" name="this" />
              <variable attributes="__local__ private" citdl="oData" line="4607" name="bChecked" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Formats cells in Columns of type &quot;currency&quot;. Can be overridden for custom formatting." ilk="function" line="4623" lineend="4647" name="formatCurrency" signature="formatCurrency(elCell, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="Table cell element." ilk="argument" name="elCell" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="Data value for the cell, or null" ilk="argument" name="oData" />
              <variable citdl="Column" name="this" />
              <variable attributes="__local__ private" citdl="oData" line="4625" name="nAmount" />
              <variable attributes="__local__ private" citdl="String" line="4626" name="markup" />
              <variable attributes="__local__ private" citdl="markup.indexOf()" line="4633" name="dotIndex" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Formats cells in Columns of type &quot;date&quot;." ilk="function" line="4659" lineend="4667" name="formatDate" signature="formatDate(elCell, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="Table cell element." ilk="argument" name="elCell" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="Data value for the cell, or null" ilk="argument" name="oData" />
              <variable citdl="Column" name="this" />
              <variable attributes="__local__ private" citdl="oData" line="4660" name="oDate" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Formats cells in Columns of type &quot;email&quot;." ilk="function" line="4679" lineend="4687" name="formatEmail" signature="formatEmail(elCell, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="Table cell element." ilk="argument" name="elCell" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="Data value for the cell, or null" ilk="argument" name="oData" />
              <variable citdl="Column" name="this" />
              <variable attributes="__local__ private" citdl="oData" line="4680" name="sEmail" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Formats cells in Columns of type &quot;link&quot;." ilk="function" line="4699" lineend="4707" name="formatLink" signature="formatLink(elCell, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="Table cell element." ilk="argument" name="elCell" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="Data value for the cell, or null" ilk="argument" name="oData" />
              <variable citdl="Column" name="this" />
              <variable attributes="__local__ private" citdl="oData" line="4700" name="sLink" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Formats cells in Columns of type &quot;number&quot;." ilk="function" line="4719" lineend="4727" name="formatNumber" signature="formatNumber(elCell, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="Table cell element." ilk="argument" name="elCell" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="Data value for the cell, or null" ilk="argument" name="oData" />
              <variable citdl="Column" name="this" />
              <variable attributes="__local__ private" citdl="oData" line="4720" name="nNumber" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Formats cells in Columns of type &quot;select&quot;." ilk="function" line="4739" lineend="4761" name="formatSelect" signature="formatSelect(elCell, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="Table cell element." ilk="argument" name="elCell" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="Data value for the cell, or null" ilk="argument" name="oData" />
              <variable citdl="Column" name="this" />
              <variable attributes="__local__ private" citdl="oData" line="4740" name="selectedValue" />
              <variable attributes="__local__ private" citdl="oColumn.selectOptions" line="4741" name="options" />
              <variable attributes="__local__ private" citdl="String" line="4743" name="markup" />
              <variable attributes="__local__ private" citdl="options[i]" line="4746" name="option" />
            </scope>
            <scope doc="Takes innerHTML from TD and parses out data for storage in RecordSet." ilk="function" line="4770" lineend="4800" name="parse" returns="Object" signature="parse(sMarkup)">
              <variable citdl="String" doc="The TD&apos;s innerHTML value." ilk="argument" name="sMarkup" />
              <variable citdl="Column" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Column.parseCheckbox()" line="4775" name="data" />
            </scope>
            <scope doc="Default parse function for Columns of type &quot;checkbox&quot; takes markup and&#xA;extracts data. Can be overridden for custom parsing." ilk="function" line="4810" lineend="4812" name="parseCheckbox" returns="bChecked" signature="parseCheckbox(sMarkup)">
              <variable ilk="argument" name="sMarkup" />
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Default parse function for Columns of type &quot;currency&quot; takes markup and&#xA;extracts data. Can be overridden for custom parsing." ilk="function" line="4822" lineend="4824" name="parseCurrency" returns="nAmount" signature="parseCurrency(sMarkup)">
              <variable ilk="argument" name="sMarkup" />
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Default parse function for Columns of type &quot;date&quot; takes markup and extracts&#xA;data. Can be overridden for custom parsing." ilk="function" line="4834" lineend="4840" name="parseDate" returns="oDate" signature="parseDate(sMarkup)">
              <variable ilk="argument" name="sMarkup" />
              <variable citdl="Column" name="this" />
              <variable attributes="__local__ private" citdl="sMarkup.substring()" line="4835" name="mm" />
              <variable attributes="__local__ private" citdl="sMarkup.substring()" line="4837" name="dd" />
              <variable attributes="__local__ private" citdl="sMarkup.substring()" line="4838" name="yy" />
            </scope>
            <scope doc="Default parse function for Columns of type &quot;number&quot; takes markup and extracts&#xA;data. Can be overridden for custom parsing." ilk="function" line="4850" lineend="4852" name="parseNumber" returns="nNumber" signature="parseNumber(sMarkup)">
              <variable ilk="argument" name="sMarkup" />
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Default parse function for Columns of type &quot;select&quot; takes markup and extracts&#xA;data. Can be overridden for custom parsing." ilk="function" line="4862" lineend="4864" name="parseSelect" returns="sValue" signature="parseSelect(sMarkup)">
              <variable ilk="argument" name="sMarkup" />
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Outputs editor markup into the given TD based on given Record." ilk="function" line="4874" lineend="4886" name="getEditor" returns="oEditor" signature="getEditor(elCell, oRecord)">
              <variable citdl="HTMLElement" doc="The cell to edit." ilk="argument" name="elCell" />
              <variable citdl="YAHOO.widget.Record" doc="The DataTable Record of the cell." ilk="argument" name="oRecord" />
              <variable citdl="Column" name="this" />
              <variable attributes="__local__ private" citdl="this.editor" line="4876" name="oEditor" />
            </scope>
            <variable citdl="oEditor" line="4880" name="editor" />
          </scope>
          <variable citdl="YAHOO.widget.CalendarGroup" line="4530" name="CalGrp" />
          <scope ilk="class" line="4537" lineend="4539" name="Calendar2up">
            <scope attributes="__ctor__ deprecated" ilk="function" line="4537" lineend="4539" name="Calendar2up" signature="Calendar2up(id, containerId, config)">
              <variable ilk="argument" name="id" />
              <variable ilk="argument" name="containerId" />
              <variable ilk="argument" name="config" />
              <variable citdl="Calendar2up" name="this" />
            </scope>
          </scope>
          <variable attributes="deprecated" citdl="YAHOO.widget.Calendar2up" line="4546" name="Cal2up" />
          <scope ilk="class" line="4904" lineend="4936" name="ColumnEditor">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The ColumnEditor defines and manages inline editing functionality for a&#xA;DataTable Column." ilk="function" line="4904" lineend="4936" name="ColumnEditor" signature="ColumnEditor(sType)">
              <variable ilk="argument" name="sType" />
              <variable citdl="ColumnEditor" name="this" />
              <variable attributes="__local__ private" citdl="document.body.appendChild()" line="4917" name="container">
                <variable citdl="Object" line="4918" name="style">
                  <variable citdl="String" line="4918" name="position" />
                  <variable citdl="Number" line="4919" name="zIndex" />
                </variable>
              </variable>
            </scope>
            <variable citdl="sType" line="4905" name="type" />
            <variable citdl="container" line="4922" name="container" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: Internal instance counter." line="4954" name="_nCount" />
            <scope doc="Shows ColumnEditor." ilk="function" line="5010" lineend="5024" name="show" signature="show(elCell, oRecord, oColumn)">
              <variable citdl="HTMLElement" doc="The cell to edit." ilk="argument" name="elCell" />
              <variable citdl="YAHOO.widget.Record" doc="The DataTable Record of the cell." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="The DataTable Column of the cell." ilk="argument" name="oColumn" />
              <variable citdl="ColumnEditor" name="this" />
            </scope>
            <variable citdl="elCell" line="5011" name="cell" />
            <variable citdl="oRecord" line="5012" name="record" />
            <variable citdl="oColumn" line="5013" name="column" />
            <scope doc="Positions container over given element, aligning upper-left corners." ilk="function" line="5032" lineend="5051" name="moveContainerTo" signature="moveContainerTo(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="ColumnEditor" name="this" />
              <variable attributes="__local__ private" citdl="el.offsetTop" line="5033" name="y" />
              <variable attributes="__local__ private" citdl="el.offsetLeft" line="5033" name="x" />
            </scope>
            <variable citdl="x" line="5049" name="left" />
            <variable citdl="y" line="5050" name="top" />
            <scope doc="Returns ColumnEditor data value." ilk="function" line="5060" lineend="5073" name="getValue" returns="value" signature="getValue()">
              <variable citdl="ColumnEditor" name="this" />
              <variable attributes="__local__ private" citdl="this.getTextboxEditorValue()" line="5061" name="value" />
            </scope>
            <scope doc="Creates a textbox editor in the DOM." ilk="function" line="5081" lineend="5086" name="createTextboxEditor" returns="HTML" signature="createTextboxEditor()">
              <variable citdl="ColumnEditor" name="this" />
              <variable attributes="__local__ private" citdl="this.container.appendChild()" line="5082" name="elTextbox" />
            </scope>
            <variable citdl="elTextbox" line="5085" name="input" />
            <scope doc="Creates a textarea editor in the DOM." ilk="function" line="5094" lineend="5097" name="createTextareaEditor" returns="HTML" signature="createTextareaEditor()">
              <variable citdl="ColumnEditor" name="this" />
              <variable attributes="__local__ private" citdl="this.container.appendChild()" line="5095" name="elTextarea" />
            </scope>
            <scope doc="Shows textbox." ilk="function" line="5107" lineend="5123" name="showTextboxEditor" signature="showTextboxEditor(elCell, oRecord, oColumn)">
              <variable citdl="HTMLElement" doc="The cell to edit." ilk="argument" name="elCell" />
              <variable citdl="YAHOO.widget.Record" doc="The DataTable Record of the cell." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="The DataTable Column of the cell." ilk="argument" name="oColumn" />
              <variable citdl="ColumnEditor" name="this" />
            </scope>
            <variable line="5112" name="width" />
            <variable citdl="Number" line="5113" name="height" />
            <variable citdl="elCell.innerHTML" line="5114" name="value" />
            <variable citdl="Number" line="5115" name="tabIndex" />
            <variable citdl="String" line="5118" name="display" />
            <scope doc="Shows textarea." ilk="function" line="5133" lineend="5149" name="showTextareaEditor" signature="showTextareaEditor(elCell, oRecord, oColumn)">
              <variable citdl="HTMLElement" doc="The cell to edit." ilk="argument" name="elCell" />
              <variable citdl="YAHOO.widget.Record" doc="The DataTable Record of the cell." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="The DataTable Column of the cell." ilk="argument" name="oColumn" />
              <variable citdl="ColumnEditor" name="this" />
            </scope>
            <scope doc="Hides ColumnEditor" ilk="function" line="5156" lineend="5159" name="hide" signature="hide()">
              <variable citdl="ColumnEditor" name="this" />
            </scope>
            <scope doc="Returns ColumnEditor value" ilk="function" line="5167" lineend="5169" name="getTextboxEditorValue" returns="this.input.value" signature="getTextboxEditorValue()">
              <variable citdl="ColumnEditor" name="this" />
            </scope>
            <scope doc="Returns ColumnEditor value" ilk="function" line="5177" lineend="5179" name="getTextareaEditorValue" returns="this.input.value" signature="getTextareaEditorValue()">
              <variable citdl="ColumnEditor" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="4933" lineend="4935" name="SimpleDialog">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: SimpleDialog is a simple implementation of Dialog that can be used to submit a single value. Forms can be processed in 3 ways -- via an asynchronous Connection utility call, a simple form POST or GET, or manually." ilk="function" line="4933" lineend="4935" name="SimpleDialog" signature="SimpleDialog(el, userConfig)">
              <variable citdl="HTMLElement" doc="The element representing the SimpleDialog" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing the configuration that should be set for this SimpleDialog. See configuration documentation for more details." ilk="argument" name="userConfig" />
              <variable citdl="SimpleDialog" name="this" />
            </scope>
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant for the standard network icon for a blocking action" line="4946" name="ICON_BLOCK" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant for the standard network icon for alarm" line="4955" name="ICON_ALARM" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant for the standard network icon for help" line="4964" name="ICON_HELP" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant for the standard network icon for info" line="4973" name="ICON_INFO" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant for the standard network icon for warn" line="4982" name="ICON_WARN" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant for the standard network icon for a tip" line="4991" name="ICON_TIP" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the default CSS class used for a SimpleDialog" line="5000" name="CSS_SIMPLEDIALOG" />
            <variable attributes="private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the SimpleDialog&apos;s configuration properties" line="5009" lineend="5024" name="_DEFAULT_CONFIG">
              <variable citdl="Object" line="5011" lineend="5015" name="ICON">
                <variable citdl="String" line="5012" name="key" />
                <variable citdl="String" line="5013" name="value" />
                <variable citdl="Boolean" line="5014" name="suppressEvent" />
              </variable>
              <variable citdl="Object" line="5017" lineend="5022" name="TEXT">
                <variable citdl="String" line="5018" name="key" />
                <variable citdl="String" line="5019" name="value" />
                <variable citdl="Boolean" line="5020" name="suppressEvent" />
                <variable citdl="Array" line="5021" name="supercedes" />
              </variable>
            </variable>
            <scope doc="Initializes the class&apos;s configurable properties which can be changed using the SimpleDialog&apos;s Config object (cfg)." ilk="function" line="5030" lineend="5068" name="initDefaultConfig" signature="initDefaultConfig()">
              <variable citdl="SimpleDialog" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.SimpleDialog._DEFAULT_CONFIG" line="5035" name="DEFAULT_CONFIG" />
            </scope>
            <scope doc="The SimpleDialog initialization method, which is executed for SimpleDialog and all of its subclasses. This method is automatically called by the constructor, and  sets up all DOM references for pre-existing markup, and creates required markup if it is not already present." ilk="function" line="5078" lineend="5099" name="init" signature="init(el, userConfig)">
              <variable citdl="HTMLElement" doc="The element representing the SimpleDialog" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing the configuration that should be set for this SimpleDialog. See configuration documentation for more details." ilk="argument" name="userConfig" />
              <variable citdl="SimpleDialog" name="this" />
            </scope>
            <scope doc="Prepares the SimpleDialog&apos;s internal FORM object, creating one if one is not currently present, and adding the value hidden field." ilk="function" line="5104" lineend="5107" name="registerForm" signature="registerForm()">
              <variable citdl="SimpleDialog" name="this" />
            </scope>
            <scope doc="Fired when the &quot;icon&quot; property is set." ilk="function" line="5118" lineend="5129" name="configIcon" signature="configIcon(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="SimpleDialog" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="5119" name="icon" />
              <variable attributes="__local__ private" citdl="String" line="5121" name="iconHTML" />
            </scope>
            <variable citdl="iconHTML" line="5127" name="innerHTML" />
            <scope doc="Fired when the &quot;text&quot; property is set." ilk="function" line="5138" lineend="5144" name="configText" signature="configText(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="SimpleDialog" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="5139" name="text" />
            </scope>
            <scope doc="Returns a string representation of the object." ilk="function" line="5152" lineend="5154" name="toString" returns="String" signature="toString()">
              <variable citdl="SimpleDialog" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="5419" lineend="5447" name="RecordSet">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A RecordSet defines and manages a set of Records." ilk="function" line="5419" lineend="5447" name="RecordSet" signature="RecordSet(data)">
              <variable citdl="{Object" doc="|| Object[]} An object literal or an array of data." ilk="argument" name="data" />
              <variable citdl="RecordSet" name="this" />
            </scope>
            <variable citdl="YAHOO.widget.RecordSet._nCount" line="5421" name="_nIndex" />
            <variable citdl="Array" line="5422" name="_records" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Internal class variable to index multiple data table instances." line="5468" name="_nCount" />
            <scope doc="Public accessor to the unique name of the RecordSet instance." ilk="function" line="5505" lineend="5507" name="toString" returns="String" signature="toString()">
              <variable citdl="RecordSet" name="this" />
            </scope>
            <scope doc="Returns the number of non-null records in the sparse RecordSet" ilk="function" line="5515" lineend="5517" name="getLength" returns="Number" signature="getLength()">
              <variable citdl="RecordSet" name="this" />
            </scope>
            <scope doc="Returns record with given name, at the given index, or null." ilk="function" line="5526" lineend="5539" name="getRecord" returns="Object" signature="getRecord(identifier)">
              <variable citdl="{String" doc="|| Number} Record ID or record index" ilk="argument" name="identifier" />
              <variable citdl="RecordSet" name="this" />
            </scope>
            <scope doc="Returns an array of Records from the RecordSet." ilk="function" line="5550" lineend="5558" name="getRecords" returns="Array" signature="getRecords(i, range)">
              <variable citdl="Number" doc="(optional) Index of which record to start at" ilk="argument" name="i" />
              <variable citdl="Number" doc="(optional) Number of records to get" ilk="argument" name="range" />
              <variable citdl="RecordSet" name="this" />
            </scope>
            <scope doc="Returns index for the given record." ilk="function" line="5603" lineend="5607" name="updateRecord" returns="YAHOO.widget.Record" signature="updateRecord(oRecord, sKey, oData)">
              <variable citdl="YAHOO.widget.Record" doc="A Record instance." ilk="argument" name="oRecord" />
              <variable citdl="String" doc="Key." ilk="argument" name="sKey" />
              <variable citdl="{Object)" doc="New data." ilk="argument" name="oData" />
              <variable citdl="RecordSet" name="this" />
              <variable attributes="__local__ private" citdl="oRecord[sKey]" line="5604" name="oldData" />
            </scope>
            <scope doc="Adds one Record to the RecordSet at the given index. If index is null,&#xA;then adds the Record to the end of the RecordSet." ilk="function" line="5618" lineend="5633" name="addRecord" returns="YAHOO.widget.Record" signature="addRecord(oObjectLiteral, index)">
              <variable citdl="Object" doc="An object literal of data." ilk="argument" name="oObjectLiteral" />
              <variable citdl="Number" doc="(optional) Position index." ilk="argument" name="index" />
              <variable citdl="RecordSet" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Record" line="5620" name="oRecord" />
            </scope>
            <scope doc="Adds multiple Records to the RecordSet at the given index. If index is null,&#xA;then adds the Records to the end of the RecordSet." ilk="function" line="5644" lineend="5660" name="addRecords" returns="YAHOO.widget.Record" signature="addRecords(data, index)">
              <variable citdl="Array" doc="An array of object literal data." ilk="argument" name="data" />
              <variable citdl="Number" doc="(optional) Position index." ilk="argument" name="index" />
              <variable citdl="RecordSet" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="5646" name="newRecords" />
              <variable attributes="__local__ private" citdl="this.addRecord()" line="5649" name="record" />
            </scope>
            <scope doc="Convenience method to append the given data to the end of the RecordSet." ilk="function" line="5669" lineend="5687" name="append" returns="YAHOO.widget.Record" signature="append(data)">
              <variable citdl="{Object" doc="|| Object[]} An object literal or array of data." ilk="argument" name="data" />
              <variable citdl="RecordSet" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="5671" name="newRecords" />
              <variable attributes="__local__ private" citdl="this.addRecord()" line="5674" name="record" />
            </scope>
            <scope doc="Convenience method to insert the given data into the beginning of the RecordSet." ilk="function" line="5696" lineend="5712" name="insert" returns="YAHOO.widget.Record" signature="insert(data)">
              <variable citdl="{Object" doc="|| Object[]} An object literal or array of data." ilk="argument" name="data" />
              <variable citdl="RecordSet" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="5698" name="newRecords" />
              <variable attributes="__local__ private" citdl="this.addRecord()" line="5701" name="record" />
            </scope>
            <scope doc="Replaces all Records in RecordSet with new data." ilk="function" line="5721" lineend="5729" name="replace" returns="YAHOO.widget.Record" signature="replace(data)">
              <variable citdl="{Object" doc="|| Object[]} An object literal or array or data." ilk="argument" name="data" />
              <variable citdl="RecordSet" name="this" />
            </scope>
            <scope doc="Sorts RecordSet by given function." ilk="function" line="5738" lineend="5740" name="sort" returns="Array" signature="sort(fnSort)">
              <variable citdl="Function" doc="Reference to a sort function." ilk="argument" name="fnSort" />
              <variable citdl="RecordSet" name="this" />
            </scope>
            <scope doc="Removes the record at the given index from the RecordSet. If a range is&#xA;given, starts at the given index and removes all records in the range." ilk="function" line="5751" lineend="5760" name="deleteRecord" signature="deleteRecord(i, range)">
              <variable citdl="Number" doc="Record index" ilk="argument" name="i" />
              <variable citdl="Number" doc="(optional) Range of records to remove, or null." ilk="argument" name="range" />
              <variable citdl="RecordSet" name="this" />
            </scope>
            <variable citdl="this._length" line="5758" name="_length" />
            <scope doc="Removes all Records from the RecordSet." ilk="function" line="5767" lineend="5770" name="reset" signature="reset()">
              <variable citdl="RecordSet" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="5784" lineend="5792" name="Record">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Record class defines a DataTable record." ilk="function" line="5784" lineend="5792" name="Record" signature="Record(oLiteral)">
              <variable ilk="argument" name="oLiteral" />
              <variable citdl="Record" name="this" />
            </scope>
            <variable citdl="String" line="5789" name="yuiRecordId" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Internal class variable to index multiple data table instances." line="5808" name="_nCount" />
          </scope>
          <scope classrefs="YAHOO.widget.Menu" ilk="class" line="7579" lineend="7587" name="ContextMenu">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Creates a list of options or commands which are made visible in response to&#xA;an HTML element&apos;s &quot;contextmenu&quot; event (&quot;mousedown&quot; for Opera)." ilk="function" line="7579" lineend="7587" name="ContextMenu" signature="ContextMenu(p_oElement, p_oConfig)">
              <variable citdl="String" doc="String specifying the id attribute of the&#xA;&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for the&#xA;context menu." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying the&#xA;configuration for the context menu. See configuration class documentation&#xA;for more details." ilk="argument" name="p_oConfig" />
              <variable citdl="ContextMenu" name="this" />
            </scope>
            <variable attributes="private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the ContextMenu&apos;s events" line="7597" lineend="7607" name="_EVENT_TYPES">
              <variable citdl="String" line="7599" name="TRIGGER_CONTEXT_MENU" />
              <variable line="7603" name="CONTEXT_MENU" />
              <variable citdl="String" line="7605" name="CLICK" />
            </variable>
            <variable attributes="private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the ContextMenu&apos;s configuration properties" line="7617" lineend="7623" name="_DEFAULT_CONFIG">
              <variable citdl="Object" line="7619" lineend="7621" name="TRIGGER">
                <variable citdl="String" line="7620" name="key" />
              </variable>
            </variable>
            <variable attributes="private" citdl="String" doc="PRIVATE: Object reference to the current value of the &quot;trigger&quot;&#xA;configuration property." line="7642" name="_oTrigger" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Boolean indicating if the display of the context menu should&#xA;be cancelled." line="7653" name="_bCancelled" />
            <variable citdl="HTMLElement" doc="Object reference for the HTML element that was the target of the&#xA;&quot;contextmenu&quot; DOM event (&quot;mousedown&quot; for Opera) that triggered the display of&#xA;the context menu." line="7669" name="contextEventTarget" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Custom Event wrapper for the &quot;contextmenu&quot; DOM event&#xA;(&quot;mousedown&quot; for Opera) fired by the element(s) that trigger the display of&#xA;the context menu." line="7682" name="triggerContextMenuEvent" />
            <scope doc="The ContextMenu class&apos;s initialization method. This method is&#xA;automatically called by the constructor, and sets up all DOM references for&#xA;pre-existing markup, and creates required markup if it is not already present." ilk="function" line="7707" lineend="7733" name="init" signature="init(p_oElement, p_oConfig)">
              <variable citdl="String" doc="String specifying the id attribute of the&#xA;&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for&#xA;the context menu." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying the&#xA;configuration for the context menu. See configuration class documentation&#xA;for more details." ilk="argument" name="p_oConfig" />
            </scope>
            <variable citdl="YAHOO.widget.ContextMenuItem" line="7711" name="ITEM_TYPE" />
            <scope doc="Initializes the custom events for the context menu." ilk="function" line="7740" lineend="7753" name="initEvents" signature="initEvents()" />
            <scope doc="Cancels the display of the context menu." ilk="function" line="7760" lineend="7764" name="cancel" signature="cancel()" />
            <scope attributes="private" doc="PRIVATE: Removes all of the DOM event handlers from the HTML element(s)&#xA;whose &quot;context menu&quot; event (&quot;click&quot; for Opera) trigger the display of&#xA;the context menu." ilk="function" line="7778" lineend="7806" name="_removeEventHandlers" signature="_removeEventHandlers()">
              <variable attributes="__local__ private" citdl="this._oTrigger" line="7781" name="oTrigger" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="7781" name="Event" />
            </scope>
            <scope attributes="private" doc="PRIVATE: &quot;click&quot; event handler for the HTML element(s) identified as the&#xA;&quot;trigger&quot; for the context menu.  Used to cancel default behaviors in Opera." ilk="function" line="7823" lineend="7831" name="_onTriggerClick" signature="_onTriggerClick(p_oEvent, p_oMenu)">
              <variable citdl="Event" doc="Object representing the DOM event object passed back&#xA;by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
              <variable citdl="YAHOO.widget.ContextMenu" doc="Object representing the context&#xA;menu that is handling the event." ilk="argument" name="p_oMenu" />
            </scope>
            <scope attributes="private" doc="PRIVATE: &quot;contextmenu&quot; event handler (&quot;mousedown&quot; for Opera) for the HTML&#xA;element(s) that trigger the display of the context menu." ilk="function" line="7844" lineend="7886" name="_onTriggerContextMenu" signature="_onTriggerContextMenu(p_oEvent, p_oMenu)">
              <variable citdl="Event" doc="Object representing the DOM event object passed back&#xA;by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
              <variable citdl="YAHOO.widget.ContextMenu" doc="Object representing the context&#xA;menu that is handling the event." ilk="argument" name="p_oMenu" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="7846" name="Event" />
            </scope>
            <scope doc="Returns a string representing the context menu." ilk="function" line="7898" lineend="7911" name="toString" returns="String" signature="toString()">
              <variable attributes="__local__ private" citdl="String" line="7901" name="sReturnVal" />
              <variable attributes="__local__ private" citdl="this.id" line="7901" name="sId" />
            </scope>
            <scope doc="Initializes the class&apos;s configurable properties which can be&#xA;changed using the context menu&apos;s Config object (&quot;cfg&quot;)." ilk="function" line="7919" lineend="7938" name="initDefaultConfig" signature="initDefaultConfig()" />
            <scope doc="Removes the context menu&apos;s &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element&#xA;(and accompanying child nodes) from the document." ilk="function" line="7946" lineend="7957" name="destroy" signature="destroy()" />
            <scope doc="Event handler for when the value of the &quot;trigger&quot; configuration&#xA;property changes." ilk="function" line="7974" lineend="8033" name="configTrigger" signature="configTrigger(p_sType, p_aArgs, p_oMenu)">
              <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.ContextMenu" doc="Object representing the context&#xA;menu that fired the event." ilk="argument" name="p_oMenu" />
              <variable attributes="__local__ private" citdl="p_aArgs[0]" line="7977" name="oTrigger" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="7977" name="Event" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.widget.MenuItem" ilk="class" line="8060" lineend="8068" name="ContextMenuItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Creates an item for a context menu." ilk="function" line="8060" lineend="8068" name="ContextMenuItem" signature="ContextMenuItem(p_oObject, p_oConfig)">
              <variable citdl="String" doc="String specifying the text of the context menu item." ilk="argument" name="p_oObject" />
              <variable citdl="Object" doc="Optional. Object literal specifying the&#xA;configuration for the context menu item. See configuration class&#xA;documentation for more details." ilk="argument" name="p_oConfig" />
              <variable citdl="ContextMenuItem" name="this" />
            </scope>
            <scope doc="The ContextMenuItem class&apos;s initialization method. This method&#xA;is automatically called by the constructor, and sets up all DOM references&#xA;for pre-existing markup, and creates required markup if it is not&#xA;already present." ilk="function" line="8094" lineend="8122" name="init" signature="init(p_oObject, p_oConfig)">
              <variable citdl="String" doc="String specifying the text of the context menu item." ilk="argument" name="p_oObject" />
              <variable citdl="Object" doc="Optional. Object literal specifying the&#xA;configuration for the context menu item. See configuration class&#xA;documentation for more details." ilk="argument" name="p_oConfig" />
              <variable attributes="__local__ private" citdl="this.cfg" line="8112" name="oConfig" />
            </scope>
            <variable citdl="YAHOO.widget.ContextMenu" line="8098" name="SUBMENU_TYPE" />
            <scope doc="Returns a string representing the context menu item." ilk="function" line="8134" lineend="8146" name="toString" returns="String" signature="toString()">
              <variable attributes="__local__ private" citdl="String" line="8136" name="sReturnVal" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.widget.Menu" ilk="class" line="8175" lineend="8183" name="MenuBar">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Horizontal collection of items, each of which can contain a submenu." ilk="function" line="8175" lineend="8183" name="MenuBar" signature="MenuBar(p_oElement, p_oConfig)">
              <variable citdl="String" doc="String specifying the id attribute of the&#xA;&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for the&#xA;menu bar." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying the&#xA;configuration for the menu bar. See configuration class documentation for&#xA;more details." ilk="argument" name="p_oConfig" />
              <variable citdl="MenuBar" name="this" />
            </scope>
            <variable attributes="private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the MenuBar&apos;s configuration properties" line="8193" lineend="8213" name="_DEFAULT_CONFIG">
              <variable citdl="Object" line="8195" lineend="8200" name="POSITION">
                <variable citdl="String" line="8196" name="key" />
                <variable citdl="String" line="8197" name="value" />
                <variable citdl="YAHOO.widget.Menu._checkPosition" line="8198" name="validator" />
                <variable citdl="Array" line="8199" name="supercedes" />
              </variable>
              <variable citdl="Object" line="8202" lineend="8205" name="SUBMENU_ALIGNMENT">
                <variable citdl="String" line="8203" name="key" />
                <variable citdl="Array" line="8204" name="value" />
              </variable>
              <variable citdl="Object" line="8207" lineend="8211" name="AUTO_SUBMENU_DISPLAY">
                <variable citdl="String" line="8208" name="key" />
                <variable citdl="Boolean" line="8209" name="value" />
                <variable citdl="YAHOO.lang.isBoolean" line="8210" name="validator" />
              </variable>
            </variable>
            <scope doc="The MenuBar class&apos;s initialization method. This method is&#xA;automatically called by the constructor, and sets up all DOM references for&#xA;pre-existing markup, and creates required markup if it is not already present." ilk="function" line="8240" lineend="8265" name="init" signature="init(p_oElement, p_oConfig)">
              <variable citdl="String" doc="String specifying the id attribute of the&#xA;&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for the&#xA;menu bar." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying the&#xA;configuration for the menu bar. See configuration class documentation for&#xA;more details." ilk="argument" name="p_oConfig" />
            </scope>
            <variable citdl="YAHOO.widget.MenuBarItem" line="8244" name="ITEM_TYPE" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: String representing the CSS class(es) to be applied to the menu&#xA;bar&apos;s &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element." line="8280" name="CSS_CLASS_NAME" />
            <scope attributes="private" doc="PRIVATE: &quot;keydown&quot; Custom Event handler for the menu bar." ilk="function" line="8297" lineend="8416" name="_onKeyDown" signature="_onKeyDown(p_sType, p_aArgs, p_oMenuBar)">
              <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuBar" doc="Object representing the menu bar&#xA;that fired the event." ilk="argument" name="p_oMenuBar" />
              <variable attributes="__local__ private" citdl="p_aArgs[1]" line="8302" name="oItem" />
              <variable attributes="__local__ private" citdl="p_aArgs[0]" line="8302" name="oEvent" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="8302" name="Event" />
              <variable attributes="__local__ private" citdl="oNextItem.cfg.getProperty()" line="8302" name="oSubmenu" />
              <variable attributes="__local__ private" citdl="oItem.cfg" line="8307" name="oItemCfg" />
              <variable attributes="__local__ private" line="8324" name="oNextItem" />
            </scope>
            <scope doc="&quot;click&quot; event handler for the menu bar." ilk="function" line="8429" lineend="8487" name="_onClick" signature="_onClick(p_sType, p_aArgs, p_oMenuBar)">
              <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuBar" doc="Object representing the menu bar&#xA;that fired the event." ilk="argument" name="p_oMenuBar" />
              <variable attributes="__local__ private" citdl="p_aArgs[1]" line="8439" name="oItem" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="8450" name="Dom" />
              <variable attributes="__local__ private" citdl="this.activeItem" line="8450" name="oActiveItem" />
              <variable attributes="__local__ private" citdl="this.cfg" line="8450" name="oConfig" />
              <variable attributes="__local__ private" citdl="Event.getTarget()" line="8450" name="oTarget" />
              <variable attributes="__local__ private" citdl="p_aArgs[0]" line="8450" name="oEvent" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="8450" name="Event" />
              <variable attributes="__local__ private" citdl="oItem.cfg.getProperty()" line="8467" name="oSubmenu" />
            </scope>
            <scope doc="Returns a string representing the menu bar." ilk="function" line="8499" lineend="8512" name="toString" returns="String" signature="toString()">
              <variable attributes="__local__ private" citdl="String" line="8502" name="sReturnVal" />
              <variable attributes="__local__ private" citdl="this.id" line="8502" name="sId" />
            </scope>
            <scope doc="Initializes the class&apos;s configurable properties which can be&#xA;changed using the menu bar&apos;s Config object (&quot;cfg&quot;)." ilk="function" line="8520" lineend="8598" name="initDefaultConfig" signature="initDefaultConfig()">
              <variable attributes="__local__ private" citdl="this.cfg" line="8525" name="oConfig" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.MenuBar._DEFAULT_CONFIG" line="8525" name="DEFAULT_CONFIG" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.widget.MenuItem" ilk="class" line="8624" lineend="8632" name="MenuBarItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Creates an item for a menu bar." ilk="function" line="8624" lineend="8632" name="MenuBarItem" signature="MenuBarItem(p_oObject, p_oConfig)">
              <variable citdl="String" doc="String specifying the text of the menu bar item." ilk="argument" name="p_oObject" />
              <variable citdl="Object" doc="Optional. Object literal specifying the&#xA;configuration for the menu bar item. See configuration class documentation&#xA;for more details." ilk="argument" name="p_oConfig" />
              <variable citdl="MenuBarItem" name="this" />
            </scope>
            <scope doc="The MenuBarItem class&apos;s initialization method. This method is&#xA;automatically called by the constructor, and sets up all DOM references for&#xA;pre-existing markup, and creates required markup if it is not already present." ilk="function" line="8656" lineend="8685" name="init" signature="init(p_oObject, p_oConfig)">
              <variable citdl="String" doc="String specifying the text of the menu bar item." ilk="argument" name="p_oObject" />
              <variable citdl="Object" doc="Optional. Object literal specifying the&#xA;configuration for the menu bar item. See configuration class documentation&#xA;for more details." ilk="argument" name="p_oConfig" />
              <variable attributes="__local__ private" citdl="this.cfg" line="8675" name="oConfig" />
            </scope>
            <variable citdl="YAHOO.widget.Menu" line="8660" name="SUBMENU_TYPE" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: String representing the CSS class(es) to be applied to the&#xA;&lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element of the menu bar item." line="8699" name="CSS_CLASS_NAME" />
            <scope doc="Returns a string representing the menu bar item." ilk="function" line="8711" lineend="8723" name="toString" returns="String" signature="toString()">
              <variable attributes="__local__ private" citdl="String" line="8713" name="sReturnVal" />
            </scope>
          </scope>
        </variable>
      </variable>
    </scope>
  </file>
</codeintel>
