<?xml version="1.0" encoding="UTF-8"?>
<codeintel description="Yahoo! User Interface Library - v2.5.2" name="YUI-2.5" version="2.0">
  <file lang="JavaScript" path="yui">
    <scope ilk="blob" lang="JavaScript" name="yui" src="yui">
      <scope attributes="__local__ private" doc="Copyright (c) 2008, Yahoo! Inc. All rights reserved." ilk="function" line="7" lineend="681" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.lang" line="32" name="Lang" />
        <variable attributes="__local__ private" citdl="YAHOO.util.CustomEvent" line="32" name="CustomEvent" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Config" line="32" name="Config">
          <scope attributes="__static__" doc="STATIC: Checks to determine if a particular function/Object pair are already&#xA;subscribed to the specified CustomEvent" ilk="function" line="658" lineend="677" name="alreadySubscribed" returns="Boolean" signature="alreadySubscribed(evt, fn, obj)">
            <variable citdl="YAHOO.util.CustomEvent" doc="The CustomEvent for which to check&#xA;the subscriptions" ilk="argument" name="evt" />
            <variable citdl="Function" doc="The function to look for in the subscribers list" ilk="argument" name="fn" />
            <variable citdl="Object" doc="The execution scope Object for the subscription" ilk="argument" name="obj" />
            <variable citdl="Config" name="this" />
            <variable attributes="__local__ private" citdl="nSubscribers" line="662" name="i" />
            <variable attributes="__local__ private" citdl="evt.subscribers.length" line="662" name="nSubscribers" />
            <variable attributes="__local__ private" citdl="evt.subscribers[i]" line="662" name="subsc" />
          </scope>
        </variable>
      </scope>
      <scope attributes="__local__ private" doc="Copyright (c) 2008, Yahoo! Inc. All rights reserved." ilk="function" line="7" lineend="681" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.lang" line="32" name="Lang" />
        <variable attributes="__local__ private" citdl="YAHOO.util.CustomEvent" line="32" name="CustomEvent" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Config" line="32" name="Config">
          <scope attributes="__static__" doc="STATIC: Checks to determine if a particular function/Object pair are already&#xA;subscribed to the specified CustomEvent" ilk="function" line="658" lineend="677" name="alreadySubscribed" returns="Boolean" signature="alreadySubscribed(evt, fn, obj)">
            <variable citdl="YAHOO.util.CustomEvent" doc="The CustomEvent for which to check&#xA;the subscriptions" ilk="argument" name="evt" />
            <variable citdl="Function" doc="The function to look for in the subscribers list" ilk="argument" name="fn" />
            <variable citdl="Object" doc="The execution scope Object for the subscription" ilk="argument" name="obj" />
            <variable citdl="Config" name="this" />
            <variable attributes="__local__ private" citdl="nSubscribers" line="662" name="i" />
            <variable attributes="__local__ private" citdl="evt.subscribers.length" line="662" name="nSubscribers" />
            <variable attributes="__local__ private" citdl="evt.subscribers[i]" line="662" name="subsc" />
          </scope>
        </variable>
      </scope>
      <scope attributes="__local__ private" doc="Copyright (c) 2008, Yahoo! Inc. All rights reserved." ilk="function" line="7" lineend="1191" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" doc="" line="194" name="Dom" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="195" name="Event" />
        <variable attributes="__local__ private" citdl="YAHOO.tool.Profiler" line="196" name="Profiler" />
        <variable attributes="__local__ private" citdl="YAHOO.widget.ProfilerViewer" line="197" name="PV" />
        <variable attributes="__local__ private" citdl="PV.prototype" line="198" name="proto">
          <scope doc="Refreshes the data displayed in the ProfilerViewer. When called,&#xA;this will invoke a refresh of the DataTable and (if displayed)&#xA;the Chart." ilk="function" line="213" lineend="215" name="refreshData" signature="refreshData()">
            <variable citdl="proto" name="this" />
          </scope>
          <scope doc="Returns the element containing the console&apos;s header." ilk="function" line="223" lineend="225" name="getHeadEl" signature="getHeadEl()">
            <variable citdl="proto" name="this" />
          </scope>
          <scope doc="Returns the element containing the console&apos;s body, including&#xA;the chart and the datatable.." ilk="function" line="234" lineend="236" name="getBodyEl" signature="getBodyEl()">
            <variable citdl="proto" name="this" />
          </scope>
          <scope doc="Returns the element containing the console&apos;s chart." ilk="function" line="244" lineend="246" name="getChartEl" signature="getChartEl()">
            <variable citdl="proto" name="this" />
          </scope>
          <scope doc="Returns the element containing the console&apos;s dataTable." ilk="function" line="254" lineend="256" name="getTableEl" signature="getTableEl()">
            <variable citdl="proto" name="this" />
          </scope>
          <scope doc="Returns the element containing the console&apos;s DataTable&#xA;instance." ilk="function" line="265" lineend="267" name="getDataTable" returns="this._dataTable" signature="getDataTable()">
            <variable citdl="proto" name="this" />
          </scope>
          <scope doc="Returns the element containing the console&apos;s Chart instance." ilk="function" line="275" lineend="277" name="getChart" returns="this._chart" signature="getChart()">
            <variable citdl="proto" name="this" />
          </scope>
          <scope doc="" ilk="function" line="303" lineend="332" name="_init" signature="_init()">
            <variable citdl="proto" name="this" />
          </scope>
          <scope attributes="private" doc="PRIVATE: If no element is passed in, create it as the first element&#xA;in the document." ilk="function" line="341" lineend="348" name="_createProfilerViewerElement" returns="el" signature="_createProfilerViewerElement()">
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="343" name="el" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Provides a readable name for the ProfilerViewer instance." ilk="function" line="356" lineend="358" name="toString" returns="String" signature="toString()">
            <variable citdl="proto" name="this" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Toggles visibility of the viewer canvas." ilk="function" line="366" lineend="370" name="_toggleVisible" signature="_toggleVisible()">
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" line="368" name="newVis" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Shows the viewer canvas." ilk="function" line="378" lineend="413" name="_show" signature="_show()">
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="YAHOO.util.YUILoader" line="382" name="loader" />
            <variable attributes="__local__ private" citdl="Array" line="387" name="modules" />
            <variable attributes="__local__ private" citdl="this.get()" line="398" name="el" />
          </scope>
          <variable citdl="PV.STRINGS.buttons.hideprofiler" line="400" name="innerHTML" />
          <scope attributes="private" doc="PRIVATE: Hides the viewer canvas." ilk="function" line="421" lineend="424" name="_hide" signature="_hide()">
            <variable citdl="proto" name="this" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Render the viewer canvas" ilk="function" line="432" lineend="447" name="_render" signature="_render()">
            <variable citdl="proto" name="this" />
          </scope>
          <variable citdl="Boolean" line="442" name="_rendered" />
          <scope attributes="private" doc="PRIVATE: Set up the DOM structure for the ProfilerViewer launcher." ilk="function" line="454" lineend="487" name="_initLauncherDOM" signature="_initLauncherDOM()">
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this.get()" line="456" name="el" />
            <variable attributes="__local__ private" citdl="PV.STRINGS.buttons" line="463" name="s" />
            <variable attributes="__local__ private" line="464" name="b" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="474" name="title" />
          </scope>
          <variable citdl="document.createElement()" line="460" name="_headEl" />
          <variable citdl="this._createButton()" line="466" name="_toggleVisibleEl" />
          <variable citdl="this._createButton()" line="468" name="_refreshEl" />
          <variable citdl="document.createElement()" line="471" name="_busyEl" />
          <scope attributes="private" doc="PRIVATE: Set up the DOM structure for the ProfilerViewer canvas,&#xA;including the holder for the DataTable." ilk="function" line="495" lineend="504" name="_initViewerDOM" signature="_initViewerDOM()">
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this.get()" line="497" name="el" />
          </scope>
          <variable citdl="document.createElement()" line="498" name="_bodyEl" />
          <variable citdl="document.createElement()" line="500" name="_tableEl" />
          <scope attributes="private" doc="PRIVATE: Set up the DOM structure for the ProfilerViewer canvas." ilk="function" line="511" lineend="536" name="_initChartDOM" signature="_initChartDOM()">
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="516" name="chl" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="519" name="chw" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="527" name="msg" />
          </scope>
          <variable citdl="document.createElement()" line="513" name="_chartContainer" />
          <variable citdl="document.createElement()" line="521" name="_chartLegendEl" />
          <variable citdl="document.createElement()" line="524" name="_chartEl" />
          <scope attributes="private" doc="PRIVATE: Create anchor elements for use as buttons. Args: label&#xA;is text to appear on the face of the button, parentEl&#xA;is the el to which the anchor will be attached, position&#xA;is true for inserting as the first node and false for&#xA;inserting as the last node of the parentEl." ilk="function" line="548" lineend="559" name="_createButton" returns="b" signature="_createButton(label, parentEl, position)">
            <variable ilk="argument" name="label" />
            <variable ilk="argument" name="parentEl" />
            <variable ilk="argument" name="position" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="549" name="b" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Set&apos;s console busy state.&#xA;**/" ilk="function" line="566" lineend="574" name="_setBusyState" signature="_setBusyState(b)">
            <variable ilk="argument" name="b" />
            <variable citdl="proto" name="this" />
          </scope>
          <variable citdl="Boolean" line="569" name="_busy" />
          <scope attributes="private" doc="PRIVATE: Generages a sorting function based on current sortedBy&#xA;values.&#xA;**/" ilk="function" line="582" lineend="592" name="_genSortFunction" signature="_genSortFunction(key, dir)">
            <variable ilk="argument" name="key" />
            <variable ilk="argument" name="dir" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="key" line="583" name="by" />
            <variable attributes="__local__ private" citdl="dir" line="584" name="direction" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Retrieves data from Profiler, filtering and sorting as needed&#xA;based on current widget state.  Adds calculated percentage&#xA;column and function name to data returned by Profiler.&#xA;**/" ilk="function" line="612" lineend="650" name="_getProfilerData" returns="arr" signature="_getProfilerData()">
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="Profiler.getFullReport()" line="614" name="obj" />
            <variable attributes="__local__ private" citdl="Array" line="615" name="arr" />
            <variable attributes="__local__ private" citdl="Number" line="616" name="totalTime" />
            <variable attributes="__local__ private" citdl="obj[name]" line="619" name="r" />
            <variable attributes="__local__ private" citdl="Object" line="620" lineend="620" name="o">
              <variable citdl="name" line="621" name="fn" />
              <variable citdl="r.points.slice()" doc="add function name to record" line="622" name="points" />
              <variable citdl="r.calls" doc="copy live array" line="623" name="calls" />
              <variable citdl="r.min" line="624" name="min" />
              <variable citdl="r.max" line="625" name="max" />
              <variable citdl="r.avg" line="626" name="avg" />
              <variable citdl="_arraySum()" line="627" name="total" />
            </variable>
            <variable attributes="__local__ private" citdl="this.get()" line="629" name="f" />
            <variable attributes="__local__ private" citdl="this.get()" line="642" name="sortedBy" />
            <variable attributes="__local__ private" citdl="sortedBy.key" line="643" name="key" />
            <variable attributes="__local__ private" citdl="sortedBy.dir" line="644" name="dir" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Set up the DataTable." ilk="function" line="657" lineend="741" name="_initDataTable" signature="_initDataTable()">
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this" line="659" name="self" />
            <variable attributes="__local__ private" citdl="this._dataSource" line="672" name="ds">
              <variable citdl="Object" line="675" lineend="677" name="responseSchema">
                <variable citdl="Array" line="676" name="fields" />
              </variable>
            </variable>
            <scope attributes="__local__ private" doc="Set up the DataTable." ilk="function" line="680" lineend="683" name="formatTimeValue" signature="formatTimeValue(elCell, oRecord, oColumn, oData)">
              <variable ilk="argument" name="elCell" />
              <variable ilk="argument" name="oRecord" />
              <variable ilk="argument" name="oColumn" />
              <variable ilk="argument" name="oData" />
              <variable attributes="__local__ private" line="681" name="a" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="685" lineend="688" name="formatPercent" signature="formatPercent(elCell, oRecord, oColumn, oData)">
              <variable ilk="argument" name="elCell" />
              <variable ilk="argument" name="oRecord" />
              <variable ilk="argument" name="oColumn" />
              <variable ilk="argument" name="oData" />
              <variable attributes="__local__ private" line="686" name="a" />
            </scope>
            <variable attributes="__local__ private" citdl="YAHOO.widget.DataTable.CLASS_ASC" line="690" name="a" />
            <variable attributes="__local__ private" citdl="YAHOO.widget.DataTable.CLASS_DESC" line="691" name="d" />
            <variable attributes="__local__ private" citdl="PV.STRINGS.colHeads" line="692" name="c" />
            <variable attributes="__local__ private" citdl="formatTimeValue" line="693" name="f" />
            <variable attributes="__local__ private" citdl="Array" line="696" name="cols" />
            <variable attributes="__local__ private" citdl="this._dataTable" line="734" name="dt" />
          </scope>
          <variable citdl="YAHOO.util.DataSource" doc="the Profiler." line="671" name="_dataSource" />
          <variable citdl="c.fn[0]" line="696" name="label" />
          <variable citdl="String" line="696" name="key" />
          <variable citdl="Boolean" line="696" name="sortable" />
          <variable citdl="Object" line="697" lineend="720" name="sortOptions">
            <variable citdl="a" line="697" name="defaultDir" />
          </variable>
          <variable line="698" name="resizeable" />
          <variable citdl="c.fn[1]" line="699" name="minWidth" />
          <variable citdl="c.calls[1]" line="702" name="width" />
          <variable citdl="f" line="705" name="formatter" />
          <variable citdl="YAHOO.widget.DataTable" line="733" name="_dataTable" />
          <scope attributes="private" doc="PRIVATE: Proxy the sort event in DataTable into the ProfilerViewer&#xA;attribute.&#xA;**/" ilk="function" line="749" lineend="753" name="_sortedByChange" signature="_sortedByChange(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="proto" name="this" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Proxy the render event in DataTable into the ProfilerViewer&#xA;attribute.&#xA;**/" ilk="function" line="761" lineend="763" name="_dataTableRenderHandler" signature="_dataTableRenderHandler(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="proto" name="this" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Event handler for clicks on the DataTable&apos;s sortable column&#xA;heads.&#xA;**/" ilk="function" line="771" lineend="773" name="_thClickHandler" signature="_thClickHandler(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="proto" name="this" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Refresh DataTable, getting new data from Profiler.&#xA;**/" ilk="function" line="780" lineend="783" name="_refreshDataTable" signature="_refreshDataTable(args)">
            <variable ilk="argument" name="args" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this._dataTable" line="781" name="dt" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Refresh chart, getting new data from table.&#xA;**/" ilk="function" line="790" lineend="816" name="_refreshChart" signature="_refreshChart()">
            <variable citdl="proto" name="this" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Get data for the Chart from DataTable recordset" ilk="function" line="823" lineend="830" name="_getChartData" returns="arr" signature="_getChartData()">
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this._dataTable.getRecordSet().getRecords()" line="824" name="records" />
            <variable attributes="__local__ private" citdl="Array" line="825" name="arr" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Build series definition based on current configuration attributes." ilk="function" line="837" lineend="851" name="_getSeriesDef" returns="arr" signature="_getSeriesDef(field)">
            <variable ilk="argument" name="field" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this.get()[field]" line="838" name="sd" />
            <variable attributes="__local__ private" citdl="Array" line="839" name="arr" />
            <variable attributes="__local__ private" citdl="this.get()[sd.group[i]]" line="841" name="c" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Set up the Chart." ilk="function" line="858" lineend="909" name="_initChart" signature="_initChart()">
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this" line="864" name="self" />
            <variable attributes="__local__ private" citdl="YAHOO.util.DataSource" doc="at the top of the sort list in the DataTable." line="878" name="ds">
              <variable citdl="Object" line="881" lineend="883" name="responseSchema">
                <variable citdl="Array" line="882" name="fields" />
              </variable>
            </variable>
          </scope>
          <variable citdl="YAHOO.widget.NumericAxis" doc="Set up the chart itself." line="888" name="_chartAxisDefinitionTime" />
          <variable citdl="String" line="889" name="labelFunction" />
          <variable citdl="YAHOO.widget.NumericAxis" line="891" name="_chartAxisDefinitionPercent" />
          <variable citdl="YAHOO.widget.NumericAxis" line="894" name="_chartAxisDefinitionPlain" />
          <variable citdl="YAHOO.widget.BarChart" line="902" name="_chart" />
          <variable citdl="Boolean" line="905" name="_chartInitialized" />
          <scope attributes="private" doc="PRIVATE: Set up the Chart&apos;s legend&#xA;**/" ilk="function" line="916" lineend="930" name="_drawChartLegend" signature="_drawChartLegend()">
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this.get()" line="917" name="seriesDefs" />
            <variable attributes="__local__ private" citdl="seriesDefs[this.get(&quot;sortedBy&quot;).key]" line="918" name="currentDef" />
            <variable attributes="__local__ private" citdl="this._chartLegendEl" line="919" name="l" />
            <variable attributes="__local__ private" citdl="seriesDefs[currentDef.group[i]]" line="922" name="c" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="923" name="dt" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="925" name="dd" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Resize the chart&apos;s canvas if based on number of records&#xA;returned from the chart&apos;s datasource.&#xA;**/" ilk="function" line="938" lineend="945" name="_sizeChartCanvas" signature="_sizeChartCanvas(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" line="939" name="bars" />
            <variable attributes="__local__ private" line="940" name="s" />
          </scope>
          <variable citdl="s" line="942" name="_chartElHeight" />
          <scope attributes="private" doc="PRIVATE: setAttributeConfigs TabView specific properties." ilk="function" line="954" lineend="1189" name="initAttributes" signature="initAttributes(attr)">
            <variable citdl="Object" doc="Hash of initial attributes" ilk="argument" name="attr" />
            <variable citdl="proto" name="this" />
          </scope>
        </variable>
        <scope attributes="__local__ private" doc="PRIVATE: Utility function for array sums.&#xA;**/" ilk="function" line="599" lineend="603" name="_arraySum" returns="ct" signature="_arraySum(arr)">
          <variable ilk="argument" name="arr" />
          <variable attributes="__local__ private" citdl="Number" line="600" name="ct" />
        </scope>
      </scope>
      <scope attributes="__local__ private" doc="Copyright (c) 2008, Yahoo! Inc. All rights reserved." ilk="function" line="7" lineend="466" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.widget.TabView.prototype" line="42" name="proto">
          <scope doc="Adds a Tab to the TabView instance.&#xA;If no index is specified, the tab is added to the end of the tab list." ilk="function" line="88" lineend="144" name="addTab" returns="Boolean" signature="addTab(tab, index)">
            <variable citdl="YAHOO.widget.Tab" doc="A Tab instance to add." ilk="argument" name="tab" />
            <variable citdl="Number" doc="The position to add the tab." ilk="argument" name="index" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this.get()" line="89" name="tabs" />
            <variable attributes="__local__ private" citdl="this.getTab()" line="97" name="before" />
            <variable attributes="__local__ private" citdl="this" line="99" name="self" />
            <variable attributes="__local__ private" citdl="this.get()" line="100" name="el" />
            <variable attributes="__local__ private" citdl="this._tabParent" line="101" name="tabParent" />
            <variable attributes="__local__ private" citdl="this._contentParent" line="102" name="contentParent" />
            <variable attributes="__local__ private" citdl="tab.get()" line="104" name="tabElement" />
            <variable attributes="__local__ private" citdl="tab.get()" line="105" name="contentEl" />
            <scope attributes="__local__ private" ilk="function" line="124" lineend="132" name="activate" signature="activate(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="Boolean" line="126" name="silent" />
            </scope>
          </scope>
          <scope doc="Routes childNode events." ilk="function" line="152" lineend="177" name="DOMEventHandler" signature="DOMEventHandler(e)">
            <variable citdl="event" doc="The Dom event that is being handled." ilk="argument" name="e" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this.get()" line="153" name="el" />
            <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="154" name="target" />
            <variable attributes="__local__ private" citdl="this._tabParent" line="155" name="tabParent" />
            <variable attributes="__local__ private" citdl="tabs[i].get()" line="158" name="tabEl" />
            <variable attributes="__local__ private" citdl="tabs[i]" line="159" name="tab" />
            <variable attributes="__local__ private" citdl="tabs[i].get()" line="160" name="contentEl" />
            <variable attributes="__local__ private" citdl="this.get()" line="161" name="tabs" />
          </scope>
          <scope doc="Returns the Tab instance at the specified index." ilk="function" line="185" lineend="187" name="getTab" returns="this.get()[index]" signature="getTab(index)">
            <variable citdl="Number" doc="The position of the Tab." ilk="argument" name="index" />
            <variable citdl="proto" name="this" />
          </scope>
          <scope doc="Returns the index of given tab." ilk="function" line="195" lineend="206" name="getTabIndex" returns="index" signature="getTabIndex(tab)">
            <variable citdl="YAHOO.widget.Tab" doc="The tab whose index will be returned." ilk="argument" name="tab" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="i" line="196" name="index" />
            <variable attributes="__local__ private" citdl="this.get()" line="197" name="tabs" />
          </scope>
          <scope doc="Removes the specified Tab from the TabView." ilk="function" line="214" lineend="233" name="removeTab" signature="removeTab(tab)">
            <variable ilk="argument" name="tab" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this.get().length" line="215" name="tabCount" />
            <variable attributes="__local__ private" citdl="this.getTabIndex()" line="217" name="index" />
            <variable attributes="__local__ private" citdl="index" line="218" name="nextIndex" />
          </scope>
          <scope doc="Provides a readable name for the TabView instance." ilk="function" line="240" lineend="243" name="toString" returns="String" signature="toString()">
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this.get()" line="241" name="name" />
          </scope>
          <scope doc="The transiton to use when switching between tabs." ilk="function" line="249" lineend="252" name="contentTransition" signature="contentTransition(newTab, oldTab)">
            <variable ilk="argument" name="newTab" />
            <variable ilk="argument" name="oldTab" />
            <variable citdl="proto" name="this" />
          </scope>
          <scope doc="setAttributeConfigs TabView specific properties." ilk="function" line="259" lineend="386" name="initAttributes" signature="initAttributes(attr)">
            <variable citdl="Object" doc="Hash of initial attributes" ilk="argument" name="attr" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this.get()" line="266" name="el" />
          </scope>
          <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: The container of the tabView&apos;s label elements." line="290" name="_tabParent" />
          <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: The container of the tabView&apos;s content elements." line="300" name="_contentParent" />
          <variable citdl="Boolean" doc="but IE will leak when unsupported events are added, so&#xA;remove these" line="377" name="submit" />
          <variable citdl="Boolean" line="378" name="focus" />
          <variable citdl="Boolean" line="379" name="blur" />
        </variable>
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="43" name="Dom" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="44" name="Event" />
        <variable attributes="__local__ private" citdl="YAHOO.widget.Tab" line="45" name="Tab" />
        <scope attributes="__local__ private" doc="PRIVATE: Creates Tab instances from a collection of HTMLElements." ilk="class" line="394" lineend="418" name="_initTabs">
          <scope attributes="__local__ private __ctor__" doc="PRIVATE: Creates Tab instances from a collection of HTMLElements." ilk="function" line="394" lineend="418" name="_initTabs" signature="_initTabs()">
            <variable citdl="_initTabs" name="this" />
            <variable attributes="__local__ private" line="397" lineend="404" name="attr" />
            <variable attributes="__local__ private" citdl="YAHOO.widget.Tab" line="397" name="tab" />
            <variable attributes="__local__ private" line="397" name="contentEl" />
            <variable attributes="__local__ private" citdl="this.get()" line="399" name="el" />
            <variable attributes="__local__ private" citdl="_getChildNodes()" line="400" name="tabs" />
            <variable attributes="__local__ private" citdl="_getChildNodes()" line="401" name="contentElements" />
          </scope>
          <variable citdl="tab" line="414" name="value" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="420" lineend="428" name="_createTabViewElement" returns="el" signature="_createTabViewElement(attr)">
          <variable ilk="argument" name="attr" />
          <variable attributes="__local__ private" citdl="document.createElement()" line="421" name="el" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="430" lineend="440" name="_createTabParent" returns="el" signature="_createTabParent(attr)">
          <variable ilk="argument" name="attr" />
          <variable attributes="__local__ private" citdl="document.createElement()" line="431" name="el" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="442" lineend="452" name="_createContentParent" returns="el" signature="_createContentParent(attr)">
          <variable ilk="argument" name="attr" />
          <variable attributes="__local__ private" citdl="document.createElement()" line="443" name="el" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="454" lineend="465" name="_getChildNodes" returns="nodes" signature="_getChildNodes(el)">
          <variable ilk="argument" name="el" />
          <variable attributes="__local__ private" citdl="Array" line="455" name="nodes" />
          <variable attributes="__local__ private" citdl="el.childNodes" line="456" name="childNodes" />
        </scope>
      </scope>
      <scope attributes="__local__ private" doc="Copyright (c) 2008, Yahoo! Inc. All rights reserved." ilk="function" line="7" lineend="464" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.util" line="9" name="Y" />
        <scope attributes="__local__ private" ilk="class" line="44" lineend="461" name="Anim">
          <scope attributes="__local__ private __ctor__" doc="CONSTRUCTOR: The animation module provides allows effects to be added to HTMLElements." ilk="function" line="44" lineend="48" name="Anim" signature="Anim(el, attributes, duration, method)">
            <variable ilk="argument" name="el" />
            <variable citdl="Object" doc="The attribute(s) to be animated.&#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.&#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).&#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
            <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
            <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
            <variable citdl="Anim" name="this" />
          </scope>
          <variable citdl="String" line="50" name="NAME" />
          <scope doc="Provides a readable name for the Anim instance." ilk="function" line="58" lineend="62" name="toString" returns="String" signature="toString()">
            <variable citdl="Anim" name="this" />
            <variable attributes="__local__ private" citdl="this.getEl()" line="59" name="el" />
            <variable attributes="__local__ private" citdl="el.id" line="60" name="id" />
          </scope>
          <variable citdl="Object" line="64" lineend="69" name="patterns">
            <variable doc="cached for performance" line="65" name="noNegatives" />
            <variable doc="keep at zero or above" line="66" name="offsetAttribute" />
            <variable doc="use offsetValue as default" line="67" name="defaultUnit" />
          </variable>
          <scope doc="Returns the value computed by the animation&apos;s &quot;method&quot;." ilk="function" line="79" lineend="81" name="doMethod" returns="Number" signature="doMethod(attr, start, end)">
            <variable citdl="String" doc="The name of the attribute." ilk="argument" name="attr" />
            <variable citdl="Number" doc="The value this attribute should start from for this animation." ilk="argument" name="start" />
            <variable citdl="Number" doc="The value this attribute should end at for this animation." ilk="argument" name="end" />
            <variable citdl="Anim" name="this" />
          </scope>
          <scope doc="Applies a value to an attribute." ilk="function" line="90" lineend="96" name="setAttribute" signature="setAttribute(attr, val, unit)">
            <variable citdl="String" doc="The name of the attribute." ilk="argument" name="attr" />
            <variable citdl="Number" doc="The value to be applied to the attribute." ilk="argument" name="val" />
            <variable citdl="String" doc="The unit (&apos;px&apos;, &apos;%&apos;, etc.) of the value." ilk="argument" name="unit" />
            <variable citdl="Anim" name="this" />
          </scope>
          <scope doc="Returns current value of the attribute." ilk="function" line="104" lineend="124" name="getAttribute" returns="Number" signature="getAttribute(attr)">
            <variable citdl="String" doc="The name of the attribute." ilk="argument" name="attr" />
            <variable citdl="Anim" name="this" />
            <variable attributes="__local__ private" citdl="this.getEl()" line="105" name="el" />
            <variable attributes="__local__ private" citdl="Y.Dom.getStyle()" line="106" name="val" />
            <variable attributes="__local__ private" citdl="this.patterns.offsetAttribute.exec()" line="112" name="a" />
            <variable attributes="__local__ private" line="113" name="pos" />
            <variable attributes="__local__ private" doc="top or left" line="114" name="box" />
          </scope>
          <scope doc="Returns the unit to use when none is supplied." ilk="function" line="132" lineend="138" name="getDefaultUnit" returns="String" signature="getDefaultUnit(attr)">
            <variable citdl="attr" doc="The name of the attribute." ilk="argument" name="attr" />
            <variable citdl="Anim" name="this" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Sets the actual values to be used during the animation.  Should only be needed for subclass use." ilk="function" line="146" lineend="184" name="setRuntimeAttribute" returns="Boolean" signature="setRuntimeAttribute(attr)">
            <variable citdl="Object" doc="The attribute object" ilk="argument" name="attr" />
            <variable citdl="Anim" name="this" />
            <variable attributes="__local__ private" line="147" name="start" />
            <variable attributes="__local__ private" citdl="attributes[attr][&apos;to&apos;]" line="148" name="end" />
            <variable attributes="__local__ private" citdl="this.attributes" line="149" name="attributes" />
            <scope attributes="__local__ private" ilk="function" line="153" lineend="155" name="isset" signature="isset(prop)">
              <variable ilk="argument" name="prop" />
            </scope>
          </scope>
          <scope doc="Constructor for Anim instance." ilk="function" line="197" lineend="460" name="init" signature="init(el, attributes, duration, method)">
            <variable ilk="argument" name="el" />
            <variable citdl="Object" doc="The attribute(s) to be animated.&#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.&#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).&#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
            <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
            <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
            <variable citdl="Anim" name="this" />
            <variable attributes="__local__ private" citdl="Boolean" doc="PRIVATE: Whether or not the animation is running." line="204" name="isAnimated" />
            <variable attributes="__local__ private" citdl="Date" doc="PRIVATE: A Date object that is created when the animation begins." line="212" name="startTime" />
            <variable attributes="__local__ private" citdl="Number" doc="PRIVATE: The number of frames this animation was able to execute." line="220" name="actualFrames" />
            <scope attributes="__local__ private" ilk="class" line="355" lineend="366" name="onStart">
              <scope attributes="__local__ private __ctor__" ilk="function" line="355" lineend="366" name="onStart" signature="onStart()">
                <variable citdl="onStart" name="this" />
              </scope>
              <variable citdl="Object" line="358" lineend="358" name="runtimeAttributes" />
            </scope>
            <scope attributes="__local__ private" doc="PRIVATE: Feeds the starting and ending values for each animated attribute to doMethod once per frame, then applies the resulting value to the attribute(s)." ilk="function" line="373" lineend="395" name="onTween" signature="onTween()">
              <variable attributes="__local__ private" citdl="Object" line="374" lineend="377" name="data">
                <variable citdl="Date" line="375" name="duration" />
                <variable citdl="this.currentFrame" line="376" name="currentFrame" />
                <scope ilk="function" line="379" lineend="384" name="toString" signature="toString()">
                  <variable citdl="data" name="this" />
                </scope>
              </variable>
              <variable attributes="__local__ private" citdl="this.runtimeAttributes" line="388" name="runtimeAttributes" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="397" lineend="417" name="onComplete" signature="onComplete()">
              <variable attributes="__local__ private" line="398" name="actual_duration" />
              <variable attributes="__local__ private" citdl="Object" line="400" lineend="404" name="data">
                <variable citdl="actual_duration" line="401" name="duration" />
                <variable citdl="actualFrames" line="402" name="frames" />
                <variable citdl="actualFrames" line="403" name="fps" />
                <scope ilk="function" line="406" lineend="412" name="toString" signature="toString()">
                  <variable citdl="data" name="this" />
                </scope>
              </variable>
            </scope>
          </scope>
          <variable citdl="Object" doc="The collection of attributes to be animated.&#xA;Each attribute must have at least a &quot;to&quot; or &quot;by&quot; defined in order to animate.&#xA;If &quot;to&quot; is supplied, the animation will end with the attribute at that value.&#xA;If &quot;by&quot; is supplied, the animation will end at that value plus its starting value.&#xA;If both are supplied, &quot;to&quot; is used, and &quot;by&quot; is ignored.&#xA;Optional additional member include &quot;from&quot; (the value the attribute should start animating from, defaults to current value), and &quot;unit&quot; (the units to apply to the values)." line="240" name="attributes" />
          <variable citdl="Number" doc="The length of the animation.  Defaults to &quot;1&quot; (second)." line="247" name="duration" />
          <variable citdl="Function" doc="The method that will provide values to the attribute(s) during the animation.&#xA;Defaults to &quot;YAHOO.util.Easing.easeNone&quot;." line="255" name="method" />
          <variable citdl="Boolean" doc="Whether or not the duration should be treated as seconds.&#xA;Defaults to true." line="263" name="useSeconds" />
          <variable citdl="Number" doc="The location of the current animation on the timeline.&#xA;In time-based animations, this is used by AnimMgr to ensure the animation finishes on time." line="271" name="currentFrame" />
          <variable citdl="Number" doc="The total number of frames to be executed.&#xA;In time-based animations, this is used by AnimMgr to ensure the animation finishes on time." line="279" name="totalFrames" />
          <scope doc="Changes the animated element" ilk="function" line="285" lineend="287" name="setEl" signature="setEl(element)">
            <variable ilk="argument" name="element" />
            <variable citdl="Anim" name="this" />
          </scope>
          <scope doc="Returns a reference to the animated element." ilk="function" line="294" lineend="294" name="getEl" returns="HTMLElement" signature="getEl()">
            <variable citdl="Anim" name="this" />
          </scope>
          <scope doc="Checks whether the element is currently animated." ilk="function" line="301" lineend="303" name="isAnimated" returns="Boolean" signature="isAnimated()">
            <variable citdl="Anim" name="this" />
          </scope>
          <scope doc="Returns the animation start time." ilk="function" line="310" lineend="312" name="getStartTime" returns="Date" signature="getStartTime()">
            <variable citdl="Anim" name="this" />
          </scope>
          <variable citdl="Object" line="314" lineend="314" name="runtimeAttributes" />
          <scope doc="Starts the animation by registering it with the animation manager." ilk="function" line="322" lineend="336" name="animate" returns="Boolean" signature="animate()">
            <variable citdl="Anim" name="this" />
          </scope>
          <scope doc="Stops the animation.  Normally called by AnimMgr when animation completes." ilk="function" line="343" lineend="353" name="stop" returns="Boolean" signature="stop(finish)">
            <variable citdl="Boolean" doc="(optional) If true, animation will jump to final frame." ilk="argument" name="finish" />
            <variable citdl="Anim" name="this" />
          </scope>
          <variable attributes="private" citdl="Y.CustomEvent" doc="PRIVATE: Custom event that fires after onStart, useful in subclassing" line="423" name="_onStart" />
          <variable citdl="Y.CustomEvent" doc="Custom event that fires when animation begins&#xA;Listen via subscribe method (e.g. myAnim.onStart.subscribe(someFunction)" line="430" name="onStart" />
          <variable citdl="Y.CustomEvent" doc="Custom event that fires between each frame&#xA;Listen via subscribe method (e.g. myAnim.onTween.subscribe(someFunction)" line="437" name="onTween" />
          <variable attributes="private" citdl="Y.CustomEvent" doc="PRIVATE: Custom event that fires after onTween" line="443" name="_onTween" />
          <variable citdl="Y.CustomEvent" doc="Custom event that fires when animation ends&#xA;Listen via subscribe method (e.g. myAnim.onComplete.subscribe(someFunction)" line="450" name="onComplete" />
          <variable attributes="private" citdl="Y.CustomEvent" doc="PRIVATE: Custom event that fires after onComplete" line="455" name="_onComplete" />
        </scope>
      </scope>
      <scope attributes="__local__ private" doc="Copyright (c) 2008, Yahoo! Inc. All rights reserved." ilk="function" line="7" lineend="327" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.lang" doc="PRIVATE: **/" line="13" name="Lang" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" doc="PRIVATE: **/" line="13" name="Event" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" doc="PRIVATE: **/" line="13" name="Dom" />
      </scope>
      <scope attributes="__local__ private" doc="Copyright (c) 2008, Yahoo! Inc. All rights reserved." ilk="function" line="7" lineend="681" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.lang" line="32" name="Lang" />
        <variable attributes="__local__ private" citdl="YAHOO.util.CustomEvent" line="32" name="CustomEvent" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Config" line="32" name="Config">
          <scope attributes="__static__" doc="STATIC: Checks to determine if a particular function/Object pair are already&#xA;subscribed to the specified CustomEvent" ilk="function" line="658" lineend="677" name="alreadySubscribed" returns="Boolean" signature="alreadySubscribed(evt, fn, obj)">
            <variable citdl="YAHOO.util.CustomEvent" doc="The CustomEvent for which to check&#xA;the subscriptions" ilk="argument" name="evt" />
            <variable citdl="Function" doc="The function to look for in the subscribers list" ilk="argument" name="fn" />
            <variable citdl="Object" doc="The execution scope Object for the subscription" ilk="argument" name="obj" />
            <variable citdl="Config" name="this" />
            <variable attributes="__local__ private" citdl="nSubscribers" line="662" name="i" />
            <variable attributes="__local__ private" citdl="evt.subscribers.length" line="662" name="nSubscribers" />
            <variable attributes="__local__ private" citdl="evt.subscribers[i]" line="662" name="subsc" />
          </scope>
        </variable>
      </scope>
      <scope attributes="__local__ private" doc="Copyright (c) 2008, Yahoo! Inc. All rights reserved." ilk="function" line="7" lineend="327" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.lang" doc="PRIVATE: **/" line="13" name="Lang" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" doc="PRIVATE: **/" line="13" name="Event" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" doc="PRIVATE: **/" line="13" name="Dom" />
      </scope>
      <variable citdl="P.filters[&quot;DXImageTransform.Microsoft.Alpha&quot;].opacity" line="10" name="T" />
      <scope attributes="__local__ private" doc="The dom module provides helper methods for manipulating Dom elements." ilk="function" line="13" lineend="1044" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="Object" doc="ditto" line="17" lineend="17" name="propertyCache" />
        <variable attributes="__local__ private" doc="ditto" line="17" name="setStyle" />
        <variable attributes="__local__ private" doc="ditto" line="17" name="getStyle" />
        <variable attributes="__local__ private" citdl="YAHOO.util" doc="ditto" line="17" name="Y" />
        <variable attributes="__local__ private" citdl="Object" doc="for faster hyphen converts" line="18" lineend="18" name="reClassNameCache" />
        <variable attributes="__local__ private" citdl="window.document" doc="cache regexes for className" line="19" name="document" />
        <variable attributes="__local__ private" citdl="YAHOO.env.ua.webkit" doc="brower detection" line="27" name="isSafari" />
        <variable attributes="__local__ private" citdl="YAHOO.env.ua.gecko" doc="brower detection" line="27" name="isGecko" />
        <variable attributes="__local__ private" citdl="YAHOO.env.ua.ie" doc="brower detection" line="27" name="isIE" />
        <variable attributes="__local__ private" citdl="YAHOO.env.ua.opera" doc="brower detection" line="27" name="isOpera" />
        <variable attributes="__local__ private" citdl="Object" doc="regex cache" line="30" lineend="34" name="patterns">
          <variable line="31" name="HYPHEN" />
          <variable doc="to normalize get/setStyle" line="32" name="ROOT_TAG" />
        </variable>
        <scope attributes="__local__ private" ilk="function" line="36" lineend="55" name="toCamel" returns="converted" signature="toCamel(property)">
          <variable ilk="argument" name="property" />
          <variable attributes="__local__ private" citdl="property" line="45" name="converted" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="57" lineend="64" name="getClassRegEx" returns="re" signature="getClassRegEx(className)">
          <variable ilk="argument" name="className" />
          <variable attributes="__local__ private" citdl="reClassNameCache[className]" line="58" name="re" />
        </scope>
        <scope attributes="__local__ private" doc="default to inline only" ilk="function" line="106" lineend="106" name="getStyle" returns="el.style[property]" signature="getStyle(el, property)">
          <variable ilk="argument" name="el" />
          <variable ilk="argument" name="property" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="128" lineend="133" name="setStyle" signature="setStyle(el, property, val)">
          <variable ilk="argument" name="el" />
          <variable ilk="argument" name="property" />
          <variable ilk="argument" name="val" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="136" lineend="138" name="testElement" returns="Node" signature="testElement(node, method)">
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="method" />
        </scope>
        <variable citdl="pos" line="987" name="getXY" />
      </scope>
      <variable citdl="deconcept" doc="! * SWFObject v1.5: Flash Player detection and embed -&#xA;http://blog.deconcept.com/swfobject/ * * SWFObject is (c)&#xA;2007 Geoff Stearns and is released under the MIT License: *&#xA;http://www.opensource.org/licenses/mit-license.php" line="14" name="deconcept">
        <variable citdl="Object" line="18" lineend="228" name="util">
          <scope ilk="function" line="215" lineend="227" name="getRequestParameter" returns="String" signature="getRequestParameter(param)">
            <variable ilk="argument" name="param" />
            <variable citdl="util" name="this" />
            <variable attributes="__local__ private" citdl="document.location.search" line="216" name="q" />
            <variable attributes="__local__ private" citdl="q.substring().split()" line="219" name="pairs" />
          </scope>
        </variable>
        <variable citdl="Object" line="23" lineend="23" name="SWFObjectUtil">
          <scope doc="---- detection functions ---- */" ilk="function" line="155" lineend="199" name="getPlayerVersion" returns="PlayerVersion" signature="getPlayerVersion()">
            <variable citdl="SWFObjectUtil" name="this" />
            <variable attributes="__local__ private" citdl="deconcept.PlayerVersion" line="156" name="PlayerVersion" />
            <variable attributes="__local__ private" citdl="navigator.plugins[&quot;Shockwave Flash&quot;]" line="158" name="x" />
            <variable attributes="__local__ private" citdl="Number" doc="if Windows CE" line="163" name="axo" />
            <variable attributes="__local__ private" citdl="Number" line="164" name="counter" />
          </scope>
          <scope doc="fix for video streaming bug */" ilk="function" line="230" lineend="240" name="cleanupSWFs" signature="cleanupSWFs()">
            <variable citdl="SWFObjectUtil" name="this" />
            <variable attributes="__local__ private" citdl="document.getElementsByTagName()" line="231" name="objects" />
          </scope>
          <scope ilk="function" line="244" lineend="248" name="prepUnload" signature="prepUnload()">
            <variable citdl="SWFObjectUtil" name="this" />
            <scope attributes="__local__ private" ilk="function" line="245" lineend="245" name="__flash_unloadHandler" signature="__flash_unloadHandler()" />
            <scope attributes="__local__ private" ilk="function" line="246" lineend="246" name="__flash_savedUnloadHandler" signature="__flash_savedUnloadHandler()" />
          </scope>
        </variable>
        <scope ilk="class" line="27" lineend="152" name="SWFObject">
          <scope attributes="__ctor__" ilk="function" line="27" lineend="60" name="SWFObject" signature="SWFObject(swf, id, w, h, ver, c, quality, xiRedirectUrl, redirectUrl, detectKey)">
            <variable ilk="argument" name="swf" />
            <variable ilk="argument" name="id" />
            <variable ilk="argument" name="w" />
            <variable ilk="argument" name="h" />
            <variable ilk="argument" name="ver" />
            <variable ilk="argument" name="c" />
            <variable ilk="argument" name="quality" />
            <variable ilk="argument" name="xiRedirectUrl" />
            <variable ilk="argument" name="redirectUrl" />
            <variable ilk="argument" name="detectKey" />
            <variable citdl="SWFObject" name="this" />
            <variable attributes="__local__ private" citdl="quality" line="49" name="q" />
            <variable attributes="__local__ private" line="53" name="xir" />
          </scope>
          <variable citdl="detectKey" line="29" name="DETECT_KEY" />
          <variable citdl="deconcept.util.getRequestParameter()" line="30" name="skipDetect" />
          <variable citdl="Object" line="31" lineend="31" name="params" />
          <variable citdl="Object" line="32" lineend="32" name="variables" />
          <variable citdl="Array" line="33" name="attributes" />
          <variable citdl="deconcept.SWFObjectUtil.getPlayerVersion()" line="39" name="installedVer" />
          <variable citdl="Boolean" doc="only add the onunload cleanup if the Flash Player version&#xA;supports External Interface and we are in IE" line="43" name="doPrepUnload" />
          <scope ilk="function" line="65" lineend="68" name="useExpressInstall" signature="useExpressInstall(path)">
            <variable ilk="argument" name="path" />
            <variable citdl="SWFObject" name="this" />
          </scope>
          <variable line="66" name="xiSWFPath" />
          <scope ilk="function" line="69" lineend="71" name="setAttribute" signature="setAttribute(name, value)">
            <variable ilk="argument" name="name" />
            <variable ilk="argument" name="value" />
            <variable citdl="SWFObject" name="this" />
          </scope>
          <scope ilk="function" line="72" lineend="74" name="getAttribute" returns="this.attributes[name]" signature="getAttribute(name)">
            <variable ilk="argument" name="name" />
            <variable citdl="SWFObject" name="this" />
          </scope>
          <scope ilk="function" line="75" lineend="77" name="addParam" signature="addParam(name, value)">
            <variable ilk="argument" name="name" />
            <variable ilk="argument" name="value" />
            <variable citdl="SWFObject" name="this" />
          </scope>
          <scope ilk="function" line="78" lineend="80" name="getParams" returns="this.params" signature="getParams()">
            <variable citdl="SWFObject" name="this" />
          </scope>
          <scope ilk="function" line="81" lineend="83" name="addVariable" signature="addVariable(name, value)">
            <variable ilk="argument" name="name" />
            <variable ilk="argument" name="value" />
            <variable citdl="SWFObject" name="this" />
          </scope>
          <scope ilk="function" line="84" lineend="86" name="getVariable" returns="this.variables[name]" signature="getVariable(name)">
            <variable ilk="argument" name="name" />
            <variable citdl="SWFObject" name="this" />
          </scope>
          <scope ilk="function" line="87" lineend="89" name="getVariables" returns="this.variables" signature="getVariables()">
            <variable citdl="SWFObject" name="this" />
          </scope>
          <scope ilk="function" line="90" lineend="98" name="getVariablePairs" returns="variablePairs" signature="getVariablePairs()">
            <variable citdl="SWFObject" name="this" />
            <variable attributes="__local__ private" citdl="Array" line="91" name="variablePairs" />
            <variable attributes="__local__ private" line="92" name="key" />
            <variable attributes="__local__ private" citdl="this.getVariables()" line="93" name="variables" />
          </scope>
          <scope ilk="function" line="99" lineend="129" name="getSWFHTML" returns="swfNode" signature="getSWFHTML()">
            <variable citdl="SWFObject" name="this" />
            <variable attributes="__local__ private" citdl="String" line="100" name="swfNode" />
            <variable attributes="__local__ private" citdl="this.getParams()" line="108" name="params" />
            <variable attributes="__local__ private" citdl="this.getVariablePairs().join()" line="110" name="pairs" />
          </scope>
          <scope ilk="function" line="130" lineend="151" name="write" returns="Boolean" signature="write(elementId)">
            <variable ilk="argument" name="elementId" />
            <variable citdl="SWFObject" name="this" />
            <variable attributes="__local__ private" citdl="deconcept.PlayerVersion" doc="check to see if we need to do an express install" line="133" name="expressInstallReqVer" />
            <variable attributes="__local__ private" line="142" name="n" />
          </scope>
        </scope>
        <scope ilk="function" line="37" lineend="63" name="SWFObject" signature="SWFObject(swf, id, w, h, ver, c, quality, xiRedirectUrl, redirectUrl, detectKey)">
          <variable ilk="argument" name="swf" />
          <variable ilk="argument" name="id" />
          <variable ilk="argument" name="w" />
          <variable ilk="argument" name="h" />
          <variable ilk="argument" name="ver" />
          <variable ilk="argument" name="c" />
          <variable ilk="argument" name="quality" />
          <variable ilk="argument" name="xiRedirectUrl" />
          <variable ilk="argument" name="redirectUrl" />
          <variable ilk="argument" name="detectKey" />
          <variable citdl="deconcept" name="this" />
          <variable attributes="__local__ private" citdl="quality" line="55" name="q" />
          <variable attributes="__local__ private" line="59" name="xir" />
        </scope>
        <variable citdl="detectKey" line="39" name="DETECT_KEY" />
        <variable citdl="deconcept.util.getRequestParameter()" line="40" name="skipDetect" />
        <variable citdl="Object" line="41" name="params" />
        <variable citdl="Object" line="42" name="variables" />
        <variable citdl="Array" line="43" name="attributes" />
        <variable citdl="deconcept.SWFObjectUtil.getPlayerVersion()" line="49" name="installedVer" />
        <scope ilk="function" line="200" lineend="204" name="PlayerVersion" signature="PlayerVersion(arrVersion)">
          <variable ilk="argument" name="arrVersion" />
          <variable citdl="deconcept" name="this" />
        </scope>
        <variable citdl="arrVersion[0]" line="201" name="major" />
        <variable citdl="arrVersion[1]" line="202" name="minor" />
        <variable citdl="arrVersion[2]" line="203" name="rev" />
        <scope ilk="class" line="232" lineend="261" name="PlayerVersion">
          <scope ilk="function" line="205" lineend="212" name="versionIsValid" returns="Boolean" signature="versionIsValid(fv)">
            <variable ilk="argument" name="fv" />
            <variable citdl="PlayerVersion" name="this" />
          </scope>
          <scope attributes="__ctor__" ilk="function" line="232" lineend="236" name="PlayerVersion" signature="PlayerVersion(arrVersion)">
            <variable ilk="argument" name="arrVersion" />
            <variable citdl="PlayerVersion" name="this" />
          </scope>
          <variable citdl="arrVersion[0]" line="233" name="major" />
          <variable citdl="arrVersion[1]" line="234" name="minor" />
          <variable citdl="arrVersion[2]" line="235" name="rev" />
        </scope>
      </variable>
      <scope attributes="__local__ private" doc="&lt;p&gt;Creates a Image Cropper control.&lt;/p&gt;" ilk="function" line="14" lineend="881" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.lang" line="17" name="Lang" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="17" name="Event" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="17" name="Dom" />
        <scope attributes="__local__ private" classrefs="YAHOO.util.Element" ilk="class" line="27" lineend="30" name="Crop">
          <scope attributes="__local__ private __ctor__" doc="CONSTRUCTOR: &lt;p&gt;Creates a Image Cropper control.&lt;/p&gt;" ilk="function" line="27" lineend="34" name="Crop" signature="Crop(el, config)">
            <variable citdl="String/HTMLElement" doc="The image element to make croppable." ilk="argument" name="el" />
            <variable ilk="argument" name="config" />
            <variable citdl="Crop" name="this" />
            <variable attributes="__local__ private" citdl="Object" line="28" lineend="31" name="oConfig">
              <variable citdl="el" line="29" name="element" />
              <variable citdl="config" line="30" name="attributes" />
            </variable>
          </scope>
          <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Internal hash table for all ImageCropper instances" line="43" lineend="43" name="_instances" />
          <scope attributes="__static__" doc="STATIC: Get&apos;s an ImageCropper object by the HTML id of the image associated with the ImageCropper object." ilk="function" line="50" lineend="55" name="getCropperById" returns="Object" signature="getCropperById(id)">
            <variable ilk="argument" name="id" />
            <variable citdl="Crop" name="this" />
          </scope>
          <variable attributes="private" citdl="String" doc="PRIVATE: The CSS class used to wrap the element" line="64" name="CSS_MAIN" />
          <variable attributes="private" citdl="String" doc="PRIVATE: The CSS class for the mask element" line="71" name="CSS_MASK" />
          <variable attributes="private" citdl="String" doc="PRIVATE: The CSS class for the mask inside the resize element" line="78" name="CSS_RESIZE_MASK" />
          <variable attributes="private" citdl="String" doc="PRIVATE: The url of the image we are cropping" line="86" name="_image" />
          <variable attributes="private" citdl="Boolean" doc="PRIVATE: Flag to determine if the crop region is active" line="93" name="_active" />
          <variable attributes="private" citdl="Object" doc="PRIVATE: A reference to the Resize Utility used in this Cropper Instance" line="100" name="_resize" />
          <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: The HTML Element used to create the Resize Oject" line="107" name="_resizeEl" />
          <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: The HTML Element used to create the Resize mask" line="114" name="_resizeMaskEl" />
          <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: The HTML Element created to wrap the image" line="121" name="_wrap" />
          <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: The HTML Element created to &quot;mask&quot; the image being cropped" line="128" name="_mask" />
          <scope attributes="private" doc="PRIVATE: Creates the wrapper element used to wrap the image" ilk="function" line="134" lineend="150" name="_createWrap" signature="_createWrap()">
            <variable attributes="__local__ private" citdl="this.get()" line="138" name="el" />
            <variable attributes="__local__ private" citdl="this.get().parentNode" line="142" name="par" />
          </scope>
          <variable citdl="this.get().id" line="136" name="id" />
          <variable citdl="this.CSS_MAIN" line="137" name="className" />
          <variable citdl="el.width" line="139" name="width" />
          <variable citdl="el.height" line="140" name="height" />
          <scope attributes="private" doc="PRIVATE: Creates the mask element used to mask the image" ilk="function" line="157" lineend="161" name="_createMask" signature="_createMask()" />
          <scope attributes="private" doc="PRIVATE: Creates the resize element and the instance of the Resize Utility" ilk="function" line="168" lineend="203" name="_createResize" signature="_createResize()" />
          <variable citdl="String" line="171" name="position" />
          <variable citdl="String" line="173" name="innerHTML" />
          <variable citdl="this.get()[1]" line="176" name="top" />
          <variable citdl="this.get()[0]" line="177" name="left" />
          <scope attributes="private" doc="PRIVATE: Handles the mouseover event" ilk="function" line="210" lineend="221" name="_handleMouseOver" signature="_handleMouseOver(ev)">
            <variable ilk="argument" name="ev" />
            <variable attributes="__local__ private" citdl="String" line="211" name="evType" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Handles the mouseout event" ilk="function" line="227" lineend="236" name="_handleMouseOut" signature="_handleMouseOut(ev)">
            <variable ilk="argument" name="ev" />
            <variable attributes="__local__ private" citdl="String" line="228" name="evType" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Moves the resize element based on the arrow keys" ilk="function" line="243" lineend="287" name="_moveEl" signature="_moveEl(dir, inc)">
            <variable ilk="argument" name="dir" />
            <variable ilk="argument" name="inc" />
            <variable attributes="__local__ private" citdl="this._setConstraints()" line="246" name="region" />
            <variable attributes="__local__ private" citdl="Number" line="246" name="t" />
            <variable attributes="__local__ private" citdl="Boolean" line="246" name="resize" />
            <variable attributes="__local__ private" citdl="Number" line="246" name="l" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Handles the keypress event" ilk="function" line="294" lineend="321" name="_handleKeyPress" signature="_handleKeyPress(ev)">
            <variable ilk="argument" name="ev" />
            <variable attributes="__local__ private" citdl="Event.getCharCode()" line="297" name="kc" />
            <variable attributes="__local__ private" citdl="Boolean" line="297" name="stopEvent" />
            <variable attributes="__local__ private" line="297" name="inc" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Handles the DragDrop b4DragEvent event" ilk="function" line="328" lineend="330" name="_handleB4DragEvent" signature="_handleB4DragEvent()" />
          <scope attributes="private" doc="PRIVATE: Handles the DragDrop DragEvent event" ilk="function" line="337" lineend="341" name="_handleDragEvent" signature="_handleDragEvent()" />
          <scope attributes="private" doc="PRIVATE: Handles the Resize Utilitys beforeResize event" ilk="function" line="348" lineend="393" name="_handleBeforeResizeEvent" returns="Boolean" signature="_handleBeforeResizeEvent(args)">
            <variable ilk="argument" name="args" />
            <variable attributes="__local__ private" citdl="Number" line="351" name="h" />
            <variable attributes="__local__ private" citdl="Dom.getRegion()" line="351" name="region" />
            <variable attributes="__local__ private" citdl="this._resize._currentHandle" line="351" name="ch" />
            <variable attributes="__local__ private" citdl="this._resize._cache" line="351" name="c" />
            <variable attributes="__local__ private" citdl="Number" line="351" name="w" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Resizes the inner mask element" ilk="function" line="399" lineend="403" name="_handleResizeMaskEl" signature="_handleResizeMaskEl()">
            <variable attributes="__local__ private" citdl="this._resize._cache" line="400" name="a" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Handles the Resize Utilitys Resize event" ilk="function" line="410" lineend="415" name="_handleResizeEvent" signature="_handleResizeEvent(ev)">
            <variable ilk="argument" name="ev" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Syncs the packground position of the resize element with the resize elements top and left style position" ilk="function" line="422" lineend="425" name="_syncBackgroundPosition" signature="_syncBackgroundPosition()" />
          <scope attributes="private" doc="PRIVATE: Sets the background image position to the top and left position" ilk="function" line="434" lineend="440" name="_setBackgroundPosition" signature="_setBackgroundPosition(l, t)">
            <variable ilk="argument" name="l" />
            <variable ilk="argument" name="t" />
            <variable attributes="__local__ private" citdl="parseInt()" line="435" name="bl" />
            <variable attributes="__local__ private" citdl="parseInt()" line="436" name="bt" />
            <variable attributes="__local__ private" citdl="this._resize.getWrapEl().firstChild" line="437" name="mask" />
            <variable attributes="__local__ private" line="438" name="pos" />
          </scope>
          <variable citdl="pos" line="439" name="backgroundPosition" />
          <scope attributes="private" doc="PRIVATE: Sets the background image of the resize element" ilk="function" line="448" lineend="452" name="_setBackgroundImage" signature="_setBackgroundImage(url)">
            <variable ilk="argument" name="url" />
            <variable attributes="__local__ private" citdl="this._resize.getWrapEl().firstChild" line="449" name="mask">
              <variable citdl="Object" line="451" name="style">
                <variable citdl="String" line="451" name="backgroundImage" />
              </variable>
            </variable>
          </scope>
          <scope attributes="private" doc="PRIVATE: Handles the Resize Utilitys endResize event" ilk="function" line="459" lineend="461" name="_handleEndResizeEvent" signature="_handleEndResizeEvent()" />
          <scope attributes="private" doc="PRIVATE: Handles the Resize Utilitys startResize event" ilk="function" line="467" lineend="506" name="_handleStartResizeEvent" signature="_handleStartResizeEvent()">
            <variable attributes="__local__ private" citdl="this._resize._cache.height" line="474" name="h" />
            <variable attributes="__local__ private" citdl="Number" line="474" name="maxW" />
            <variable attributes="__local__ private" citdl="parseInt()" line="474" name="l" />
            <variable attributes="__local__ private" citdl="Number" line="474" name="maxH" />
            <variable attributes="__local__ private" citdl="parseInt()" line="474" name="t" />
            <variable attributes="__local__ private" citdl="this._resize._cache.width" line="474" name="w" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Set the DragDrop constraints to keep the element inside the crop area." ilk="function" line="515" lineend="562" name="_setConstraints" returns="Object" signature="_setConstraints(inside)">
            <variable ilk="argument" name="inside" />
            <variable attributes="__local__ private" citdl="this._resize" line="516" name="resize" />
            <variable attributes="__local__ private" citdl="parseInt()" line="519" name="height" />
            <variable attributes="__local__ private" citdl="parseInt()" line="519" name="width" />
            <variable attributes="__local__ private" citdl="Dom.getRegion()" doc="Get the top, right, bottom and left positions" line="527" name="region" />
            <variable attributes="__local__ private" citdl="resize.getWrapEl()" doc="Get the element we are working on" line="529" name="el" />
            <variable attributes="__local__ private" citdl="Dom.getXY()" doc="Get the xy position of it" line="532" name="xy" />
            <variable attributes="__local__ private" citdl="xy[0]" doc="Set left to x minus left" line="535" name="left" />
            <variable attributes="__local__ private" citdl="region.right" doc="Set right to right minus x minus width" line="538" name="right" />
            <variable attributes="__local__ private" citdl="xy[1]" doc="Set top to y minus top" line="541" name="top" />
            <variable attributes="__local__ private" citdl="region.bottom" doc="Set bottom to bottom minus y minus height" line="544" name="bottom" />
          </scope>
          <scope doc="Returns the coordinates needed to crop the image" ilk="function" line="568" lineend="577" name="getCropCoords" returns="Object" signature="getCropCoords()">
            <variable attributes="__local__ private" citdl="Object" line="569" lineend="575" name="coords">
              <variable citdl="parseInt()" line="570" name="top" />
              <variable citdl="parseInt()" line="571" name="left" />
              <variable citdl="this._resize._cache.height" line="572" name="height" />
              <variable citdl="this._resize._cache.width" line="573" name="width" />
              <variable citdl="this._image" line="574" name="image" />
            </variable>
          </scope>
          <scope doc="Resets the crop element back to it&apos;s original position" ilk="function" line="583" lineend="589" name="reset" returns="YAHOO.widget.ImageCropper" signature="reset()" />
          <scope doc="Get the HTML reference for the image element." ilk="function" line="596" lineend="598" name="getEl" returns="HTMLElement" signature="getEl()" />
          <scope doc="Get the HTML reference for the resize element." ilk="function" line="604" lineend="606" name="getResizeEl" returns="HTMLElement" signature="getResizeEl()" />
          <scope doc="Get the HTML reference for the wrap element." ilk="function" line="612" lineend="614" name="getWrapEl" returns="HTMLElement" signature="getWrapEl()" />
          <scope doc="Get the HTML reference for the mask element." ilk="function" line="621" lineend="623" name="getMaskEl" returns="HTMLElement" signature="getMaskEl()" />
          <scope doc="Get the HTML reference for the resizable object&apos;s mask element." ilk="function" line="630" lineend="632" name="getResizeMaskEl" returns="HTMLElement" signature="getResizeMaskEl()" />
          <scope doc="Get the Resize Utility object." ilk="function" line="639" lineend="641" name="getResizeObject" returns="YAHOO.util.Resize" signature="getResizeObject()" />
          <scope attributes="private" doc="PRIVATE: The ImageCropper class&apos;s initialization method" ilk="function" line="648" lineend="676" name="init" returns="Boolean" signature="init(p_oElement, p_oAttributes)">
            <variable ilk="argument" name="p_oElement" />
            <variable ilk="argument" name="p_oAttributes" />
            <variable attributes="__local__ private" citdl="p_oElement" line="651" name="id" />
            <variable attributes="__local__ private" citdl="Dom.get()" line="660" name="el" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Initializes all of the configuration attributes used to create a croppable element." ilk="function" line="685" lineend="825" name="initAttributes" signature="initAttributes(attr)">
            <variable citdl="Object" doc="Object literal specifying a set of&#xA;configuration attributes used to create the widget." ilk="argument" name="attr" />
          </scope>
          <scope doc="Destroys the ImageCropper object and all of it&apos;s elements &amp; listeners." ilk="function" line="830" lineend="844" name="destroy" signature="destroy()" />
          <scope doc="Returns a string representing the ImageCropper Object." ilk="function" line="850" lineend="855" name="toString" returns="String" signature="toString()" />
        </scope>
      </scope>
      <scope attributes="__local__ private" doc="&lt;p&gt;Provides a fixed layout containing, top, bottom, left, right and center layout units. It can be applied to either the body or an element.&lt;/p&gt;" ilk="function" line="14" lineend="651" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.lang" line="17" name="Lang" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="17" name="Event" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="17" name="Dom" />
        <scope attributes="__local__ private" classrefs="YAHOO.util.Element" ilk="class" line="28" lineend="44" name="Layout">
          <scope attributes="__local__ private __ctor__" doc="CONSTRUCTOR: &lt;p&gt;Provides a fixed layout containing, top, bottom, left, right and center layout units. It can be applied to either the body or an element.&lt;/p&gt;" ilk="function" line="28" lineend="48" name="Layout" signature="Layout(el, config)">
            <variable citdl="String/HTMLElement" doc="The element to make contain a layout." ilk="argument" name="el" />
            <variable ilk="argument" name="config" />
            <variable citdl="Layout" name="this" />
            <variable attributes="__local__ private" citdl="Object" line="42" lineend="45" name="oConfig">
              <variable citdl="el" line="43" name="element" />
              <variable citdl="config" line="44" name="attributes" />
            </variable>
          </scope>
          <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Internal hash table for all layout instances" line="57" lineend="57" name="_instances" />
          <scope attributes="__static__" doc="STATIC: Get&apos;s a layout object by the HTML id of the element associated with the Layout object." ilk="function" line="64" lineend="69" name="getLayoutById" returns="Object" signature="getLayoutById(id)">
            <variable ilk="argument" name="id" />
            <variable citdl="Layout" name="this" />
          </scope>
          <variable citdl="YAHOO.env.ua" line="77" name="browser" />
          <variable attributes="private" citdl="Boolean" doc="PRIVATE: Set to true when the layout is rendered" line="89" name="_rendered" />
          <variable attributes="private" citdl="Number" doc="PRIVATE: The zIndex to set all LayoutUnits to" line="96" name="_zIndex" />
          <variable attributes="private" citdl="Object" doc="PRIVATE: A collection of the current sizes of all usable LayoutUnits to be used for calculations" line="103" lineend="488" name="_sizes" />
          <scope attributes="private" doc="PRIVATE: Used to set the body size of the layout, sets the height and width of the parent container" ilk="function" line="110" lineend="143" name="_setBodySize" signature="_setBodySize(set)">
            <variable citdl="Boolean" doc="If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)" ilk="argument" name="set" />
            <variable attributes="__local__ private" citdl="Number" line="111" name="h" />
            <variable attributes="__local__ private" citdl="Number" line="111" name="w" />
          </scope>
          <variable citdl="Object" line="141" lineend="141" name="doc">
            <variable citdl="h" line="141" name="h" />
            <variable citdl="w" line="141" name="w" />
          </variable>
          <scope attributes="private" doc="PRIVATE: Used to set the size and position of the left, right, top and bottom units" ilk="function" line="150" lineend="209" name="_setSides" signature="_setSides(set)">
            <variable citdl="Boolean" doc="If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)" ilk="argument" name="set" />
            <variable attributes="__local__ private" line="154" name="h2" />
            <variable attributes="__local__ private" citdl="this._sizes.doc.h" line="154" name="h" />
            <variable attributes="__local__ private" line="154" name="h1" />
            <variable attributes="__local__ private" citdl="this._sizes.doc.w" line="154" name="w" />
            <variable attributes="__local__ private" line="165" name="newH" />
          </scope>
          <variable citdl="Object" line="157" lineend="160" name="top">
            <variable citdl="h1" line="158" name="h" />
            <variable line="158" name="w" />
            <variable citdl="Number" line="159" name="t" />
          </variable>
          <variable citdl="Object" line="161" lineend="163" name="bottom">
            <variable citdl="h2" line="162" name="h" />
            <variable line="162" name="w" />
          </variable>
          <variable citdl="Object" line="167" lineend="169" name="left">
            <variable citdl="newH" line="168" name="h" />
            <variable line="168" name="w" />
          </variable>
          <variable citdl="Object" line="170" lineend="174" name="right">
            <variable citdl="newH" line="171" name="h" />
            <variable line="171" name="w" />
            <variable line="172" name="l" />
            <variable line="173" name="t" />
          </variable>
          <variable citdl="Number" line="184" name="l" />
          <variable citdl="this._sizes.top.h" line="186" name="t" />
          <scope attributes="private" doc="PRIVATE: Used to set the size and position of the center unit" ilk="function" line="216" lineend="227" name="_setCenter" signature="_setCenter(set)">
            <variable citdl="Boolean" doc="If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)" ilk="argument" name="set" />
            <variable attributes="__local__ private" citdl="this._sizes.left.h" line="218" name="h" />
            <variable attributes="__local__ private" line="219" name="w" />
          </scope>
          <variable citdl="Object" line="226" lineend="226" name="center">
            <variable citdl="h" line="226" name="h" />
            <variable citdl="this._sizes.top.h" line="226" name="t" />
            <variable citdl="w" line="226" name="w" />
            <variable citdl="this._sizes.left.w" line="226" name="l" />
          </variable>
          <scope doc="Get a reference to the internal Layout Unit sizes object used to build the layout wireframe" ilk="function" line="233" lineend="235" name="getSizes" returns="Object" signature="getSizes()" />
          <scope doc="Get the LayoutUnit by it&apos;s HTML id" ilk="function" line="242" lineend="244" name="getUnitById" returns="YAHOO.widget.LayoutUnit" signature="getUnitById(id)">
            <variable citdl="String" doc="The HTML element id of the unit" ilk="argument" name="id" />
          </scope>
          <scope doc="Get the LayoutUnit by it&apos;s position in this layout" ilk="function" line="251" lineend="259" name="getUnitByPosition" returns="YAHOO.widget.LayoutUnit" signature="getUnitByPosition(pos)">
            <variable citdl="String" doc="The position of the unit in this layout" ilk="argument" name="pos" />
          </scope>
          <scope doc="Remove the unit from this layout and resize the layout." ilk="function" line="265" lineend="268" name="removeUnit" signature="removeUnit(unit)">
            <variable citdl="Object" doc="The LayoutUnit that you want to remove" ilk="argument" name="unit" />
          </scope>
          <scope doc="Add a unit to this layout and if the layout is rendered, resize the layout." ilk="function" line="275" lineend="346" name="addUnit" returns="YAHOO.widget.LayoutUnit" signature="addUnit(cfg)">
            <variable citdl="Object" doc="The config for the LayoutUnit that you want to add" ilk="argument" name="cfg" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="283" name="el">
              <variable citdl="Object" line="307" name="style">
                <variable citdl="Number" line="307" name="zoom" />
              </variable>
            </variable>
            <variable attributes="__local__ private" citdl="Dom.get()" line="283" name="element">
              <variable citdl="Object" line="308" name="style">
                <variable citdl="Number" line="308" name="zoom" />
              </variable>
            </variable>
            <variable attributes="__local__ private" citdl="Dom.generateId()" line="298" name="id" />
            <variable attributes="__local__ private" citdl="Boolean" line="318" name="h" />
            <variable attributes="__local__ private" citdl="Boolean" line="318" name="w" />
            <variable attributes="__local__ private" citdl="Object" line="326" lineend="326" name="unitConfig">
              <variable citdl="this" doc="break obj ref" line="329" name="parent" />
              <variable citdl="Element" line="330" name="wrap" />
              <variable citdl="h" line="331" name="height" />
              <variable citdl="w" line="332" name="width" />
            </variable>
            <variable attributes="__local__ private" citdl="YAHOO.widget.LayoutUnit" line="334" name="unit" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Private method to create units from the config that was passed in." ilk="function" line="352" lineend="359" name="_createUnits" signature="_createUnits()">
            <variable attributes="__local__ private" citdl="this.get()" line="353" name="units" />
          </scope>
          <scope doc="Starts the chain of resize routines that will resize all the units." ilk="function" line="366" lineend="388" name="resize" returns="YAHOO.widget.Layout" signature="resize(set)">
            <variable citdl="Boolean" doc="If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)" ilk="argument" name="set" />
            <variable attributes="__local__ private" citdl="this.fireEvent()" line="369" name="retVal" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Sets up the main doc element when using the body as the main element." ilk="function" line="394" lineend="409" name="_setupBodyElements" signature="_setupBodyElements()" />
          <variable citdl="Dom.get()" line="395" name="_doc" />
          <variable citdl="String" line="398" name="id" />
          <scope attributes="private" doc="PRIVATE: Sets up the main doc element when not using the body as the main element." ilk="function" line="415" lineend="425" name="_setupElements" signature="_setupElements()" />
          <variable attributes="private" citdl="Boolean" doc="PRIVATE: Flag to determine if we are using the body as the root element." line="432" name="_isBody" />
          <variable attributes="private" citdl="YAHOO.widget.LayoutUnit" doc="PRIVATE: Reference to the left LayoutUnit Object" line="446" name="_left" />
          <variable attributes="private" citdl="YAHOO.widget.LayoutUnit" doc="PRIVATE: Reference to the right LayoutUnit Object" line="453" name="_right" />
          <variable attributes="private" citdl="YAHOO.widget.LayoutUnit" doc="PRIVATE: Reference to the top LayoutUnit Object" line="460" name="_top" />
          <variable attributes="private" citdl="YAHOO.widget.LayoutUnit" doc="PRIVATE: Reference to the bottom LayoutUnit Object" line="467" name="_bottom" />
          <variable attributes="private" citdl="YAHOO.widget.LayoutUnit" doc="PRIVATE: Reference to the center LayoutUnit Object" line="474" name="_center" />
          <scope attributes="private" doc="PRIVATE: The Layout class&apos; initialization method" ilk="function" line="480" lineend="495" name="init" signature="init(p_oElement, p_oAttributes)">
            <variable ilk="argument" name="p_oElement" />
            <variable ilk="argument" name="p_oAttributes" />
            <variable attributes="__local__ private" citdl="p_oElement" line="490" name="id" />
          </scope>
          <scope doc="This method starts the render process, applying classnames and creating elements" ilk="function" line="501" lineend="523" name="render" returns="YAHOO.widget.Layout" signature="render()">
            <variable attributes="__local__ private" citdl="this.get()" line="503" name="el" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Stamps the root node with a secure classname for ease of use. Also sets the this.browser.standardsMode variable." ilk="function" line="529" lineend="537" name="_stamp" signature="_stamp()" />
          <variable citdl="Boolean" line="531" name="standardsMode" />
          <variable citdl="Boolean" line="535" name="secure" />
          <scope attributes="private" doc="PRIVATE: Processes the config" ilk="function" line="543" lineend="616" name="initAttributes" signature="initAttributes(attr)">
            <variable ilk="argument" name="attr" />
          </scope>
          <scope doc="Returns a string representing the Layout." ilk="function" line="622" lineend="627" name="toString" returns="String" signature="toString()" />
        </scope>
      </scope>
      <scope attributes="__local__ private" doc="&lt;p&gt;Makes an element resizable&lt;/p&gt;" ilk="function" line="15" lineend="1604" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.lang" line="18" name="Lang" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="18" name="D" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="18" name="Event" />
        <scope attributes="__local__ private" classrefs="YAHOO.util.Element" ilk="class" line="29" lineend="32" name="Resize">
          <scope attributes="__local__ private __ctor__" doc="CONSTRUCTOR: &lt;p&gt;Makes an element resizable&lt;/p&gt;" ilk="function" line="29" lineend="36" name="Resize" signature="Resize(el, config)">
            <variable citdl="String/HTMLElement" doc="The element to make resizable." ilk="argument" name="el" />
            <variable ilk="argument" name="config" />
            <variable citdl="Resize" name="this" />
            <variable attributes="__local__ private" citdl="Object" line="30" lineend="33" name="oConfig">
              <variable citdl="el" line="31" name="element" />
              <variable citdl="config" line="32" name="attributes" />
            </variable>
          </scope>
          <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Internal hash table for all resize instances" line="45" lineend="45" name="_instances" />
          <scope attributes="__static__" doc="STATIC: Get&apos;s a resize object by the HTML id of the element associated with the Resize object." ilk="function" line="52" lineend="57" name="getResizeById" returns="Object" signature="getResizeById(id)">
            <variable ilk="argument" name="id" />
            <variable citdl="Resize" name="this" />
          </scope>
          <variable attributes="private" citdl="String" doc="PRIVATE: Base CSS class name" line="66" name="CSS_RESIZE" />
          <variable attributes="private" citdl="String" doc="PRIVATE: Class name added when dragging is enabled" line="73" name="CSS_DRAG" />
          <variable attributes="private" citdl="String" doc="PRIVATE: Class name used for hover only handles" line="80" name="CSS_HOVER" />
          <variable attributes="private" citdl="String" doc="PRIVATE: Class name given to the proxy element" line="87" name="CSS_PROXY" />
          <variable attributes="private" citdl="String" doc="PRIVATE: Class name given to the wrap element" line="94" name="CSS_WRAP" />
          <variable attributes="private" citdl="String" doc="PRIVATE: Class name used to make the knob style handles" line="101" name="CSS_KNOB" />
          <variable attributes="private" citdl="String" doc="PRIVATE: Class name given to the wrap element to make all handles hidden" line="108" name="CSS_HIDDEN" />
          <variable attributes="private" citdl="String" doc="PRIVATE: Class name given to all handles, used as a base for single handle names as well.. Handle &quot;t&quot; will get this.CSS_HANDLE + &apos;-t&apos; as well as this.CSS_HANDLE" line="115" name="CSS_HANDLE" />
          <variable attributes="private" citdl="String" doc="PRIVATE: Class name given to the status element" line="122" name="CSS_STATUS" />
          <variable attributes="private" citdl="String" doc="PRIVATE: Class name given to the wrap element when the ghost property is active" line="129" name="CSS_GHOST" />
          <variable attributes="private" citdl="String" doc="PRIVATE: Class name given to the wrap element when a resize action is taking place." line="136" name="CSS_RESIZING" />
          <variable attributes="private" citdl="Event" doc="PRIVATE: The mouse event used to resize with" line="143" name="_resizeEvent" />
          <variable attributes="private" citdl="Object" doc="PRIVATE: The &lt;a href=&quot;YAHOO.util.DragDrop.html&quot;&gt;YAHOO.util.DragDrop&lt;/a&gt; instance used if draggable is true" line="150" name="dd" />
          <variable attributes="private" citdl="Object" doc="PRIVATE: A copy of the YAHOO.env.ua property" line="157" name="browser" />
          <variable attributes="private" citdl="Boolean" doc="PRIVATE: A flag to show if the element is absolutely positioned" line="164" name="_positioned" />
          <variable attributes="private" citdl="Object" doc="PRIVATE: An Object containing references to all of the &lt;a href=&quot;YAHOO.util.DragDrop.html&quot;&gt;YAHOO.util.DragDrop&lt;/a&gt; instances used for the resize handles" line="171" lineend="314" name="_dds" />
          <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: The HTML reference of the element wrapper" line="178" name="_wrap" />
          <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: The HTML reference of the element proxy" line="185" name="_proxy" />
          <variable attributes="private" citdl="Object" doc="PRIVATE: An object containing references to all of the resize handles." line="192" lineend="313" name="_handles" />
          <variable attributes="private" citdl="String" doc="PRIVATE: The string identifier of the currently active handle. e.g. &apos;r&apos;, &apos;br&apos;, &apos;tl&apos;" line="199" name="_currentHandle" />
          <variable attributes="private" citdl="Object" doc="PRIVATE: A link to the currently active DD object" line="206" name="_currentDD" />
          <variable attributes="private" citdl="Object" doc="PRIVATE: An lookup table containing key information for the element being resized. e.g. height, width, x position, y position, etc.." line="213" lineend="1126" name="_cache">
            <variable citdl="Array" line="1113" name="xy" />
            <variable citdl="Number" line="1114" name="height" />
            <variable citdl="Number" line="1115" name="width" />
            <variable citdl="Number" line="1116" name="top" />
            <variable citdl="Number" line="1117" name="left" />
            <variable citdl="Number" line="1118" name="offsetHeight" />
            <variable citdl="Number" line="1119" name="offsetWidth" />
            <variable citdl="Object" line="1120" lineend="1125" name="start">
              <variable citdl="Number" line="1121" name="height" />
              <variable citdl="Number" line="1122" name="width" />
              <variable citdl="Number" line="1123" name="top" />
              <variable citdl="Number" line="1124" name="left" />
            </variable>
          </variable>
          <variable attributes="private" citdl="Boolean" doc="PRIVATE: Flag to show if the resize is active. Used for events." line="220" name="_active" />
          <scope attributes="private" doc="PRIVATE: Creates the proxy element if the proxy config is true" ilk="function" line="226" lineend="236" name="_createProxy" signature="_createProxy()" />
          <variable citdl="this.CSS_PROXY" line="229" name="className" />
          <variable citdl="this.get().clientHeight" line="230" name="height" />
          <variable citdl="this.get().clientWidth" line="231" name="width" />
          <scope attributes="private" doc="PRIVATE: Creates the wrap element if the wrap config is true. It will auto wrap the following element types: img, textarea, input, iframe, select" ilk="function" line="242" lineend="294" name="_createWrap" signature="_createWrap()">
            <variable attributes="__local__ private" citdl="D.getStyle()" line="262" name="pos" />
            <variable attributes="__local__ private" citdl="this.get().parentNode" line="272" name="par" />
          </scope>
          <variable citdl="this.get().id" line="256" name="id" />
          <scope attributes="private" doc="PRIVATE: Setup the &lt;a href=&quot;YAHOO.util.DragDrop.html&quot;&gt;YAHOO.util.DragDrop&lt;/a&gt; instance on the element" ilk="function" line="300" lineend="306" name="_setupDragDrop" signature="_setupDragDrop()" />
          <scope attributes="private" doc="PRIVATE: Creates the handles as specified in the config" ilk="function" line="312" lineend="334" name="_createHandles" signature="_createHandles()">
            <variable attributes="__local__ private" citdl="this.get()" line="315" name="h" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="320" name="k" />
          </scope>
          <variable citdl="document.createElement()" line="331" name="_status" />
          <scope attributes="private" doc="PRIVATE: The function we use as the onselectstart handler when we start a drag in Internet Explorer" ilk="function" line="340" lineend="342" name="_ieSelectFix" returns="Boolean" signature="_ieSelectFix()" />
          <variable attributes="private" citdl="document.body.onselectstart" doc="PRIVATE: We will hold a copy of the current &quot;onselectstart&quot; method on this property, and reset it after we are done using it." line="348" name="_ieSelectBack" />
          <scope attributes="private" doc="PRIVATE: This method checks to see if the &quot;autoRatio&quot; config is set. If it is, we will check to see if the &quot;Shift Key&quot; is pressed. If so, we will set the config ratio to true." ilk="function" line="355" lineend="364" name="_setAutoRatio" signature="_setAutoRatio(ev)">
            <variable citdl="Event" doc="A mouse event." ilk="argument" name="ev" />
          </scope>
          <scope attributes="private" doc="PRIVATE: This method preps the autoRatio on MouseDown." ilk="function" line="371" lineend="382" name="_handleMouseDown" signature="_handleMouseDown(ev)">
            <variable citdl="Event" doc="A mouse event." ilk="argument" name="ev" />
            <variable citdl="Object" line="380" name="document">
              <variable citdl="Object" line="380" name="body">
                <variable citdl="this._ieSelectFix" line="380" name="onselectstart" />
              </variable>
            </variable>
          </scope>
          <scope attributes="private" doc="PRIVATE: Adds CSS class names to the handles" ilk="function" line="389" lineend="413" name="_handleMouseOver" signature="_handleMouseOver(ev)">
            <variable citdl="Event" doc="A mouse event." ilk="argument" name="ev" />
            <variable attributes="__local__ private" citdl="Event.getTarget()" line="395" name="tar" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Removes CSS class names to the handles" ilk="function" line="420" lineend="443" name="_handleMouseOut" signature="_handleMouseOut(ev)">
            <variable citdl="Event" doc="A mouse event." ilk="argument" name="ev" />
            <variable attributes="__local__ private" citdl="Event.getTarget()" line="426" name="tar" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Resizes the proxy, sets up the &lt;a href=&quot;YAHOO.util.DragDrop.html&quot;&gt;YAHOO.util.DragDrop&lt;/a&gt; handlers, updates the status div and preps the cache" ilk="function" line="451" lineend="494" name="_handleStartDrag" signature="_handleStartDrag(args, dd)">
            <variable citdl="Object" doc="The args passed from the CustomEvent." ilk="argument" name="args" />
            <variable citdl="Object" doc="The &lt;a href=&quot;YAHOO.util.DragDrop.html&quot;&gt;YAHOO.util.DragDrop&lt;/a&gt; object we are working with." ilk="argument" name="dd" />
            <variable attributes="__local__ private" citdl="dd.getDragEl()" line="452" name="tar" />
            <variable attributes="__local__ private" citdl="String" line="470" name="handle" />
            <variable attributes="__local__ private" citdl="D.getXY()" line="483" name="xy" />
          </scope>
          <variable citdl="String" line="460" name="visibility" />
          <variable citdl="String" line="461" name="zIndex" />
          <scope attributes="private" doc="PRIVATE: Sets up the this._cache hash table." ilk="function" line="500" lineend="513" name="_setCache" signature="_setCache()" />
          <variable citdl="D.getXY()" line="501" name="xy" />
          <variable citdl="this._cache.xy[1]" line="507" name="top" />
          <variable citdl="this._cache.xy[0]" line="508" name="left" />
          <scope attributes="private" doc="PRIVATE: Cleans up listeners, hides proxy element and removes class names." ilk="function" line="520" lineend="581" name="_handleMouseUp" signature="_handleMouseUp(ev)">
            <variable citdl="Event" doc="A mouse event." ilk="argument" name="ev" />
            <variable attributes="__local__ private" citdl="String" line="523" name="handle" />
            <variable citdl="Object" line="548" name="document">
              <variable citdl="Object" line="548" name="body">
                <variable citdl="this._ieSelectBack" line="548" name="onselectstart" />
              </variable>
            </variable>
          </scope>
          <scope attributes="private" doc="PRIVATE: Using the Height, Width, Top &amp; Left, it recalcuates them based on the original element size." ilk="function" line="592" lineend="665" name="_setRatio" returns="Array" signature="_setRatio(h, w, t, l)">
            <variable citdl="Number" doc="The height offset." ilk="argument" name="h" />
            <variable citdl="Number" doc="The with offset." ilk="argument" name="w" />
            <variable citdl="Number" doc="The top offset." ilk="argument" name="t" />
            <variable citdl="Number" doc="The left offset." ilk="argument" name="l" />
            <variable attributes="__local__ private" citdl="h" line="593" name="oh" />
            <variable attributes="__local__ private" citdl="w" line="593" name="ow" />
            <variable attributes="__local__ private" citdl="parseInt()" line="602" name="nh" />
            <variable attributes="__local__ private" citdl="this.get()" line="602" name="minH" />
            <variable attributes="__local__ private" citdl="this._cache.height" line="602" name="orgH" />
            <variable attributes="__local__ private" citdl="this.get()" line="602" name="maxW" />
            <variable attributes="__local__ private" citdl="this.get()" line="602" name="maxH" />
            <variable attributes="__local__ private" citdl="this.get()" line="602" name="minW" />
            <variable attributes="__local__ private" citdl="this._cache.width" line="602" name="orgW" />
            <variable attributes="__local__ private" citdl="parseInt()" line="602" name="nw" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Using the Height, Width, Top &amp; Left, it updates the status element with the elements sizes." ilk="function" line="675" lineend="698" name="_updateStatus" signature="_updateStatus(h, w, t, l)">
            <variable citdl="Number" doc="The new height setting." ilk="argument" name="h" />
            <variable citdl="Number" doc="The new width setting." ilk="argument" name="w" />
            <variable citdl="Number" doc="The new top setting." ilk="argument" name="t" />
            <variable citdl="Number" doc="The new left setting." ilk="argument" name="l" />
            <variable attributes="__local__ private" citdl="parseInt()" line="683" name="h1" />
            <variable attributes="__local__ private" citdl="parseInt()" line="683" name="w1" />
            <variable attributes="__local__ private" line="691" name="diffH" />
            <variable attributes="__local__ private" line="692" name="diffW" />
          </scope>
          <variable citdl="diffH" line="693" name="offsetHeight" />
          <variable citdl="diffW" line="694" name="offsetWidth" />
          <variable citdl="String" line="695" name="innerHTML" />
          <scope doc="Resets the element to is start state." ilk="function" line="704" lineend="707" name="reset" returns="YAHOO.util.Resize" signature="reset()" />
          <scope doc="Resizes the element, wrapper or proxy based on the data from the handlers." ilk="function" line="720" lineend="904" name="resize" returns="YAHOO.util.Resize" signature="resize(ev, h, w, t, l, force, silent)">
            <variable citdl="Event" doc="The mouse event." ilk="argument" name="ev" />
            <variable citdl="Number" doc="The new height setting." ilk="argument" name="h" />
            <variable citdl="Number" doc="The new width setting." ilk="argument" name="w" />
            <variable citdl="Number" doc="The new top setting." ilk="argument" name="t" />
            <variable citdl="Number" doc="The new left setting." ilk="argument" name="l" />
            <variable citdl="Boolean" doc="Resize the element (used for proxy resize)." ilk="argument" name="force" />
            <variable citdl="Boolean" doc="Don&apos;t fire the beforeResize Event." ilk="argument" name="silent" />
            <variable attributes="__local__ private" citdl="this._wrap" line="722" name="el">
              <variable citdl="Object" line="755" name="style">
                <variable citdl="this._proxy.style.top" line="755" name="top" />
                <variable citdl="this._proxy.style.left" line="756" name="left" />
                <variable citdl="h" line="829" name="height" />
                <variable citdl="w" line="849" name="width" />
              </variable>
            </variable>
            <variable attributes="__local__ private" citdl="this.get()" line="722" name="anim" />
            <variable attributes="__local__ private" citdl="Boolean" line="722" name="set" />
            <variable attributes="__local__ private" citdl="this._setRatio()" line="735" name="ratio" />
            <variable attributes="__local__ private" citdl="this.fireEvent()" line="793" name="beforeReturn" />
            <variable attributes="__local__ private" citdl="YAHOO.util.Anim" line="867" name="_anim">
              <variable citdl="Object" line="870" name="attributes">
                <variable citdl="Object" line="870" lineend="872" name="top">
                  <variable citdl="parseInt()" line="871" name="to" />
                </variable>
                <variable citdl="Object" line="875" lineend="877" name="left">
                  <variable citdl="parseInt()" line="876" name="to" />
                </variable>
              </variable>
            </variable>
          </scope>
          <scope attributes="private" doc="PRIVATE: Handles the sizes for the Bottom Right handle." ilk="function" line="911" lineend="915" name="_handle_for_br" signature="_handle_for_br(args)">
            <variable citdl="Object" doc="The arguments from the CustomEvent." ilk="argument" name="args" />
            <variable attributes="__local__ private" citdl="this._setWidth()" line="912" name="newW" />
            <variable attributes="__local__ private" citdl="this._setHeight()" line="913" name="newH" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Handles the sizes for the Bottom Left handle." ilk="function" line="922" lineend="927" name="_handle_for_bl" signature="_handle_for_bl(args)">
            <variable citdl="Object" doc="The arguments from the CustomEvent." ilk="argument" name="args" />
            <variable attributes="__local__ private" citdl="this._setWidth()" line="923" name="newW" />
            <variable attributes="__local__ private" citdl="this._setHeight()" line="924" name="newH" />
            <variable attributes="__local__ private" line="925" name="l" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Handles the sizes for the Top Left handle." ilk="function" line="934" lineend="940" name="_handle_for_tl" signature="_handle_for_tl(args)">
            <variable citdl="Object" doc="The arguments from the CustomEvent." ilk="argument" name="args" />
            <variable attributes="__local__ private" citdl="this._setWidth()" line="935" name="newW" />
            <variable attributes="__local__ private" citdl="this._setHeight()" line="936" name="newH" />
            <variable attributes="__local__ private" line="937" name="t" />
            <variable attributes="__local__ private" line="938" name="l" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Handles the sizes for the Top Right handle." ilk="function" line="947" lineend="952" name="_handle_for_tr" signature="_handle_for_tr(args)">
            <variable citdl="Object" doc="The arguments from the CustomEvent." ilk="argument" name="args" />
            <variable attributes="__local__ private" citdl="this._setWidth()" line="948" name="newW" />
            <variable attributes="__local__ private" citdl="this._setHeight()" line="949" name="newH" />
            <variable attributes="__local__ private" line="950" name="t" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Handles the sizes for the Right handle." ilk="function" line="959" lineend="963" name="_handle_for_r" signature="_handle_for_r(args)">
            <variable citdl="Object" doc="The arguments from the CustomEvent." ilk="argument" name="args" />
            <variable attributes="__local__ private" citdl="this._setWidth()" line="961" name="newW" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Handles the sizes for the Left handle." ilk="function" line="970" lineend="975" name="_handle_for_l" signature="_handle_for_l(args)">
            <variable citdl="Object" doc="The arguments from the CustomEvent." ilk="argument" name="args" />
            <variable attributes="__local__ private" citdl="this._setWidth()" line="972" name="newW" />
            <variable attributes="__local__ private" line="973" name="l" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Handles the sizes for the Bottom handle." ilk="function" line="982" lineend="986" name="_handle_for_b" signature="_handle_for_b(args)">
            <variable citdl="Object" doc="The arguments from the CustomEvent." ilk="argument" name="args" />
            <variable attributes="__local__ private" citdl="this._setHeight()" line="984" name="newH" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Handles the sizes for the Top handle." ilk="function" line="993" lineend="998" name="_handle_for_t" signature="_handle_for_t(args)">
            <variable citdl="Object" doc="The arguments from the CustomEvent." ilk="argument" name="args" />
            <variable attributes="__local__ private" citdl="this._setHeight()" line="995" name="newH" />
            <variable attributes="__local__ private" line="996" name="t" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Calculates the width based on the mouse event." ilk="function" line="1007" lineend="1020" name="_setWidth" returns="Number" signature="_setWidth(ev, flip)">
            <variable citdl="Event" doc="The mouse event." ilk="argument" name="ev" />
            <variable citdl="Boolean" doc="Argument to determine the direction of the movement." ilk="argument" name="flip" />
            <variable attributes="__local__ private" citdl="Event.getPageX()" line="1011" name="x" />
            <variable attributes="__local__ private" citdl="this._cache.xy[0]" line="1011" name="xy" />
            <variable attributes="__local__ private" citdl="this._cache.width" line="1011" name="w" />
            <variable attributes="__local__ private" citdl="this._snapTick()" line="1011" name="nw" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Checks the value passed against the maxWidth and minWidth." ilk="function" line="1028" lineend="1040" name="_checkWidth" returns="Number" signature="_checkWidth(w)">
            <variable citdl="Number" doc="The width to check." ilk="argument" name="w" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Checks the value passed against the maxHeight and minHeight." ilk="function" line="1048" lineend="1060" name="_checkHeight" returns="Number" signature="_checkHeight(h)">
            <variable citdl="Number" doc="The height to check." ilk="argument" name="h" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Calculated the height based on the mouse event." ilk="function" line="1069" lineend="1082" name="_setHeight" returns="Number" signature="_setHeight(ev, flip)">
            <variable citdl="Event" doc="The mouse event." ilk="argument" name="ev" />
            <variable citdl="Boolean" doc="Argument to determine the direction of the movement." ilk="argument" name="flip" />
            <variable attributes="__local__ private" citdl="Event.getPageY()" line="1073" name="y" />
            <variable attributes="__local__ private" citdl="this._cache.height" line="1073" name="h" />
            <variable attributes="__local__ private" citdl="this._cache.xy[1]" line="1073" name="xy" />
            <variable attributes="__local__ private" citdl="this._snapTick()" line="1073" name="nh" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Adjusts the number based on the ticks used." ilk="function" line="1091" lineend="1105" name="_snapTick" returns="Number" signature="_snapTick(size, pix)">
            <variable citdl="Number" doc="The size to tick against." ilk="argument" name="size" />
            <variable citdl="Number" doc="The tick pixels." ilk="argument" name="pix" />
            <variable attributes="__local__ private" citdl="size" line="1095" name="_s" />
            <variable attributes="__local__ private" citdl="size" line="1096" name="_x" />
          </scope>
          <scope attributes="private" doc="PRIVATE: The Resize class&apos;s initialization method" ilk="function" line="1111" lineend="1151" name="init" signature="init(p_oElement, p_oAttributes)">
            <variable ilk="argument" name="p_oElement" />
            <variable ilk="argument" name="p_oAttributes" />
            <variable attributes="__local__ private" citdl="p_oElement" line="1139" name="id" />
          </scope>
          <scope doc="Get the HTML reference for the proxy, returns null if no proxy." ilk="function" line="1157" lineend="1159" name="getProxyEl" returns="HTMLElement" signature="getProxyEl()" />
          <scope doc="Get the HTML reference for the wrap element, returns the current element if not wrapped." ilk="function" line="1165" lineend="1167" name="getWrapEl" returns="HTMLElement" signature="getWrapEl()" />
          <scope doc="Get the HTML reference for the status element." ilk="function" line="1173" lineend="1175" name="getStatusEl" returns="HTMLElement" signature="getStatusEl()" />
          <scope doc="Get the HTML reference for the currently active resize handle." ilk="function" line="1181" lineend="1183" name="getActiveHandleEl" returns="HTMLElement" signature="getActiveHandleEl()" />
          <scope doc="Returns true or false if a resize operation is currently active on the element." ilk="function" line="1189" lineend="1191" name="isActive" returns="Boolean" signature="isActive()" />
          <scope attributes="private" doc="PRIVATE: Initializes all of the configuration attributes used to create a resizable element." ilk="function" line="1199" lineend="1519" name="initAttributes" signature="initAttributes(attr)">
            <variable citdl="Object" doc="Object literal specifying a set of&#xA;configuration attributes used to create the utility." ilk="argument" name="attr" />
          </scope>
          <scope doc="Destroys the resize object and all of it&apos;s elements &amp; listeners." ilk="function" line="1524" lineend="1557" name="destroy" signature="destroy()" />
          <scope doc="Returns a string representing the Resize Object." ilk="function" line="1563" lineend="1568" name="toString" returns="String" signature="toString()" />
        </scope>
      </scope>
      <scope attributes="__local__ private" doc="The selector module provides helper methods allowing CSS3 Selectors to be used with DOM elements." ilk="function" line="15" lineend="660" name="(anonymous)" signature="(anonymous)()">
        <scope attributes="__local__ private" ilk="class" line="22" lineend="223" name="Selector">
          <scope attributes="__local__ private __ctor__ __static__" doc="STATIC: Provides helper methods for collecting and filtering DOM elements." ilk="function" line="22" lineend="22" name="Selector" signature="Selector()">
            <variable citdl="Selector" name="this" />
          </scope>
          <variable citdl="Object" doc="Default document for use queries" line="35" name="document" />
          <variable citdl="Object" doc="Mapping of attributes to aliases, normally to work around HTMLAttributes&#xA;that conflict with JS reserved words." line="42" lineend="44" name="attrAliases">
            <variable citdl="String" line="43" name="for" />
          </variable>
          <variable citdl="Object" doc="Mapping of shorthand tokens to corresponding attribute selector" line="51" lineend="55" name="shorthand">
            <variable citdl="String" doc="&apos;(?:(?:[^\\)\\]\\s*&gt;+~,]+)(?:-?[_a-z]+[-\\w]))+#(-?[_a-z]+[-&#xA;\\w]*)&apos;: &apos;[id=$1]&apos;," line="53" name="\\#(-?[_a-z]+[-\\w]*)" />
            <variable citdl="String" line="54" name="\\.(-?[_a-z]+[-\\w]*)" />
          </variable>
          <variable citdl="Object" doc="List of operators and corresponding boolean functions.&#xA;These functions are passed the attribute and the current node&apos;s value of the attribute." line="63" lineend="75" name="operators">
            <scope ilk="function" line="64" lineend="64" name="=" returns="attr" signature="=(attr, val)">
              <variable ilk="argument" name="attr" />
              <variable ilk="argument" name="val" />
              <variable citdl="operators" name="this" />
            </scope>
            <scope doc="Equality" ilk="function" line="65" lineend="65" name="!=" returns="attr" signature="!=(attr, val)">
              <variable ilk="argument" name="attr" />
              <variable ilk="argument" name="val" />
              <variable citdl="operators" name="this" />
            </scope>
            <scope doc="Inequality" ilk="function" line="66" lineend="69" name="~=" signature="~=(attr, val)">
              <variable ilk="argument" name="attr" />
              <variable ilk="argument" name="val" />
              <variable citdl="operators" name="this" />
              <variable attributes="__local__ private" citdl="String" doc="Match one of space seperated words" line="67" name="s" />
            </scope>
            <scope ilk="function" line="70" lineend="70" name="|=" returns="getRegExp().test()" signature="|=(attr, val)">
              <variable ilk="argument" name="attr" />
              <variable ilk="argument" name="val" />
              <variable citdl="operators" name="this" />
            </scope>
            <scope doc="Match start with value followed by optional hyphen" ilk="function" line="71" lineend="71" name="^=" returns="attr.indexOf()" signature="^=(attr, val)">
              <variable ilk="argument" name="attr" />
              <variable ilk="argument" name="val" />
              <variable citdl="operators" name="this" />
            </scope>
            <scope doc="Match starts with value" ilk="function" line="72" lineend="72" name="$=" returns="attr.lastIndexOf()" signature="$=(attr, val)">
              <variable ilk="argument" name="attr" />
              <variable ilk="argument" name="val" />
              <variable citdl="operators" name="this" />
            </scope>
            <scope doc="Match ends with value" ilk="function" line="73" lineend="73" name="*=" returns="attr.indexOf()" signature="*=(attr, val)">
              <variable ilk="argument" name="attr" />
              <variable ilk="argument" name="val" />
              <variable citdl="operators" name="this" />
            </scope>
          </variable>
          <variable citdl="Object" doc="List of pseudo-classes and corresponding boolean functions.&#xA;These functions are called with the current node, and any value that was parsed with the pseudo regex." line="83" lineend="146" name="pseudos">
            <scope ilk="function" line="84" lineend="86" name="root" returns="Node" signature="root(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="88" lineend="90" name="nth-child" returns="getNth()" signature="nth-child(node, val)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="val" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="92" lineend="94" name="nth-last-child" returns="getNth()" signature="nth-last-child(node, val)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="val" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="96" lineend="98" name="nth-of-type" returns="getNth()" signature="nth-of-type(node, val)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="val" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="100" lineend="102" name="nth-last-of-type" returns="getNth()" signature="nth-last-of-type(node, val)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="val" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="104" lineend="106" name="first-child" returns="getChildren()[0]" signature="first-child(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="108" lineend="111" name="last-child" returns="children[children.length-1]" signature="last-child(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="getChildren()" line="109" name="children" />
            </scope>
            <scope ilk="function" line="113" lineend="115" name="first-of-type" returns="getChildren()[0]" signature="first-of-type(node, val)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="val" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="117" lineend="120" name="last-of-type" returns="children[children.length-1]" signature="last-of-type(node, val)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="val" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="getChildren()" line="118" name="children" />
            </scope>
            <scope ilk="function" line="122" lineend="125" name="only-child" returns="children.length" signature="only-child(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="getChildren()" line="123" name="children" />
            </scope>
            <scope ilk="function" line="127" lineend="129" name="only-of-type" returns="getChildren().length" signature="only-of-type(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="131" lineend="133" name="empty" returns="node.childNodes.length" signature="empty(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="135" lineend="137" name="not" signature="not(node, simple)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="simple" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="139" lineend="142" name="contains" returns="text.indexOf()" signature="contains(node, str)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="str" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="node.innerText" line="140" name="text" />
            </scope>
            <scope ilk="function" line="143" lineend="145" name="checked" returns="node.checked" signature="checked(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="pseudos" name="this" />
            </scope>
          </variable>
          <scope attributes="__static__" doc="STATIC: Test if the supplied node matches the supplied selector." ilk="function" line="158" lineend="175" name="test" returns="rTestNode()" signature="test(node, selector)">
            <variable ilk="argument" name="node" />
            <variable citdl="String" doc="The CSS Selector to test the node against." ilk="argument" name="selector" />
            <variable citdl="Selector" name="this" />
            <variable attributes="__local__ private" citdl="selector" line="165" name="groups" />
          </scope>
          <scope attributes="__static__" doc="STATIC: Filters a set of nodes based on a given CSS selector." ilk="function" line="186" lineend="207" name="filter" returns="result" signature="filter(nodes, selector)">
            <variable citdl="Array" doc="A set of nodes/ids to filter." ilk="argument" name="nodes" />
            <variable citdl="String" doc="The selector used to test each node." ilk="argument" name="selector" />
            <variable citdl="Selector" name="this" />
            <variable attributes="__local__ private" citdl="Selector.document.getElementById()" line="191" name="node" />
            <variable attributes="__local__ private" citdl="tokenize()" line="191" name="tokens" />
            <variable attributes="__local__ private" citdl="Array" line="191" name="result" />
          </scope>
          <scope attributes="__static__" doc="STATIC: Retrieves a set of nodes based on a given CSS selector." ilk="function" line="219" lineend="222" name="query" returns="Array" signature="query(selector, root, firstOnly)">
            <variable citdl="String" doc="The CSS Selector to test the node against." ilk="argument" name="selector" />
            <variable ilk="argument" name="root" />
            <variable citdl="Boolean" doc="optional Whether or not to return only the first match." ilk="argument" name="firstOnly" />
            <variable citdl="Selector" name="this" />
            <variable attributes="__local__ private" citdl="query()" line="220" name="result" />
          </scope>
        </scope>
        <variable attributes="__local__ private" citdl="YAHOO.util" line="24" name="Y" />
        <variable attributes="__local__ private" line="26" name="reNth" />
        <scope attributes="__local__ private" ilk="function" line="225" lineend="287" name="query" returns="result" signature="query(selector, root, firstOnly, deDupe)">
          <variable ilk="argument" name="selector" />
          <variable ilk="argument" name="root" />
          <variable ilk="argument" name="firstOnly" />
          <variable ilk="argument" name="deDupe" />
          <variable attributes="__local__ private" citdl="firstOnly" line="226" name="result" />
          <variable attributes="__local__ private" citdl="selector.split()" line="231" name="groups" />
          <variable attributes="__local__ private" citdl="arguments.callee()" line="234" name="found" />
          <variable attributes="__local__ private" citdl="tokenize()" line="251" name="tokens" />
          <variable attributes="__local__ private" citdl="Selector.document.getElementById()" line="256" name="node" />
          <variable attributes="__local__ private" citdl="tokens[getIdTokenIndex(tokens)]" line="256" name="idToken" />
          <variable attributes="__local__ private" citdl="tokens.pop()" line="256" name="token" />
          <variable attributes="__local__ private" citdl="Array" line="256" name="nodes" />
          <variable attributes="__local__ private" citdl="getId()" line="256" name="id" />
        </scope>
        <variable citdl="Boolean" line="289" name="contains" />
        <scope attributes="__local__ private" ilk="function" line="312" lineend="335" name="rFilter" returns="result" signature="rFilter(nodes, token, firstOnly, deDupe)">
          <variable ilk="argument" name="nodes" />
          <variable ilk="argument" name="token" />
          <variable ilk="argument" name="firstOnly" />
          <variable ilk="argument" name="deDupe" />
          <variable attributes="__local__ private" citdl="firstOnly" line="313" name="result" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="337" lineend="372" name="rTestNode" signature="rTestNode(node, selector, token, deDupe)">
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="selector" />
          <variable ilk="argument" name="token" />
          <variable ilk="argument" name="deDupe" />
          <variable attributes="__local__ private" citdl="node.getAttribute()" line="347" name="attribute" />
        </scope>
        <variable attributes="__local__ private" citdl="Array" line="375" name="foundCache" />
        <variable attributes="__local__ private" citdl="Array" line="376" name="parentCache" />
        <variable attributes="__local__ private" citdl="Object" line="377" lineend="377" name="regexCache" />
        <scope attributes="__local__ private" ilk="function" line="379" lineend="388" name="clearFoundCache" signature="clearFoundCache()" />
        <variable line="390" name="clearParentCache" />
        <scope attributes="__local__ private" ilk="function" line="401" lineend="407" name="getRegExp" returns="regexCache[str+flags]" signature="getRegExp(str, flags)">
          <variable ilk="argument" name="str" />
          <variable ilk="argument" name="flags" />
        </scope>
        <variable attributes="__local__ private" citdl="Object" line="409" lineend="445" name="combinators">
          <scope ilk="function" line="410" lineend="417" name=" " returns="Boolean" signature=" (node, token)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="token" />
            <variable citdl="combinators" name="this" />
          </scope>
          <scope ilk="function" line="419" lineend="421" name="&gt;" returns="rTestNode()" signature="&gt;(node, token)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="token" />
            <variable citdl="combinators" name="this" />
          </scope>
          <scope ilk="function" line="422" lineend="432" name="+" returns="Boolean" signature="+(node, token)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="token" />
            <variable citdl="combinators" name="this" />
            <variable attributes="__local__ private" citdl="node.previousSibling" line="423" name="sib" />
          </scope>
          <scope ilk="function" line="434" lineend="444" name="~" returns="Boolean" signature="~(node, token)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="token" />
            <variable citdl="combinators" name="this" />
            <variable attributes="__local__ private" citdl="node.previousSibling" line="435" name="sib" />
          </scope>
        </variable>
        <variable citdl="children" line="447" name="getChildren" />
        <scope attributes="__local__ private" doc="an+b = get every _a_th node starting at the _b_th 0n+b = no&#xA;repeat (&quot;0&quot; and &quot;n&quot; may both be omitted (together) , e.g." ilk="function" line="480" lineend="530" name="getNth" returns="Boolean" signature="getNth(node, expr, tag, reverse)">
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="expr" />
          <variable ilk="argument" name="tag" />
          <variable ilk="argument" name="reverse" />
          <variable attributes="__local__ private" citdl="parseInt()" doc="start scan from element _b_" line="487" name="a" />
          <variable attributes="__local__ private" citdl="parseInt()" doc="start scan from element _b_" line="487" name="b" />
          <variable attributes="__local__ private" citdl="RegExp.$2" doc="start scan from element _b_" line="487" name="n" />
          <variable attributes="__local__ private" citdl="RegExp.$3" doc="start scan from element _b_" line="487" name="oddeven" />
          <variable attributes="__local__ private" citdl="Array" doc="start scan from element _b_" line="487" name="result" />
          <variable attributes="__local__ private" citdl="getChildren()" line="489" name="siblings" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="532" lineend="538" name="getId" returns="attr[i][2]" signature="getId(attr)">
          <variable ilk="argument" name="attr" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="540" lineend="547" name="getIdTokenIndex" returns="Number" signature="getIdTokenIndex(tokens)">
          <variable ilk="argument" name="tokens" />
        </scope>
        <variable attributes="__local__ private" citdl="Object" line="549" lineend="554" name="patterns">
          <variable line="550" name="tag" />
          <variable line="551" name="attributes" />
          <variable line="552" name="pseudos" />
        </variable>
        <scope attributes="__local__ private" doc="Break selector into token units per simple selector.&#xA;Combinator is attached to left-hand selector." ilk="function" line="560" lineend="616" name="tokenize" returns="tokens" signature="tokenize(selector)">
          <variable ilk="argument" name="selector" />
          <variable attributes="__local__ private" citdl="Object" line="561" lineend="609" name="token">
            <variable citdl="match[3]" line="593" name="id" />
            <variable citdl="fixAttributes()" doc="next token or done" line="602" name="attributes" />
            <variable citdl="token.pseudos" line="603" name="pseudos" />
            <variable citdl="token.tag" line="604" name="tag" />
            <variable citdl="token" doc="prep next token" line="608" name="previous" />
          </variable>
          <variable attributes="__local__ private" citdl="Array" doc="one token per simple selector (left selector holds&#xA;combinator)" line="562" name="tokens" />
          <variable attributes="__local__ private" doc="array of tokens" line="563" name="id" />
          <variable attributes="__local__ private" citdl="Boolean" doc="unique id for the simple selector (if found)" line="564" name="found" />
          <variable attributes="__local__ private" doc="whether or not any matches were found this pass" line="565" name="match" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="618" lineend="630" name="fixAttributes" returns="attr" signature="fixAttributes(attr)">
          <variable ilk="argument" name="attr" />
          <variable attributes="__local__ private" citdl="Selector.attrAliases" line="619" name="aliases" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="632" lineend="651" name="replaceShorthand" returns="selector" signature="replaceShorthand(selector)">
          <variable ilk="argument" name="selector" />
          <variable attributes="__local__ private" citdl="Selector.shorthand" line="633" name="shorthand" />
          <variable attributes="__local__ private" citdl="selector.match()" line="634" name="attrs" />
        </scope>
        <variable citdl="Selector" line="657" name="Selector" />
      </scope>
      <variable citdl="Object" line="21" lineend="72" name="YAHOO">
        <variable citdl="Object" line="21" name="tool">
          <scope ilk="class" line="21" lineend="92" name="TestCase">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Test case containing various tests to run." ilk="function" line="21" lineend="43" name="TestCase" signature="TestCase(template)">
              <variable doc="An object containing any number of test methods, other methods,&#xA;an optional name, and anything else the test case needs." ilk="argument" name="template" />
              <variable citdl="TestCase" name="this" />
            </scope>
            <variable citdl="Object" doc="Special rules for the test case. Possible subobjects&#xA;are fail, for tests that should fail, and error, for&#xA;tests that should throw an error.&#xA;*//*:Object*/" line="28" lineend="28" name="_should" />
            <variable citdl="YAHOO.util.Dom.generateId()" doc="Name for the test case.&#xA;*//*:String*/" line="40" name="name" />
            <scope doc="Resumes a paused test and runs the given function.&#xA;*//*:Void*/" ilk="function" line="55" lineend="57" name="resume" signature="resume(segment)">
              <variable citdl="Function" doc="(Optional) The function to run.&#xA;If omitted, the test automatically passes." ilk="argument" name="segment" />
              <variable citdl="TestCase" name="this" />
            </scope>
            <scope doc="Causes the test case to wait a specified amount of time and then&#xA;continue executing the given code.&#xA;*//*:Void*/" ilk="function" line="69" lineend="71" name="wait" signature="wait(segment, delay)">
              <variable citdl="Function" doc="(Optional) The function to run after the delay.&#xA;If omitted, the TestRunner will wait until resume() is called." ilk="argument" name="segment" />
              <variable citdl="Number" doc="(Optional) The number of milliseconds to wait before running&#xA;the function. If omitted, defaults to zero." ilk="argument" name="delay" />
              <variable citdl="TestCase" name="this" />
            </scope>
            <scope doc="Function to run before each test is executed.&#xA;*//*:Void*/" ilk="function" line="82" lineend="83" name="setUp" signature="setUp()">
              <variable citdl="TestCase" name="this" />
            </scope>
            <scope doc="Function to run after each test is executed.&#xA;*//*:Void*/" ilk="function" line="90" lineend="91" name="tearDown" signature="tearDown()">
              <variable citdl="TestCase" name="this" />
            </scope>
            <scope ilk="class" line="104" lineend="120" name="Wait">
              <scope attributes="__ctor__" doc="CONSTRUCTOR: Represents a stoppage in test execution to wait for an amount of time before&#xA;continuing." ilk="function" line="104" lineend="120" name="Wait" signature="Wait(segment, delay)">
                <variable citdl="Function" doc="A function to run when the wait is over." ilk="argument" name="segment" />
                <variable citdl="Number" doc="The number of milliseconds to wait before running the code." ilk="argument" name="delay" />
                <variable citdl="Wait" name="this" />
              </scope>
              <variable citdl="Function" doc="The segment of code to run when the wait is over.&#xA;*//*:Function*/" line="111" name="segment" />
              <variable citdl="Number" doc="The delay before running the segment of code.&#xA;*//*:int*/" line="118" name="delay" />
            </scope>
          </scope>
          <variable attributes="__static__" citdl="Object" doc="STATIC: The YUI JavaScript profiler." line="22" lineend="379" name="Profiler">
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Container object on which to put the original unprofiled methods." line="35" name="_container" />
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Call information for functions." line="44" name="_report" />
            <scope attributes="private __static__" doc="PRIVATE STATIC: Called when a method ends execution. Marks the start and end time of the&#xA;method so it can calculate how long the function took to execute. Also&#xA;updates min/max/avg calculations for the function." ilk="function" line="61" lineend="81" name="_saveData" signature="_saveData(name, duration)">
              <variable citdl="String" doc="The name of the function to mark as stopped." ilk="argument" name="name" />
              <variable citdl="Number" doc="The number of milliseconds it took the function to&#xA;execute." ilk="argument" name="duration" />
              <variable citdl="Profiler" name="this" />
              <variable attributes="__local__ private" citdl="this._report[name]" doc=":Object*/" line="64" name="functionData" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the average amount of time (in milliseconds) that the function&#xA;with the given name takes to execute.&#xA;*//*:float*/" ilk="function" line="96" lineend="98" name="getAverage" returns="Number" signature="getAverage(name)">
              <variable citdl="String" doc="The name of the function whose data should be returned.&#xA;If an object type method, it should be &apos;constructor.prototype.methodName&apos;;&#xA;a normal object method would just be &apos;object.methodName&apos;." ilk="argument" name="name" />
              <variable citdl="Profiler" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the number of times that the given function has been called.&#xA;*//*:int*/" ilk="function" line="106" lineend="108" name="getCallCount" returns="Number" signature="getCallCount(name)">
              <variable citdl="String" doc="The name of the function whose data should be returned." ilk="argument" name="name" />
              <variable citdl="Profiler" name="this" />
            </scope>
            <scope doc="Returns the maximum amount of time (in milliseconds) that the function&#xA;with the given name takes to execute.&#xA;*//*:int*/" ilk="function" line="118" lineend="120" name="getMax" returns="Number" signature="getMax(name)">
              <variable citdl="String" doc="The name of the function whose data should be returned.&#xA;If an object type method, it should be &apos;constructor.prototype.methodName&apos;;&#xA;a normal object method would just be &apos;object.methodName&apos;." ilk="argument" name="name" />
              <variable citdl="Profiler" name="this" />
            </scope>
            <scope doc="Returns the minimum amount of time (in milliseconds) that the function&#xA;with the given name takes to execute.&#xA;*//*:int*/" ilk="function" line="130" lineend="132" name="getMin" returns="Number" signature="getMin(name)">
              <variable citdl="String" doc="The name of the function whose data should be returned.&#xA;If an object type method, it should be &apos;constructor.prototype.methodName&apos;;&#xA;a normal object method would just be &apos;object.methodName&apos;." ilk="argument" name="name" />
              <variable citdl="Profiler" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns an object containing profiling data for a single function.&#xA;The object has an entry for min, max, avg, calls, and points).&#xA;*//*:Object*/" ilk="function" line="140" lineend="142" name="getFunctionReport" returns="Object" signature="getFunctionReport(name)">
              <variable ilk="argument" name="name" />
              <variable citdl="Profiler" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns an object containing profiling data for all of the functions&#xA;that were profiled. The object has an entry for each function and&#xA;returns all information (min, max, average, calls, etc.) for each&#xA;function.&#xA;*//*:Object*/" ilk="function" line="152" lineend="166" name="getFullReport" returns="Object" signature="getFullReport(filter)">
              <variable ilk="argument" name="filter" />
              <variable citdl="Profiler" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="156" lineend="156" name="report" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Sets up a constructor for profiling, including all properties and methods on the prototype.&#xA;*//*:Void*/" ilk="function" line="179" lineend="181" name="registerConstructor" signature="registerConstructor(name, owner)">
              <variable citdl="String" doc="The fully-qualified name of the function including namespace information." ilk="argument" name="name" />
              <variable citdl="Object" doc="(Optional) The object that owns the function (namespace or containing object)." ilk="argument" name="owner" />
              <variable citdl="Profiler" name="this" />
            </scope>
            <scope doc="Sets up a function for profiling. It essentially overwrites the function with one&#xA;that has instrumentation data. This method also creates an entry for the function&#xA;in the profile report. The original function is stored on the _container object.&#xA;*//*:Void*/" ilk="function" line="196" lineend="251" name="registerFunction" signature="registerFunction(name, owner, registerPrototype)">
              <variable citdl="String" doc="The full name of the function including namespacing. This&#xA;is the name of the function that is stored in the report." ilk="argument" name="name" />
              <variable citdl="Object" doc="(Optional) The object that owns the function. If the function&#xA;isn&apos;t global then this argument is required. This could be the namespace that&#xA;the function belongs to, such as YAHOO.util.Dom, or the object on which it&apos;s&#xA;a method." ilk="argument" name="owner" />
              <variable ilk="argument" name="registerPrototype" />
              <variable citdl="Profiler" name="this" />
              <variable attributes="__local__ private" doc=":String*/" line="199" name="funcName" />
              <variable attributes="__local__ private" citdl="owner[funcName]" doc=":Function*/" line="205" name="method" />
              <variable attributes="__local__ private" citdl="method.prototype" doc=":Object*/" line="206" name="prototype" />
              <variable attributes="__local__ private" citdl="Date" line="217" name="start" />
              <variable attributes="__local__ private" citdl="method.apply()" line="218" name="retval" />
              <variable attributes="__local__ private" citdl="Date" line="219" name="stop" />
            </scope>
            <variable citdl="Number" line="241" name="calls" />
            <variable citdl="Number" line="242" name="max" />
            <variable citdl="Number" line="243" name="min" />
            <variable citdl="Number" line="244" name="avg" />
            <variable citdl="Array" line="245" name="points" />
            <scope attributes="__static__" doc="STATIC: Sets up an object for profiling. It takes the object and looks for functions.&#xA;When a function is found, registerMethod() is called on it. If set to recrusive&#xA;mode, it will also setup objects found inside of this object for profiling,&#xA;using the same methodology.&#xA;*//*:Void*/" ilk="function" line="265" lineend="283" name="registerObject" signature="registerObject(name, object, recurse)">
              <variable citdl="String" doc="The name of the object to profile (shows up in report)." ilk="argument" name="name" />
              <variable ilk="argument" name="object" />
              <variable citdl="Boolean" doc="(Optional) Determines if subobject methods are also profiled." ilk="argument" name="recurse" />
              <variable citdl="Profiler" name="this" />
            </scope>
            <scope doc="Removes a constructor function from profiling. Reverses the registerConstructor() method.&#xA;*//*:Void*/" ilk="function" line="292" lineend="311" name="unregisterConstructor" signature="unregisterConstructor(name)">
              <variable citdl="String" doc="The full name of the function including namespacing. This&#xA;is the name of the function that is stored in the report." ilk="argument" name="name" />
              <variable citdl="Profiler" name="this" />
            </scope>
            <scope doc="Removes function from profiling. Reverses the registerFunction() method.&#xA;*//*:Void*/" ilk="function" line="320" lineend="346" name="unregisterFunction" signature="unregisterFunction(name, unregisterPrototype)">
              <variable citdl="String" doc="The full name of the function including namespacing. This&#xA;is the name of the function that is stored in the report." ilk="argument" name="name" />
              <variable ilk="argument" name="unregisterPrototype" />
              <variable citdl="Profiler" name="this" />
              <variable attributes="__local__ private" citdl="this._container[name].__yuiOwner" doc=":Object*/" line="331" name="owner" />
              <variable attributes="__local__ private" citdl="this._container[name].__yuiFuncName" doc=":String*/" line="332" name="funcName" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Unregisters an object for profiling. It takes the object and looks for functions.&#xA;When a function is found, unregisterMethod() is called on it. If set to recrusive&#xA;mode, it will also unregister objects found inside of this object,&#xA;using the same methodology.&#xA;*//*:Void*/" ilk="function" line="359" lineend="376" name="unregisterObject" signature="unregisterObject(name, recurse)">
              <variable citdl="String" doc="The name of the object to unregister." ilk="argument" name="name" />
              <variable citdl="Boolean" doc="(Optional) Determines if subobject methods should also be&#xA;unregistered." ilk="argument" name="recurse" />
              <variable citdl="Profiler" name="this" />
            </scope>
          </variable>
          <scope ilk="class" line="137" lineend="200" name="TestSuite">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A test suite that can contain a collection of TestCase and TestSuite objects." ilk="function" line="137" lineend="164" name="TestSuite" signature="TestSuite(data)">
              <variable citdl="{String" doc="The name of the test suite or an object containing&#xA;a name property as well as setUp and tearDown methods." ilk="argument" name="data" />
              <variable citdl="TestSuite" name="this" />
            </scope>
            <variable citdl="String" doc="The name of the test suite.&#xA;*//*:String*/" line="144" name="name" />
            <variable attributes="private" citdl="Array" doc="PRIVATE: Array of test suites and&#xA;*//*:Array*/" line="150" name="items" />
            <scope doc="Adds a test suite or test case to the test suite.&#xA;*//*:Void*/" ilk="function" line="174" lineend="178" name="add" signature="add(testObject)">
              <variable citdl="{YAHOO.tool.TestSuite" doc="The test suite or test case to add." ilk="argument" name="testObject" />
              <variable citdl="TestSuite" name="this" />
            </scope>
            <scope doc="Function to run before each test is executed.&#xA;*//*:Void*/" ilk="function" line="189" lineend="190" name="setUp" signature="setUp()">
              <variable citdl="TestSuite" name="this" />
            </scope>
            <scope doc="Function to run after each test is executed.&#xA;*//*:Void*/" ilk="function" line="197" lineend="198" name="tearDown" signature="tearDown()">
              <variable citdl="TestSuite" name="this" />
            </scope>
          </scope>
          <variable attributes="__static__" doc="STATIC: The YUI test tool&#xA;*///-----------------------------------------------------------------------------&#xA;// TestRunner object&#xA;//-----------------------------------------------------------------------------&#xA;/**" line="872" name="TestRunner" />
          <variable attributes="__static__" citdl="Object" doc="STATIC: Runs pages containing test suite definitions." line="2585" lineend="2909" name="TestManager">
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant for the testpagebegin custom event&#xA;*//*:String*/" line="2594" name="TEST_PAGE_BEGIN_EVENT" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant for the testpagecomplete custom event&#xA;*//*:String*/" line="2603" name="TEST_PAGE_COMPLETE_EVENT" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant for the testmanagerbegin custom event&#xA;*//*:String*/" line="2612" name="TEST_MANAGER_BEGIN_EVENT" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant for the testmanagercomplete custom event&#xA;*//*:String*/" line="2621" name="TEST_MANAGER_COMPLETE_EVENT" />
            <variable attributes="private __static__" citdl="String" doc="PRIVATE STATIC: The URL of the page currently being executed.&#xA;*//*:String*/" line="2635" name="_curPage" />
            <variable attributes="private __static__" citdl="Window" doc="PRIVATE STATIC: The frame used to load and run tests.&#xA;*//*:Window*/" line="2644" name="_frame" />
            <variable attributes="private __static__" citdl="YAHOO.tool.TestLogger" doc="PRIVATE STATIC: The logger used to output results from the various tests." line="2653" name="_logger" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: The timeout ID for the next iteration through the tests.&#xA;*//*:int*/" line="2662" name="_timeoutId" />
            <variable attributes="private __static__" citdl="Array" doc="PRIVATE STATIC: Array of pages to load.&#xA;*//*:String[]*/" line="2671" name="_pages" />
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Aggregated results" line="2680" lineend="2893" name="_results">
              <variable citdl="Number" line="2870" name="passed" />
              <variable citdl="Number" line="2871" name="failed" />
              <variable citdl="Number" line="2872" name="ignored" />
              <variable citdl="Number" line="2873" name="total" />
              <variable citdl="String" line="2874" name="type" />
              <variable citdl="String" line="2875" name="name" />
              <variable citdl="Array" line="2876" name="failedPages" />
              <variable citdl="Array" doc="// number of pages that pass pages_passed: 0, // number of&#xA;pages that fail pages_failed: 0, // total number of tests&#xA;passed" line="2877" name="passedPages" />
            </variable>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Handles TestRunner.COMPLETE_EVENT, storing the results and beginning&#xA;the loop again.&#xA;*//*:Void*/" ilk="function" line="2694" lineend="2717" name="_handleTestRunnerComplete" signature="_handleTestRunnerComplete(data)">
              <variable citdl="Object" doc="Data about the event." ilk="argument" name="data" />
              <variable citdl="TestManager" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Processes the results of a test page run, outputting log messages&#xA;for failed tests.&#xA;*//*:Void*/" ilk="function" line="2726" lineend="2745" name="_processResults" signature="_processResults(page, results)">
              <variable ilk="argument" name="page" />
              <variable ilk="argument" name="results" />
              <variable citdl="TestManager" name="this" />
              <variable attributes="__local__ private" citdl="this._results" line="2728" name="r" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Loads the next test page into the iframe.&#xA;*//*:Void*/" ilk="function" line="2753" lineend="2764" name="_run" signature="_run()">
              <variable citdl="TestManager" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Signals that a test page has been loaded. This should be called from&#xA;within the test page itself to notify the TestManager that it is ready.&#xA;*//*:Void*/" ilk="function" line="2776" lineend="2792" name="load" signature="load()">
              <variable citdl="TestManager" name="this" />
              <variable attributes="__local__ private" citdl="this._frame.YAHOO.tool.TestRunner" doc="assign event handling" line="2783" name="TestRunner" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Sets the pages to be loaded.&#xA;*//*:Void*/" ilk="function" line="2800" lineend="2802" name="setPages" signature="setPages(pages)">
              <variable citdl="Array" doc="An array of URLs to load." ilk="argument" name="pages" />
              <variable citdl="TestManager" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Begins the process of running the tests.&#xA;*//*:Void*/" ilk="function" line="2809" lineend="2898" name="start" signature="start()">
              <variable citdl="TestManager" name="this" />
              <variable attributes="__local__ private" citdl="document.createElement()" doc=":HTMLElement*/" line="2851" name="frame">
                <variable citdl="Object" line="2852" name="style">
                  <variable citdl="String" line="2852" name="visibility" />
                  <variable citdl="String" line="2853" name="position" />
                </variable>
              </variable>
            </scope>
            <variable citdl="Boolean" line="2863" name="_initialized" />
            <scope attributes="__static__" doc="STATIC: Stops the execution of tests.&#xA;*//*:Void*/" ilk="function" line="2905" lineend="2907" name="stop" signature="stop()">
              <variable citdl="TestManager" name="this" />
            </scope>
          </variable>
          <scope classrefs="YAHOO.widget.LogReader" ilk="class" line="2929" lineend="2932" name="TestLogger">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Displays test execution progress and results, providing filters based on&#xA;different key events." ilk="function" line="2929" lineend="2932" name="TestLogger" signature="TestLogger(element, config)">
              <variable citdl="HTMLElement" doc="(Optional) The element to create the logger in." ilk="argument" name="element" />
              <variable citdl="Object" doc="(Optional) Configuration options for the logger." ilk="argument" name="config" />
              <variable citdl="TestLogger" name="this" />
            </scope>
            <variable citdl="Boolean" line="2936" name="footerEnabled" />
            <variable citdl="Boolean" line="2937" name="newestOnTop" />
            <scope attributes="private" doc="PRIVATE: Formats message string to HTML for output to console." ilk="function" line="2946" lineend="2953" name="formatMsg" returns="String" signature="formatMsg(message)">
              <variable ilk="argument" name="message" />
              <variable attributes="__local__ private" citdl="message.category" doc=":String*/" line="2948" name="category" />
              <variable attributes="__local__ private" citdl="this.html2Text()" doc=":String*/" line="2949" name="text" />
            </scope>
            <scope doc="* Initializes the logger." ilk="function" line="2963" lineend="2981" name="init" signature="init()" />
            <scope attributes="__static__" doc="STATIC: Clears the reference to the TestRunner from previous operations. This&#xA;unsubscribes all events and removes the object reference.&#xA;*//*:Void*/" ilk="function" line="2989" lineend="2994" name="clearTestRunner" signature="clearTestRunner()" />
            <variable citdl="testRunner" line="2992" name="_runner" />
            <scope attributes="__static__" doc="STATIC: Sets the source test runner that the logger should monitor.&#xA;*//*:Void*/" ilk="function" line="3002" lineend="3020" name="setTestRunner" signature="setTestRunner(testRunner)">
              <variable citdl="YAHOO.tool.TestRunner" doc="The TestRunner to observe." ilk="argument" name="testRunner" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles all TestRunner events, outputting appropriate data into the console.&#xA;*//*:Void*/" ilk="function" line="3032" lineend="3095" name="_handleTestRunnerEvent" signature="_handleTestRunnerEvent(data)">
              <variable citdl="Object" doc="The event data object." ilk="argument" name="data" />
              <variable attributes="__local__ private" citdl="YAHOO.tool.TestRunner" doc=":Object*/" line="3035" name="TestRunner" />
              <variable attributes="__local__ private" citdl="String" doc=":String*/" line="3038" name="message" />
              <variable attributes="__local__ private" citdl="String" doc=":String*/" line="3039" name="messageType" />
            </scope>
          </scope>
          <variable citdl="Object" line="3109" name="TestFormat">
            <scope attributes="__static__" doc="STATIC: Returns test results formatted as a JSON string. Requires JSON utility.&#xA;*//*:String*/" ilk="function" line="3109" lineend="3111" name="JSON" returns="String" signature="JSON(results)">
              <variable ilk="argument" name="results" />
              <variable citdl="TestFormat" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns test results formatted as an XML string.&#xA;*//*:String*/" ilk="function" line="3121" lineend="3141" name="XML" returns="String" signature="XML(results)">
              <variable ilk="argument" name="results" />
              <variable citdl="TestFormat" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.lang" line="3123" name="l" />
              <variable attributes="__local__ private" citdl="String" doc=":String*/" line="3124" name="xml" />
            </scope>
          </variable>
          <scope ilk="class" line="3154" lineend="3311" name="TestReporter">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: An object capable of sending test results to a server." ilk="function" line="3154" lineend="3193" name="TestReporter" signature="TestReporter(url, format)">
              <variable citdl="String" doc="The URL to submit the results to." ilk="argument" name="url" />
              <variable citdl="Function" doc="(Optiona) A function that outputs the results in a specific format.&#xA;Default is YAHOO.tool.TestFormat.XML." ilk="argument" name="format" />
              <variable citdl="TestReporter" name="this" />
            </scope>
            <variable citdl="String" doc="The URL to submit the data to.&#xA;*//*:String*/" line="3161" name="url" />
            <variable citdl="Function" doc="The formatting function to call when submitting the data.&#xA;*//*:Function*/" line="3168" name="format" />
            <variable attributes="private" citdl="Object" doc="PRIVATE: Extra fields to submit with the request.&#xA;*//*:Object*/" line="3176" name="_fields" />
            <variable attributes="private" citdl="HTMLFormElement" doc="PRIVATE: The form element used to submit the results.&#xA;*//*:HTMLElement*/" line="3184" name="_form" />
            <variable attributes="private" citdl="HTMLIFrameElement" doc="PRIVATE: Iframe used as a target for form submission.&#xA;*//*:HTMLElement*/" line="3192" name="_iframe" />
            <variable citdl="YAHOO.tool.TestReporter" doc="restore missing constructor" line="3198" name="constructor" />
            <scope doc="Adds a field to the form that submits the results.&#xA;*//*:Void*/" ilk="function" line="3207" lineend="3209" name="addField" signature="addField(name, value)">
              <variable citdl="String" doc="The name of the field." ilk="argument" name="name" />
              <variable citdl="Variant" doc="The value of the field." ilk="argument" name="value" />
              <variable citdl="TestReporter" name="this" />
            </scope>
            <scope doc="Removes all previous defined fields.&#xA;*//*:Void*/" ilk="function" line="3216" lineend="3218" name="clearFields" signature="clearFields()">
              <variable citdl="TestReporter" name="this" />
            </scope>
            <scope doc="Cleans up the memory associated with the TestReporter, removing DOM elements&#xA;that were created.&#xA;*//*:Void*/" ilk="function" line="3226" lineend="3236" name="destroy" signature="destroy()">
              <variable citdl="TestReporter" name="this" />
            </scope>
            <scope doc="Sends the report to the server.&#xA;*//*:Void*/" ilk="function" line="3244" lineend="3309" name="report" signature="report(results)">
              <variable citdl="Object" doc="The results object created by TestRunner." ilk="argument" name="results" />
              <variable citdl="TestReporter" name="this" />
            </scope>
            <variable citdl="String" line="3249" name="method" />
            <variable citdl="String" line="3250" name="visibility" />
            <variable citdl="String" line="3251" name="position" />
            <variable citdl="Number" line="3252" name="top" />
            <variable citdl="String" line="3260" name="name" />
            <variable citdl="String" line="3263" name="src" />
            <variable citdl="String" line="3269" name="target" />
            <variable citdl="this.url" doc="set the form&apos;s action" line="3273" name="action" />
            <variable citdl="this.format()" doc="create default fields" line="3281" name="results" />
            <variable citdl="navigator.userAgent" line="3282" name="useragent" />
            <variable line="3283" name="timestamp" />
          </scope>
        </variable>
        <scope attributes="__static__" doc="STATIC: Returns the namespace specified and creates it if it doesn&apos;t exist&#xA;&lt;pre&gt;&#xA;YAHOO.namespace(&quot;property.package&quot;);&#xA;YAHOO.namespace(&quot;YAHOO.property.package&quot;);&#xA;&lt;/pre&gt;&#xA;Either of the above would create YAHOO.property, then&#xA;YAHOO.property.package&#xA;&#xA;Be careful when naming packages. Reserved words may work in some browsers&#xA;and not others. For instance, the following will fail in Safari:&#xA;&lt;pre&gt;&#xA;YAHOO.namespace(&quot;really.long.nested.namespace&quot;);&#xA;&lt;/pre&gt;&#xA;This fails because &quot;long&quot; is a future reserved word in ECMAScript" ilk="function" line="96" lineend="110" name="namespace" returns="Object" signature="namespace()">
          <variable citdl="YAHOO" name="this" />
          <variable attributes="__local__ private" citdl="arguments" line="97" name="a" />
          <variable attributes="__local__ private" line="97" name="i" />
          <variable attributes="__local__ private" line="97" name="j" />
          <variable attributes="__local__ private" citdl="a[i].split()" line="97" name="d" />
          <variable attributes="__local__ private" citdl="YAHOO" line="97" name="o" />
        </scope>
        <scope attributes="__static__" doc="STATIC: Uses YAHOO.widget.Logger to output a log message, if the widget is&#xA;available." ilk="function" line="125" lineend="132" name="log" returns="Boolean" signature="log(msg, cat, src)">
          <variable citdl="String" doc="The message to log." ilk="argument" name="msg" />
          <variable citdl="String" doc="The log category for the message.  Default&#xA;categories are &quot;info&quot;, &quot;warn&quot;, &quot;error&quot;, time&quot;.&#xA;Custom categories can be used as well. (opt)" ilk="argument" name="cat" />
          <variable citdl="String" doc="The source of the the message (opt)" ilk="argument" name="src" />
          <variable citdl="YAHOO" name="this" />
          <variable attributes="__local__ private" citdl="YAHOO.widget.Logger" line="126" name="l" />
        </scope>
        <scope attributes="__static__" doc="STATIC: Registers a module with the YAHOO object" ilk="function" line="148" lineend="171" name="register" signature="register(name, mainClass, data)">
          <variable citdl="String" doc="the name of the module (event, slider, etc)" ilk="argument" name="name" />
          <variable citdl="Function" doc="a reference to class in the module.  This&#xA;class will be tagged with the version info&#xA;so that it will be possible to identify the&#xA;version that is in use when multiple versions&#xA;have loaded" ilk="argument" name="mainClass" />
          <variable citdl="Object" doc="metadata object for the module.  Currently it&#xA;is expected to contain a &quot;version&quot; property&#xA;and a &quot;build&quot; property at minimum." ilk="argument" name="data" />
          <variable citdl="YAHOO" name="this" />
          <variable attributes="__local__ private" citdl="YAHOO.env.modules" line="149" name="mods" />
          <variable attributes="__local__ private" citdl="data.build" line="153" name="b" />
          <variable attributes="__local__ private" citdl="mods[name]" line="153" name="m" />
          <variable attributes="__local__ private" citdl="YAHOO.env.listeners" line="153" name="ls" />
          <variable attributes="__local__ private" citdl="data.version" line="153" name="v" />
        </scope>
        <variable citdl="Array" line="151" name="builds" />
        <variable citdl="Array" line="151" name="versions" />
        <variable attributes="__static__" citdl="YAHOO.env" doc="STATIC: YAHOO.env is used to keep track of what is known about the YUI library and&#xA;the browsing environment" line="179" name="env">
          <scope attributes="__static__" doc="STATIC: Returns the version data for the specified module:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;name:&lt;/dt&gt;      &lt;dd&gt;The name of the module&lt;/dd&gt;&#xA;&lt;dt&gt;version:&lt;/dt&gt;   &lt;dd&gt;The version in use&lt;/dd&gt;&#xA;&lt;dt&gt;build:&lt;/dt&gt;     &lt;dd&gt;The build number in use&lt;/dd&gt;&#xA;&lt;dt&gt;versions:&lt;/dt&gt;  &lt;dd&gt;All versions that were registered&lt;/dd&gt;&#xA;&lt;dt&gt;builds:&lt;/dt&gt;    &lt;dd&gt;All builds that were registered.&lt;/dd&gt;&#xA;&lt;dt&gt;mainClass:&lt;/dt&gt; &lt;dd&gt;An object that was was stamped with the&#xA;current version and build. If&#xA;mainClass.VERSION != version or mainClass.BUILD != build,&#xA;multiple versions of pieces of the library have been&#xA;loaded, potentially causing issues.&lt;/dd&gt;&#xA;&lt;/dl&gt;" ilk="function" line="217" lineend="219" name="getVersion" returns="Object" signature="getVersion(name)">
            <variable citdl="String" doc="the name of the module (event, slider, etc)" ilk="argument" name="name" />
            <variable citdl="env" name="this" />
          </scope>
          <variable citdl="Object" line="233" lineend="313" name="ua">
            <variable citdl="Number" doc="Internet Explorer version number or 0.  Example: 6" line="241" name="ie" />
            <variable citdl="Number" doc="Opera version number or 0.  Example: 9.2" line="248" name="opera" />
            <variable citdl="Number" doc="Gecko engine revision number.  Will evaluate to 1 if Gecko&#xA;is detected but the revision could not be found. Other browsers&#xA;will be 0.  Example: 1.8&#xA;&lt;pre&gt;&#xA;Firefox 1.0.0.4: 1.7.8   &lt;-- Reports 1.7&#xA;Firefox 1.5.0.9: 1.8.0.9 &lt;-- Reports 1.8&#xA;Firefox 2.0.0.3: 1.8.1.3 &lt;-- Reports 1.8&#xA;Firefox 3 alpha: 1.9a4   &lt;-- Reports 1.9&#xA;&lt;/pre&gt;" line="263" name="gecko" />
            <variable citdl="Number" doc="AppleWebKit version.  KHTML browsers that are not WebKit browsers&#xA;will evaluate to 1, other browsers 0.  Example: 418.9.1&#xA;&lt;pre&gt;&#xA;Safari 1.3.2 (312.6): 312.8.1 &lt;-- Reports 312.8 -- currently the&#xA;latest available for Mac OSX 10.3.&#xA;Safari 2.0.2:         416     &lt;-- hasOwnProperty introduced&#xA;Safari 2.0.4:         418     &lt;-- preventDefault fixed&#xA;Safari 2.0.4 (419.3): 418.9.1 &lt;-- One version of Safari may run&#xA;different versions of webkit&#xA;Safari 2.0.4 (419.3): 419     &lt;-- Tiger installations that have been&#xA;updated, but not updated&#xA;to the latest patch.&#xA;Webkit 212 nightly:   522+    &lt;-- Safari 3.0 precursor (with native SVG&#xA;and many major issues fixed).&#xA;3.x yahoo.com, flickr:422     &lt;-- Safari 3.x hacks the user agent&#xA;string when hitting yahoo.com and&#xA;flickr.com.&#xA;Safari 3.0.4 (523.12):523.12  &lt;-- First Tiger release - automatic update&#xA;from 2.x via the 10.4.11 OS patch&#xA;Webkit nightly 1/2008:525+    &lt;-- Supports DOMContentLoaded event.&#xA;yahoo.com user agent hack removed.&#xA;&#xA;&lt;/pre&gt;&#xA;http://developer.apple.com/internet/safari/uamatrix.html" line="293" name="webkit" />
            <variable citdl="String" doc="The mobile property will be set to a string containing any relevant&#xA;user agent information when a modern mobile browser is detected.&#xA;Currently limited to Safari on the iPhone/iPod Touch, Nokia N-series&#xA;devices with the WebKit-based browser, and Opera Mini." line="303" name="mobile" />
            <variable citdl="Number" doc="Adobe AIR version number or 0.  Only populated if webkit is detected.&#xA;Example: 1.0" line="311" name="air" />
          </variable>
        </variable>
        <variable citdl="Object" line="398" name="widget">
          <scope ilk="class" line="18" lineend="65" name="LogMsg">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The LogMsg class defines a single log message." ilk="function" line="18" lineend="65" name="LogMsg" signature="LogMsg(oConfigs)">
              <variable citdl="Object" doc="Object literal of configuration params." ilk="argument" name="oConfigs" />
              <variable citdl="LogMsg" name="this" />
            </scope>
            <variable citdl="String" doc="Log message." line="58" name="msg" />
            <variable citdl="String" doc="Log message." line="58" name="category" />
            <variable citdl="String" doc="Log message." line="58" name="sourceDetail" />
            <variable citdl="String" doc="Log message." line="58" name="source" />
            <variable citdl="String" doc="Log message." line="58" name="time" />
          </scope>
          <scope ilk="class" line="25" lineend="631" name="TreeView">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The treeview widget is a generic tree building tool." ilk="function" line="25" lineend="27" name="TreeView" signature="TreeView(id)">
              <variable citdl="{string" doc="The id of the element, or the element&#xA;itself that the tree will be inserted into." ilk="argument" name="id" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <variable citdl="String" doc="The id of tree container element" line="36" name="id" />
            <variable attributes="private" citdl="id" doc="PRIVATE: The host element for this tree" line="43" name="_el" />
            <variable attributes="private" citdl="Array" doc="PRIVATE: Flat collection of all nodes in this tree.  This is a sparse&#xA;array, so the length property can&apos;t be relied upon for a&#xA;node count for the tree." line="53" name="_nodes" />
            <variable citdl="Boolean" doc="We lock the tree control while waiting for the dynamic loader to return" line="60" name="locked" />
            <variable attributes="private" citdl="String" doc="PRIVATE: The animation to use for expanding children, if any" line="68" name="_expandAnim" />
            <variable attributes="private" citdl="String" doc="PRIVATE: The animation to use for collapsing children, if any" line="76" name="_collapseAnim" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The current number of animations that are executing" line="84" name="_animCount" />
            <variable citdl="Number" doc="The maximum number of animations to run at one time." line="91" name="maxAnim" />
            <scope doc="Sets up the animation for expanding children" ilk="function" line="99" lineend="101" name="setExpandAnim" signature="setExpandAnim(type)">
              <variable citdl="String" doc="the type of animation (acceptable values defined&#xA;in YAHOO.widget.TVAnim)" ilk="argument" name="type" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope doc="Sets up the animation for collapsing children" ilk="function" line="109" lineend="111" name="setCollapseAnim" signature="setCollapseAnim(type)">
              <variable ilk="argument" name="type" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope doc="Perform the expand animation if configured, or just show the&#xA;element if not configured or too many animations are in progress" ilk="function" line="121" lineend="141" name="animateExpand" returns="Boolean" signature="animateExpand(el, node)">
              <variable citdl="HTMLElement" doc="the element to animate" ilk="argument" name="el" />
              <variable citdl="YAHOO.util.Node" doc="the node that was expanded" ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="this" doc="this.locked = true;" line="125" name="tree" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.TVAnim.getAnim()" line="127" name="a" />
            </scope>
            <scope doc="Perform the collapse animation if configured, or just show the&#xA;element if not configured or too many animations are in progress" ilk="function" line="151" lineend="171" name="animateCollapse" returns="Boolean" signature="animateCollapse(el, node)">
              <variable citdl="HTMLElement" doc="the element to animate" ilk="argument" name="el" />
              <variable citdl="YAHOO.util.Node" doc="the node that was expanded" ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="this" doc="this.locked = true;" line="155" name="tree" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.TVAnim.getAnim()" line="157" name="a" />
            </scope>
            <scope doc="Function executed when the expand animation completes" ilk="function" line="177" lineend="184" name="expandComplete" signature="expandComplete(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope doc="Function executed when the collapse animation completes" ilk="function" line="190" lineend="197" name="collapseComplete" signature="collapseComplete(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Initializes the tree" ilk="function" line="205" lineend="284" name="init" signature="init(id)">
              <variable ilk="argument" name="id" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.LogWriter" line="278" name="LW" />
            </scope>
            <variable citdl="YAHOO.widget.RootNode" doc="Set up the root node" line="276" name="root" />
            <scope doc="Renders the tree boilerplate and visible nodes" ilk="function" line="295" lineend="299" name="draw" signature="draw()">
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="this.root.getHtml()" line="296" name="html" />
            </scope>
            <variable citdl="Boolean" line="298" name="firstDraw" />
            <scope doc="Returns the tree&apos;s host element" ilk="function" line="306" lineend="311" name="getEl" returns="HTMLElement" signature="getEl()">
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Nodes register themselves with the tree instance when they are created." ilk="function" line="319" lineend="321" name="regNode" signature="regNode(node)">
              <variable citdl="Node" doc="the node to register" ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope doc="Returns the root node of this tree" ilk="function" line="328" lineend="330" name="getRoot" returns="Node" signature="getRoot()">
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope doc="Configures this tree to dynamically load all child data" ilk="function" line="341" lineend="343" name="setDynamicLoad" signature="setDynamicLoad(fnDataLoader, iconMode)">
              <variable citdl="Function" doc="the function that will be called to get the data" ilk="argument" name="fnDataLoader" />
              <variable citdl="Number" doc="configures the icon that is displayed when a dynamic&#xA;load node is expanded the first time without children.  By default, the&#xA;&quot;collapse&quot; icon will be used.  If set to 1, the leaf node icon will be&#xA;displayed." ilk="argument" name="iconMode" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope doc="Expands all child nodes.  Note: this conflicts with the &quot;multiExpand&quot;&#xA;node property.  If expand all is called in a tree with nodes that&#xA;do not allow multiple siblings to be displayed, only the last sibling&#xA;will be expanded." ilk="function" line="352" lineend="356" name="expandAll" signature="expandAll()">
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope doc="Collapses all expanded child nodes in the entire tree." ilk="function" line="362" lineend="366" name="collapseAll" signature="collapseAll()">
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope doc="Returns a node in the tree that has the specified index (this index&#xA;is created internally, so this function probably will only be used&#xA;in html generated for a given node.)" ilk="function" line="376" lineend="379" name="getNodeByIndex" returns="Node" signature="getNodeByIndex(nodeIndex)">
              <variable citdl="Number" doc="the index of the node wanted" ilk="argument" name="nodeIndex" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="this._nodes[nodeIndex]" line="377" name="n" />
            </scope>
            <scope doc="Returns a node that has a matching property and value in the data&#xA;object that was passed into its constructor." ilk="function" line="389" lineend="398" name="getNodeByProperty" returns="Node" signature="getNodeByProperty(property, value)">
              <variable citdl="Object" doc="the property to search (usually a string)" ilk="argument" name="property" />
              <variable citdl="Object" doc="the value we want to find (usuall an int or string)" ilk="argument" name="value" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="this._nodes[i]" line="391" name="n" />
            </scope>
            <scope doc="Returns a collection of nodes that have a matching property&#xA;and value in the data object that was passed into its constructor." ilk="function" line="408" lineend="418" name="getNodesByProperty" returns="Array" signature="getNodesByProperty(property, value)">
              <variable citdl="Object" doc="the property to search (usually a string)" ilk="argument" name="property" />
              <variable citdl="Object" doc="the value we want to find (usuall an int or string)" ilk="argument" name="value" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="409" name="values" />
              <variable attributes="__local__ private" citdl="this._nodes[i]" line="411" name="n" />
            </scope>
            <scope doc="Returns the treeview node reference for an anscestor element&#xA;of the node, or null if it is not contained within any node&#xA;in this tree." ilk="function" line="428" lineend="451" name="getNodeByElement" returns="YAHOO.widget.Node" signature="getNodeByElement(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="el" line="430" name="p" />
              <variable attributes="__local__ private" citdl="p.id.match()" line="430" name="m" />
              <variable attributes="__local__ private" line="430" name="re" />
            </scope>
            <scope doc="Removes the node and its children, and optionally refreshes the&#xA;branch of the tree that was affected." ilk="function" line="461" lineend="483" name="removeNode" returns="Boolean" signature="removeNode(node, autoRefresh)">
              <variable ilk="argument" name="node" />
              <variable citdl="Boolean" doc="automatically refreshes branch if true" ilk="argument" name="autoRefresh" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="node.parent" doc="Get the branch that we may need to refresh" line="469" name="p" />
            </scope>
            <scope attributes="private" doc="PRIVATE: wait until the animation is complete before deleting&#xA;to avoid javascript errors" ilk="function" line="492" lineend="495" name="_removeChildren_animComplete" signature="_removeChildren_animComplete(o)">
              <variable doc="the custom event payload" ilk="argument" name="o" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope doc="Deletes this nodes child collection, recursively.  Also collapses&#xA;the node, and resets the dynamic load flag.  The primary use for&#xA;this method is to purge a node and allow it to fetch its data&#xA;dynamically again." ilk="function" line="505" lineend="532" name="removeChildren" signature="removeChildren(node)">
              <variable citdl="Node" doc="the node to purge" ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Deletes the node and recurses children" ilk="function" line="539" lineend="545" name="_deleteNode" signature="_deleteNode(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope doc="Removes the node from the tree, preserving the child collection&#xA;to make it possible to insert the branch into another part of the&#xA;tree, or another tree." ilk="function" line="554" lineend="587" name="popNode" signature="popNode(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="node.parent" line="555" name="p" />
              <variable attributes="__local__ private" citdl="Array" doc="Update the parent&apos;s collection of children" line="558" name="a" />
            </scope>
            <scope doc="TreeView instance toString" ilk="function" line="595" lineend="597" name="toString" returns="String" signature="toString()">
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Generates an unique id for an element if it doesn&apos;t yet have one" ilk="function" line="604" lineend="613" name="generateId" returns="id" signature="generateId(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="el.id" line="605" name="id" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Abstract method that is executed when a node is expanded" ilk="function" line="621" lineend="621" name="onExpand" signature="onExpand(node)">
              <variable citdl="Node" doc="the node that was expanded" ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Abstract method that is executed when a node is collapsed." ilk="function" line="629" lineend="629" name="onCollapse" signature="onCollapse(node)">
              <variable citdl="Node" doc="the node that was collapsed." ilk="argument" name="node" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <variable attributes="__static__" citdl="Number" doc="STATIC: Running count of all nodes created in all trees.  This is&#xA;used to provide unique identifies for all nodes.  Deleting&#xA;nodes does not change the nodeCount." line="643" name="nodeCount" />
            <variable attributes="private __static__" citdl="Array" doc="PRIVATE STATIC: Global cache of tree instances" line="652" name="trees" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Counter for generating a new unique element id" line="660" name="counter" />
            <scope attributes="__static__" doc="STATIC: Global method for getting a tree by its id.  Used in the generated&#xA;tree html." ilk="function" line="670" lineend="673" name="getTree" returns="TreeView" signature="getTree(treeId)">
              <variable citdl="String" doc="the id of the tree instance" ilk="argument" name="treeId" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.TreeView.trees[treeId]" line="671" name="t" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Global method for getting a node by its id.  Used in the generated&#xA;tree html." ilk="function" line="685" lineend="688" name="getNode" returns="Node" signature="getNode(treeId, nodeIndex)">
              <variable citdl="String" doc="the id of the tree instance" ilk="argument" name="treeId" />
              <variable citdl="String" doc="the index of the node to return" ilk="argument" name="nodeIndex" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.TreeView.getTree()" line="686" name="t" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Add a DOM event" ilk="function" line="698" lineend="704" name="addHandler" signature="addHandler(el, sType, fn)">
              <variable doc="the elment to bind the handler to" ilk="argument" name="el" />
              <variable citdl="String" doc="the type of event handler" ilk="argument" name="sType" />
              <variable citdl="Function" doc="the callback to invoke" ilk="argument" name="fn" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Remove a DOM event" ilk="function" line="715" lineend="721" name="removeHandler" signature="removeHandler(el, sType, fn)">
              <variable doc="the elment to bind the handler to" ilk="argument" name="el" />
              <variable citdl="String" doc="the type of event handler" ilk="argument" name="sType" />
              <variable citdl="Function" doc="the callback to invoke" ilk="argument" name="fn" />
              <variable citdl="TreeView" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Attempts to preload the images defined in the styles used to draw the tree by&#xA;rendering off-screen elements that use the styles." ilk="function" line="731" lineend="760" name="preload" signature="preload(e, prefix)">
              <variable ilk="argument" name="e" />
              <variable citdl="String" doc="the prefix to use to generate the names of the&#xA;images to preload, default is ygtv" ilk="argument" name="prefix" />
              <variable citdl="TreeView" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="735" name="styles" />
              <variable attributes="__local__ private" citdl="Array" doc="var styles = [&quot;tp&quot;];" line="738" name="sb" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="745" name="f" />
              <variable attributes="__local__ private" citdl="f.style" line="746" name="s" />
            </scope>
          </scope>
          <scope ilk="class" line="27" lineend="38" name="TabView">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The tabview module provides a widget for managing content bound to tabs." ilk="function" line="27" lineend="38" name="TabView" signature="TabView(el, attr)">
              <variable ilk="argument" name="el" />
              <variable citdl="Object" doc="(optional) A key map of the tabView&apos;s&#xA;initial attributes.  Ignored if first arg is attributes object." ilk="argument" name="attr" />
              <variable citdl="TabView" name="this" />
            </scope>
          </scope>
          <variable citdl="YAHOO.widget.Button" line="27" lineend="51" name="ToolbarButtonAdvanced">
            <scope doc="Select an option by value" ilk="function" line="39" lineend="51" name="checkValue" signature="checkValue(value)">
              <variable citdl="String" doc="The value of the option that we want to mark as selected" ilk="argument" name="value" />
              <variable citdl="ToolbarButtonAdvanced" name="this" />
              <variable attributes="__local__ private" citdl="this.getMenu().getItems()" line="40" name="_menuItems" />
            </scope>
          </variable>
          <scope ilk="class" line="28" lineend="42" name="ProfilerViewer">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The ProfilerViewer module provides a graphical display for viewing&#xA;the output of the YUI Profiler &lt;http://developer.yahoo.com/yui/profiler&gt;." ilk="function" line="28" lineend="42" name="ProfilerViewer" signature="ProfilerViewer(el, attr)">
              <variable ilk="argument" name="el" />
              <variable citdl="Object" doc="(optional) A key map of the ProfilerViewer&apos;s&#xA;initial attributes.  Ignored if first arg is an attributes object." ilk="argument" name="attr" />
              <variable citdl="ProfilerViewer" name="this" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.util.DragDrop" ilk="class" line="38" lineend="48" name="Slider">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Slider component is a UI control that enables the user to adjust&#xA;values in a finite range along one or two axes. Typically, the Slider&#xA;control is used in a web application as a rich, visual replacement&#xA;for an input box that takes a number as input. The Slider control can&#xA;also easily accommodate a second dimension, providing x,y output for&#xA;a selection point chosen from a rectangular region." ilk="function" line="38" lineend="48" name="Slider" signature="Slider(sElementId, sGroup, oThumb, sType)">
              <variable ilk="argument" name="sElementId" />
              <variable citdl="String" doc="The group of related DragDrop items" ilk="argument" name="sGroup" />
              <variable citdl="SliderThumb" doc="The thumb for this slider" ilk="argument" name="oThumb" />
              <variable citdl="String" doc="The type of slider (horiz, vert, region)" ilk="argument" name="sType" />
              <variable citdl="Slider" name="this" />
            </scope>
            <variable citdl="Boolean" line="41" name="ANIM_AVAIL" />
            <scope attributes="__static__" doc="STATIC: Factory method for creating a horizontal slider" ilk="function" line="63" lineend="67" name="getHorizSlider" returns="Slider" signature="getHorizSlider(sBGElId, sHandleElId, iLeft, iRight, iTickSize)">
              <variable citdl="String" doc="the id of the slider&apos;s background element" ilk="argument" name="sBGElId" />
              <variable citdl="String" doc="the id of the thumb element" ilk="argument" name="sHandleElId" />
              <variable citdl="Number" doc="the number of pixels the element can move left" ilk="argument" name="iLeft" />
              <variable citdl="Number" doc="the number of pixels the element can move right" ilk="argument" name="iRight" />
              <variable citdl="Number" doc="optional parameter for specifying that the element&#xA;should move a certain number pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="Slider" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Factory method for creating a vertical slider" ilk="function" line="82" lineend="86" name="getVertSlider" returns="Slider" signature="getVertSlider(sBGElId, sHandleElId, iUp, iDown, iTickSize)">
              <variable citdl="String" doc="the id of the slider&apos;s background element" ilk="argument" name="sBGElId" />
              <variable citdl="String" doc="the id of the thumb element" ilk="argument" name="sHandleElId" />
              <variable citdl="Number" doc="the number of pixels the element can move up" ilk="argument" name="iUp" />
              <variable citdl="Number" doc="the number of pixels the element can move down" ilk="argument" name="iDown" />
              <variable citdl="Number" doc="optional parameter for specifying that the element&#xA;should move a certain number pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="Slider" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Factory method for creating a slider region like the one in the color&#xA;picker example" ilk="function" line="104" lineend="108" name="getSliderRegion" returns="Slider" signature="getSliderRegion(sBGElId, sHandleElId, iLeft, iRight, iUp, iDown, iTickSize)">
              <variable citdl="String" doc="the id of the slider&apos;s background element" ilk="argument" name="sBGElId" />
              <variable citdl="String" doc="the id of the thumb element" ilk="argument" name="sHandleElId" />
              <variable citdl="Number" doc="the number of pixels the element can move left" ilk="argument" name="iLeft" />
              <variable citdl="Number" doc="the number of pixels the element can move right" ilk="argument" name="iRight" />
              <variable citdl="Number" doc="the number of pixels the element can move up" ilk="argument" name="iUp" />
              <variable citdl="Number" doc="the number of pixels the element can move down" ilk="argument" name="iDown" />
              <variable citdl="Number" doc="optional parameter for specifying that the element&#xA;should move a certain number pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="Slider" name="this" />
            </scope>
            <variable citdl="Boolean" doc="Override the default setting of dragOnly to true." line="126" name="dragOnly" />
            <scope doc="Initializes the slider.  Executed in the constructor" ilk="function" line="133" lineend="285" name="initSlider" signature="initSlider(sType)">
              <variable citdl="String" doc="the type of slider (horiz, vert, region)" ilk="argument" name="sType" />
            </scope>
            <variable citdl="String" doc="The type of the slider (horiz, vert, region)" line="140" name="type" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Overrides the isTarget property in YAHOO.util.DragDrop" line="174" name="isTarget" />
            <variable citdl="Boolean" doc="Flag that determines if the thumb will animate when moved" line="181" name="animate" />
            <variable citdl="Boolean" doc="Set to false to disable a background click thumb move" line="188" name="backgroundEnabled" />
            <variable citdl="Number" doc="Adjustment factor for tick animation, the more ticks, the&#xA;faster the animation (by default)" line="196" name="tickPause" />
            <variable citdl="Boolean" doc="Enables the arrow, home and end keys, defaults to true." line="203" name="enableKeys" />
            <variable citdl="Number" doc="Specifies the number of pixels the arrow keys will move the slider.&#xA;Default is 20." line="211" name="keyIncrement" />
            <variable attributes="deprecated" citdl="Boolean" doc="DEPRECATED: moveComplete is set to true when the slider has moved to its final&#xA;destination.  For animated slider, this value can be checked in&#xA;the onChange handler to make it possible to execute logic only&#xA;when the move is complete rather than at all points along the way.&#xA;Deprecated because this flag is only useful when the background is&#xA;clicked and the slider is animated.  If the user drags the thumb,&#xA;the flag is updated when the drag is over ... the final onDrag event&#xA;fires before the mouseup the ends the drag, so the implementer will&#xA;never see it." line="228" name="moveComplete" />
            <variable citdl="Number" doc="If animation is configured, specifies the length of the animation&#xA;in seconds." line="237" name="animationDuration" />
            <variable attributes="constant" citdl="Number" doc="CONSTANT: Constant for valueChangeSource, indicating that the user clicked or&#xA;dragged the slider to change the value." line="246" name="SOURCE_UI_EVENT" />
            <variable attributes="constant" citdl="Number" doc="CONSTANT: Constant for valueChangeSource, indicating that the value was altered&#xA;by a programmatic call to setValue/setRegionValue." line="255" name="SOURCE_SET_VALUE" />
            <variable citdl="Number" doc="When the slider value changes, this property is set to identify where&#xA;the update came from.  This will be either 1, meaning the slider was&#xA;clicked or dragged, or 2, meaning that it was set via a setValue() call.&#xA;This can be used within event handlers to apply some of the logic only&#xA;when dealing with one source or another." line="267" name="valueChangeSource" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Indicates whether or not events will be supressed for the current&#xA;slide operation" line="276" name="_silent" />
            <variable citdl="Array" doc="Saved offset used to protect against NaN problems when slider is&#xA;set to display:none" line="284" name="lastOffset" />
            <scope doc="Initializes the slider&apos;s thumb. Executed in the constructor." ilk="function" line="292" lineend="334" name="initThumb" signature="initThumb(t)">
              <variable citdl="YAHOO.widget.SliderThumb" doc="the slider thumb" ilk="argument" name="t" />
              <variable attributes="__local__ private" citdl="this" line="294" name="self" />
              <variable citdl="Object" line="318" name="t">
                <scope doc="delegate thumb methods" ilk="function" line="318" lineend="320" name="onAvailable" returns="self.setStartSliderState()" signature="onAvailable()">
                  <variable citdl="t" name="this" />
                </scope>
                <scope ilk="function" line="321" lineend="323" name="onMouseDown" returns="self.focus()" signature="onMouseDown()">
                  <variable citdl="t" name="this" />
                </scope>
                <scope ilk="function" line="324" lineend="326" name="startDrag" signature="startDrag()">
                  <variable citdl="t" name="this" />
                </scope>
                <scope ilk="function" line="327" lineend="329" name="onDrag" signature="onDrag()">
                  <variable citdl="t" name="this" />
                </scope>
                <scope ilk="function" line="330" lineend="332" name="onMouseUp" signature="onMouseUp()">
                  <variable citdl="t" name="this" />
                </scope>
              </variable>
            </scope>
            <variable citdl="YAHOO.widget.SliderThumb" doc="A YAHOO.widget.SliderThumb instance that we will use to&#xA;reposition the thumb when the background is clicked" line="302" name="thumb" />
            <scope doc="Executed when the slider element is available" ilk="function" line="340" lineend="344" name="onAvailable" signature="onAvailable()">
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="341" name="Event" />
            </scope>
            <scope doc="Executed when a keypress event happens with the control focused.&#xA;Prevents the default behavior for navigation keys.  The actual&#xA;logic for moving the slider thumb in response to a key event&#xA;happens in handleKeyDown." ilk="function" line="353" lineend="369" name="handleKeyPress" signature="handleKeyPress(e)">
              <variable citdl="Event" doc="the keypress event" ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="355" name="Event" />
              <variable attributes="__local__ private" citdl="Event.getCharCode()" line="356" name="kc" />
            </scope>
            <scope doc="Executed when a keydown event happens with the control focused.&#xA;Updates the slider value and display when the keypress is an&#xA;arrow key, home, or end as long as enableKeys is set to true." ilk="function" line="377" lineend="424" name="handleKeyDown" signature="handleKeyDown(e)">
              <variable citdl="Event" doc="the keydown event" ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="379" name="Event" />
              <variable attributes="__local__ private" citdl="Event.getCharCode()" line="381" name="kc" />
              <variable attributes="__local__ private" citdl="this.thumb" line="381" name="t" />
              <variable attributes="__local__ private" citdl="this.getXValue()" line="382" name="h" />
              <variable attributes="__local__ private" citdl="this.getYValue()" line="382" name="v" />
              <variable attributes="__local__ private" citdl="Boolean" line="384" name="horiz" />
              <variable attributes="__local__ private" citdl="Boolean" line="385" name="changeValue" />
              <variable attributes="__local__ private" line="417" name="newVal" />
            </scope>
            <scope doc="Initialization that sets up the value offsets once the elements are ready" ilk="function" line="430" lineend="461" name="setStartSliderState" signature="setStartSliderState()" />
            <variable citdl="Array" doc="The basline position of the background element, used&#xA;to determine if the background has moved since the last&#xA;operation." line="442" name="baselinePos" />
            <variable citdl="this.thumb.getOffsetFromParent()" line="444" name="startOffset" />
            <variable citdl="arguments" line="449" name="deferredSetRegionValue" />
            <variable citdl="arguments" line="456" name="deferredSetValue" />
            <scope doc="When the thumb is available, we cache the centerpoint of the element so&#xA;we can position the element correctly when the background is clicked" ilk="function" line="468" lineend="485" name="setThumbCenterPoint" signature="setThumbCenterPoint()">
              <variable attributes="__local__ private" citdl="this.thumb.getEl()" line="470" name="el" />
            </scope>
            <variable citdl="int, &quot;y&quot;: int" doc="The center of the slider element is stored so we can&#xA;place it in the correct position when the background is clicked." line="479" lineend="482" name="thumbCenterPoint">
              <variable citdl="parseInt()" line="480" name="x" />
              <variable citdl="parseInt()" line="481" name="y" />
            </variable>
            <scope doc="Locks the slider, overrides YAHOO.util.DragDrop" ilk="function" line="491" lineend="494" name="lock" signature="lock()" />
            <variable citdl="Boolean" line="493" name="locked" />
            <scope doc="Unlocks the slider, overrides YAHOO.util.DragDrop" ilk="function" line="500" lineend="503" name="unlock" signature="unlock()" />
            <scope attributes="private" doc="PRIVATE: Handles mouseup event on the thumb" ilk="function" line="510" lineend="515" name="thumbMouseUp" signature="thumbMouseUp()" />
            <scope ilk="function" line="517" lineend="521" name="onMouseUp" signature="onMouseUp()" />
            <scope doc="Returns a reference to this slider&apos;s thumb" ilk="function" line="528" lineend="530" name="getThumb" returns="SliderThumb" signature="getThumb()" />
            <scope attributes="private" doc="PRIVATE: Try to focus the element when clicked so we can add&#xA;accessibility features" ilk="function" line="538" lineend="563" name="focus" returns="Boolean" signature="focus()">
              <variable attributes="__local__ private" citdl="this.getEl()" doc="Focus the background element if possible" line="542" name="el" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event that fires when the value of the slider has changed" ilk="function" line="575" lineend="577" name="onChange" signature="onChange(firstOffset, secondOffset)">
              <variable citdl="Number" doc="the number of pixels the thumb has moved&#xA;from its start position. Normal horizontal and vertical sliders will only&#xA;have the firstOffset.  Regions will have both, the first is the horizontal&#xA;offset, the second the vertical." ilk="argument" name="firstOffset" />
              <variable citdl="Number" doc="the y offset for region sliders" ilk="argument" name="secondOffset" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event that fires when the at the beginning of the slider thumb move" ilk="function" line="584" lineend="586" name="onSlideStart" signature="onSlideStart()" />
            <scope attributes="deprecated" doc="DEPRECATED: Event that fires at the end of a slider thumb move" ilk="function" line="593" lineend="595" name="onSlideEnd" signature="onSlideEnd()" />
            <scope doc="Returns the slider&apos;s thumb offset from the start position" ilk="function" line="602" lineend="604" name="getValue" returns="Number" signature="getValue()" />
            <scope doc="Returns the slider&apos;s thumb X offset from the start position" ilk="function" line="611" lineend="613" name="getXValue" returns="Number" signature="getXValue()" />
            <scope doc="Returns the slider&apos;s thumb Y offset from the start position" ilk="function" line="620" lineend="622" name="getYValue" returns="Number" signature="getYValue()" />
            <scope attributes="private" doc="PRIVATE: Internal handler for the slider thumb&apos;s onChange event" ilk="function" line="629" lineend="646" name="handleThumbChange" signature="handleThumbChange()" />
            <scope doc="Provides a way to set the value of the slider in code." ilk="function" line="659" lineend="696" name="setValue" returns="Boolean" signature="setValue(newOffset, skipAnim, force, silent)">
              <variable citdl="Number" doc="the number of pixels the thumb should be&#xA;positioned away from the initial start point" ilk="argument" name="newOffset" />
              <variable citdl="Boolean" doc="set to true to disable the animation&#xA;for this move action (but not others)." ilk="argument" name="skipAnim" />
              <variable citdl="Boolean" doc="ignore the locked setting and set value anyway" ilk="argument" name="force" />
              <variable citdl="Boolean" doc="when true, do not fire events" ilk="argument" name="silent" />
              <variable attributes="__local__ private" citdl="this.thumb" line="677" name="t" />
              <variable attributes="__local__ private" citdl="t.initPageX" line="679" name="newX" />
              <variable attributes="__local__ private" citdl="t.initPageY" line="679" name="newY" />
            </scope>
            <scope doc="Provides a way to set the value of the region slider in code." ilk="function" line="711" lineend="743" name="setRegionValue" returns="Boolean" signature="setRegionValue(newOffset, newOffset2, skipAnim, force, silent)">
              <variable citdl="Number" doc="the number of pixels the thumb should be&#xA;positioned away from the initial start point (x axis for region)" ilk="argument" name="newOffset" />
              <variable citdl="Number" doc="the number of pixels the thumb should be&#xA;positioned away from the initial start point (y axis for region)" ilk="argument" name="newOffset2" />
              <variable citdl="Boolean" doc="set to true to disable the animation&#xA;for this move action (but not others)." ilk="argument" name="skipAnim" />
              <variable citdl="Boolean" doc="ignore the locked setting and set value anyway" ilk="argument" name="force" />
              <variable citdl="Boolean" doc="when true, do not fire events" ilk="argument" name="silent" />
              <variable attributes="__local__ private" citdl="this.thumb" line="730" name="t" />
              <variable attributes="__local__ private" citdl="t.initPageX" line="735" name="newX" />
              <variable attributes="__local__ private" citdl="t.initPageY" line="736" name="newY" />
            </scope>
            <scope doc="Checks the background position element position.  If it has moved from the&#xA;baseline position, the constraints for the thumb are reset" ilk="function" line="752" lineend="768" name="verifyOffset" returns="Boolean" signature="verifyOffset(checkPos)">
              <variable citdl="Boolean" doc="check the position instead of using cached value" ilk="argument" name="checkPos" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getXY()" line="754" name="newPos" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Move the associated slider moved to a timeout to try to get around the&#xA;mousedown stealing moz does when I move the slider element between the&#xA;cursor and the background during the mouseup event" ilk="function" line="782" lineend="833" name="moveThumb" signature="moveThumb(x, y, skipAnim, midMove)">
              <variable citdl="Number" doc="the X coordinate of the click" ilk="argument" name="x" />
              <variable citdl="Number" doc="the Y coordinate of the click" ilk="argument" name="y" />
              <variable citdl="Boolean" doc="don&apos;t animate if the move happend onDrag" ilk="argument" name="skipAnim" />
              <variable citdl="Boolean" doc="set to true if this is not terminating&#xA;the slider movement" ilk="argument" name="midMove" />
              <variable attributes="__local__ private" citdl="this.thumb" line="785" name="t" />
              <variable attributes="__local__ private" citdl="this" line="786" name="self" />
              <variable attributes="__local__ private" citdl="t.getTargetCoord()" line="797" name="_p" />
              <variable attributes="__local__ private" citdl="Array" line="798" name="p" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Motion" line="819" name="oAnim" />
            </scope>
            <variable citdl="YAHOO.util.Dom.getXY()" doc="cache the current thumb pos" line="807" name="curCoord" />
            <scope ilk="function" line="835" lineend="843" name="_slideStart" signature="_slideStart()" />
            <variable citdl="Boolean" line="841" name="_sliding" />
            <scope ilk="function" line="845" lineend="856" name="_slideEnd" signature="_slideEnd()" />
            <scope attributes="private" doc="PRIVATE: Move the slider one tick mark towards its final coordinate.  Used&#xA;for the animation when tick marks are defined" ilk="function" line="865" lineend="922" name="moveOneTick" signature="moveOneTick(finalCoord)">
              <variable ilk="argument" name="finalCoord" />
              <variable attributes="__local__ private" line="867" name="tmp" />
              <variable attributes="__local__ private" citdl="this.thumb" line="867" name="t" />
              <variable attributes="__local__ private" citdl="this._getNextX()" doc="var thresh = t.tickSize + (Math.floor(t.tickSize/2));" line="881" name="nextCoord" />
              <variable attributes="__local__ private" line="885" name="tmpX" />
              <variable attributes="__local__ private" citdl="this" line="911" name="self" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Returns the next X tick value based on the current coord and the target coord." ilk="function" line="929" lineend="947" name="_getNextX" returns="nextCoord" signature="_getNextX(curCoord, finalCoord)">
              <variable ilk="argument" name="curCoord" />
              <variable ilk="argument" name="finalCoord" />
              <variable attributes="__local__ private" citdl="this.thumb" line="930" name="t" />
              <variable attributes="__local__ private" citdl="t.tickSize" line="931" name="thresh" />
              <variable attributes="__local__ private" citdl="Array" line="932" name="tmp" />
              <variable attributes="__local__ private" citdl="Array" line="933" name="nextCoord" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Returns the next Y tick value based on the current coord and the target coord." ilk="function" line="954" lineend="973" name="_getNextY" returns="nextCoord" signature="_getNextY(curCoord, finalCoord)">
              <variable ilk="argument" name="curCoord" />
              <variable ilk="argument" name="finalCoord" />
              <variable attributes="__local__ private" citdl="this.thumb" line="955" name="t" />
              <variable attributes="__local__ private" citdl="t.tickSize" line="956" name="thresh" />
              <variable attributes="__local__ private" citdl="Array" line="957" name="tmp" />
              <variable attributes="__local__ private" citdl="Array" line="958" name="nextCoord" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Resets the constraints before moving the thumb." ilk="function" line="980" lineend="983" name="b4MouseDown" signature="b4MouseDown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles the mousedown event for the slider background" ilk="function" line="991" lineend="1003" name="onMouseDown" signature="onMouseDown(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getPageX()" line="996" name="x" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getPageY()" line="997" name="y" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles the onDrag event for the slider background" ilk="function" line="1010" lineend="1017" name="onDrag" signature="onDrag(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getPageX()" line="1012" name="x" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getPageY()" line="1013" name="y" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Fired when the slider movement ends" ilk="function" line="1024" lineend="1029" name="endMove" signature="endMove()" />
            <scope attributes="private" doc="PRIVATE: Fires the change event if the value has been changed.  Ignored if we are in&#xA;the middle of an animation as the event will fire when the animation is&#xA;complete" ilk="function" line="1043" lineend="1080" name="fireEvents" signature="fireEvents(thumbEvent)">
              <variable citdl="Boolean" doc="set to true if this event is fired from an event&#xA;that occurred on the thumb.  If it is, the state of the&#xA;thumb dd object should be correct.  Otherwise, the event&#xA;originated on the background, so the thumb state needs to&#xA;be refreshed before proceeding." ilk="argument" name="thumbEvent" />
              <variable attributes="__local__ private" citdl="this.thumb" line="1045" name="t" />
              <variable attributes="__local__ private" citdl="t.getXValue()" line="1053" name="newX" />
              <variable attributes="__local__ private" citdl="t.getYValue()" line="1054" name="newY" />
              <variable attributes="__local__ private" citdl="t.getValue()" line="1067" name="newVal" />
            </scope>
            <variable citdl="newX" line="1063" name="previousX" />
            <variable citdl="newY" line="1064" name="previousY" />
            <variable citdl="newVal" line="1074" name="previousVal" />
            <scope doc="Slider toString" ilk="function" line="1087" lineend="1089" name="toString" returns="String" signature="toString()" />
            <scope attributes="__static__" doc="STATIC: Factory method for creating a horizontal dual-thumb slider" ilk="function" line="1864" lineend="1872" name="getHorizDualSlider" returns="DualSlider" signature="getHorizDualSlider(bg, minthumb, maxthumb, range, iTickSize, initVals)">
              <variable citdl="String" doc="the id of the slider&apos;s background element" ilk="argument" name="bg" />
              <variable citdl="String" doc="the id of the min thumb" ilk="argument" name="minthumb" />
              <variable citdl="String" doc="the id of the thumb thumb" ilk="argument" name="maxthumb" />
              <variable citdl="Number" doc="the number of pixels the thumbs can move within" ilk="argument" name="range" />
              <variable citdl="Number" doc="(optional) the element should move this many pixels&#xA;at a time" ilk="argument" name="iTickSize" />
              <variable citdl="Array" doc="(optional) [min,max] Initial thumb placement" ilk="argument" name="initVals" />
              <variable citdl="Slider" name="this" />
              <variable attributes="__local__ private" citdl="Thumb" line="1865" name="mint" />
              <variable attributes="__local__ private" citdl="Thumb" line="1865" name="maxt" />
              <variable attributes="__local__ private" citdl="YW.Slider" line="1866" name="Slider" />
              <variable attributes="__local__ private" citdl="YAHOO.widget" line="1866" name="YW" />
              <variable attributes="__local__ private" citdl="YW.SliderThumb" line="1866" name="Thumb" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Factory method for creating a vertical dual-thumb slider." ilk="function" line="1889" lineend="1897" name="getVertDualSlider" returns="DualSlider" signature="getVertDualSlider(bg, minthumb, maxthumb, range, iTickSize, initVals)">
              <variable citdl="String" doc="the id of the slider&apos;s background element" ilk="argument" name="bg" />
              <variable citdl="String" doc="the id of the min thumb" ilk="argument" name="minthumb" />
              <variable citdl="String" doc="the id of the thumb thumb" ilk="argument" name="maxthumb" />
              <variable citdl="Number" doc="the number of pixels the thumbs can move within" ilk="argument" name="range" />
              <variable citdl="Number" doc="(optional) the element should move this many pixels&#xA;at a time" ilk="argument" name="iTickSize" />
              <variable citdl="Array" doc="(optional) [min,max] Initial thumb placement" ilk="argument" name="initVals" />
              <variable citdl="Slider" name="this" />
              <variable attributes="__local__ private" citdl="Thumb" line="1890" name="mint" />
              <variable attributes="__local__ private" citdl="Thumb" line="1890" name="maxt" />
              <variable attributes="__local__ private" citdl="YW.Slider" line="1891" name="Slider" />
              <variable attributes="__local__ private" citdl="YAHOO.widget" line="1891" name="YW" />
              <variable attributes="__local__ private" citdl="YW.SliderThumb" line="1891" name="Thumb" />
            </scope>
          </scope>
          <scope ilk="class" line="42" lineend="152" name="AutoComplete">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The AutoComplete control provides the front-end logic for text-entry suggestion and&#xA;completion functionality." ilk="function" line="42" lineend="152" name="AutoComplete" signature="AutoComplete(elInput, elContainer, oDataSource, oConfigs)">
              <variable citdl="String" doc="String ID of an input field." ilk="argument" name="elInput" />
              <variable citdl="String" doc="String ID of an existing DIV." ilk="argument" name="elContainer" />
              <variable citdl="YAHOO.widget.DataSource" doc="DataSource instance." ilk="argument" name="oDataSource" />
              <variable citdl="Object" doc="(optional) Object literal of configuration params." ilk="argument" name="oConfigs" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this._elContainer.parentNode" doc="For skinning" line="82" name="elParent" />
              <variable attributes="__local__ private" citdl="elParent.tagName.toLowerCase()" line="83" name="elTag" />
              <variable attributes="__local__ private" citdl="this" doc="Set up events" line="110" name="oSelf" />
              <variable attributes="__local__ private" citdl="this._elTextbox" line="111" name="elTextbox" />
              <variable attributes="__local__ private" citdl="this._elContent" doc="Events are actually for the content module within the&#xA;container" line="113" name="elContent" />
            </scope>
            <variable citdl="oDataSource" line="46" name="dataSource" />
            <variable citdl="String" line="55" name="_sName" />
            <variable citdl="document.getElementById()" line="56" name="_elTextbox" />
            <variable citdl="document.getElementById()" line="73" name="_elContainer" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Custom events" line="128" name="textboxFocusEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="129" name="textboxKeyEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="130" name="dataRequestEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="131" name="dataReturnEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="132" name="dataErrorEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="133" name="containerExpandEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="134" name="typeAheadEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="135" name="itemMouseOverEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="136" name="itemMouseOutEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="137" name="itemArrowToEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="138" name="itemArrowFromEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="139" name="itemSelectEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="140" name="unmatchedItemSelectEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="141" name="selectionEnforceEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="142" name="containerCollapseEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="143" name="textboxBlurEvent" />
            <scope doc="Public accessor to the unique name of the AutoComplete instance." ilk="function" line="353" lineend="355" name="toString" returns="String" signature="toString()">
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope doc="Returns true if container is in an expanded state, false otherwise." ilk="function" line="363" lineend="365" name="isContainerOpen" returns="Boolean" signature="isContainerOpen()">
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope doc="Public accessor to the internal array of DOM &amp;lt;li&amp;gt; elements that&#xA;display query results within the results container." ilk="function" line="374" lineend="376" name="getListItems" returns="Array" signature="getListItems()">
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope doc="Public accessor to the data held in an &amp;lt;li&amp;gt; element of the&#xA;results container." ilk="function" line="385" lineend="392" name="getListItemData" returns="Object" signature="getListItemData(oListItem)">
              <variable ilk="argument" name="oListItem" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope doc="Sets HTML markup for the results container header. This markup will be&#xA;inserted within a &amp;lt;div&amp;gt; tag with a class of &quot;yui-ac-hd&quot;." ilk="function" line="401" lineend="413" name="setHeader" signature="setHeader(sHeader)">
              <variable citdl="String" doc="HTML markup for results container header." ilk="argument" name="sHeader" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this._elHeader" line="403" name="elHeader">
                <variable citdl="Object" line="406" name="style">
                  <variable citdl="String" line="406" name="display" />
                </variable>
              </variable>
            </scope>
            <scope doc="Sets HTML markup for the results container footer. This markup will be&#xA;inserted within a &amp;lt;div&amp;gt; tag with a class of &quot;yui-ac-ft&quot;." ilk="function" line="422" lineend="434" name="setFooter" signature="setFooter(sFooter)">
              <variable citdl="String" doc="HTML markup for results container footer." ilk="argument" name="sFooter" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this._elFooter" line="424" name="elFooter">
                <variable citdl="Object" line="427" name="style">
                  <variable citdl="String" line="427" name="display" />
                </variable>
              </variable>
            </scope>
            <scope doc="Sets HTML markup for the results container body. This markup will be&#xA;inserted within a &amp;lt;div&amp;gt; tag with a class of &quot;yui-ac-bd&quot;." ilk="function" line="443" lineend="457" name="setBody" signature="setBody(sBody)">
              <variable citdl="String" doc="HTML markup for results container body." ilk="argument" name="sBody" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this._elBody" line="445" name="elBody">
                <variable citdl="Object" line="448" name="style">
                  <variable citdl="String" line="448" name="display" />
                </variable>
              </variable>
            </scope>
            <variable citdl="Number" line="455" name="_maxResultsDisplayed" />
            <scope doc="Overridable method that converts a result item object into HTML markup&#xA;for display. Return data values are accessible via the oResultItem object,&#xA;and the key return value will always be oResultItem[0]. Markup will be&#xA;displayed within &amp;lt;li&amp;gt; element tags in the container." ilk="function" line="470" lineend="478" name="formatResult" returns="String" signature="formatResult(oResultItem, sQuery)">
              <variable citdl="Object" doc="Result item representing one query result. Data is held in an array." ilk="argument" name="oResultItem" />
              <variable citdl="String" doc="The current query string." ilk="argument" name="sQuery" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="oResultItem[0]" line="471" name="sResult" />
            </scope>
            <scope doc="Overridable method called before container expands allows implementers to access data&#xA;and DOM elements." ilk="function" line="491" lineend="493" name="doBeforeExpandContainer" returns="Boolean" signature="doBeforeExpandContainer(elTextbox, elContainer, sQuery, aResults)">
              <variable citdl="HTMLElement" doc="The text input box." ilk="argument" name="elTextbox" />
              <variable citdl="HTMLElement" doc="The container element." ilk="argument" name="elContainer" />
              <variable citdl="String" doc="The query string." ilk="argument" name="sQuery" />
              <variable citdl="Array" doc="An array of query results." ilk="argument" name="aResults" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope doc="Makes query request to the DataSource." ilk="function" line="501" lineend="503" name="sendQuery" signature="sendQuery(sQuery)">
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope doc="Overridable method gives implementers access to the query before it gets sent." ilk="function" line="512" lineend="514" name="doBeforeSendQuery" returns="String" signature="doBeforeSendQuery(sQuery)">
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope doc="Nulls out the entire AutoComplete instance and related objects, removes attached&#xA;event listeners, and clears out DOM elements inside the container. After&#xA;calling this method, the instance reference should be expliclitly nulled by&#xA;implementer, as in myDataTable = null. Use with caution!" ilk="function" line="524" lineend="561" name="destroy" signature="destroy()">
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this.toString()" line="525" name="instanceName" />
              <variable attributes="__local__ private" citdl="this._elTextbox" line="526" name="elInput" />
              <variable attributes="__local__ private" citdl="this._elContainer" line="527" name="elContainer" />
            </scope>
            <variable attributes="private" citdl="Number" doc="PRIVATE: Internal class variable to index multiple AutoComplete instances." line="729" name="_nIndex" />
            <scope attributes="private" doc="PRIVATE: Updates and validates latest public config properties." ilk="function" line="977" lineend="1012" name="_initProps" signature="_initProps()">
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this.minQueryLength" doc="Correct any invalid values" line="979" name="minQueryLength" />
              <variable attributes="__local__ private" citdl="this.maxResultsDisplayed" line="983" name="maxResultsDisplayed" />
              <variable attributes="__local__ private" citdl="this.queryDelay" line="987" name="queryDelay" />
              <variable attributes="__local__ private" citdl="this.delimChar" line="991" name="delimChar" />
              <variable attributes="__local__ private" citdl="this.animSpeed" line="998" name="animSpeed" />
            </scope>
            <variable citdl="Number" line="981" name="minQueryLength" />
            <variable citdl="Number" line="985" name="maxResultsDisplayed" />
            <variable citdl="Number" line="989" name="queryDelay" />
            <variable citdl="Array" line="993" name="delimChar" />
            <variable citdl="Number" line="1001" name="animSpeed" />
            <variable citdl="YAHOO.util.Anim" line="1004" name="_oAnim" />
            <variable citdl="this.animSpeed" line="1007" name="duration" />
            <scope attributes="private" doc="PRIVATE: Initializes the results container helpers if they are enabled and do&#xA;not exist" ilk="function" line="1021" lineend="1038" name="_initContainerHelpers" signature="_initContainerHelpers()">
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1023" name="elShadow" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1028" name="elIFrame">
                <variable citdl="Object" line="1032" name="style">
                  <variable citdl="String" line="1032" name="position" />
                  <variable citdl="String" line="1033" name="width" />
                  <variable citdl="String" line="1034" name="height" />
                </variable>
              </variable>
            </scope>
            <variable citdl="this._elContainer.appendChild()" line="1025" name="_elShadow" />
            <variable citdl="this._elContainer.appendChild()" line="1036" name="_elIFrame" />
            <scope attributes="private" doc="PRIVATE: Initializes the results container once at object creation" ilk="function" line="1046" lineend="1072" name="_initContainer" signature="_initContainer()">
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="document.createElement()" doc="The elContent div helps size the iframe and shadow properly" line="1051" name="elContent">
                <variable citdl="Object" line="1053" name="style">
                  <variable citdl="String" line="1053" name="display" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="document.createElement()" line="1056" name="elHeader">
                <variable citdl="Object" line="1058" name="style">
                  <variable citdl="String" line="1058" name="display" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="document.createElement()" line="1061" name="elBody" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1065" name="elFooter">
                <variable citdl="Object" line="1067" name="style">
                  <variable citdl="String" line="1067" name="display" />
                </variable>
              </variable>
            </scope>
            <variable citdl="this._elContainer.appendChild()" line="1054" name="_elContent" />
            <variable citdl="this._elContent.appendChild()" line="1059" name="_elHeader" />
            <variable citdl="this._elContent.appendChild()" line="1063" name="_elBody" />
            <variable citdl="this._elContent.appendChild()" line="1068" name="_elFooter" />
            <scope attributes="private" doc="PRIVATE: Clears out contents of container body and creates up to&#xA;YAHOO.widget.AutoComplete#maxResultsDisplayed &amp;lt;li&amp;gt; elements in an&#xA;&amp;lt;ul&amp;gt; element." ilk="function" line="1082" lineend="1103" name="_initList" signature="_initList()">
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this.getListItems()" line="1085" name="oldListItems" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1094" name="oList" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1097" name="oItem" />
            </scope>
            <variable citdl="Array" line="1083" name="_aListItems" />
            <variable citdl="String" line="1091" name="innerHTML" />
            <scope attributes="private" doc="PRIVATE: Initializes each &amp;lt;li&amp;gt; element in the container list." ilk="function" line="1113" lineend="1122" name="_initListItem" signature="_initListItem(oItem, nItemIndex)">
              <variable citdl="HTMLElement" doc="The &amp;lt;li&amp;gt; DOM element." ilk="argument" name="oItem" />
              <variable citdl="Number" doc="The index of the element." ilk="argument" name="nItemIndex" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this" line="1114" name="oSelf" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Enables interval detection for  Korean IME support." ilk="function" line="1131" lineend="1133" name="_onIMEDetected" signature="_onIMEDetected(oSelf)">
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Enables query triggers based on text input detection by intervals (rather&#xA;than by key events)." ilk="function" line="1142" lineend="1149" name="_enableIntervalDetection" signature="_enableIntervalDetection()">
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this._elTextbox.value" line="1143" name="currValue" />
              <variable attributes="__local__ private" citdl="this._sLastTextboxValue" line="1144" name="lastValue" />
            </scope>
            <variable citdl="currValue" line="1146" name="_sLastTextboxValue" />
            <scope attributes="private" doc="PRIVATE: Cancels text input detection by intervals." ilk="function" line="1159" lineend="1163" name="_cancelIntervalDetection" signature="_cancelIntervalDetection(oSelf)">
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Whether or not key is functional or should be ignored. Note that the right&#xA;arrow key is NOT an ignored key since it triggers queries for certain intl&#xA;charsets." ilk="function" line="1176" lineend="1189" name="_isIgnoreKey" returns="Boolean" signature="_isIgnoreKey(nKeyCode)">
              <variable ilk="argument" name="nKeyCode" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Makes query request to the DataSource." ilk="function" line="1198" lineend="1258" name="_sendQuery" signature="_sendQuery(sQuery)">
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" doc="Delimiter has been enabled" line="1205" name="aDelimChar" />
              <variable attributes="__local__ private" citdl="Number" doc="are used to separate delimited queries" line="1210" name="nDelimIndex" />
              <variable attributes="__local__ private" citdl="sQuery.lastIndexOf()" line="1212" name="nNewIndex" />
              <variable attributes="__local__ private" citdl="nDelimIndex" line="1229" name="nQueryStart" />
            </scope>
            <variable citdl="sQuery.substring()" doc="...and save the rest of the string for later" line="1235" name="_sSavedQuery" />
            <variable citdl="Number" line="1254" name="_nDelayID" />
            <scope attributes="private" doc="PRIVATE: Populates the array of &amp;lt;li&amp;gt; elements in the container with query&#xA;results. This method is passed to YAHOO.widget.DataSource#getResults as a&#xA;callback function so results from the DataSource instance are returned to the&#xA;AutoComplete instance." ilk="function" line="1272" lineend="1339" name="_populateList" signature="_populateList(sQuery, aResults, oSelf)">
              <variable citdl="String" doc="The query string." ilk="argument" name="sQuery" />
              <variable citdl="Array" doc="An array of query result objects from the DataSource." ilk="argument" name="aResults" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" line="1280" name="isOpera" />
              <variable attributes="__local__ private" citdl="oSelf._elContent.style" line="1281" name="contentStyle" />
              <variable attributes="__local__ private" citdl="decodeURIComponent()" line="1285" name="sCurQuery" />
              <variable attributes="__local__ private" citdl="Math.min()" line="1293" name="nItems" />
              <variable attributes="__local__ private" citdl="oSelf._aListItems" line="1297" name="aItems" />
              <variable attributes="__local__ private" citdl="aItems[i]" line="1301" name="oItemi">
                <variable citdl="Object" line="1304" name="style">
                  <variable citdl="String" line="1304" name="display" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="aResults[i]" line="1302" name="oResultItemi" />
              <variable attributes="__local__ private" citdl="aItems[j]" line="1312" name="oItemj">
                <variable citdl="Object" line="1314" name="style">
                  <variable citdl="String" line="1314" name="display" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="oSelf.doBeforeExpandContainer()" doc="Expand the container" line="1320" name="ok" />
              <variable attributes="__local__ private" citdl="aItems[0]" doc="Go to the first item" line="1325" name="oFirstItem" />
            </scope>
            <scope attributes="private" doc="PRIVATE: When forceSelection is true and the user attempts&#xA;leave the text input box without selecting an item from the query results,&#xA;the user selection is cleared." ilk="function" line="1349" lineend="1363" name="_clearSelection" signature="_clearSelection()">
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this._elTextbox.value" line="1350" name="sValue" />
              <variable attributes="__local__ private" line="1351" name="sChar" />
              <variable attributes="__local__ private" line="1352" name="nIndex" />
            </scope>
            <variable citdl="sValue.substring()" line="1354" name="value" />
            <scope attributes="private" doc="PRIVATE: Whether or not user-typed value in the text input box matches any of the&#xA;query results." ilk="function" line="1374" lineend="1386" name="_textMatchesOption" returns="HTMLElement" signature="_textMatchesOption()">
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="oItem" line="1375" name="foundMatch" />
              <variable attributes="__local__ private" citdl="this._aListItems[i]" line="1378" name="oItem" />
              <variable attributes="__local__ private" citdl="oItem._sResultKey.toLowerCase()" line="1379" name="sMatch" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Updates in the text input box with the first query result as the user types,&#xA;selecting the substring that the user has not typed." ilk="function" line="1397" lineend="1418" name="_typeAhead" signature="_typeAhead(oItem, sQuery)">
              <variable citdl="HTMLElement" doc="The &amp;lt;li&amp;gt; element item whose data populates the input field." ilk="argument" name="oItem" />
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this._elTextbox" line="1403" name="elTextbox" />
              <variable attributes="__local__ private" citdl="this._elTextbox.value" line="1404" name="sValue" />
              <variable attributes="__local__ private" citdl="sValue.length" doc="Select the portion of text that the user has not typed" line="1412" name="nStart" />
              <variable attributes="__local__ private" citdl="elTextbox.value.length" line="1414" name="nEnd" />
              <variable attributes="__local__ private" citdl="elTextbox.value.substr()" line="1416" name="sPrefill" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Selects text in the input field." ilk="function" line="1429" lineend="1442" name="_selectText" signature="_selectText(elTextbox, nStart, nEnd)">
              <variable citdl="HTMLElement" doc="Text input box element in which to select text." ilk="argument" name="elTextbox" />
              <variable citdl="Number" doc="Starting index of text string to select." ilk="argument" name="nStart" />
              <variable citdl="Number" doc="Ending index of text selection." ilk="argument" name="nEnd" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="elTextbox.createTextRange()" doc="For IE" line="1434" name="oTextRange" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Syncs results container with its helpers." ilk="function" line="1451" lineend="1478" name="_toggleContainerHelpers" signature="_toggleContainerHelpers(bShow)">
              <variable citdl="Boolean" doc="True if container is expanded, false if collapsed" ilk="argument" name="bShow" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="1452" name="bFireEvent" />
              <variable attributes="__local__ private" citdl="this._elContent.offsetWidth" line="1453" name="width" />
              <variable attributes="__local__ private" citdl="this._elContent.offsetHeight" line="1454" name="height" />
            </scope>
            <variable citdl="width" line="1459" lineend="1551" name="width" />
            <variable citdl="height" line="1460" lineend="1551" name="height" />
            <scope attributes="private" doc="PRIVATE: Animates expansion or collapse of the container." ilk="function" line="1487" lineend="1602" name="_toggleContainer" signature="_toggleContainer(bShow)">
              <variable citdl="Boolean" doc="True if container should be expanded, false if container should be collapsed" ilk="argument" name="bShow" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this._elContainer" line="1488" name="elContainer" />
              <variable attributes="__local__ private" citdl="this._aListItems" line="1498" name="aItems" />
              <variable attributes="__local__ private" citdl="this._oAnim" doc="If animation is enabled..." line="1522" name="oAnim" />
              <variable attributes="__local__ private" citdl="this._elContent.cloneNode()" doc="Clone container to grab current size offscreen" line="1535" name="oClone">
                <variable citdl="Object" line="1537" name="style">
                  <variable citdl="String" line="1537" name="top" />
                  <variable citdl="String" line="1538" name="display" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="oClone.offsetWidth" doc="Current size of the container is the EXPANDED size" line="1541" name="wExp" />
              <variable attributes="__local__ private" citdl="oClone.offsetHeight" line="1542" name="hExp" />
              <variable attributes="__local__ private" doc="Calculate COLLAPSED sizes based on horiz and vert anim" line="1545" name="wColl" />
              <variable attributes="__local__ private" line="1546" name="hColl" />
              <variable attributes="__local__ private" citdl="this" line="1567" name="oSelf">
                <variable citdl="Object" line="1576" name="_elContent">
                  <variable citdl="Object" line="1576" name="style">
                    <variable citdl="String" line="1576" name="display" />
                  </variable>
                </variable>
              </variable>
              <scope attributes="__local__ private" ilk="function" line="1568" lineend="1580" name="onAnimComplete" signature="onAnimComplete()" />
            </scope>
            <variable citdl="Number" line="1497" name="scrollTop" />
            <variable citdl="oNewItem" line="1510" name="_oCurItem" />
            <variable citdl="Number" line="1511" name="_nDisplayedItems" />
            <variable line="1512" name="_sCurQuery" />
            <variable citdl="String" line="1517" name="display" />
            <variable citdl="bShow" line="1586" name="_bContainerOpen" />
            <scope attributes="private" doc="PRIVATE: Toggles the highlight on or off for an item in the container, and also cleans&#xA;up highlighting of any previous item." ilk="function" line="1613" lineend="1625" name="_toggleHighlight" signature="_toggleHighlight(oNewItem, sType)">
              <variable citdl="HTMLElement" doc="The &amp;lt;li&amp;gt; element item to receive highlight behavior." ilk="argument" name="oNewItem" />
              <variable citdl="String" doc="Type &quot;mouseover&quot; will toggle highlight on, and &quot;mouseout&quot; will toggle highlight off." ilk="argument" name="sType" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this.highlightClassName" line="1614" name="sHighlight" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Toggles the pre-highlight on or off for an item in the container." ilk="function" line="1635" lineend="1649" name="_togglePrehighlight" signature="_togglePrehighlight(oNewItem, sType)">
              <variable citdl="HTMLElement" doc="The &amp;lt;li&amp;gt; element item to receive highlight behavior." ilk="argument" name="oNewItem" />
              <variable citdl="String" doc="Type &quot;mouseover&quot; will toggle highlight on, and &quot;mouseout&quot; will toggle highlight off." ilk="argument" name="sType" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this.prehighlightClassName" line="1640" name="sPrehighlight" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Updates the text input box value with selected query result. If a delimiter&#xA;has been defined, then the value gets appended with the delimiter." ilk="function" line="1659" lineend="1690" name="_updateValue" signature="_updateValue(oItem)">
              <variable citdl="HTMLElement" doc="The &amp;lt;li&amp;gt; element item with which to update the value." ilk="argument" name="oItem" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this._elTextbox" line="1660" name="elTextbox" />
              <variable attributes="__local__ private" line="1661" name="sDelimChar" />
              <variable attributes="__local__ private" citdl="this._sSavedQuery" line="1662" name="sSavedQuery" />
              <variable attributes="__local__ private" citdl="oItem._sResultKey" line="1663" name="sResultKey" />
              <variable attributes="__local__ private" citdl="elTextbox.value.length" doc="move cursor to end" line="1686" name="end" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Selects a result item from the container" ilk="function" line="1699" lineend="1705" name="_selectItem" signature="_selectItem(oItem)">
              <variable citdl="HTMLElement" doc="The selected &amp;lt;li&amp;gt; element item." ilk="argument" name="oItem" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <variable citdl="Boolean" line="1700" name="_bItemSelected" />
            <scope attributes="private" doc="PRIVATE: If an item is highlighted in the container, the right arrow key jumps to the&#xA;end of the textbox and selects the highlighted item, otherwise the container&#xA;is closed." ilk="function" line="1715" lineend="1722" name="_jumpSelection" signature="_jumpSelection()">
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Triggered by up and down arrow keys, changes the current highlighted&#xA;&amp;lt;li&amp;gt; element item. Scrolls container if necessary." ilk="function" line="1732" lineend="1820" name="_moveSelection" signature="_moveSelection(nKeyCode)">
              <variable citdl="Number" doc="Code of key pressed." ilk="argument" name="nKeyCode" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="this._oCurItem" doc="Determine current item&apos;s id number" line="1735" name="oCurItem" />
              <variable attributes="__local__ private" citdl="Number" line="1736" name="nCurItemIndex" />
              <variable attributes="__local__ private" line="1743" name="nNewItemIndex" />
              <variable attributes="__local__ private" citdl="this._aListItems[nNewItemIndex]" line="1777" name="oNewItem" />
              <variable attributes="__local__ private" citdl="this._elContent" doc="Scroll the container if necessary" line="1780" name="elContent" />
              <variable attributes="__local__ private" line="1782" name="scrollOn" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles &amp;lt;li&amp;gt; element mouseover events in the container." ilk="function" line="1836" lineend="1845" name="_onItemMouseover" signature="_onItemMouseover(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The mouseover event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles &amp;lt;li&amp;gt; element mouseout events in the container." ilk="function" line="1855" lineend="1864" name="_onItemMouseout" signature="_onItemMouseout(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The mouseout event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles &amp;lt;li&amp;gt; element click events in the container." ilk="function" line="1874" lineend="1878" name="_onItemMouseclick" signature="_onItemMouseclick(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles container mouseover events." ilk="function" line="1888" lineend="1890" name="_onContainerMouseover" signature="_onContainerMouseover(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The mouseover event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles container mouseout events." ilk="function" line="1900" lineend="1906" name="_onContainerMouseout" signature="_onContainerMouseout(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The mouseout event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles container scroll events." ilk="function" line="1916" lineend="1918" name="_onContainerScroll" signature="_onContainerScroll(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The scroll event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles container resize events." ilk="function" line="1928" lineend="1930" name="_onContainerResize" signature="_onContainerResize(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The resize event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles textbox keydown events of functional keys, mainly for UI behavior." ilk="function" line="1941" lineend="1993" name="_onTextboxKeyDown" signature="_onTextboxKeyDown(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The keydown event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="v.keyCode" line="1942" name="nKeyCode" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles textbox keypress events." ilk="function" line="2002" lineend="2045" name="_onTextboxKeyPress" signature="_onTextboxKeyPress(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The keypress event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="v.keyCode" line="2003" name="nKeyCode" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles textbox keyup events that trigger queries." ilk="function" line="2055" lineend="2091" name="_onTextboxKeyUp" signature="_onTextboxKeyUp(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The keyup event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="v.keyCode" line="2059" name="nKeyCode" />
              <variable attributes="__local__ private" citdl="this.value" line="2062" name="sText" />
              <variable attributes="__local__ private" citdl="setTimeout()" line="2079" name="nDelayID" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles text input box receiving focus." ilk="function" line="2101" lineend="2107" name="_onTextboxFocus" signature="_onTextboxFocus(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The focus event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles text input box losing focus." ilk="function" line="2117" lineend="2150" name="_onTextboxBlur" signature="_onTextboxBlur(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The focus event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
              <variable attributes="__local__ private" citdl="oSelf._textMatchesOption()" line="2122" name="oMatch" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles window unload event." ilk="function" line="2160" lineend="2164" name="_onWindowUnload" signature="_onWindowUnload(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The unload event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
              <variable citdl="AutoComplete" name="this" />
            </scope>
          </scope>
          <variable citdl="Object" line="44" lineend="819" name="MenuManager">
            <scope doc="Adds a menu to the collection of known menus." ilk="function" line="496" lineend="538" name="addMenu" signature="addMenu(p_oMenu)">
              <variable citdl="YAHOO.widget.Menu" doc="Object specifying the Menu&#xA;instance to be added." ilk="argument" name="p_oMenu" />
              <variable citdl="MenuManager" name="this" />
              <variable attributes="__local__ private" citdl="document" line="498" name="oDoc" />
            </scope>
            <scope doc="Removes a menu from the collection of known menus." ilk="function" line="547" lineend="616" name="removeMenu" signature="removeMenu(p_oMenu)">
              <variable citdl="YAHOO.widget.Menu" doc="Object specifying the Menu&#xA;instance to be removed." ilk="argument" name="p_oMenu" />
              <variable citdl="MenuManager" name="this" />
              <variable attributes="__local__ private" citdl="aItems.length" line="551" name="i" />
              <variable attributes="__local__ private" citdl="p_oMenu.getItems()" line="551" name="aItems" />
              <variable attributes="__local__ private" citdl="p_oMenu.id" line="551" name="sId" />
            </scope>
            <scope doc="Hides all visible, dynamically positioned menus&#xA;(excluding instances of YAHOO.widget.MenuBar)." ilk="function" line="624" lineend="645" name="hideVisible" signature="hideVisible()">
              <variable citdl="MenuManager" name="this" />
              <variable attributes="__local__ private" citdl="m_oVisibleMenus[i]" line="626" name="oMenu" />
            </scope>
            <scope doc="Returns a collection of all visible menus registered&#xA;with the menu manger." ilk="function" line="654" lineend="658" name="getVisible" returns="Array" signature="getVisible()">
              <variable citdl="MenuManager" name="this" />
            </scope>
            <scope doc="Returns a collection of all menus registered with the&#xA;menu manger." ilk="function" line="667" lineend="671" name="getMenus" returns="Array" signature="getMenus()">
              <variable citdl="MenuManager" name="this" />
            </scope>
            <scope doc="Returns a menu with the specified id." ilk="function" line="682" lineend="692" name="getMenu" returns="YAHOO.widget.Menu" signature="getMenu(p_sId)">
              <variable citdl="String" doc="String specifying the id of the&#xA;&lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element representing the menu to&#xA;be retrieved." ilk="argument" name="p_sId" />
              <variable citdl="MenuManager" name="this" />
              <variable attributes="__local__ private" citdl="m_oMenus[p_sId]" line="684" name="oMenu" />
            </scope>
            <scope doc="Returns a menu item with the specified id." ilk="function" line="703" lineend="713" name="getMenuItem" returns="YAHOO.widget.MenuItem" signature="getMenuItem(p_sId)">
              <variable citdl="String" doc="String specifying the id of the&#xA;&lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element representing the menu item to&#xA;be retrieved." ilk="argument" name="p_sId" />
              <variable citdl="MenuManager" name="this" />
              <variable attributes="__local__ private" citdl="m_oItems[p_sId]" line="705" name="oItem" />
            </scope>
            <scope doc="Returns an array of menu item instances whose&#xA;corresponding &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; elements are child&#xA;nodes of the &lt;code&gt;&amp;#60;ul&amp;#62;&lt;/code&gt; element with the&#xA;specified id." ilk="function" line="727" lineend="775" name="getMenuItemGroup" returns="Array" signature="getMenuItemGroup(p_sId)">
              <variable citdl="String" doc="String specifying the id of the&#xA;&lt;code&gt;&amp;#60;ul&amp;#62;&lt;/code&gt; element representing the group of&#xA;menu items to be retrieved." ilk="argument" name="p_sId" />
              <variable citdl="MenuManager" name="this" />
              <variable attributes="__local__ private" citdl="oNode.id" line="733" name="sId" />
              <variable attributes="__local__ private" citdl="Array" line="733" name="aItems" />
              <variable attributes="__local__ private" citdl="oUL.firstChild" line="733" name="oNode" />
              <variable attributes="__local__ private" citdl="this.getMenuItem()" line="733" name="oItem" />
              <variable attributes="__local__ private" citdl="Dom.get()" line="733" name="oUL" />
            </scope>
            <scope doc="Returns a reference to the menu item that currently&#xA;has focus." ilk="function" line="784" lineend="788" name="getFocusedMenuItem" returns="YAHOO.widget.MenuItem" signature="getFocusedMenuItem()">
              <variable citdl="MenuManager" name="this" />
            </scope>
            <scope doc="Returns a reference to the menu that currently&#xA;has focus." ilk="function" line="797" lineend="805" name="getFocusedMenu" returns="YAHOO.widget.Menu" signature="getFocusedMenu()">
              <variable citdl="MenuManager" name="this" />
            </scope>
            <scope doc="Returns a string representing the menu manager." ilk="function" line="813" lineend="817" name="toString" returns="String" signature="toString()">
              <variable citdl="MenuManager" name="this" />
            </scope>
          </variable>
          <scope ilk="function" line="53" lineend="53" name="ToolbarButtonAdvanced" signature="ToolbarButtonAdvanced()">
            <variable citdl="widget" name="this" />
          </scope>
          <scope ilk="class" line="53" lineend="51" name="ToolbarButtonAdvanced">
            <scope doc="Select an option by value" ilk="function" line="39" lineend="51" name="checkValue" signature="checkValue(value)">
              <variable citdl="String" doc="The value of the option that we want to mark as selected" ilk="argument" name="value" />
              <variable citdl="ToolbarButtonAdvanced" name="this" />
              <variable attributes="__local__ private" citdl="this.getMenu().getItems()" line="40" name="_menuItems" />
            </scope>
            <scope attributes="__ctor__" ilk="function" line="53" lineend="53" name="ToolbarButtonAdvanced" signature="ToolbarButtonAdvanced()">
              <variable citdl="ToolbarButtonAdvanced" name="this" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.util.Element" ilk="class" line="71" lineend="95" name="ToolbarButton">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: &lt;p&gt;Creates a basic custom Toolbar Button. Primarily used with the Rich Text Editor&apos;s Toolbar&lt;/p&gt;" ilk="function" line="71" lineend="95" name="ToolbarButton" signature="ToolbarButton(el, attrs)">
              <variable citdl="String/HTMLElement" doc="The element to turn into a button." ilk="argument" name="el" />
              <variable citdl="Object" doc="Object liternal containing configuration parameters." ilk="argument" name="attrs" />
              <variable citdl="ToolbarButton" name="this" />
              <variable attributes="__local__ private" line="76" name="local_attrs" />
              <variable attributes="__local__ private" citdl="Object" line="78" lineend="81" name="oConfig">
                <variable citdl="document.createElement()" line="79" name="element">
                  <variable citdl="Object" line="91" name="firstChild">
                    <variable citdl="Object" line="91" name="firstChild">
                      <variable citdl="String" line="91" name="tabIndex" />
                    </variable>
                  </variable>
                </variable>
                <variable citdl="local_attrs" line="80" name="attributes" />
              </variable>
            </scope>
            <variable attributes="private" citdl="String" doc="PRIVATE: Tells if the Button is a Rich Button or a Simple Button" line="103" name="buttonType" />
            <scope attributes="private" doc="PRIVATE: Adds classes to the button elements on mouseover (hover)" ilk="function" line="109" lineend="114" name="_handleMouseOver" signature="_handleMouseOver()" />
            <scope attributes="private" doc="PRIVATE: Removes classes from the button elements on mouseout (hover)" ilk="function" line="120" lineend="123" name="_handleMouseOut" signature="_handleMouseOut()" />
            <scope doc="Select an option by value" ilk="function" line="129" lineend="138" name="checkValue" signature="checkValue(value)">
              <variable citdl="String" doc="The value of the option that we want to mark as selected" ilk="argument" name="value" />
              <variable attributes="__local__ private" citdl="this._button.options" line="131" name="opts" />
            </scope>
            <scope doc="The ToolbarButton class&apos;s initialization method" ilk="function" line="143" lineend="148" name="init" signature="init(p_oElement, p_oAttributes)">
              <variable ilk="argument" name="p_oElement" />
              <variable ilk="argument" name="p_oAttributes" />
            </scope>
            <scope doc="Initializes all of the configuration attributes used to create&#xA;the toolbar." ilk="function" line="156" lineend="272" name="initAttributes" signature="initAttributes(attr)">
              <variable citdl="Object" doc="Object literal specifying a set of&#xA;configuration attributes used to create the toolbar." ilk="argument" name="attr" />
            </scope>
            <scope attributes="private" doc="PRIVATE: The event fired when a change event gets fired on a select element" ilk="function" line="279" lineend="283" name="_handleSelect" signature="_handleSelect(ev)">
              <variable citdl="Event" doc="The change event." ilk="argument" name="ev" />
              <variable attributes="__local__ private" citdl="Event.getTarget()" line="280" name="tar" />
              <variable attributes="__local__ private" citdl="tar.options[tar.selectedIndex].value" line="281" name="value" />
            </scope>
            <scope doc="A stub function to mimic YAHOO.widget.Button&apos;s getMenu method" ilk="function" line="288" lineend="290" name="getMenu" returns="this.get()" signature="getMenu()" />
            <scope doc="Destroy the button" ilk="function" line="295" lineend="304" name="destroy" signature="destroy()" />
            <scope doc="Overridden fireEvent method to prevent DOM events from firing if the button is disabled." ilk="function" line="309" lineend="316" name="fireEvent" signature="fireEvent(p_sType, p_aArgs)">
              <variable ilk="argument" name="p_sType" />
              <variable ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Returns a string representing the toolbar." ilk="function" line="322" lineend="324" name="toString" returns="String" signature="toString()" />
          </scope>
          <scope ilk="class" line="79" lineend="86" name="LogWriter">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The LogWriter class provides a mechanism to log messages through&#xA;YAHOO.widget.Logger from a named source." ilk="function" line="79" lineend="86" name="LogWriter" signature="LogWriter(sSource)">
              <variable citdl="String" doc="Source of LogWriter instance." ilk="argument" name="sSource" />
              <variable citdl="LogWriter" name="this" />
            </scope>
            <variable citdl="sSource" line="85" name="_source" />
            <scope doc="Public accessor to the unique name of the LogWriter instance." ilk="function" line="100" lineend="102" name="toString" returns="String" signature="toString()">
              <variable citdl="LogWriter" name="this" />
            </scope>
            <scope doc="Logs a message attached to the source of the LogWriter." ilk="function" line="111" lineend="113" name="log" signature="log(sMsg, sCategory)">
              <variable citdl="String" doc="The log message." ilk="argument" name="sMsg" />
              <variable citdl="String" doc="Category name." ilk="argument" name="sCategory" />
              <variable citdl="LogWriter" name="this" />
            </scope>
            <scope doc="Public accessor to get the source name." ilk="function" line="121" lineend="123" name="getSource" returns="String" signature="getSource()">
              <variable citdl="LogWriter" name="this" />
            </scope>
            <scope doc="Public accessor to set the source name." ilk="function" line="131" lineend="139" name="setSource" signature="setSource(sSource)">
              <variable citdl="String" doc="Source of LogWriter instance." ilk="argument" name="sSource" />
              <variable citdl="LogWriter" name="this" />
            </scope>
            <variable citdl="sSource" line="137" name="_sSource" />
          </scope>
          <scope ilk="class" line="172" lineend="1551" name="LogReader">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The LogReader class provides UI to read messages logged to YAHOO.widget.Logger." ilk="function" line="172" lineend="213" name="LogReader" signature="LogReader(elContainer, oConfigs)">
              <variable citdl="String" doc="(optional) String ID of an existing DIV." ilk="argument" name="elContainer" />
              <variable citdl="Object" doc="(optional) Object literal of configuration params." ilk="argument" name="oConfigs" />
              <variable citdl="LogReader" name="this" />
            </scope>
            <variable citdl="YAHOO.widget.LogReader._index" line="173" name="_sName" />
            <variable citdl="Array" doc="Internal vars" line="177" name="_buffer" />
            <variable citdl="Object" doc="output buffer" line="178" lineend="178" name="_filterCheckboxes" />
            <variable citdl="YAHOO.widget.Logger.getStartTime()" doc="pointers to checkboxes" line="179" name="_lastTime" />
            <variable citdl="Boolean" doc="Whether or not LogReader is enabled to output log messages." line="276" name="logReaderEnabled" />
            <variable citdl="String" doc="Public member to access CSS width of the LogReader container." line="284" name="width" />
            <variable citdl="String" doc="Public member to access CSS height of the LogReader container." line="292" name="height" />
            <variable citdl="String" doc="Public member to access CSS top position of the LogReader container." line="300" name="top" />
            <variable citdl="String" doc="Public member to access CSS left position of the LogReader container." line="308" name="left" />
            <variable citdl="String" doc="Public member to access CSS right position of the LogReader container." line="316" name="right" />
            <variable citdl="String" doc="Public member to access CSS bottom position of the LogReader container." line="324" name="bottom" />
            <variable citdl="String" doc="Public member to access CSS font size of the LogReader container." line="332" name="fontSize" />
            <variable citdl="Boolean" doc="Whether or not the footer UI is enabled for the LogReader." line="341" name="footerEnabled" />
            <variable citdl="Boolean" doc="Whether or not output is verbose (more readable). Setting to true will make&#xA;output more compact (less readable)." line="351" name="verboseOutput" />
            <variable citdl="String" doc="Custom output format for log messages.  Defaults to null, which falls&#xA;back to verboseOutput param deciding between LogReader.VERBOSE_TEMPLATE&#xA;and LogReader.BASIC_TEMPLATE.  Use bracketed place holders to mark where&#xA;message info should go.  Available place holder names include:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;category&lt;/li&gt;&#xA;&lt;li&gt;label&lt;/li&gt;&#xA;&lt;li&gt;sourceAndDetail&lt;/li&gt;&#xA;&lt;li&gt;message&lt;/li&gt;&#xA;&lt;li&gt;localTime&lt;/li&gt;&#xA;&lt;li&gt;elapsedTime&lt;/li&gt;&#xA;&lt;li&gt;totalTime&lt;/li&gt;&#xA;&lt;/ul&gt;" line="372" name="entryFormat" />
            <variable citdl="Boolean" doc="Whether or not newest message is printed on top." line="380" name="newestOnTop" />
            <variable citdl="Number" doc="Output timeout buffer in milliseconds." line="389" name="outputBuffer" />
            <variable citdl="Number" doc="Maximum number of messages a LogReader console will display." line="398" name="thresholdMax" />
            <variable citdl="Number" doc="When a LogReader console reaches its thresholdMax, it will clear out messages&#xA;and print out the latest thresholdMin number of messages." line="408" name="thresholdMin" />
            <variable citdl="Boolean" doc="True when LogReader is in a collapsed state, false otherwise." line="417" name="isCollapsed" />
            <variable citdl="Boolean" doc="True when LogReader is in a paused state, false otherwise." line="426" name="isPaused" />
            <variable citdl="Boolean" doc="Enables draggable LogReader if DragDrop Utility is present." line="435" name="draggable" />
            <scope doc="Public accessor to the unique name of the LogReader instance." ilk="function" line="449" lineend="451" name="toString" returns="String" signature="toString()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope doc="Pauses output of log messages. While paused, log messages are not lost, but&#xA;get saved to a buffer and then output upon resume of LogReader." ilk="function" line="458" lineend="463" name="pause" signature="pause()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <variable citdl="String" line="460" name="value" />
            <variable line="461" name="_timeout" />
            <scope doc="Resumes output of log messages, including outputting any log messages that&#xA;have been saved to buffer while paused." ilk="function" line="471" lineend="476" name="resume" signature="resume()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope doc="Hides UI of LogReader. Logging functionality is not disrupted." ilk="function" line="483" lineend="485" name="hide" signature="hide()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <variable citdl="String" line="484" name="display" />
            <scope doc="Shows UI of LogReader. Logging functionality is not disrupted." ilk="function" line="492" lineend="494" name="show" signature="show()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope doc="Collapses UI of LogReader. Logging functionality is not disrupted." ilk="function" line="501" lineend="508" name="collapse" signature="collapse()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope doc="Expands UI of LogReader. Logging functionality is not disrupted." ilk="function" line="515" lineend="522" name="expand" signature="expand()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope doc="Returns related checkbox element for given filter (i.e., category or source)." ilk="function" line="531" lineend="533" name="getCheckbox" returns="Array" signature="getCheckbox(filter)">
              <variable ilk="argument" name="filter" />
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope doc="Returns array of enabled categories." ilk="function" line="541" lineend="543" name="getCategories" returns="Array" signature="getCategories()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope doc="Shows log messages associated with given category." ilk="function" line="551" lineend="575" name="showCategory" signature="showCategory(sCategory)">
              <variable ilk="argument" name="sCategory" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this._categoryFilters" line="552" name="filtersArray" />
              <variable attributes="__local__ private" citdl="this.getCheckbox()" line="571" name="elCheckbox" />
            </scope>
            <scope doc="Hides log messages associated with given category." ilk="function" line="583" lineend="596" name="hideCategory" signature="hideCategory(sCategory)">
              <variable ilk="argument" name="sCategory" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this._categoryFilters" line="584" name="filtersArray" />
              <variable attributes="__local__ private" citdl="this.getCheckbox()" line="592" name="elCheckbox" />
            </scope>
            <scope doc="Returns array of enabled sources." ilk="function" line="604" lineend="606" name="getSources" returns="Array" signature="getSources()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope doc="Shows log messages associated with given source." ilk="function" line="614" lineend="637" name="showSource" signature="showSource(sSource)">
              <variable ilk="argument" name="sSource" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this._sourceFilters" line="615" name="filtersArray" />
              <variable attributes="__local__ private" citdl="this.getCheckbox()" line="633" name="elCheckbox" />
            </scope>
            <scope doc="Hides log messages associated with given source." ilk="function" line="645" lineend="658" name="hideSource" signature="hideSource(sSource)">
              <variable ilk="argument" name="sSource" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this._sourceFilters" line="646" name="filtersArray" />
              <variable attributes="__local__ private" citdl="this.getCheckbox()" line="654" name="elCheckbox" />
            </scope>
            <scope doc="Does not delete any log messages, but clears all printed log messages from&#xA;the console. Log messages will be printed out again if user re-filters. The&#xA;static method YAHOO.widget.Logger.reset() should be called in order to&#xA;actually delete log messages." ilk="function" line="668" lineend="676" name="clearConsole" signature="clearConsole()">
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this._elConsole" line="674" name="elConsole" />
            </scope>
            <variable citdl="Number" line="672" name="_consoleMsgCount" />
            <scope doc="Updates title to given string." ilk="function" line="684" lineend="686" name="setTitle" signature="setTitle(sTitle)">
              <variable citdl="String" doc="New title." ilk="argument" name="sTitle" />
              <variable citdl="LogReader" name="this" />
            </scope>
            <variable citdl="this.html2Text()" line="685" name="innerHTML" />
            <scope doc="Gets timestamp of the last log." ilk="function" line="694" lineend="696" name="getLastTime" returns="Date" signature="getLastTime()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope ilk="function" line="698" lineend="740" name="formatMsg" returns="msg" signature="formatMsg(entry)">
              <variable ilk="argument" name="entry" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="702" lineend="715" name="info">
                <variable citdl="entry.category" line="703" name="category" />
                <variable citdl="entry.category.substring().toUpperCase()" doc="Label for color-coded display" line="706" name="label" />
                <variable citdl="entry.sourceDetail" line="708" name="sourceAndDetail" />
                <variable citdl="Object" line="710" name="entry">
                  <variable line="710" name="source" />
                </variable>
                <variable citdl="this.html2Text()" doc="to console" line="714" name="message" />
                <variable citdl="entry.time.toLocaleTimeString" line="719" name="localTime" />
                <variable citdl="entry.time.getTime()" doc="in the stack" line="726" name="elapsedTime" />
                <variable citdl="entry.time.getTime()" line="728" name="totalTime" />
              </variable>
              <variable attributes="__local__ private" citdl="YAHOO.widget.LogReader" line="702" name="Static" />
              <variable attributes="__local__ private" citdl="this.entryFormat" line="702" name="entryFormat" />
              <variable attributes="__local__ private" citdl="Static.ENTRY_TEMPLATE.cloneNode()" line="732" name="msg" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Converts input chars &quot;&lt;&quot;, &quot;&gt;&quot;, and &quot;&amp;&quot; to HTML entities." ilk="function" line="749" lineend="755" name="html2Text" returns="String" signature="html2Text(sHtml)">
              <variable citdl="String" doc="String to convert." ilk="argument" name="sHtml" />
              <variable citdl="LogReader" name="this" />
            </scope>
            <variable attributes="private" citdl="Array" doc="PRIVATE: Array of filters for log message categories." line="837" name="_categoryFilters" />
            <variable attributes="private" citdl="Array" doc="PRIVATE: Array of filters for log message sources." line="846" name="_sourceFilters" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: LogReader container element." line="855" name="_elContainer" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: LogReader header element." line="864" name="_elHd" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: LogReader collapse element." line="873" name="_elCollapse" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: LogReader collapse button element." line="882" name="_btnCollapse" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: LogReader title header element." line="891" name="_title" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: LogReader console element." line="900" name="_elConsole" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: LogReader footer element." line="909" name="_elFt" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: LogReader buttons container element." line="918" name="_elBtns" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: Container element for LogReader category filter checkboxes." line="927" name="_elCategoryFilters" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: Container element for LogReader source filter checkboxes." line="936" name="_elSourceFilters" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: LogReader pause button element." line="945" name="_btnPause" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: Clear button element." line="954" name="_btnClear" />
            <scope attributes="private" doc="PRIVATE: Initializes the primary container element." ilk="function" line="969" lineend="1013" name="_initContainerEl" signature="_initContainerEl(elContainer)">
              <variable citdl="HTMLElement" doc="Container element by reference or string ID." ilk="argument" name="elContainer" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this._elContainer.style" doc="If implementer has provided container values, trust and set&#xA;those" line="987" name="containerStyle" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Initializes the header element." ilk="function" line="1021" lineend="1053" name="_initHeaderEl" signature="_initHeaderEl()">
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this" line="1022" name="oSelf" />
            </scope>
            <variable citdl="String" line="1035" name="id" />
            <variable citdl="String" line="1036" name="className" />
            <variable citdl="String" line="1042" name="type" />
            <scope attributes="private" doc="PRIVATE: Initializes the console element." ilk="function" line="1061" lineend="1079" name="_initConsoleEl" signature="_initConsoleEl()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Initializes the footer element." ilk="function" line="1087" lineend="1132" name="_initFooterEl" signature="_initFooterEl()">
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this" line="1088" name="oSelf" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Initializes Drag and Drop on the header element." ilk="function" line="1140" lineend="1150" name="_initDragDrop" signature="_initDragDrop()">
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.DD" line="1145" name="ylog_dd" />
            </scope>
            <variable citdl="String" doc="TODO: use class name" line="1148" name="cursor" />
            <scope attributes="private" doc="PRIVATE: Initializes category filters." ilk="function" line="1158" lineend="1174" name="_initCategories" signature="_initCategories()">
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Logger.categories" line="1161" name="aInitialCategories" />
              <variable attributes="__local__ private" citdl="aInitialCategories[j]" line="1164" name="sCategory" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Initializes source filters." ilk="function" line="1182" lineend="1198" name="_initSources" signature="_initSources()">
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Logger.sources" line="1185" name="aInitialSources" />
              <variable attributes="__local__ private" citdl="aInitialSources[j]" line="1188" name="sSource" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Creates the UI for a category filter in the LogReader footer element." ilk="function" line="1207" lineend="1236" name="_createCategoryCheckbox" signature="_createCategoryCheckbox(sCategory)">
              <variable citdl="String" doc="Category name." ilk="argument" name="sCategory" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this" line="1208" name="oSelf" />
              <variable attributes="__local__ private" citdl="this._elCategoryFilters" line="1211" name="elParent" />
              <variable attributes="__local__ private" citdl="elParent.appendChild()" line="1212" name="elFilter" />
              <variable attributes="__local__ private" citdl="document.createElement()" doc="and THEN set checked property" line="1217" name="chkCategory" />
              <variable attributes="__local__ private" citdl="elFilter.appendChild()" doc="Create and class the text label" line="1229" name="lblCategory" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Creates a checkbox in the LogReader footer element to filter by source." ilk="function" line="1245" lineend="1274" name="_createSourceCheckbox" signature="_createSourceCheckbox(sSource)">
              <variable citdl="String" doc="Source name." ilk="argument" name="sSource" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this" line="1246" name="oSelf" />
              <variable attributes="__local__ private" citdl="this._elSourceFilters" line="1249" name="elParent" />
              <variable attributes="__local__ private" citdl="elParent.appendChild()" line="1250" name="elFilter" />
              <variable attributes="__local__ private" citdl="document.createElement()" doc="and THEN set checked property" line="1255" name="chkSource" />
              <variable attributes="__local__ private" citdl="elFilter.appendChild()" doc="Create and class the text label" line="1267" name="lblSource" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Reprints all log messages in the stack through filters." ilk="function" line="1282" lineend="1288" name="_filterLogs" signature="_filterLogs()">
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Sends buffer of log messages to output and clears buffer." ilk="function" line="1296" lineend="1318" name="_printBuffer" signature="_printBuffer()">
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this.thresholdMax" line="1300" name="thresholdMax" />
              <variable attributes="__local__ private" citdl="Array" line="1303" name="entries" />
            </scope>
            <variable citdl="this._elConsole.scrollHeight" line="1315" name="scrollTop" />
            <scope attributes="private" doc="PRIVATE: Cycles through an array of log messages, and outputs each one to the console&#xA;if its category has not been filtered out." ilk="function" line="1328" lineend="1391" name="_printToConsole" signature="_printToConsole(aEntries)">
              <variable citdl="Array" doc="Array of LogMsg objects to output to console." ilk="argument" name="aEntries" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this._sourceFilters.length" doc="Manage the number of messages displayed in the console" line="1337" name="sourceFiltersLen" />
              <variable attributes="__local__ private" citdl="this.thresholdMin" doc="Manage the number of messages displayed in the console" line="1337" name="thresholdMin" />
              <variable attributes="__local__ private" citdl="document.createDocumentFragment()" doc="Manage the number of messages displayed in the console" line="1337" name="df" />
              <variable attributes="__local__ private" doc="Manage the number of messages displayed in the console" line="1337" name="j" />
              <variable attributes="__local__ private" doc="Manage the number of messages displayed in the console" line="1337" name="i" />
              <variable attributes="__local__ private" citdl="aEntries.length" doc="Manage the number of messages displayed in the console" line="1337" name="entriesLen" />
              <variable attributes="__local__ private" citdl="this.formatMsg()" doc="Manage the number of messages displayed in the console" line="1337" name="msg" />
              <variable attributes="__local__ private" doc="Manage the number of messages displayed in the console" line="1337" name="entriesStartIndex" />
              <variable attributes="__local__ private" citdl="Array" doc="Manage the number of messages displayed in the console" line="1337" name="msgHTML" />
              <variable attributes="__local__ private" citdl="this._categoryFilters.length" doc="Manage the number of messages displayed in the console" line="1337" name="categoryFiltersLen" />
              <variable attributes="__local__ private" doc="Manage the number of messages displayed in the console" line="1337" name="before" />
              <variable attributes="__local__ private" citdl="Boolean" doc="Print only the ones that filter through" line="1347" name="okToPrint" />
              <variable attributes="__local__ private" citdl="Boolean" line="1348" name="okToFilterCats" />
              <variable attributes="__local__ private" citdl="aEntries[i]" doc="Get log message details" line="1351" name="entry" />
              <variable attributes="__local__ private" citdl="entry.source" line="1352" name="source" />
              <variable attributes="__local__ private" citdl="entry.category" line="1353" name="category" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles Logger&apos;s categoryCreateEvent." ilk="function" line="1408" lineend="1417" name="_onCategoryCreate" signature="_onCategoryCreate(sType, aArgs, oSelf)">
              <variable citdl="String" doc="The event." ilk="argument" name="sType" />
              <variable citdl="Array" doc="Data passed from event firer." ilk="argument" name="aArgs" />
              <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="aArgs[0]" line="1409" name="category" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles Logger&apos;s sourceCreateEvent." ilk="function" line="1428" lineend="1437" name="_onSourceCreate" signature="_onSourceCreate(sType, aArgs, oSelf)">
              <variable citdl="String" doc="The event." ilk="argument" name="sType" />
              <variable citdl="Array" doc="Data passed from event firer." ilk="argument" name="aArgs" />
              <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="aArgs[0]" line="1429" name="source" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles check events on the category filter checkboxes." ilk="function" line="1447" lineend="1455" name="_onCheckCategory" signature="_onCheckCategory(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="v" />
              <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this.category" line="1448" name="category" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles check events on the category filter checkboxes." ilk="function" line="1465" lineend="1473" name="_onCheckSource" signature="_onCheckSource(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="v" />
              <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="this.source" line="1466" name="source" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles click events on the collapse button." ilk="function" line="1483" lineend="1490" name="_onClickCollapseBtn" signature="_onClickCollapseBtn(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="v" />
              <variable citdl="Object" doc="The LogReader instance" ilk="argument" name="oSelf" />
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles click events on the pause button." ilk="function" line="1500" lineend="1507" name="_onClickPauseBtn" signature="_onClickPauseBtn(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="v" />
              <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles click events on the clear button." ilk="function" line="1517" lineend="1519" name="_onClickClearBtn" signature="_onClickClearBtn(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="v" />
              <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
              <variable citdl="LogReader" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles Logger&apos;s newLogEvent." ilk="function" line="1530" lineend="1537" name="_onNewLog" signature="_onNewLog(sType, aArgs, oSelf)">
              <variable citdl="String" doc="The event." ilk="argument" name="sType" />
              <variable citdl="Array" doc="Data passed from event firer." ilk="argument" name="aArgs" />
              <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
              <variable citdl="LogReader" name="this" />
              <variable attributes="__local__ private" citdl="aArgs[0]" line="1531" name="logEntry" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles Logger&apos;s resetEvent." ilk="function" line="1548" lineend="1550" name="_onReset" signature="_onReset(sType, aArgs, oSelf)">
              <variable citdl="String" doc="The event." ilk="argument" name="sType" />
              <variable citdl="Array" doc="Data passed from event firer." ilk="argument" name="aArgs" />
              <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
              <variable citdl="LogReader" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="184" lineend="661" name="ColumnSet">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The ColumnSet class defines and manages a DataTable&apos;s Columns,&#xA;including nested hierarchies and access to individual Column instances." ilk="function" line="184" lineend="192" name="ColumnSet" signature="ColumnSet(aDefinitions)">
              <variable citdl="Array" doc="Array of object literals that define cells in&#xA;the THEAD." ilk="argument" name="aDefinitions" />
              <variable citdl="ColumnSet" name="this" />
            </scope>
            <variable citdl="String" line="185" name="_sId" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Internal class variable to index multiple ColumnSet instances." line="208" name="_nCount" />
            <variable attributes="private" citdl="Array" doc="PRIVATE: Array of object literal Column definitions passed to the constructor." line="227" name="_aDefinitions" />
            <variable citdl="Array" doc="Top-down tree representation of Column hierarchy." line="241" name="tree" />
            <variable citdl="Array" doc="Flattened representation of all Columns." line="250" name="flat" />
            <variable citdl="Array" doc="Array of Columns that map one-to-one to a table column." line="259" name="keys" />
            <variable citdl="Array" doc="ID index of nested parent hierarchies for HEADERS accessibility attribute." line="268" name="headers" />
            <scope attributes="private" doc="PRIVATE: Initializes ColumnSet instance with data from Column definitions." ilk="function" line="285" lineend="505" name="_init" signature="_init(aDefinitions)">
              <variable citdl="Array" doc="Array of object literals that define cells in&#xA;the THEAD ." ilk="argument" name="aDefinitions" />
              <variable citdl="ColumnSet" name="this" />
              <variable attributes="__local__ private" citdl="Array" doc="DOM tree representation of all Columns" line="287" name="tree" />
              <variable attributes="__local__ private" citdl="Array" doc="Flat representation of all Columns" line="289" name="flat" />
              <variable attributes="__local__ private" citdl="Array" doc="Flat representation of only Columns that are meant to&#xA;display data" line="291" name="keys" />
              <variable attributes="__local__ private" citdl="Array" doc="Array of HEADERS attribute values for all keys in the &quot;keys&quot;&#xA;array" line="293" name="headers" />
              <variable attributes="__local__ private" citdl="Number" doc="Tracks current node list depth being tracked" line="296" name="nodeDepth" />
              <scope attributes="__local__ private" doc="Internal recursive function to define Column instances" ilk="function" line="299" lineend="417" name="parseColumns" signature="parseColumns(nodeList, parent)">
                <variable ilk="argument" name="nodeList" />
                <variable ilk="argument" name="parent" />
                <variable attributes="__local__ private" citdl="nodeList[j]" line="311" name="currentNode" />
                <variable attributes="__local__ private" citdl="YAHOO.widget.Column" doc="Instantiate a new Column for each node" line="314" name="oColumn" />
                <variable attributes="__local__ private" citdl="Number" doc="Determine COLSPAN value for this Column" line="340" name="terminalChildNodes" />
                <scope attributes="__local__ private" ilk="function" line="341" lineend="354" name="countTerminalChildNodes" signature="countTerminalChildNodes(ancestor)">
                  <variable ilk="argument" name="ancestor" />
                  <variable attributes="__local__ private" citdl="ancestor.children" line="342" name="descendants" />
                </scope>
                <variable attributes="__local__ private" citdl="currentNode.children" doc="Cascade certain properties to children if not defined on&#xA;their own" line="359" name="currentChildren" />
                <variable attributes="__local__ private" citdl="currentChildren[k]" line="361" name="child" />
              </scope>
              <variable attributes="__local__ private" line="430" name="i" />
              <scope attributes="__local__ private" doc="Determine ROWSPAN value for each Column in the tree" ilk="function" line="433" lineend="479" name="parseTreeForRowspan" signature="parseTreeForRowspan(tree)">
                <variable ilk="argument" name="tree" />
                <variable attributes="__local__ private" citdl="Number" line="434" name="maxRowDepth" />
                <variable attributes="__local__ private" citdl="tree[m]" line="435" name="currentRow" />
                <variable attributes="__local__ private" citdl="currentRow[p]" line="436" name="currentColumn" />
                <scope attributes="__local__ private" doc="Calculate the max depth of descendants for this row" ilk="function" line="439" lineend="458" name="countMaxRowDepth" signature="countMaxRowDepth(row, tmpRowDepth)">
                  <variable ilk="argument" name="row" />
                  <variable ilk="argument" name="tmpRowDepth" />
                  <variable attributes="__local__ private" citdl="row[n]" line="443" name="col" />
                </scope>
              </scope>
              <scope attributes="__local__ private" doc="Store header relationships in an array for HEADERS attribute" ilk="function" line="488" lineend="493" name="recurseAncestorsForHeaders" signature="recurseAncestorsForHeaders(i, oColumn)">
                <variable ilk="argument" name="i" />
                <variable ilk="argument" name="oColumn" />
              </scope>
            </scope>
            <scope doc="Returns unique name of the ColumnSet instance." ilk="function" line="520" lineend="522" name="getId" returns="String" signature="getId()">
              <variable citdl="ColumnSet" name="this" />
            </scope>
            <scope doc="ColumnSet instance name, for logging." ilk="function" line="531" lineend="533" name="toString" returns="String" signature="toString()">
              <variable citdl="ColumnSet" name="this" />
            </scope>
            <scope doc="Public accessor to the definitions array." ilk="function" line="542" lineend="583" name="getDefinitions" returns="Array" signature="getDefinitions()">
              <variable citdl="ColumnSet" name="this" />
              <variable attributes="__local__ private" citdl="this._aDefinitions" line="543" name="aDefinitions" />
              <scope attributes="__local__ private" doc="Internal recursive function to define Column instances" ilk="function" line="546" lineend="578" name="parseColumns" signature="parseColumns(nodeList, oSelf)">
                <variable ilk="argument" name="nodeList" />
                <variable ilk="argument" name="oSelf" />
                <variable attributes="__local__ private" citdl="nodeList[j]" line="549" name="currentNode" />
                <variable attributes="__local__ private" citdl="oSelf.getColumnById()" doc="Get the Column for each node" line="552" name="oColumn" />
              </scope>
            </scope>
            <scope doc="Returns Column instance with given ID." ilk="function" line="593" lineend="603" name="getColumnById" returns="YAHOO.widget.Column" signature="getColumnById(column)">
              <variable citdl="String" doc="Column ID." ilk="argument" name="column" />
              <variable citdl="ColumnSet" name="this" />
              <variable attributes="__local__ private" citdl="this.flat" line="595" name="allColumns" />
            </scope>
            <scope doc="Returns Column instance with given key or ColumnSet key index." ilk="function" line="613" lineend="633" name="getColumn" returns="YAHOO.widget.Column" signature="getColumn(column)">
              <variable citdl="{String" doc="| Number} Column key or ColumnSet key index." ilk="argument" name="column" />
              <variable citdl="ColumnSet" name="this" />
              <variable attributes="__local__ private" citdl="this.flat" line="618" name="allColumns" />
              <variable attributes="__local__ private" citdl="Array" line="619" name="aColumns" />
            </scope>
            <scope doc="Public accessor returns array of given Column&apos;s desendants (if any), including itself." ilk="function" line="642" lineend="660" name="getDescendants" returns="Array" signature="getDescendants(oColumn)">
              <variable ilk="argument" name="oColumn" />
              <variable citdl="ColumnSet" name="this" />
              <variable attributes="__local__ private" citdl="this" line="643" name="oSelf" />
              <variable attributes="__local__ private" citdl="Array" line="644" name="allDescendants" />
              <variable attributes="__local__ private" line="645" name="i" />
              <scope attributes="__local__ private" doc="Recursive function to loop thru all children" ilk="function" line="648" lineend="656" name="parse" signature="parse(oParent)">
                <variable ilk="argument" name="oParent" />
              </scope>
            </scope>
          </scope>
          <scope ilk="class" line="243" lineend="256" name="ColorPicker">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A widget to select colors" ilk="function" line="243" lineend="256" name="ColorPicker" signature="ColorPicker(el, attr)">
              <variable ilk="argument" name="el" />
              <variable citdl="Object" doc="(optional) A key map of the colorpicker&apos;s&#xA;initial attributes.  Ignored if first arg is attributes object." ilk="argument" name="attr" />
              <variable citdl="ColorPicker" name="this" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.util.AttributeProvider" ilk="class" line="270" lineend="297" name="FlashAdapter">
            <scope attributes="__ctor__" doc="Wraps Flash embedding functionality and allows communication with SWF through&#xA;attributes." ilk="function" line="270" lineend="297" name="FlashAdapter" signature="FlashAdapter(swfURL, containerID, attributes)">
              <variable ilk="argument" name="swfURL" />
              <variable ilk="argument" name="containerID" />
              <variable ilk="argument" name="attributes" />
              <variable citdl="FlashAdapter" name="this" />
            </scope>
            <variable citdl="this._queue" doc="set up the initial events and attributes stuff" line="272" name="_queue" />
            <variable citdl="this._events" line="273" name="_events" />
            <variable citdl="this._configs" line="274" name="_configs" />
            <variable citdl="attributes.id" doc="with the default value, yui-gen, in IE" line="279" name="_id" />
            <variable citdl="attributes" doc="so save them for once the SWF finishes loading" line="285" name="_attributes" />
            <variable attributes="private" citdl="String" doc="PRIVATE: The URL of the SWF file." line="307" name="_swfURL" />
            <variable attributes="private" citdl="YAHOO.util.Dom.get()" doc="PRIVATE: A reference to the embedded SWF file." line="314" name="_swf" />
            <scope doc="Public accessor to the unique name of the FlashAdapter instance." ilk="function" line="339" lineend="341" name="toString" returns="String" signature="toString()" />
            <scope attributes="private" doc="PRIVATE: Embeds the SWF in the page and associates it with this instance." ilk="function" line="350" lineend="375" name="_embedSWF" signature="_embedSWF(swfURL, containerID, swfID, version, backgroundColor, expressInstall)">
              <variable ilk="argument" name="swfURL" />
              <variable ilk="argument" name="containerID" />
              <variable ilk="argument" name="swfID" />
              <variable ilk="argument" name="version" />
              <variable ilk="argument" name="backgroundColor" />
              <variable ilk="argument" name="expressInstall" />
              <variable attributes="__local__ private" citdl="deconcept.SWFObject" doc="standard SWFObject embed" line="352" name="swfObj" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.get()" line="366" name="container" />
              <variable attributes="__local__ private" citdl="swfObj.write()" line="367" name="result" />
            </scope>
            <variable citdl="this" doc="this will allow the event handler to communicate with a&#xA;YAHOO.widget.FlashAdapter" line="373" name="owner" />
            <scope attributes="private" doc="PRIVATE: Handles or re-dispatches events received from the SWF." ilk="function" line="384" lineend="401" name="_eventHandler" signature="_eventHandler(event)">
              <variable citdl="Event" ilk="argument" name="event" />
              <variable attributes="__local__ private" citdl="event.type" line="385" name="type" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Called when the SWF has been initialized." ilk="function" line="410" lineend="416" name="_loadHandler" signature="_loadHandler()" />
            <scope attributes="private" doc="PRIVATE: Initializes the attributes." ilk="function" line="425" lineend="437" name="_initAttributes" signature="_initAttributes(attributes)">
              <variable ilk="argument" name="attributes" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Getter for swfURL attribute." ilk="function" line="446" lineend="448" name="_getSWFURL" returns="this._swfURL" signature="_getSWFURL()" />
            <scope attributes="private __static__" doc="PRIVATE STATIC: Receives event messages from SWF and passes them to the correct instance&#xA;of FlashAdapter." ilk="function" line="460" lineend="468" name="eventHandler" signature="eventHandler(elementID, event)">
              <variable ilk="argument" name="elementID" />
              <variable citdl="Event" ilk="argument" name="event" />
              <variable citdl="FlashAdapter" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.get()" line="461" name="loadedSWF" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.util.Element" ilk="class" line="368" lineend="421" name="Toolbar">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides a rich toolbar widget based on the button and menu widgets" ilk="function" line="368" lineend="421" name="Toolbar" signature="Toolbar(el, attrs)">
              <variable citdl="String/HTMLElement" doc="The element to turn into a toolbar." ilk="argument" name="el" />
              <variable citdl="Object" doc="Object liternal containing configuration parameters." ilk="argument" name="attrs" />
              <variable citdl="Toolbar" name="this" />
              <variable attributes="__local__ private" line="373" name="local_attrs" />
              <variable attributes="__local__ private" citdl="Object" line="375" lineend="378" name="oConfig">
                <variable citdl="Dom.get()" line="376" name="element" />
                <variable citdl="local_attrs" line="377" name="attributes" />
              </variable>
              <variable attributes="__local__ private" citdl="document.createElement()" line="402" name="fs" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="403" name="lg" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="407" name="cont" />
            </scope>
            <variable citdl="Object" doc="The default button to use" line="450" name="buttonType" />
            <variable citdl="Object" doc="The DragDrop instance associated with the Toolbar" line="456" name="dd" />
            <variable citdl="Object" doc="Object reference containing colors hex and text values." line="462" lineend="609" name="_colorData">
              <variable citdl="String" doc="{{{ _colorData */" line="464" name="#111111" />
              <variable citdl="String" line="465" name="#2D2D2D" />
              <variable citdl="String" line="466" name="#434343" />
              <variable citdl="String" line="467" name="#5B5B5B" />
              <variable citdl="String" line="468" name="#737373" />
              <variable citdl="String" line="469" name="#8B8B8B" />
              <variable citdl="String" line="470" name="#A2A2A2" />
              <variable citdl="String" line="471" name="#B9B9B9" />
              <variable citdl="String" line="472" name="#000000" />
              <variable citdl="String" line="473" name="#D0D0D0" />
              <variable citdl="String" line="474" name="#E6E6E6" />
              <variable citdl="String" line="475" name="#FFFFFF" />
              <variable citdl="String" line="476" name="#BFBF00" />
              <variable citdl="String" line="477" name="#FFFF00" />
              <variable citdl="String" line="478" name="#FFFF40" />
              <variable citdl="String" line="479" name="#FFFF80" />
              <variable citdl="String" line="480" name="#FFFFBF" />
              <variable citdl="String" line="481" name="#525330" />
              <variable citdl="String" line="482" name="#898A49" />
              <variable citdl="String" line="483" name="#AEA945" />
              <variable citdl="String" line="484" name="#7F7F00" />
              <variable citdl="String" line="485" name="#C3BE71" />
              <variable citdl="String" line="486" name="#E0DCAA" />
              <variable citdl="String" line="487" name="#FCFAE1" />
              <variable citdl="String" line="488" name="#60BF00" />
              <variable citdl="String" line="489" name="#80FF00" />
              <variable citdl="String" line="490" name="#A0FF40" />
              <variable citdl="String" line="491" name="#C0FF80" />
              <variable citdl="String" line="492" name="#DFFFBF" />
              <variable citdl="String" line="493" name="#3B5738" />
              <variable citdl="String" line="494" name="#668F5A" />
              <variable citdl="String" line="495" name="#7F9757" />
              <variable citdl="String" line="496" name="#407F00" />
              <variable citdl="String" line="497" name="#8A9B55" />
              <variable citdl="String" line="498" name="#B7C296" />
              <variable citdl="String" line="499" name="#E6EBD5" />
              <variable citdl="String" line="500" name="#00BF00" />
              <variable citdl="String" line="501" name="#00FF80" />
              <variable citdl="String" line="502" name="#40FFA0" />
              <variable citdl="String" line="503" name="#80FFC0" />
              <variable citdl="String" line="504" name="#BFFFDF" />
              <variable citdl="String" line="505" name="#033D21" />
              <variable citdl="String" line="506" name="#438059" />
              <variable citdl="String" line="507" name="#7FA37C" />
              <variable citdl="String" line="508" name="#007F40" />
              <variable citdl="String" line="509" name="#8DAE94" />
              <variable citdl="String" line="510" name="#ACC6B5" />
              <variable citdl="String" line="511" name="#DDEBE2" />
              <variable citdl="String" line="512" name="#00BFBF" />
              <variable citdl="String" line="513" name="#00FFFF" />
              <variable citdl="String" line="514" name="#40FFFF" />
              <variable citdl="String" line="515" name="#80FFFF" />
              <variable citdl="String" line="516" name="#BFFFFF" />
              <variable citdl="String" line="517" name="#033D3D" />
              <variable citdl="String" line="518" name="#347D7E" />
              <variable citdl="String" line="519" name="#609A9F" />
              <variable citdl="String" line="520" name="#007F7F" />
              <variable citdl="String" line="521" name="#96BDC4" />
              <variable citdl="String" line="522" name="#B5D1D7" />
              <variable citdl="String" line="523" name="#E2F1F4" />
              <variable citdl="String" line="524" name="#0060BF" />
              <variable citdl="String" line="525" name="#0080FF" />
              <variable citdl="String" line="526" name="#40A0FF" />
              <variable citdl="String" line="527" name="#80C0FF" />
              <variable citdl="String" line="528" name="#BFDFFF" />
              <variable citdl="String" line="529" name="#1B2C48" />
              <variable citdl="String" line="530" name="#385376" />
              <variable citdl="String" line="531" name="#57708F" />
              <variable citdl="String" line="532" name="#00407F" />
              <variable citdl="String" line="533" name="#7792AC" />
              <variable citdl="String" line="534" name="#A8BED1" />
              <variable citdl="String" line="535" name="#DEEBF6" />
              <variable citdl="String" line="536" name="#0000BF" />
              <variable citdl="String" line="537" name="#0000FF" />
              <variable citdl="String" line="538" name="#4040FF" />
              <variable citdl="String" line="539" name="#8080FF" />
              <variable citdl="String" line="540" name="#BFBFFF" />
              <variable citdl="String" line="541" name="#212143" />
              <variable citdl="String" line="542" name="#373E68" />
              <variable citdl="String" line="543" name="#444F75" />
              <variable citdl="String" line="544" name="#00007F" />
              <variable citdl="String" line="545" name="#585E82" />
              <variable citdl="String" line="546" name="#8687A4" />
              <variable citdl="String" line="547" name="#D2D1E1" />
              <variable citdl="String" line="548" name="#6000BF" />
              <variable citdl="String" line="549" name="#8000FF" />
              <variable citdl="String" line="550" name="#A040FF" />
              <variable citdl="String" line="551" name="#C080FF" />
              <variable citdl="String" line="552" name="#DFBFFF" />
              <variable citdl="String" line="553" name="#302449" />
              <variable citdl="String" line="554" name="#54466F" />
              <variable citdl="String" line="555" name="#655A7F" />
              <variable citdl="String" line="556" name="#40007F" />
              <variable citdl="String" line="557" name="#726284" />
              <variable citdl="String" line="558" name="#9E8FA9" />
              <variable citdl="String" line="559" name="#DCD1DF" />
              <variable citdl="String" line="560" name="#BF00BF" />
              <variable citdl="String" line="561" name="#FF00FF" />
              <variable citdl="String" line="562" name="#FF40FF" />
              <variable citdl="String" line="563" name="#FF80FF" />
              <variable citdl="String" line="564" name="#FFBFFF" />
              <variable citdl="String" line="565" name="#4A234A" />
              <variable citdl="String" line="566" name="#794A72" />
              <variable citdl="String" line="567" name="#936386" />
              <variable citdl="String" line="568" name="#7F007F" />
              <variable citdl="String" line="569" name="#9D7292" />
              <variable citdl="String" line="570" name="#C0A0B6" />
              <variable citdl="String" line="571" name="#ECDAE5" />
              <variable citdl="String" line="572" name="#BF005F" />
              <variable citdl="String" line="573" name="#FF007F" />
              <variable citdl="String" line="574" name="#FF409F" />
              <variable citdl="String" line="575" name="#FF80BF" />
              <variable citdl="String" line="576" name="#FFBFDF" />
              <variable citdl="String" line="577" name="#451528" />
              <variable citdl="String" line="578" name="#823857" />
              <variable citdl="String" line="579" name="#A94A76" />
              <variable citdl="String" line="580" name="#7F003F" />
              <variable citdl="String" line="581" name="#BC6F95" />
              <variable citdl="String" line="582" name="#D8A5BB" />
              <variable citdl="String" line="583" name="#F7DDE9" />
              <variable citdl="String" line="584" name="#C00000" />
              <variable citdl="String" line="585" name="#FF0000" />
              <variable citdl="String" line="586" name="#FF4040" />
              <variable citdl="String" line="587" name="#FF8080" />
              <variable citdl="String" line="588" name="#FFC0C0" />
              <variable citdl="String" line="589" name="#441415" />
              <variable citdl="String" line="590" name="#82393C" />
              <variable citdl="String" line="591" name="#AA4D4E" />
              <variable citdl="String" line="592" name="#800000" />
              <variable citdl="String" line="593" name="#BC6E6E" />
              <variable citdl="String" line="594" name="#D8A3A4" />
              <variable citdl="String" line="595" name="#F8DDDD" />
              <variable citdl="String" line="596" name="#BF5F00" />
              <variable citdl="String" line="597" name="#FF7F00" />
              <variable citdl="String" line="598" name="#FF9F40" />
              <variable citdl="String" line="599" name="#FFBF80" />
              <variable citdl="String" line="600" name="#FFDFBF" />
              <variable citdl="String" line="601" name="#482C1B" />
              <variable citdl="String" line="602" name="#855A40" />
              <variable citdl="String" line="603" name="#B27C51" />
              <variable citdl="String" line="604" name="#7F3F00" />
              <variable citdl="String" line="605" name="#C49B71" />
              <variable citdl="String" line="606" name="#E1C4A8" />
              <variable citdl="String" doc="}}} */" line="607" name="#FDEEE0" />
            </variable>
            <variable citdl="HTMLElement" doc="The HTML Element containing the colorPicker" line="615" name="_colorPicker" />
            <variable citdl="String" doc="String for Toolbar Collapse Button" line="621" name="STR_COLLAPSE" />
            <variable citdl="String" doc="String for spinbutton dynamic label. Note the {VALUE} will be replaced with YAHOO.lang.substitute" line="627" name="STR_SPIN_LABEL" />
            <variable citdl="String" doc="String for spinbutton up" line="633" name="STR_SPIN_UP" />
            <variable citdl="String" doc="String for spinbutton down" line="639" name="STR_SPIN_DOWN" />
            <variable citdl="HTMLElement" doc="Object reference to the titlebar" line="645" name="_titlebar" />
            <variable citdl="Object" doc="Standard browser detection" line="651" name="browser" />
            <variable citdl="Array" doc="Internal property list of current buttons in the toolbar" line="658" name="_buttonList" />
            <variable citdl="Array" doc="Internal property list of current button groups in the toolbar" line="665" lineend="1059" name="_buttonGroupList" />
            <variable citdl="HTMLElement" doc="Internal reference to the separator HTML Element for cloning" line="672" name="_sep" />
            <variable citdl="Number" doc="Internal refernce for counting separators, so we can give them a useful class name for styling" line="679" name="_sepCount" />
            <variable citdl="HTMLElement" doc="HTMLElement */" line="685" name="_dragHandle" />
            <variable citdl="Object" doc="Object */" line="691" lineend="693" name="_toolbarConfigs">
              <variable citdl="Boolean" line="692" name="renderer" />
            </variable>
            <variable citdl="String" doc="Default CSS class to apply to the toolbar container element" line="700" name="CLASS_CONTAINER" />
            <variable citdl="String" doc="Default CSS class to apply to the toolbar&apos;s drag handle element" line="707" name="CLASS_DRAGHANDLE" />
            <variable citdl="String" doc="Default CSS class to apply to all separators in the toolbar" line="714" name="CLASS_SEPARATOR" />
            <variable citdl="String" doc="Default CSS class to apply when the toolbar is disabled" line="721" name="CLASS_DISABLED" />
            <variable citdl="String" doc="Default prefix for dynamically created class names" line="728" name="CLASS_PREFIX" />
            <scope doc="The Toolbar class&apos;s initialization method" ilk="function" line="733" lineend="736" name="init" signature="init(p_oElement, p_oAttributes)">
              <variable ilk="argument" name="p_oElement" />
              <variable ilk="argument" name="p_oAttributes" />
            </scope>
            <scope doc="Initializes all of the configuration attributes used to create&#xA;the toolbar." ilk="function" line="744" lineend="1025" name="initAttributes" signature="initAttributes(attr)">
              <variable citdl="Object" doc="Object literal specifying a set of&#xA;configuration attributes used to create the toolbar." ilk="argument" name="attr" />
            </scope>
            <scope doc="Add a new button group to the toolbar. (uses addButton)" ilk="function" line="1031" lineend="1075" name="addButtonGroup" returns="Boolean" signature="addButtonGroup(oGroup)">
              <variable citdl="Object" doc="Object literal reference to the Groups Config (contains an array of button configs as well as the group label)" ilk="argument" name="oGroup" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1040" name="div" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1044" name="label" />
              <variable attributes="__local__ private" citdl="document.createElement()" doc="For accessibility, let&apos;s put all of the group buttons in an&#xA;Unordered List" line="1055" name="ul" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1065" name="li" />
            </scope>
            <scope doc="Add a new button to a toolbar group. Buttons supported:&#xA;push, split, menu, select, color, spin" ilk="function" line="1084" lineend="1091" name="addButtonToGroup" signature="addButtonToGroup(oButton, group, after)">
              <variable citdl="Object" doc="Object literal reference to the Button&apos;s Config" ilk="argument" name="oButton" />
              <variable citdl="String" doc="The Group identifier passed into the initial config" ilk="argument" name="group" />
              <variable citdl="HTMLElement" doc="Optional HTML element to insert this button after in the DOM." ilk="argument" name="after" />
              <variable attributes="__local__ private" citdl="this._buttonGroupList[group]" line="1085" name="groupCont" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1086" name="li" />
            </scope>
            <scope doc="Add a new button to the toolbar. Buttons supported:&#xA;push, split, menu, select, color, spin" ilk="function" line="1099" lineend="1371" name="addButton" returns="oButton" signature="addButton(oButton, after)">
              <variable citdl="Object" doc="Object literal reference to the Button&apos;s Config" ilk="argument" name="oButton" />
              <variable citdl="HTMLElement" doc="Optional HTML element to insert this button after in the DOM." ilk="argument" name="after" />
              <variable attributes="__local__ private" citdl="Object" line="1115" lineend="1123" name="funcObject">
                <scope ilk="function" line="1116" lineend="1121" name="fn" signature="fn(ev, x, oMenu)">
                  <variable ilk="argument" name="ev" />
                  <variable ilk="argument" name="x" />
                  <variable ilk="argument" name="oMenu" />
                  <variable citdl="funcObject" name="this" />
                  <variable citdl="Object" line="1118" name="oButton">
                    <variable citdl="oButton.value" line="1118" name="menucmd" />
                    <variable line="1120" name="value" />
                  </variable>
                </scope>
                <variable citdl="this" line="1122" name="scope" />
              </variable>
              <variable attributes="__local__ private" citdl="Boolean" line="1129" name="skip" />
              <variable attributes="__local__ private" citdl="Object" line="1129" lineend="1129" name="_oButton">
                <variable citdl="String" line="1138" name="type" />
                <variable citdl="Boolean" line="1162" name="focusmenu" />
              </variable>
              <variable attributes="__local__ private" line="1172" name="tmp">
                <scope ilk="function" line="1178" lineend="1190" name="checkValue" signature="checkValue(value)">
                  <variable ilk="argument" name="value" />
                  <variable citdl="tmp" name="this" />
                  <variable attributes="__local__ private" citdl="this.getMenu().getItems()" line="1179" name="_menuItems" />
                </scope>
                <scope doc="Forcefully remove the focus calls in button!" ilk="function" line="1353" lineend="1355" name="hasFocus" returns="Boolean" signature="hasFocus()">
                  <variable citdl="tmp" name="this" />
                </scope>
              </variable>
              <variable attributes="__local__ private" citdl="tmp.get()" line="1202" name="el" />
              <variable attributes="__local__ private" citdl="after.get().nextSibling" line="1203" name="nextSib" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1215" name="icon" />
              <variable attributes="__local__ private" citdl="document.createElement()" doc="Replace the Button HTML Element with an a href if it exists" line="1221" name="a" />
              <variable attributes="__local__ private" citdl="tmp._button" line="1235" name="iel" />
              <variable attributes="__local__ private" citdl="tmp.get()" line="1236" name="parEl" />
              <scope attributes="__local__ private" ilk="class" line="1252" lineend="1269" name="showPicker">
                <scope attributes="__local__ private __ctor__" ilk="function" line="1252" lineend="1269" name="showPicker" signature="showPicker(ev)">
                  <variable ilk="argument" name="ev" />
                  <variable citdl="showPicker" name="this" />
                  <variable attributes="__local__ private" citdl="Boolean" line="1253" name="exec" />
                  <variable attributes="__local__ private" citdl="tmp.getMenu().element" line="1261" name="menuEL" />
                </scope>
                <variable citdl="oButton.value" line="1259" name="_button" />
              </scope>
              <variable attributes="__local__ private" citdl="this" line="1298" name="self" />
              <variable attributes="__local__ private" citdl="tmp.getMenu()" line="1360" name="menu" />
            </scope>
            <scope doc="Add a new button separator to the toolbar." ilk="function" line="1378" lineend="1419" name="addSeparator" returns="_sep" signature="addSeparator(cont, after)">
              <variable citdl="HTMLElement" doc="Optional HTML element to insert this button into." ilk="argument" name="cont" />
              <variable citdl="HTMLElement" doc="Optional HTML element to insert this button after in the DOM." ilk="argument" name="after" />
              <variable attributes="__local__ private" line="1383" name="sepCont" />
              <variable attributes="__local__ private" citdl="this._sep.cloneNode()" line="1396" name="_sep" />
              <variable attributes="__local__ private" citdl="after.get().nextSibling" line="1400" name="nextSib" />
            </scope>
            <variable citdl="String" line="1394" name="innerHTML" />
            <scope attributes="private" doc="PRIVATE: Creates the core DOM reference to the color picker menu item." ilk="function" line="1426" lineend="1484" name="_createColorPicker" signature="_createColorPicker(id)">
              <variable citdl="String" doc="the id of the toolbar to prefix this DOM container with." ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1430" name="picker">
                <variable citdl="Object" line="1433" name="style">
                  <variable citdl="String" line="1433" name="display" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="String" line="1440" name="html" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Clears the currently selected color or mouseover color in the color picker." ilk="function" line="1490" lineend="1495" name="_resetColorPicker" signature="_resetColorPicker()">
              <variable attributes="__local__ private" citdl="this._colorPicker.getElementsByTagName()[0]" line="1491" name="em">
                <variable citdl="Object" line="1493" name="style">
                  <variable citdl="String" line="1493" name="backgroundColor" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="this._colorPicker.getElementsByTagName()[0]" line="1492" name="strong" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Called to turn a &quot;color&quot; button into a menu button with an Overlay for the menu." ilk="function" line="1502" lineend="1526" name="_makeColorButton" returns="_oButton" signature="_makeColorButton(_oButton)">
              <variable citdl="Object" doc="&lt;a href=&quot;YAHOO.widget.ToolbarButton.html&quot;&gt;YAHOO.widget.ToolbarButton&lt;/a&gt; reference" ilk="argument" name="_oButton" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Create a button similar to an OS Spin button.. It has an up/down arrow combo to scroll through a range of int values." ilk="function" line="1534" lineend="1634" name="_makeSpinButton" signature="_makeSpinButton(_button, oButton)">
              <variable citdl="Object" doc="&lt;a href=&quot;YAHOO.widget.ToolbarButton.html&quot;&gt;YAHOO.widget.ToolbarButton&lt;/a&gt; reference" ilk="argument" name="_button" />
              <variable citdl="Object" doc="Object literal containing the buttons initial config" ilk="argument" name="oButton" />
              <variable attributes="__local__ private" citdl="_button._button.parentNode.parentNode" doc="parentNode of Button Element for appending child" line="1540" name="_par" />
              <variable attributes="__local__ private" citdl="this" doc="parentNode of Button Element for appending child" line="1540" name="self" />
              <variable attributes="__local__ private" citdl="document.createElement()" doc="parentNode of Button Element for appending child" line="1540" name="_b2" />
              <variable attributes="__local__ private" citdl="oButton.range" doc="parentNode of Button Element for appending child" line="1540" name="range" />
              <variable attributes="__local__ private" citdl="document.createElement()" doc="parentNode of Button Element for appending child" line="1540" name="_b1" />
              <variable attributes="__local__ private" citdl="YAHOO.lang.substitute()" line="1558" name="label" />
              <scope attributes="__local__ private" ilk="function" line="1561" lineend="1565" name="cleanVal" returns="value" signature="cleanVal(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <variable attributes="__local__ private" citdl="this.browser" line="1567" name="br" />
              <variable attributes="__local__ private" citdl="Boolean" line="1568" name="tbar" />
              <variable attributes="__local__ private" citdl="this.STR_SPIN_LABEL" line="1569" name="strLabel" />
              <scope attributes="__local__ private" ilk="function" line="1574" lineend="1589" name="_intUp" signature="_intUp(ev)">
                <variable ilk="argument" name="ev" />
                <variable attributes="__local__ private" citdl="parseInt()" line="1577" name="value" />
                <variable attributes="__local__ private" citdl="YAHOO.lang.substitute()" line="1581" name="label" />
              </scope>
              <scope attributes="__local__ private" ilk="function" line="1591" lineend="1607" name="_intDown" signature="_intDown(ev)">
                <variable ilk="argument" name="ev" />
                <variable attributes="__local__ private" citdl="parseInt()" line="1594" name="value" />
                <variable attributes="__local__ private" citdl="YAHOO.lang.substitute()" line="1599" name="label" />
              </scope>
              <scope attributes="__local__ private" ilk="function" line="1609" lineend="1619" name="_intKeyUp" signature="_intKeyUp(ev)">
                <variable ilk="argument" name="ev" />
              </scope>
            </scope>
            <scope doc="Click handler for all buttons in the toolbar." ilk="function" line="1642" lineend="1699" name="_buttonClick" signature="_buttonClick(ev, info)">
              <variable citdl="String" doc="The event that was passed in." ilk="argument" name="ev" />
              <variable citdl="Object" doc="Object literal of information about the button that was clicked." ilk="argument" name="info" />
              <variable attributes="__local__ private" citdl="Boolean" line="1643" name="doEvent" />
              <variable attributes="__local__ private" citdl="Boolean" line="1656" name="fireNextEvent" />
              <variable attributes="__local__ private" citdl="Boolean" line="1656" name="retValue" />
              <variable attributes="__local__ private" citdl="this.getButtonById()" line="1675" name="button" />
              <variable attributes="__local__ private" citdl="info.value" line="1677" name="txt" />
              <variable attributes="__local__ private" citdl="button.getMenu().getItems()" line="1685" name="_items" />
            </scope>
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Flag to determine if the arrow nav listeners have been attached" line="1706" name="_keyNav" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: Internal counter for walking the buttons in the toolbar with the arrow keys" line="1713" name="_navCounter" />
            <scope attributes="private" doc="PRIVATE: Handles the navigation/focus of toolbar buttons with the Arrow Keys" ilk="function" line="1720" lineend="1746" name="_navigateButtons" signature="_navigateButtons(ev)">
              <variable citdl="Event" doc="The Key Event" ilk="argument" name="ev" />
              <variable attributes="__local__ private" citdl="this._buttonList[this._navCounter].get()" line="1735" name="el" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Sets up the listeners for the arrow key navigation" ilk="function" line="1752" lineend="1762" name="_handleFocus" signature="_handleFocus()">
              <variable attributes="__local__ private" citdl="String" line="1754" name="ev" />
            </scope>
            <scope doc="Gets a button instance from the toolbar by is Dom id." ilk="function" line="1769" lineend="1777" name="getButtonById" returns="YAHOO.widget.ToolbarButton" signature="getButtonById(id)">
              <variable citdl="String" doc="The Dom id to query for." ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="this._buttonList.length" line="1770" name="len" />
            </scope>
            <scope doc="Gets a button instance or a menuitem instance from the toolbar by it&apos;s value." ilk="function" line="1784" lineend="1815" name="getButtonByValue" returns="YAHOO.widget.ToolbarButton" signature="getButtonByValue(value)">
              <variable citdl="String" doc="The button value to query for." ilk="argument" name="value" />
              <variable attributes="__local__ private" citdl="this.get()" line="1785" name="_buttons" />
              <variable attributes="__local__ private" citdl="_buttons.length" line="1786" name="len" />
            </scope>
            <scope doc="Gets a button instance from the toolbar by is index in _buttonList." ilk="function" line="1822" lineend="1828" name="getButtonByIndex" returns="YAHOO.widget.ToolbarButton" signature="getButtonByIndex(index)">
              <variable citdl="Number" doc="The index of the button in _buttonList." ilk="argument" name="index" />
            </scope>
            <scope doc="Returns an array of buttons in the current toolbar" ilk="function" line="1834" lineend="1836" name="getButtons" returns="Array" signature="getButtons()" />
            <scope doc="Disables a button in the toolbar." ilk="function" line="1843" lineend="1850" name="disableButton" returns="Boolean" signature="disableButton(id)">
              <variable citdl="String/Number" doc="Disable a button by it&apos;s id, index or value." ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="getButton.call()" line="1844" name="button" />
            </scope>
            <scope doc="Enables a button in the toolbar." ilk="function" line="1857" lineend="1869" name="enableButton" returns="Boolean" signature="enableButton(id)">
              <variable citdl="String/Number" doc="Enable a button by it&apos;s id, index or value." ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="getButton.call()" line="1861" name="button" />
            </scope>
            <scope doc="Tells if a button is selected or not." ilk="function" line="1876" lineend="1882" name="isSelected" returns="Boolean" signature="isSelected(id)">
              <variable citdl="String/Number" doc="A button by it&apos;s id, index or value." ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="getButton.call()" line="1877" name="button" />
            </scope>
            <scope doc="Selects a button in the toolbar." ilk="function" line="1890" lineend="1912" name="selectButton" returns="Boolean" signature="selectButton(id, value)">
              <variable citdl="String/Number" doc="Select a button by it&apos;s id, index or value." ilk="argument" name="id" />
              <variable citdl="String" doc="If this is a Menu Button, check this item in the menu" ilk="argument" name="value" />
              <variable attributes="__local__ private" citdl="getButton.call()" line="1891" name="button" />
              <variable attributes="__local__ private" citdl="button.getMenu().getItems()" line="1898" name="_items" />
            </scope>
            <scope doc="Deselects a button in the toolbar." ilk="function" line="1919" lineend="1929" name="deselectButton" returns="Boolean" signature="deselectButton(id)">
              <variable citdl="String/Number" doc="Deselect a button by it&apos;s id, index or value." ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="getButton.call()" line="1920" name="button" />
            </scope>
            <scope doc="Deselects all buttons in the toolbar." ilk="function" line="1935" lineend="1940" name="deselectAllButtons" returns="Boolean" signature="deselectAllButtons()">
              <variable attributes="__local__ private" citdl="this._buttonList.length" line="1936" name="len" />
            </scope>
            <scope doc="Disables all buttons in the toolbar." ilk="function" line="1946" lineend="1954" name="disableAllButtons" returns="Boolean" signature="disableAllButtons()">
              <variable attributes="__local__ private" citdl="this._buttonList.length" line="1950" name="len" />
            </scope>
            <scope doc="Enables all buttons in the toolbar." ilk="function" line="1960" lineend="1968" name="enableAllButtons" returns="Boolean" signature="enableAllButtons()">
              <variable attributes="__local__ private" citdl="this._buttonList.length" line="1964" name="len" />
            </scope>
            <scope doc="Resets all buttons to their initial state." ilk="function" line="1975" lineend="1998" name="resetAllButtons" returns="Boolean" signature="resetAllButtons(_ex)">
              <variable citdl="Object" doc="Except these buttons" ilk="argument" name="_ex" />
              <variable attributes="__local__ private" citdl="this._buttonList.length" line="1982" name="len" />
              <variable attributes="__local__ private" citdl="this._buttonList[i]" line="1984" name="_button" />
              <variable attributes="__local__ private" citdl="_button._configs.disabled._initialConfig.value" line="1985" name="disabled" />
            </scope>
            <scope doc="Destroy a button in the toolbar." ilk="function" line="2005" lineend="2020" name="destroyButton" returns="Boolean" signature="destroyButton(id)">
              <variable citdl="String/Number" doc="Destroy a button by it&apos;s id or index." ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="getButton.call()" line="2006" name="button" />
              <variable attributes="__local__ private" citdl="button.get()" line="2008" name="thisID" />
              <variable attributes="__local__ private" citdl="this._buttonList.length" line="2011" name="len" />
            </scope>
            <scope doc="Destroys the toolbar, all of it&apos;s elements and objects." ilk="function" line="2026" lineend="2036" name="destroy" returns="Boolean" signature="destroy()" />
            <scope doc="Programatically collapse the toolbar." ilk="function" line="2042" lineend="2057" name="collapse" signature="collapse(collapse)">
              <variable citdl="Boolean" doc="True to collapse, false to expand." ilk="argument" name="collapse" />
              <variable attributes="__local__ private" citdl="Dom.getElementsByClassName()" line="2043" name="el" />
            </scope>
            <scope doc="Returns a string representing the toolbar." ilk="function" line="2063" lineend="2065" name="toString" returns="String" signature="toString()" />
          </scope>
          <scope doc="Constructor" ilk="function" line="398" lineend="515" name="Button" signature="Button(p_oElement, p_oAttributes)">
            <variable ilk="argument" name="p_oElement" />
            <variable ilk="argument" name="p_oAttributes" />
            <variable citdl="widget" name="this" />
            <variable attributes="__local__ private" line="416" lineend="437" name="oConfig">
              <variable line="437" name="attributes" />
              <variable line="437" name="element" />
            </variable>
            <variable attributes="__local__ private" citdl="Dom.get()" line="416" name="oElement" />
            <variable attributes="__local__ private" citdl="YAHOO.widget.Button.superclass.constructor" line="416" name="fnSuperClass" />
            <scope doc="&quot;keypress&quot; event handler for the button&apos;s form." ilk="function" line="3612" lineend="3754" name="onFormKeyPress" signature="onFormKeyPress(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object passed&#xA;back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
              <variable attributes="__local__ private" citdl="oButton" doc="The form&apos;s first, enabled HTML submit button that follows a&#xA;YUI button */" line="3643" name="oYUISubmitButton" />
              <variable attributes="__local__ private" citdl="m_oButtons[sId]" doc="The form&apos;s first, enabled HTML submit button that follows a&#xA;YUI button */" line="3643" name="oButton" />
              <variable attributes="__local__ private" citdl="p_oElement" doc="The form&apos;s first, enabled HTML submit button that follows a&#xA;YUI button */" line="3643" name="oPrecedingSubmitButton" />
              <variable attributes="__local__ private" citdl="Event.getTarget()" doc="The form&apos;s first, enabled HTML submit button that follows a&#xA;YUI button */" line="3643" name="oTarget" />
              <variable attributes="__local__ private" citdl="p_oElement" doc="The form&apos;s first, enabled HTML submit button that follows a&#xA;YUI button */" line="3643" name="oFollowingSubmitButton" />
              <variable attributes="__local__ private" citdl="oTarget.type" doc="The form&apos;s first, enabled HTML submit button that follows a&#xA;YUI button */" line="3643" name="sType" />
              <variable attributes="__local__ private" citdl="oTarget.nodeName" doc="The form&apos;s first, enabled HTML submit button that follows a&#xA;YUI button */" line="3643" name="sNodeName" />
              <variable attributes="__local__ private" citdl="Event.getCharCode()" doc="The form&apos;s first, enabled HTML submit button that follows a&#xA;YUI button */" line="3643" name="nCharCode" />
              <variable attributes="__local__ private" citdl="Boolean" doc="The form&apos;s first, enabled HTML submit button that follows a&#xA;YUI button */" line="3643" name="bFormContainsYUIButtons" />
              <scope attributes="__local__ private" ilk="function" line="3646" lineend="3711" name="isSubmitButton" signature="isSubmitButton(p_oElement)">
                <variable ilk="argument" name="p_oElement" />
                <variable attributes="__local__ private" citdl="oButton.get()" line="3649" name="oSrcElement" />
                <variable attributes="__local__ private" citdl="p_oElement.id" line="3649" name="sId" />
              </scope>
            </scope>
            <scope doc="Searches the specified form and adds hidden fields for&#xA;instances of YAHOO.widget.Button that are of type &quot;radio,&quot; &quot;checkbox,&quot;&#xA;&quot;menu,&quot; and &quot;split.&quot;" ilk="function" line="3766" lineend="3801" name="addHiddenFieldsToForm" signature="addHiddenFieldsToForm(p_oForm)">
              <variable ilk="argument" name="p_oForm" />
              <variable attributes="__local__ private" citdl="Dom.getElementsByClassName()" line="3776" name="aButtons" />
              <variable attributes="__local__ private" citdl="aButtons.length" line="3776" name="nButtons" />
              <variable attributes="__local__ private" citdl="m_oButtons[sId]" line="3776" name="oButton" />
              <variable attributes="__local__ private" line="3776" name="i" />
              <variable attributes="__local__ private" citdl="aButtons[i].id" line="3776" name="sId" />
            </scope>
            <scope doc="Returns a button with the specified id." ilk="function" line="3811" lineend="3821" name="getButton" returns="YAHOO.widget.Button" signature="getButton(p_sId)">
              <variable citdl="String" doc="String specifying the id of the root node of the&#xA;HTML element representing the button to be retrieved." ilk="argument" name="p_sId" />
              <variable attributes="__local__ private" citdl="m_oButtons[p_sId]" line="3813" name="oButton" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.widget.FlashAdapter" ilk="class" line="479" lineend="553" name="Uploader">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Uploader class for the YUI Uploader component." ilk="function" line="479" lineend="553" name="Uploader" signature="Uploader(containerId)">
              <variable citdl="HTMLElement" doc="Container element for the Flash Player instance." ilk="argument" name="containerId" />
              <variable citdl="Uploader" name="this" />
            </scope>
            <variable attributes="private __static__ constant" citdl="String" doc="PRIVATE STATIC CONSTANT: Location of the Uploader SWF" line="564" name="SWFURL" />
            <scope doc="Invokes the &quot;Open File&quot; dialog and allows the user to select the files for upload" ilk="function" line="576" lineend="578" name="browse" signature="browse(allowMultiple, extensionFilterArray)">
              <variable citdl="Boolean" doc="If true, allows for multiple file selection; if false, only a single file can be selected. False by default." ilk="argument" name="allowMultiple" />
              <variable citdl="Array" doc="An array of key-value pairs for permissible file extensions. The array elements should&#xA;be of the form: {description: &quot;Images&quot;, extensions: &quot;*.jpg; *.gif; *.png&quot;}." ilk="argument" name="extensionFilterArray" />
            </scope>
            <scope doc="Starts the upload of the file specified by fileID to the location specified by uploadScriptPath." ilk="function" line="590" lineend="592" name="upload" signature="upload(fileID, uploadScriptPath, method, vars, fieldName)">
              <variable citdl="String" doc="The id of the file to start uploading." ilk="argument" name="fileID" />
              <variable citdl="String" doc="The URL of the upload location." ilk="argument" name="uploadScriptPath" />
              <variable citdl="String" doc="Either &quot;GET&quot; or &quot;POST&quot;, specifying how the variables accompanying the file upload POST request should be submitted. &quot;GET&quot; by default." ilk="argument" name="method" />
              <variable citdl="Object" doc="The object containing variables to be sent in the same request as the file upload." ilk="argument" name="vars" />
              <variable citdl="String" doc="The name of the variable in the POST request containing the file data. &quot;Filedata&quot; by default." ilk="argument" name="fieldName" />
            </scope>
            <scope doc="Starts uploading all files in the queue. If this function is called, the upload queue is automatically managed." ilk="function" line="603" lineend="605" name="uploadAll" signature="uploadAll(uploadScriptPath, method, vars, fieldName)">
              <variable citdl="String" doc="The URL of the upload location." ilk="argument" name="uploadScriptPath" />
              <variable citdl="String" doc="Either &quot;GET&quot; or &quot;POST&quot;, specifying how the variables accompanying the file upload POST request should be submitted. &quot;GET&quot; by default." ilk="argument" name="method" />
              <variable citdl="Object" doc="The object containing variables to be sent in the same request as the file upload." ilk="argument" name="vars" />
              <variable citdl="String" doc="The name of the variable in the POST request containing the file data. &quot;Filedata&quot; by default." ilk="argument" name="fieldName" />
            </scope>
            <scope doc="Cancels the upload of a specified file. If no file id is specified, all ongoing uploads are cancelled." ilk="function" line="613" lineend="615" name="cancel" signature="cancel(fileID)">
              <variable citdl="String" doc="The ID of the file whose upload should be cancelled." ilk="argument" name="fileID" />
            </scope>
            <scope doc="Clears the list of files queued for upload." ilk="function" line="622" lineend="624" name="clearFileList" signature="clearFileList()" />
            <scope doc="Removes the specified file from the upload queue." ilk="function" line="632" lineend="634" name="removeFile" signature="removeFile(fileID)">
              <variable citdl="String" doc="The id of the file to remove from the upload queue." ilk="argument" name="fileID" />
            </scope>
          </scope>
          <variable citdl="YAHOO.util.CustomEvent" doc="Fired when this.resize is called&#xA;Fired when the Resize Utility for a Unit fires it&apos;s startResize Event.&#xA;Firef at the beginning of the resize method. If you return false, the resize is cancelled.&#xA;Fired after the render method completes." line="650" name="Layout" />
          <scope ilk="class" line="675" lineend="1161" name="Column">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Column class defines and manages attributes of DataTable Columns" ilk="function" line="675" lineend="688" name="Column" signature="Column(oConfigs)">
              <variable citdl="Object" doc="Object literal of definitions." ilk="argument" name="oConfigs" />
              <variable citdl="Column" name="this" />
            </scope>
            <variable line="686" name="width" />
            <variable attributes="private" citdl="String" doc="PRIVATE: Unique String identifier assigned at instantiation." line="744" name="_sId" />
            <variable attributes="private" citdl="Object" doc="PRIVATE: Object literal definition" line="753" name="_oDefinition" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: Reference to Column&apos;s current position index within its ColumnSet&apos;s keys&#xA;array, if applicable. This property only applies to non-nested and bottom-&#xA;level child Columns." line="764" name="_nKeyIndex" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: Reference to Column&apos;s current position index within its ColumnSet&apos;s tree&#xA;array, if applicable. This property only applies to non-nested and top-&#xA;level parent Columns." line="775" name="_nTreeIndex" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: Number of table cells the Column spans." line="784" name="_nColspan" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: Number of table rows the Column spans." line="793" name="_nRowspan" />
            <variable attributes="private" citdl="YAHOO.widget.Column" doc="PRIVATE: Column&apos;s parent Column instance, or null." line="802" name="_oParent" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: The DOM reference to the associated TH element." line="820" name="_elTh" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: The DOM reference to the associated resizerelement (if any)." line="829" name="_elResizer" />
            <variable attributes="private" citdl="YAHOO.util.DragDrop" doc="PRIVATE: For unreg() purposes, a reference to the Column&apos;s DragDrop instance." line="838" name="_dd" />
            <variable attributes="private" citdl="YAHOO.util.DragDrop" doc="PRIVATE: For unreg() purposes, a reference to the Column resizer&apos;s DragDrop instance." line="847" name="_ddResizer" />
            <variable citdl="String" doc="Associated database field, or null." line="861" name="key" />
            <variable citdl="String" doc="Text or HTML for display as Column&apos;s label in the TH element." line="869" name="label" />
            <variable citdl="String" doc="Column head cell ABBR for accessibility." line="877" name="abbr" />
            <variable citdl="Array" doc="Array of object literals that define children (nested headers) of a Column." line="885" name="children" />
            <variable citdl="Number" doc="Minimum Column width (in pixels)." line="902" name="minWidth" />
            <variable citdl="Boolean" doc="True if Column is in hidden state." line="911" name="hidden" />
            <variable citdl="Boolean" doc="True if Column is in selected state." line="920" name="selected" />
            <variable citdl="String" doc="Custom CSS class or array of classes to be applied to every cell in the Column." line="928" name="className" />
            <variable citdl="String" doc="Defines a format function." line="936" name="formatter" />
            <variable citdl="String" doc="Defines an editor function, otherwise Column is not editable." line="944" name="editor" />
            <variable citdl="Object" doc="Defines editor options for Column in an object literal of param:value pairs." line="952" name="editorOptions" />
            <variable citdl="Boolean" doc="True if Column is resizeable, false otherwise. The Drag &amp; Drop Utility is&#xA;required to enable this feature. Only bottom-level and non-nested Columns are&#xA;resizeble." line="963" name="resizeable" />
            <variable citdl="Boolean" doc="True if Column is sortable, false otherwise." line="972" name="sortable" />
            <variable attributes="deprecated" citdl="Function" doc="DEPRECATED: Default sort direction for Column: YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTable.CLASS_DESC." line="992" name="sortOptions" />
            <scope doc="Returns unique ID string." ilk="function" line="1020" lineend="1022" name="getId" returns="String" signature="getId()">
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Column instance name, for logging." ilk="function" line="1030" lineend="1032" name="toString" returns="String" signature="toString()">
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Returns object literal definition." ilk="function" line="1040" lineend="1058" name="getDefinition" returns="Object" signature="getDefinition()">
              <variable citdl="Column" name="this" />
              <variable attributes="__local__ private" citdl="this._oDefinition" line="1041" name="oDefinition" />
            </scope>
            <scope doc="Returns unique Column key." ilk="function" line="1066" lineend="1068" name="getKey" returns="String" signature="getKey()">
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Public accessor returns Column&apos;s current position index within its&#xA;ColumnSet&apos;s keys array, if applicable. Only non-nested and bottom-level&#xA;child Columns will return a value." ilk="function" line="1078" lineend="1080" name="getKeyIndex" returns="Number" signature="getKeyIndex()">
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Public accessor returns Column&apos;s current position index within its&#xA;ColumnSet&apos;s tree array, if applicable. Only non-nested and top-level parent&#xA;Columns will return a value;" ilk="function" line="1090" lineend="1092" name="getTreeIndex" returns="Number" signature="getTreeIndex()">
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Public accessor returns Column&apos;s parent instance if any, or null otherwise." ilk="function" line="1100" lineend="1102" name="getParent" returns="YAHOO.widget.Column" signature="getParent()">
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Public accessor returns Column&apos;s calculated COLSPAN value." ilk="function" line="1110" lineend="1112" name="getColspan" returns="Number" signature="getColspan()">
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Backward compatibility" ilk="function" line="1114" lineend="1116" name="getColSpan" returns="this.getColspan()" signature="getColSpan()">
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Public accessor returns Column&apos;s calculated ROWSPAN value." ilk="function" line="1124" lineend="1126" name="getRowspan" returns="Number" signature="getRowspan()">
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Returns DOM reference to the key TH element." ilk="function" line="1134" lineend="1136" name="getThEl" returns="HTMLElement" signature="getThEl()">
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Returns DOM reference to the resizer element, or null." ilk="function" line="1144" lineend="1146" name="getResizerEl" returns="HTMLElement" signature="getResizerEl()">
              <variable citdl="Column" name="this" />
            </scope>
            <scope attributes="deprecated" doc="Use getThEl */" ilk="function" line="1153" lineend="1155" name="getColEl" returns="this.getThEl()" signature="getColEl()">
              <variable citdl="Column" name="this" />
            </scope>
            <scope ilk="function" line="1156" lineend="1158" name="getIndex" returns="this.getKeyIndex()" signature="getIndex()">
              <variable citdl="Column" name="this" />
            </scope>
            <scope ilk="function" line="1159" lineend="1160" name="format" signature="format()">
              <variable citdl="Column" name="this" />
            </scope>
          </scope>
          <variable citdl="Object" doc="YAHOO.widget.DateMath is used for simple date manipulation. The class is a static utility&#xA;used for adding, subtracting, and comparing dates." line="689" lineend="1077" name="DateMath">
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant field representing Day" line="697" name="DAY" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant field representing Week" line="706" name="WEEK" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant field representing Year" line="715" name="YEAR" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant field representing Month" line="724" name="MONTH" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Constant field representing one day, in milliseconds" line="733" name="ONE_DAY_MS" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: Constant field representing the date in first week of January&#xA;which identifies the first week of the year.&#xA;&lt;p&gt;&#xA;In the U.S, Jan 1st is normally used based on a Sunday start of week.&#xA;ISO 8601, used widely throughout Europe, uses Jan 4th, based on a Monday start of week.&#xA;&lt;/p&gt;" line="746" name="WEEK_ONE_JAN_DATE" />
            <scope doc="Adds the specified amount of time to the this instance." ilk="function" line="756" lineend="791" name="add" returns="Date" signature="add(date, field, amount)">
              <variable citdl="Date" doc="The JavaScript Date object to perform addition on" ilk="argument" name="date" />
              <variable citdl="String" doc="The field constant to be used for performing addition." ilk="argument" name="field" />
              <variable citdl="Number" doc="The number of units (measured in the field constant) to add to the date." ilk="argument" name="amount" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" citdl="Date" line="757" name="d" />
              <variable attributes="__local__ private" citdl="date.getMonth()" line="760" name="newMonth" />
              <variable attributes="__local__ private" citdl="Number" line="761" name="years" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Private helper method to account for bug in Safari 2 (webkit &lt; 420)&#xA;when Date.setDate(n) is called with n less than -128 or greater than 127.&#xA;&lt;p&gt;&#xA;Fix approach and original findings are available here:&#xA;http://brianary.blogspot.com/2006/03/safari-date-bug.html&#xA;&lt;/p&gt;" ilk="function" line="805" lineend="821" name="_addDays" signature="_addDays(d, nDays)">
              <variable citdl="Date" doc="JavaScript date object" ilk="argument" name="d" />
              <variable citdl="Number" doc="The number of days to add to the date object (can be negative)" ilk="argument" name="nDays" />
              <variable citdl="DateMath" name="this" />
            </scope>
            <scope doc="Subtracts the specified amount of time from the this instance." ilk="function" line="831" lineend="833" name="subtract" returns="Date" signature="subtract(date, field, amount)">
              <variable citdl="Date" doc="The JavaScript Date object to perform subtraction on" ilk="argument" name="date" />
              <variable citdl="Number" doc="The this field constant to be used for performing subtraction." ilk="argument" name="field" />
              <variable citdl="Number" doc="The number of units (measured in the field constant) to subtract from the date." ilk="argument" name="amount" />
              <variable citdl="DateMath" name="this" />
            </scope>
            <scope doc="Determines whether a given date is before another date on the calendar." ilk="function" line="842" lineend="849" name="before" returns="Boolean" signature="before(date, compareTo)">
              <variable citdl="Date" doc="The Date object to compare with the compare argument" ilk="argument" name="date" />
              <variable citdl="Date" doc="The Date object to use for the comparison" ilk="argument" name="compareTo" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" citdl="compareTo.getTime()" line="843" name="ms" />
            </scope>
            <scope doc="Determines whether a given date is after another date on the calendar." ilk="function" line="858" lineend="865" name="after" returns="Boolean" signature="after(date, compareTo)">
              <variable citdl="Date" doc="The Date object to compare with the compare argument" ilk="argument" name="date" />
              <variable citdl="Date" doc="The Date object to use for the comparison" ilk="argument" name="compareTo" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" citdl="compareTo.getTime()" line="859" name="ms" />
            </scope>
            <scope doc="Determines whether a given date is between two other dates on the calendar." ilk="function" line="875" lineend="881" name="between" returns="Boolean" signature="between(date, dateBegin, dateEnd)">
              <variable citdl="Date" doc="The date to check for" ilk="argument" name="date" />
              <variable citdl="Date" doc="The start of the range" ilk="argument" name="dateBegin" />
              <variable citdl="Date" doc="The end of the range" ilk="argument" name="dateEnd" />
              <variable citdl="DateMath" name="this" />
            </scope>
            <scope doc="Retrieves a JavaScript Date object representing January 1 of any given year." ilk="function" line="889" lineend="891" name="getJan1" returns="Date" signature="getJan1(calendarYear)">
              <variable citdl="Number" doc="The calendar year for which to retrieve January 1" ilk="argument" name="calendarYear" />
              <variable citdl="DateMath" name="this" />
            </scope>
            <scope doc="Calculates the number of days the specified date is from January 1 of the specified calendar year.&#xA;Passing January 1 to this function would return an offset value of zero." ilk="function" line="901" lineend="907" name="getDayOffset" returns="Number" signature="getDayOffset(date, calendarYear)">
              <variable citdl="Date" doc="The JavaScript date for which to find the offset" ilk="argument" name="date" />
              <variable citdl="Number" doc="The calendar year to use for determining the offset" ilk="argument" name="calendarYear" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" citdl="this.getJan1()" line="902" name="beginYear" />
              <variable attributes="__local__ private" citdl="Math.ceil()" doc="Find the number of days the passed in date is away from the&#xA;calendar year start" line="905" name="dayOffset" />
            </scope>
            <scope doc="Calculates the week number for the given date. Can currently support standard&#xA;U.S. week numbers, based on Jan 1st defining the 1st week of the year, and&#xA;ISO8601 week numbers, based on Jan 4th defining the 1st week of the year." ilk="function" line="924" lineend="966" name="getWeekNumber" returns="Number" signature="getWeekNumber(date, firstDayOfWeek, janDate)">
              <variable citdl="Date" doc="The JavaScript date for which to find the week number" ilk="argument" name="date" />
              <variable citdl="Number" doc="The index of the first day of the week (0 = Sun, 1 = Mon ... 6 = Sat).&#xA;Defaults to 0" ilk="argument" name="firstDayOfWeek" />
              <variable citdl="Number" doc="The date in the first week of January which defines week one for the year&#xA;Defaults to the value of YAHOO.widget.DateMath.WEEK_ONE_JAN_DATE, which is 1 (Jan 1st).&#xA;For the U.S, this is normally Jan 1st. ISO8601 uses Jan 4th to define the first week of the year." ilk="argument" name="janDate" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" citdl="Date" line="932" name="endOfWeek" />
              <variable attributes="__local__ private" citdl="targetDate" line="932" name="startOfWeek" />
              <variable attributes="__local__ private" citdl="this.clearTime()" line="932" name="targetDate" />
              <variable attributes="__local__ private" citdl="startOfWeek.getFullYear()" line="941" name="startYear" />
              <variable attributes="__local__ private" citdl="startOfWeek.getTime()" line="941" name="startTime" />
              <variable attributes="__local__ private" citdl="Number" line="946" name="weekNum" />
              <variable attributes="__local__ private" citdl="this.getFirstDayOfWeek()" doc="find how many days away we are from it." line="955" name="weekOneDayOne" />
              <variable attributes="__local__ private" citdl="this.clearTime()" doc="find how many days away we are from it." line="955" name="weekOne" />
              <variable attributes="__local__ private" citdl="Math.round()" doc="Round days to smoothen out 1 hr DST diff" line="958" name="daysDiff" />
              <variable attributes="__local__ private" citdl="daysDiff" doc="Calc." line="961" name="rem" />
              <variable attributes="__local__ private" line="962" name="weeksDiff" />
            </scope>
            <scope doc="Get the first day of the week, for the give date." ilk="function" line="974" lineend="980" name="getFirstDayOfWeek" returns="Date" signature="getFirstDayOfWeek(dt, startOfWeek)">
              <variable citdl="Date" doc="The date in the week for which the first day is required." ilk="argument" name="dt" />
              <variable citdl="Number" doc="The index for the first day of the week, 0 = Sun, 1 = Mon ... 6 = Sat (defaults to 0)" ilk="argument" name="startOfWeek" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" line="977" name="dayOfWeek" />
              <variable attributes="__local__ private" citdl="dt.getDay()" line="977" name="dayOfWeekIndex" />
            </scope>
            <scope doc="Determines if a given week overlaps two different years." ilk="function" line="988" lineend="995" name="isYearOverlapWeek" returns="Boolean" signature="isYearOverlapWeek(weekBeginDate)">
              <variable citdl="Date" doc="The JavaScript Date representing the first day of the week." ilk="argument" name="weekBeginDate" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="989" name="overlaps" />
              <variable attributes="__local__ private" citdl="this.add()" line="990" name="nextWeek" />
            </scope>
            <scope doc="Determines if a given week overlaps two different months." ilk="function" line="1003" lineend="1010" name="isMonthOverlapWeek" returns="Boolean" signature="isMonthOverlapWeek(weekBeginDate)">
              <variable citdl="Date" doc="The JavaScript Date representing the first day of the week." ilk="argument" name="weekBeginDate" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="1004" name="overlaps" />
              <variable attributes="__local__ private" citdl="this.add()" line="1005" name="nextWeek" />
            </scope>
            <scope doc="Gets the first day of a month containing a given date." ilk="function" line="1018" lineend="1021" name="findMonthStart" returns="Date" signature="findMonthStart(date)">
              <variable citdl="Date" doc="The JavaScript Date used to calculate the month start" ilk="argument" name="date" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" citdl="this.getDate()" line="1019" name="start" />
            </scope>
            <scope doc="Gets the last day of a month containing a given date." ilk="function" line="1029" lineend="1034" name="findMonthEnd" returns="Date" signature="findMonthEnd(date)">
              <variable citdl="Date" doc="The JavaScript Date used to calculate the month end" ilk="argument" name="date" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" citdl="this.findMonthStart()" line="1030" name="start" />
              <variable attributes="__local__ private" citdl="this.add()" line="1031" name="nextMonth" />
              <variable attributes="__local__ private" citdl="this.subtract()" line="1032" name="end" />
            </scope>
            <scope doc="Clears the time fields from a given date, effectively setting the time to 12 noon." ilk="function" line="1042" lineend="1045" name="clearTime" returns="Date" signature="clearTime(date)">
              <variable citdl="Date" doc="The JavaScript Date for which the time fields will be cleared" ilk="argument" name="date" />
              <variable citdl="DateMath" name="this" />
            </scope>
            <scope doc="Returns a new JavaScript Date object, representing the given year, month and date. Time fields (hr, min, sec, ms) on the new Date object&#xA;are set to 0. The method allows Date instances to be created with the a year less than 100. &quot;new Date(year, month, date)&quot; implementations&#xA;set the year to 19xx if a year (xx) which is less than 100 is provided.&#xA;&lt;p&gt;&#xA;&lt;em&gt;NOTE:&lt;/em&gt;Validation on argument values is not performed. It is the caller&apos;s responsibility to ensure&#xA;arguments are valid as per the ECMAScript-262 Date object specification for the new Date(year, month[, date]) constructor.&#xA;&lt;/p&gt;" ilk="function" line="1061" lineend="1076" name="getDate" returns="Date" signature="getDate(y, m, d)">
              <variable citdl="Number" doc="Year." ilk="argument" name="y" />
              <variable citdl="Number" doc="Month index from 0 (Jan) to 11 (Dec)." ilk="argument" name="m" />
              <variable citdl="Number" doc="(optional) Date from 1 to 31. If not provided, defaults to 1." ilk="argument" name="d" />
              <variable citdl="DateMath" name="this" />
              <variable attributes="__local__ private" citdl="Date" line="1062" name="dt" />
            </scope>
          </variable>
          <scope classrefs="YAHOO.widget.FlashAdapter" ilk="class" line="690" lineend="786" name="Chart">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Charts widget provides a Flash control for displaying data&#xA;graphically by series across A-grade browsers with Flash Player installed." ilk="function" line="690" lineend="786" name="Chart" signature="Chart(type, containerId, dataSource, attributes)">
              <variable citdl="String" doc="The char type. May be &quot;line&quot;, &quot;column&quot;, &quot;bar&quot;, or &quot;pie&quot;" ilk="argument" name="type" />
              <variable citdl="HTMLElement" doc="Container element for the Flash Player instance." ilk="argument" name="containerId" />
              <variable citdl="YAHOO.util.DataSource" doc="DataSource instance." ilk="argument" name="dataSource" />
              <variable citdl="Object" doc="(optional) Object literal of configuration values." ilk="argument" name="attributes" />
              <variable citdl="Chart" name="this" />
            </scope>
            <variable attributes="private" citdl="String" doc="PRIVATE: The type of this chart instance." line="796" name="_type" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The id returned from the DataSource&apos;s setInterval function." line="804" name="_pollingID" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The time, in ms, between requests for data." line="812" name="_pollingInterval" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Indicates whether all attributes have been set and&#xA;the dataSource may be passed to the SWF." line="821" name="_initialized" />
            <variable attributes="private" citdl="String" doc="PRIVATE: Stores a reference to the dataTipFunction created by&#xA;YAHOO.widget.FlashAdapter.createProxyFunction()" line="830" name="_dataTipFunction" />
            <scope doc="Public accessor to the unique name of the Chart instance." ilk="function" line="839" lineend="841" name="toString" returns="String" signature="toString()" />
            <scope doc="Sets a single style value on the Chart instance." ilk="function" line="851" lineend="856" name="setStyle" signature="setStyle(name, value)">
              <variable citdl="String" doc="Name of the Chart style value to change." ilk="argument" name="name" />
              <variable citdl="Object" doc="New value to pass to the Chart style." ilk="argument" name="value" />
            </scope>
            <scope doc="Resets all styles on the Chart instance." ilk="function" line="865" lineend="870" name="setStyles" signature="setStyles(styles)">
              <variable citdl="Object" doc="Initializer for all Chart styles." ilk="argument" name="styles" />
            </scope>
            <scope doc="Sets the styles on all series in the Chart." ilk="function" line="879" lineend="887" name="setSeriesStyles" signature="setSeriesStyles(styles)">
              <variable citdl="Array" doc="Initializer for all Chart series styles." ilk="argument" name="styles" />
            </scope>
            <scope ilk="function" line="890" lineend="909" name="destroy" signature="destroy()" />
            <scope attributes="private" doc="PRIVATE: Initializes the attributes." ilk="function" line="918" lineend="1013" name="_initAttributes" signature="_initAttributes(attributes)">
              <variable ilk="argument" name="attributes" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Called when the SWF is ready for communication. Sets the type, initializes&#xA;the styles, and sets the DataSource." ilk="function" line="1023" lineend="1041" name="_loadHandler" signature="_loadHandler()">
              <variable attributes="__local__ private" citdl="this._attributes.style" line="1029" name="style" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Sends the request to the DataSource." ilk="function" line="1050" lineend="1070" name="_refreshData" signature="_refreshData()" />
            <scope attributes="private" doc="PRIVATE: Called when the DataSource receives new data. The series definitions are used&#xA;to build a data provider for the SWF chart." ilk="function" line="1080" lineend="1143" name="_loadDataHandler" signature="_loadDataHandler(request, response, error)">
              <variable ilk="argument" name="request" />
              <variable ilk="argument" name="response" />
              <variable ilk="argument" name="error" />
              <variable attributes="__local__ private" citdl="Boolean" line="1086" name="styleChanged" />
              <variable attributes="__local__ private" citdl="Array" doc="editing them directly." line="1090" name="dataProvider" />
              <variable attributes="__local__ private" citdl="Number" line="1091" name="seriesCount" />
              <variable attributes="__local__ private" citdl="this._seriesDefs[i]" line="1092" name="currentSeries" />
              <variable attributes="__local__ private" citdl="Number" line="1093" name="i" />
              <variable attributes="__local__ private" citdl="Object" line="1100" lineend="1100" name="clonedSeries">
                <variable citdl="YAHOO.lang.JSON.stringify()" line="1107" name="style" />
              </variable>
              <variable attributes="__local__ private" citdl="Object" line="1138" lineend="1138" name="series">
                <variable citdl="response.results" line="1138" name="dataProvider" />
                <variable citdl="this._type" line="1138" name="type" />
              </variable>
            </scope>
            <variable attributes="private" citdl="String" doc="PRIVATE: Storage for the request attribute." line="1151" name="_request" />
            <scope attributes="private" doc="PRIVATE: Getter for the request attribute." ilk="function" line="1160" lineend="1162" name="_getRequest" returns="this._request" signature="_getRequest()" />
            <scope attributes="private" doc="PRIVATE: Setter for the request attribute." ilk="function" line="1171" lineend="1174" name="_setRequest" signature="_setRequest(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <variable attributes="private" citdl="value" doc="PRIVATE: Storage for the dataSource attribute." line="1182" name="_dataSource" />
            <scope attributes="private" doc="PRIVATE: Getter for the dataSource attribute." ilk="function" line="1191" lineend="1193" name="_getDataSource" returns="this._dataSource" signature="_getDataSource()" />
            <scope attributes="private" doc="PRIVATE: Setter for the dataSource attribute." ilk="function" line="1202" lineend="1205" name="_setDataSource" signature="_setDataSource(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <variable attributes="private" citdl="value" doc="PRIVATE: Storage for the series attribute." line="1213" name="_seriesDefs" />
            <scope attributes="private" doc="PRIVATE: Getter for the series attribute." ilk="function" line="1222" lineend="1224" name="_getSeriesDefs" returns="this._seriesDefs" signature="_getSeriesDefs()" />
            <scope attributes="private" doc="PRIVATE: Setter for the series attribute." ilk="function" line="1233" lineend="1236" name="_setSeriesDefs" signature="_setSeriesDefs(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Getter for the categoryNames attribute." ilk="function" line="1245" lineend="1247" name="_getCategoryNames" signature="_getCategoryNames()" />
            <scope attributes="private" doc="PRIVATE: Setter for the categoryNames attribute." ilk="function" line="1256" lineend="1258" name="_setCategoryNames" signature="_setCategoryNames(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Setter for the dataTipFunction attribute." ilk="function" line="1267" lineend="1279" name="_setDataTipFunction" signature="_setDataTipFunction(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Getter for the polling attribute." ilk="function" line="1288" lineend="1290" name="_getPolling" returns="this._pollingInterval" signature="_getPolling()" />
            <scope attributes="private" doc="PRIVATE: Setter for the polling attribute." ilk="function" line="1299" lineend="1302" name="_setPolling" signature="_setPolling(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <variable attributes="private __static__ constant" citdl="String" doc="PRIVATE STATIC CONSTANT: Storage for the dataTipFunction attribute." line="1314" name="SWFURL" />
          </scope>
          <scope ilk="class" line="714" lineend="1820" name="Module">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Container family of components is designed to enable developers to&#xA;create different kinds of content-containing modules on the web. Module&#xA;and Overlay are the most basic containers, and they can be used directly&#xA;or extended to build custom containers. Also part of the Container family&#xA;are four UI controls that extend Module and Overlay: Tooltip, Panel,&#xA;Dialog, and SimpleDialog." ilk="function" line="714" lineend="719" name="Module" signature="Module(el, userConfig)">
              <variable citdl="HTMLElement" doc="The element representing the Module" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration Object literal containing&#xA;the configuration that should be set for this module. See configuration&#xA;documentation for more details." ilk="argument" name="userConfig" />
              <variable citdl="Module" name="this" />
              <variable citdl="Boolean" line="1390" name="textResizeInitialized" />
            </scope>
            <variable citdl="Function" doc="The class&apos;s constructor function" line="906" name="constructor" />
            <variable citdl="HTMLElement" doc="The main module element that contains the header, body, and footer" line="913" name="element" />
            <variable citdl="HTMLElement" doc="The header element, denoted with CSS class &quot;hd&quot;" line="920" name="header" />
            <variable citdl="HTMLElement" doc="The body element, denoted with CSS class &quot;bd&quot;" line="927" name="body" />
            <variable citdl="HTMLElement" doc="The footer element, denoted with CSS class &quot;ft&quot;" line="934" name="footer" />
            <variable citdl="String" doc="The id of the element" line="941" name="id" />
            <variable attributes="deprecated" citdl="String" doc="DEPRECATED: A string representing the root path for all images created by&#xA;a Module instance." line="951" name="imageRoot" />
            <scope doc="Initializes the custom events for Module which are fired&#xA;automatically at appropriate times by the Module class." ilk="function" line="958" lineend="1071" name="initEvents" signature="initEvents()">
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="CustomEvent.LIST" line="960" name="SIGNATURE" />
            </scope>
            <variable citdl="this.createEvent()" doc="CustomEvent fired prior to class initalization." line="968" name="beforeInitEvent" />
            <variable citdl="SIGNATURE" line="969" name="signature" />
            <variable citdl="this.createEvent()" doc="CustomEvent fired after class initalization." line="977" name="initEvent" />
            <variable citdl="this.createEvent()" doc="CustomEvent fired when the Module is appended to the DOM" line="984" name="appendEvent" />
            <variable citdl="this.createEvent()" doc="CustomEvent fired before the Module is rendered" line="991" name="beforeRenderEvent" />
            <variable citdl="this.createEvent()" doc="CustomEvent fired after the Module is rendered" line="998" name="renderEvent" />
            <variable citdl="this.createEvent()" doc="CustomEvent fired when the header content of the Module&#xA;is modified" line="1008" name="changeHeaderEvent" />
            <variable citdl="this.createEvent()" doc="CustomEvent fired when the body content of the Module is modified" line="1017" name="changeBodyEvent" />
            <variable citdl="this.createEvent()" doc="CustomEvent fired when the footer content of the Module&#xA;is modified" line="1027" name="changeFooterEvent" />
            <variable citdl="this.createEvent()" doc="CustomEvent fired when the content of the Module is modified" line="1034" name="changeContentEvent" />
            <variable citdl="this.createEvent()" doc="CustomEvent fired when the Module is destroyed" line="1041" name="destroyEvent" />
            <variable citdl="this.createEvent()" doc="CustomEvent fired before the Module is shown" line="1048" name="beforeShowEvent" />
            <variable citdl="this.createEvent()" doc="CustomEvent fired after the Module is shown" line="1055" name="showEvent" />
            <variable citdl="this.createEvent()" doc="CustomEvent fired before the Module is hidden" line="1062" name="beforeHideEvent" />
            <variable citdl="this.createEvent()" doc="CustomEvent fired after the Module is hidden" line="1069" name="hideEvent" />
            <variable citdl="String" doc="String representing the current user-agent platform" line="1078" name="platform" />
            <variable attributes="deprecated" citdl="String" doc="DEPRECATED: String representing the user-agent of the browser" line="1096" name="browser" />
            <variable citdl="Boolean" doc="Boolean representing whether or not the current browsing context is&#xA;secure (https)" line="1123" name="isSecure" />
            <scope doc="Initializes the custom events for Module which are fired&#xA;automatically at appropriate times by the Module class." ilk="function" line="1135" lineend="1190" name="initDefaultConfig" signature="initDefaultConfig()">
              <variable citdl="Module" name="this" />
            </scope>
            <scope doc="The Module class&apos;s initialization method, which is executed for&#xA;Module and all of its subclasses. This method is automatically&#xA;called by the constructor, and  sets up all DOM references for&#xA;pre-existing markup, and creates required markup if it is not&#xA;already present." ilk="function" line="1205" lineend="1279" name="init" signature="init(el, userConfig)">
              <variable citdl="HTMLElement" doc="The element representing the Module" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration Object literal&#xA;containing the configuration that should be set for this module.&#xA;See configuration documentation for more details." ilk="argument" name="userConfig" />
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="el" line="1207" name="elId" />
              <variable attributes="__local__ private" citdl="this.element.firstChild" line="1207" name="child" />
              <variable attributes="__local__ private" citdl="Boolean" line="1242" name="fndHd" />
              <variable attributes="__local__ private" citdl="Boolean" line="1242" name="fndFt" />
              <variable attributes="__local__ private" citdl="Boolean" line="1242" name="fndBd" />
            </scope>
            <variable citdl="YAHOO.util.Config" doc="The Module&apos;s Config object used for monitoring&#xA;configuration properties." line="1218" name="cfg" />
            <scope doc="Initialize an empty IFRAME that is placed out of the visible area&#xA;that can be used to detect text resize." ilk="function" line="1286" lineend="1297" name="initResizeMonitor" signature="initResizeMonitor()">
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" line="1288" name="isGeckoWin" />
              <variable attributes="__local__ private" citdl="this" doc="started with FireFox 2.0.0.8/Win" line="1292" name="self" />
            </scope>
            <scope doc="Create and initialize the text resize monitoring iframe." ilk="function" line="1305" lineend="1395" name="_initResizeMonitor" signature="_initResizeMonitor()">
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="1309" name="sHTML" />
              <variable attributes="__local__ private" citdl="Dom.get()" line="1309" name="oIFrame">
                <variable citdl="Object" line="1347" name="style">
                  <variable citdl="String" doc="Need to set &quot;position&quot; property before inserting the iframe&#xA;into the document or Safari&apos;s status bar will forever&#xA;indicate the iframe is loading (See SourceForge bug&#xA;#1723064) */" line="1347" name="position" />
                  <variable citdl="String" line="1348" name="visibility" />
                  <variable citdl="String" line="1358" name="width" />
                  <variable citdl="String" line="1359" name="height" />
                  <variable line="1360" name="top" />
                  <variable line="1361" name="left" />
                  <variable citdl="String" line="1362" name="borderWidth" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="oIFrame.contentWindow.document" line="1309" name="oDoc" />
              <scope attributes="__local__ private" ilk="function" line="1311" lineend="1313" name="fireTextResize" signature="fireTextResize()" />
              <variable attributes="__local__ private" citdl="this._supportsCWResize()" line="1318" name="supportsCWResize" />
              <variable attributes="__local__ private" citdl="document.body" line="1351" name="db" />
              <variable attributes="__local__ private" citdl="db.firstChild" line="1351" name="fc" />
            </scope>
            <variable citdl="oIFrame" line="1392" name="resizeMonitor" />
            <scope attributes="private" doc="PRIVATE: Text resize monitor helper method.&#xA;Determines if the browser supports resize events on iframe content windows." ilk="function" line="1404" lineend="1428" name="_supportsCWResize" returns="bSupported" signature="_supportsCWResize()">
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" doc="Gecko 1.8.0 (FF1.5), 1.8.1.0-5 (FF2) won&apos;t fire resize on&#xA;contentWindow." line="1412" name="bSupported" />
            </scope>
            <scope doc="Event handler fired when the resize monitor element is resized." ilk="function" line="1436" lineend="1444" name="onDomResize" signature="onDomResize(e, obj)">
              <variable citdl="DOMEvent" doc="The DOM resize event" ilk="argument" name="e" />
              <variable citdl="Object" doc="The scope object passed to the handler" ilk="argument" name="obj" />
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="Number" line="1439" name="nLeft" />
              <variable attributes="__local__ private" citdl="Number" line="1439" name="nTop" />
            </scope>
            <variable citdl="nTop" line="1441" name="top" />
            <variable citdl="nLeft" line="1442" name="left" />
            <scope doc="Sets the Module&apos;s header content to the string specified, or appends&#xA;the passed element to the header. If no header is present, one will&#xA;be automatically created. An empty string can be passed to the method&#xA;to clear the contents of the header." ilk="function" line="1463" lineend="1476" name="setHeader" signature="setHeader(headerContent)">
              <variable citdl="DocumentFragment" doc="The document fragment&#xA;containing elements which are to be added to the header" ilk="argument" name="headerContent" />
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="this.header" line="1464" name="oHeader" />
            </scope>
            <scope doc="Appends the passed element to the header. If no header is present,&#xA;one will be automatically created." ilk="function" line="1486" lineend="1494" name="appendToHeader" signature="appendToHeader(element)">
              <variable ilk="argument" name="element" />
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="this.header" line="1487" name="oHeader" />
            </scope>
            <scope doc="Sets the Module&apos;s body content to the HTML specified, or appends the&#xA;passed element to the body. If no body is present, one will be&#xA;automatically created. An empty string can be passed to the method&#xA;to clear the contents of the body." ilk="function" line="1512" lineend="1524" name="setBody" signature="setBody(bodyContent)">
              <variable citdl="DocumentFragment" doc="The document fragment&#xA;containing elements which are to be added to the body" ilk="argument" name="bodyContent" />
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="this.body" line="1513" name="oBody" />
            </scope>
            <scope doc="Appends the passed element to the body. If no body is present, one&#xA;will be automatically created." ilk="function" line="1535" lineend="1543" name="appendToBody" signature="appendToBody(element)">
              <variable ilk="argument" name="element" />
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="this.body" line="1536" name="oBody" />
            </scope>
            <scope doc="Sets the Module&apos;s footer content to the HTML specified, or appends&#xA;the passed element to the footer. If no footer is present, one will&#xA;be automatically created. An empty string can be passed to the method&#xA;to clear the contents of the footer." ilk="function" line="1562" lineend="1575" name="setFooter" signature="setFooter(footerContent)">
              <variable citdl="DocumentFragment" doc="The document fragment containing&#xA;elements which are to be added to the footer" ilk="argument" name="footerContent" />
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="this.footer" line="1564" name="oFooter" />
            </scope>
            <scope doc="Appends the passed element to the footer. If no footer is present,&#xA;one will be automatically created." ilk="function" line="1585" lineend="1594" name="appendToFooter" signature="appendToFooter(element)">
              <variable ilk="argument" name="element" />
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="this.footer" line="1587" name="oFooter" />
            </scope>
            <scope doc="Renders the Module by inserting the elements that are not already&#xA;in the main Module into their correct places. Optionally appends&#xA;the Module to the specified node prior to the render&apos;s execution.&#xA;&lt;p&gt;&#xA;For Modules without existing markup, the appendToNode argument&#xA;is REQUIRED. If this argument is ommitted and the current element is&#xA;not present in the document, the function will return false,&#xA;indicating that the render was a failure.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;NOTE: As of 2.3.1, if the appendToNode is the document&apos;s body element&#xA;then the module is rendered as the first child of the body element,&#xA;and not appended to it, to avoid Operation Aborted errors in IE when&#xA;rendering the module before window&apos;s load event is fired. You can&#xA;use the appendtodocumentbody configuration property to change this&#xA;to append to document.body if required.&#xA;&lt;/p&gt;" ilk="function" line="1623" lineend="1681" name="render" returns="Boolean" signature="render(appendToNode, moduleElement)">
              <variable citdl="HTMLElement" doc="The element to which the Module&#xA;should be appended to prior to rendering" ilk="argument" name="appendToNode" />
              <variable citdl="HTMLElement" doc="OPTIONAL. The element that&#xA;represents the actual Standard Module container." ilk="argument" name="moduleElement" />
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="this" line="1626" name="me" />
              <variable attributes="__local__ private" citdl="moduleElement.firstChild" line="1626" name="firstChild" />
              <scope attributes="__local__ private" ilk="function" line="1628" lineend="1637" name="appendTo" signature="appendTo(parentNode)">
                <variable ilk="argument" name="parentNode" />
              </scope>
            </scope>
            <scope doc="Removes the Module element from the DOM and sets all child elements&#xA;to null." ilk="function" line="1688" lineend="1720" name="destroy" signature="destroy()">
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" line="1691" name="e" />
              <variable attributes="__local__ private" citdl="this.element.parentNode" line="1691" name="parent" />
            </scope>
            <scope doc="Shows the Module element by setting the visible configuration&#xA;property to true. Also fires two events: beforeShowEvent prior to&#xA;the visibility change, and showEvent after." ilk="function" line="1728" lineend="1730" name="show" signature="show()">
              <variable citdl="Module" name="this" />
            </scope>
            <scope doc="Hides the Module element by setting the visible configuration&#xA;property to false. Also fires two events: beforeHideEvent prior to&#xA;the visibility change, and hideEvent after." ilk="function" line="1738" lineend="1740" name="hide" signature="hide()">
              <variable citdl="Module" name="this" />
            </scope>
            <scope doc="Default event handler for changing the visibility property of a&#xA;Module. By default, this is achieved by switching the &quot;display&quot; style&#xA;between &quot;block&quot; and &quot;none&quot;.&#xA;This method is responsible for firing showEvent and hideEvent." ilk="function" line="1755" lineend="1766" name="configVisible" signature="configVisible(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1756" name="visible" />
            </scope>
            <scope doc="Default event handler for the &quot;monitorresize&quot; configuration property" ilk="function" line="1777" lineend="1785" name="configMonitorResize" signature="configMonitorResize(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="Module" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1778" name="monitor" />
            </scope>
            <scope doc="This method is a protected helper, used when constructing the DOM structure for the module&#xA;to account for situations which may cause Operation Aborted errors in IE. It should not&#xA;be used for general DOM construction.&#xA;&lt;p&gt;&#xA;If the parentNode is not document.body, the element is appended as the last element.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;If the parentNode is document.body the element is added as the first child to help&#xA;prevent Operation Aborted errors in IE.&#xA;&lt;/p&gt;" ilk="function" line="1804" lineend="1810" name="_addToParent" signature="_addToParent(parentNode, element)">
              <variable ilk="argument" name="parentNode" />
              <variable ilk="argument" name="element" />
              <variable citdl="Module" name="this" />
            </scope>
            <scope doc="Returns a String representation of the Object." ilk="function" line="1817" lineend="1819" name="toString" returns="String" signature="toString()">
              <variable citdl="Module" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="778" lineend="1780" name="Node">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The base class for all tree nodes.  The node&apos;s presentation and behavior in&#xA;response to mouse events is handled in Node subclasses." ilk="function" line="778" lineend="780" name="Node" signature="Node(oData, oParent, expanded)">
              <variable citdl="Object" doc="a string or object containing the data that will&#xA;be used to render this node, and any custom attributes that should be&#xA;stored with the node (which is available in noderef.data)." ilk="argument" name="oData" />
              <variable citdl="Node" doc="this node&apos;s parent node" ilk="argument" name="oParent" />
              <variable citdl="Boolean" doc="the initial expanded/collapsed state" ilk="argument" name="expanded" />
              <variable citdl="Node" name="this" />
            </scope>
            <variable citdl="Number" doc="The index for this instance obtained from global counter in YAHOO.widget.TreeView." line="789" name="index" />
            <variable citdl="Array" doc="This node&apos;s child node collection." line="796" name="children" />
            <variable citdl="TreeView" doc="Tree instance this node is part of" line="803" name="tree" />
            <variable citdl="Object" doc="The data linked to this node.  This can be any object or primitive&#xA;value, and the data can be used in getNodeHtml()." line="811" name="data" />
            <variable citdl="Node" doc="Parent node" line="818" name="parent" />
            <variable citdl="Number" doc="The depth of this node.  We start at -1 for the root node." line="825" name="depth" />
            <variable citdl="String" doc="The href for the node&apos;s label.  If one is not specified, the href will&#xA;be set so that it toggles the node." line="833" name="href" />
            <variable citdl="String" doc="The label href target, defaults to current window" line="840" name="target" />
            <variable citdl="Boolean" doc="The node&apos;s expanded/collapsed state" line="847" name="expanded" />
            <variable citdl="Boolean" doc="Can multiple children be expanded at once?" line="854" name="multiExpand" />
            <variable citdl="Boolean" doc="Should we render children for a collapsed node?  It is possible that the&#xA;implementer will want to render the hidden data...  @todo verify that we&#xA;need this, and implement it if we do." line="863" name="renderHidden" />
            <variable citdl="Boolean" doc="This flag is set to true when the html is generated for this node&apos;s&#xA;children, and set to false when new children are added." line="871" name="childrenRendered" />
            <variable citdl="Boolean" doc="Dynamically loaded nodes only fetch the data the first time they are&#xA;expanded.  This flag is set to true once the data has been fetched." line="879" name="dynamicLoadComplete" />
            <variable citdl="Node" doc="This node&apos;s previous sibling" line="886" name="previousSibling" />
            <variable citdl="Node" doc="This node&apos;s next sibling" line="893" name="nextSibling" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: We can set the node up to call an external method to get the child&#xA;data dynamically." line="902" name="_dynLoad" />
            <variable citdl="Function" doc="Function to execute when we need to get this node&apos;s child data." line="909" name="dataLoader" />
            <variable citdl="Boolean" doc="This is true for dynamically loading nodes while waiting for the&#xA;callback to return." line="917" name="isLoading" />
            <variable citdl="Boolean" doc="The toggle/branch icon will not show if this is set to false.  This&#xA;could be useful if the implementer wants to have the child contain&#xA;extra info about the parent, rather than an actual node." line="926" name="hasIcon" />
            <variable citdl="Number" doc="Used to configure what happens when a dynamic load node is expanded&#xA;and we discover that it does not have children.  By default, it is&#xA;treated as if it still could have children (plus/minus icon).  Set&#xA;iconMode to have it display like a leaf node instead." line="936" name="iconMode" />
            <variable citdl="Boolean" doc="Specifies whether or not the content area of the node should be allowed&#xA;to wrap." line="945" name="nowrap" />
            <variable citdl="Boolean" doc="If true, the node will alway be rendered as a leaf node.  This can be&#xA;used to override the presentation when dynamically loading the entire&#xA;tree.  Setting this to true also disables the dynamic load call for the&#xA;node." line="956" name="isLeaf" />
            <variable attributes="private" citdl="String" doc="PRIVATE: The node type" line="963" name="_type" />
            <scope doc="Initializes this node, gets some of the properties from the parent" ilk="function" line="980" lineend="1003" name="init" signature="init(oData, oParent, expanded)">
              <variable citdl="Object" doc="a string or object containing the data that will&#xA;be used to render this node" ilk="argument" name="oData" />
              <variable citdl="Node" doc="this node&apos;s parent node" ilk="argument" name="oParent" />
              <variable citdl="Boolean" doc="the initial expanded/collapsed state" ilk="argument" name="expanded" />
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Certain properties for the node cannot be set until the parent&#xA;is known. This is called after the node is inserted into a tree.&#xA;the parent is also applied to this node&apos;s children in order to&#xA;make it possible to move a branch from one tree to another." ilk="function" line="1014" lineend="1044" name="applyParent" returns="Boolean" signature="applyParent(parentNode)">
              <variable citdl="Node" doc="this node&apos;s parent node" ilk="argument" name="parentNode" />
              <variable citdl="Node" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Appends a node to the child collection." ilk="function" line="1053" lineend="1071" name="appendChild" returns="Node" signature="appendChild(childNode)">
              <variable citdl="Node" doc="the new node" ilk="argument" name="childNode" />
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="this.children[this.children.length-1]" line="1055" name="sib" />
            </scope>
            <scope doc="Appends this node to the supplied node&apos;s child collection" ilk="function" line="1079" lineend="1081" name="appendTo" returns="Node" signature="appendTo(parentNode)">
              <variable citdl="Node" doc="the node to append to." ilk="argument" name="parentNode" />
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Inserts this node before this supplied node" ilk="function" line="1089" lineend="1110" name="insertBefore" returns="Node" signature="insertBefore(node)">
              <variable citdl="Node" doc="the node to insert this node before" ilk="argument" name="node" />
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="node.parent" line="1090" name="p" />
              <variable attributes="__local__ private" citdl="node.isChildOf()" line="1097" name="refIndex" />
            </scope>
            <scope doc="Inserts this node after the supplied node" ilk="function" line="1118" lineend="1144" name="insertAfter" returns="Node" signature="insertAfter(node)">
              <variable citdl="Node" doc="the node to insert after" ilk="argument" name="node" />
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="node.parent" line="1119" name="p" />
              <variable attributes="__local__ private" citdl="node.isChildOf()" line="1126" name="refIndex" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Returns true if the Node is a child of supplied Node" ilk="function" line="1154" lineend="1164" name="isChildOf" returns="Boolean" signature="isChildOf(parentNode)">
              <variable citdl="Node" doc="the Node to check" ilk="argument" name="parentNode" />
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Returns a node array of this node&apos;s siblings, null if none." ilk="function" line="1171" lineend="1173" name="getSiblings" returns="this.parent.children" signature="getSiblings()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Shows this node&apos;s children" ilk="function" line="1179" lineend="1185" name="showChildren" signature="showChildren()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Hides this node&apos;s children" ilk="function" line="1191" lineend="1196" name="hideChildren" signature="hideChildren()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Returns the id for this node&apos;s container div" ilk="function" line="1203" lineend="1205" name="getElId" returns="String" signature="getElId()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Returns the id for this node&apos;s children div" ilk="function" line="1212" lineend="1214" name="getChildrenElId" returns="String" signature="getChildrenElId()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Returns the id for this node&apos;s toggle element" ilk="function" line="1221" lineend="1223" name="getToggleElId" returns="String" signature="getToggleElId()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Returns this node&apos;s container html element" ilk="function" line="1243" lineend="1245" name="getEl" returns="HTMLElement" signature="getEl()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Returns the div that was generated for this node&apos;s children" ilk="function" line="1252" lineend="1254" name="getChildrenEl" returns="HTMLElement" signature="getChildrenEl()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Returns the element that is being used for this node&apos;s toggle." ilk="function" line="1261" lineend="1263" name="getToggleEl" returns="HTMLElement" signature="getToggleEl()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Generates the link that will invoke this node&apos;s toggle method" ilk="function" line="1297" lineend="1300" name="getToggleLink" returns="String" signature="getToggleLink()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Hides this nodes children (creating them if necessary), changes the" ilk="function" line="1307" lineend="1339" name="collapse" signature="collapse()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="this.tree.onCollapse()" doc="fire the collapse event handler" line="1312" name="ret" />
            </scope>
            <scope doc="Shows this nodes children (creating them if necessary), changes the&#xA;toggle style, and collapses its siblings if multiExpand is not set." ilk="function" line="1346" lineend="1409" name="expand" signature="expand(lazySource)">
              <variable ilk="argument" name="lazySource" />
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="1352" name="ret" />
              <variable attributes="__local__ private" citdl="this.getSiblings()" line="1398" name="sibs" />
            </scope>
            <scope ilk="function" line="1411" lineend="1418" name="updateIcon" signature="updateIcon()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="this.getToggleEl()" line="1413" name="el" />
            </scope>
            <scope doc="Returns the css style name for the toggle" ilk="function" line="1425" lineend="1441" name="getStyle" returns="String" signature="getStyle()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" doc="location top or bottom, middle nodes also get the top style" line="1430" name="loc" />
              <variable attributes="__local__ private" citdl="String" doc="type p=plus(expand), m=minus(collapase), n=none(no children)" line="1433" name="type" />
            </scope>
            <scope doc="Returns the hover style for the icon" ilk="function" line="1448" lineend="1454" name="getHoverStyle" returns="String" signature="getHoverStyle()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="this.getStyle()" line="1449" name="s" />
            </scope>
            <scope doc="Recursively expands all of this node&apos;s children." ilk="function" line="1460" lineend="1474" name="expandAll" signature="expandAll()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="this.children[i]" line="1462" name="c" />
            </scope>
            <scope doc="Recursively collapses all of this node&apos;s children." ilk="function" line="1480" lineend="1485" name="collapseAll" signature="collapseAll()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Configures this node for dynamically obtaining the child data&#xA;when the node is first expanded.  Calling it without the callback&#xA;will turn off dynamic load for the node." ilk="function" line="1498" lineend="1510" name="setDynamicLoad" signature="setDynamicLoad(fnDataLoader, iconMode)">
              <variable ilk="argument" name="fnDataLoader" />
              <variable citdl="Number" doc="configures the icon that is displayed when a dynamic&#xA;load node is expanded the first time without children.  By default, the&#xA;&quot;collapse&quot; icon will be used.  If set to 1, the leaf node icon will be&#xA;displayed." ilk="argument" name="iconMode" />
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Evaluates if this node is the root node of the tree" ilk="function" line="1517" lineend="1519" name="isRoot" returns="Boolean" signature="isRoot()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Evaluates if this node&apos;s children should be loaded dynamically.  Looks for&#xA;the property both in this instance and the root node.  If the tree is&#xA;defined to load all children dynamically, the data callback function is&#xA;defined in the root node" ilk="function" line="1529" lineend="1536" name="isDynamic" returns="Boolean" signature="isDynamic()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Returns the current icon mode.  This refers to the way childless dynamic&#xA;load nodes appear (this comes into play only after the initial dynamic&#xA;load request produced no children)." ilk="function" line="1545" lineend="1547" name="getIconMode" returns="Number" signature="getIconMode()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Checks if this node has children.  If this node is lazy-loading and the&#xA;children have not been rendered, we do not know whether or not there&#xA;are actual children.  In most cases, we need to assume that there are&#xA;children (for instance, the toggle needs to show the expandable&#xA;presentation state).  In other times we want to know if there are rendered&#xA;children.  For the latter, &quot;checkForLazyLoad&quot; should be false." ilk="function" line="1561" lineend="1568" name="hasChildren" returns="Boolean" signature="hasChildren(checkForLazyLoad)">
              <variable citdl="Boolean" doc="should we check for unloaded children?" ilk="argument" name="checkForLazyLoad" />
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Expands if node is collapsed, collapses otherwise." ilk="function" line="1574" lineend="1578" name="toggle" signature="toggle()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Returns the markup for this node and its children." ilk="function" line="1585" lineend="1595" name="getHtml" returns="String" signature="getHtml()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="1589" name="sb" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Called when first rendering the tree.  We always build the div that will&#xA;contain this nodes children, but we don&apos;t render the children themselves&#xA;unless this node is expanded." ilk="function" line="1605" lineend="1630" name="getChildrenHtml" returns="String" signature="getChildrenHtml()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="1608" name="sb" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Generates the markup for the child nodes.  This is not done until the node&#xA;is expanded." ilk="function" line="1639" lineend="1677" name="renderChildren" returns="String" signature="renderChildren()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="this" line="1642" name="node" />
            </scope>
            <variable citdl="Boolean" line="1646" name="locked" />
            <scope doc="Called when we know we have all the child data." ilk="function" line="1684" lineend="1695" name="completeRender" returns="String" signature="completeRender()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="1685" name="sb" />
            </scope>
            <scope doc="Load complete is the callback function we pass to the data provider&#xA;in dynamic load situations." ilk="function" line="1702" lineend="1708" name="loadComplete" signature="loadComplete()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Returns this node&apos;s ancestor at the specified depth." ilk="function" line="1716" lineend="1728" name="getAncestor" returns="Node" signature="getAncestor(depth)">
              <variable citdl="Number" doc="the depth of the ancestor." ilk="argument" name="depth" />
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="this.parent" line="1721" name="p" />
            </scope>
            <scope doc="Returns the css class for the spacer at the specified depth for&#xA;this node.  If this node&apos;s ancestor at the specified depth&#xA;has a next sibling the presentation is different than if it&#xA;does not have a next sibling" ilk="function" line="1739" lineend="1742" name="getDepthStyle" returns="String" signature="getDepthStyle(depth)">
              <variable citdl="Number" doc="the depth of the ancestor." ilk="argument" name="depth" />
              <variable citdl="Node" name="this" />
            </scope>
            <variable citdl="String" line="1741" name="ygtvdepthcell" />
            <scope doc="Get the markup for the node.  This is designed to be overrided so that we can&#xA;support different types of nodes." ilk="function" line="1750" lineend="1752" name="getNodeHtml" returns="String" signature="getNodeHtml()">
              <variable citdl="Node" name="this" />
            </scope>
            <scope doc="Regenerates the html for this node and its children.  To be used when the&#xA;node is expanded and new children have been added." ilk="function" line="1759" lineend="1769" name="refresh" signature="refresh()">
              <variable citdl="Node" name="this" />
              <variable attributes="__local__ private" citdl="this.getToggleEl()" line="1764" name="el" />
            </scope>
            <scope doc="Node toString" ilk="function" line="1776" lineend="1778" name="toString" returns="String" signature="toString()">
              <variable citdl="Node" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="854" lineend="867" name="Menu">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Menu class creates a container that holds a vertical list representing&#xA;a set of options or commands.  Menu is the base class for all&#xA;menu containers." ilk="function" line="854" lineend="867" name="Menu" signature="Menu(p_oElement, p_oConfig)">
              <variable citdl="String" doc="String specifying the id attribute of the&#xA;&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source&#xA;for the menu." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying the&#xA;configuration for the menu. See configuration class documentation for&#xA;more details." ilk="argument" name="p_oConfig" />
              <variable citdl="Menu" name="this" />
            </scope>
            <variable citdl="p_oConfig.parent" line="858" name="parent" />
            <variable citdl="p_oConfig.lazyLoad" line="859" name="lazyLoad" />
            <variable citdl="p_oConfig.itemData" line="860" name="itemData" />
          </scope>
          <variable citdl="Crop" line="858" name="ImageCropper" />
          <variable citdl="Tab" line="886" name="Tab" />
          <scope ilk="class" line="1109" lineend="1162" name="SliderThumb">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A drag and drop implementation to be used as the thumb of a slider." ilk="function" line="1109" lineend="1162" name="SliderThumb" signature="SliderThumb(id, sGroup, iLeft, iRight, iUp, iDown, iTickSize)">
              <variable citdl="String" doc="the id of the slider html element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop items" ilk="argument" name="sGroup" />
              <variable citdl="Number" doc="the number of pixels the element can move left" ilk="argument" name="iLeft" />
              <variable citdl="Number" doc="the number of pixels the element can move right" ilk="argument" name="iRight" />
              <variable citdl="Number" doc="the number of pixels the element can move up" ilk="argument" name="iUp" />
              <variable citdl="Number" doc="the number of pixels the element can move down" ilk="argument" name="iDown" />
              <variable citdl="Number" doc="optional parameter for specifying that the element&#xA;should move a certain number pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="SliderThumb" name="this" />
            </scope>
            <variable citdl="String" doc="The id of the thumbs parent HTML element (the slider background&#xA;element)." line="1121" name="parentElId" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Overrides the isTarget property in YAHOO.util.DragDrop" line="1133" name="isTarget" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The tick size for this slider" line="1141" name="tickSize" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Informs the drag and drop util that the offsets should remain when&#xA;resetting the constraints.  This preserves the slider value when&#xA;the constraints are reset" line="1151" name="maintainOffset" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Turns off the autoscroll feature in drag and drop" line="1160" name="scroll" />
          </scope>
          <scope ilk="class" line="1127" lineend="4292" name="Calendar">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Calendar component is a UI control that enables users to choose one or more dates from a graphical calendar presented in a one-month or&#xA;multi-month interface. Calendars are generated entirely via script and can be navigated without any page refreshes.&#xA;*	&lt;xmp&gt;&#xA;*		&lt;div id=&quot;calContainer&quot;&gt;&lt;/div&gt;&#xA;*	&lt;/xmp&gt;&#xA;&#xA;*	&lt;xmp&gt;&#xA;*		var c = new YAHOO.widget.Calendar(&quot;calContainer&quot;, configOptions);&#xA;*	&lt;/xmp&gt;&#xA;*		var c = new YAHOO.widget.Calendar(containerDiv, configOptions);&#xA;*	&lt;/xmp&gt;" ilk="function" line="1127" lineend="1129" name="Calendar" signature="Calendar(id, containerId, config)">
              <variable citdl="String" doc="optional The id of the table element that will represent the Calendar widget. As of 2.4.0, this argument is optional." ilk="argument" name="id" />
              <variable ilk="argument" name="containerId" />
              <variable citdl="Object" doc="optional The configuration object containing the initial configuration values for the Calendar." ilk="argument" name="config" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <variable attributes="deprecated __static__" citdl="String" doc="DEPRECATED STATIC: The path to be used for images loaded for the Calendar" line="1138" name="IMG_ROOT" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Type constant used for renderers to represent an individual date (M/D/Y)" line="1147" name="DATE" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Type constant used for renderers to represent an individual date across any year (M/D)" line="1156" name="MONTH_DAY" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Type constant used for renderers to represent a weekday" line="1165" name="WEEKDAY" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Type constant used for renderers to represent a range of individual dates (M/D/Y-M/D/Y)" line="1174" name="RANGE" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Type constant used for renderers to represent a month across any year" line="1183" name="MONTH" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Constant that represents the total number of date cells that are displayed in a given month" line="1192" name="DISPLAY_DAYS" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant used for halting the execution of the remainder of the render stack" line="1201" name="STOP_RENDER" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant used to represent short date field string formats (e.g. Tu or Feb)" line="1210" name="SHORT" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant used to represent long date field string formats (e.g. Monday or February)" line="1219" name="LONG" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant used to represent medium date field string formats (e.g. Mon)" line="1228" name="MEDIUM" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant used to represent single character date field string formats (e.g. M, T, W)" line="1237" name="ONE_CHAR" />
            <variable attributes="private __static__ constant" citdl="Object" doc="PRIVATE STATIC CONSTANT: The set of default Config property keys and values for the Calendar" line="1247" lineend="1287" name="_DEFAULT_CONFIG">
              <variable citdl="Object" doc="Default values for pagedate and selected are not class level&#xA;constants - they are set during instance creation" line="1249" lineend="1249" name="PAGEDATE">
                <variable line="1249" name="value" />
                <variable citdl="String" line="1249" name="key" />
              </variable>
              <variable citdl="Object" line="1250" lineend="1250" name="SELECTED">
                <variable line="1250" name="value" />
                <variable citdl="String" line="1250" name="key" />
              </variable>
              <variable citdl="Object" line="1251" lineend="1251" name="TITLE">
                <variable citdl="String" line="1251" name="value" />
                <variable citdl="String" line="1251" name="key" />
              </variable>
              <variable citdl="Object" line="1252" lineend="1252" name="CLOSE">
                <variable citdl="Boolean" line="1252" name="value" />
                <variable citdl="String" line="1252" name="key" />
              </variable>
              <variable citdl="Object" line="1253" lineend="1253" name="IFRAME">
                <variable line="1253" name="value" />
                <variable citdl="String" line="1253" name="key" />
              </variable>
              <variable citdl="Object" line="1254" lineend="1254" name="MINDATE">
                <variable line="1254" name="value" />
                <variable citdl="String" line="1254" name="key" />
              </variable>
              <variable citdl="Object" line="1255" lineend="1255" name="MAXDATE">
                <variable line="1255" name="value" />
                <variable citdl="String" line="1255" name="key" />
              </variable>
              <variable citdl="Object" line="1256" lineend="1256" name="MULTI_SELECT">
                <variable citdl="Boolean" line="1256" name="value" />
                <variable citdl="String" line="1256" name="key" />
              </variable>
              <variable citdl="Object" line="1257" lineend="1257" name="START_WEEKDAY">
                <variable citdl="Number" line="1257" name="value" />
                <variable citdl="String" line="1257" name="key" />
              </variable>
              <variable citdl="Object" line="1258" lineend="1258" name="SHOW_WEEKDAYS">
                <variable citdl="Boolean" line="1258" name="value" />
                <variable citdl="String" line="1258" name="key" />
              </variable>
              <variable citdl="Object" line="1259" lineend="1259" name="SHOW_WEEK_HEADER">
                <variable citdl="Boolean" line="1259" name="value" />
                <variable citdl="String" line="1259" name="key" />
              </variable>
              <variable citdl="Object" line="1260" lineend="1260" name="SHOW_WEEK_FOOTER">
                <variable citdl="Boolean" line="1260" name="value" />
                <variable citdl="String" line="1260" name="key" />
              </variable>
              <variable citdl="Object" line="1261" lineend="1261" name="HIDE_BLANK_WEEKS">
                <variable citdl="Boolean" line="1261" name="value" />
                <variable citdl="String" line="1261" name="key" />
              </variable>
              <variable citdl="Object" line="1262" lineend="1262" name="NAV_ARROW_LEFT">
                <variable line="1262" name="value" />
                <variable citdl="String" line="1262" name="key" />
              </variable>
              <variable citdl="Object" line="1263" lineend="1263" name="NAV_ARROW_RIGHT">
                <variable line="1263" name="value" />
                <variable citdl="String" line="1263" name="key" />
              </variable>
              <variable citdl="Object" line="1264" lineend="1264" name="MONTHS_SHORT">
                <variable citdl="Array" line="1264" name="value" />
                <variable citdl="String" line="1264" name="key" />
              </variable>
              <variable citdl="Object" line="1265" lineend="1265" name="MONTHS_LONG">
                <variable citdl="Array" line="1265" name="value" />
                <variable citdl="String" line="1265" name="key" />
              </variable>
              <variable citdl="Object" line="1266" lineend="1266" name="WEEKDAYS_1CHAR">
                <variable citdl="Array" line="1266" name="value" />
                <variable citdl="String" line="1266" name="key" />
              </variable>
              <variable citdl="Object" line="1267" lineend="1267" name="WEEKDAYS_SHORT">
                <variable citdl="Array" line="1267" name="value" />
                <variable citdl="String" line="1267" name="key" />
              </variable>
              <variable citdl="Object" line="1268" lineend="1268" name="WEEKDAYS_MEDIUM">
                <variable citdl="Array" line="1268" name="value" />
                <variable citdl="String" line="1268" name="key" />
              </variable>
              <variable citdl="Object" line="1269" lineend="1269" name="WEEKDAYS_LONG">
                <variable citdl="Array" line="1269" name="value" />
                <variable citdl="String" line="1269" name="key" />
              </variable>
              <variable citdl="Object" line="1270" lineend="1270" name="LOCALE_MONTHS">
                <variable citdl="String" line="1270" name="value" />
                <variable citdl="String" line="1270" name="key" />
              </variable>
              <variable citdl="Object" line="1271" lineend="1271" name="LOCALE_WEEKDAYS">
                <variable citdl="String" line="1271" name="value" />
                <variable citdl="String" line="1271" name="key" />
              </variable>
              <variable citdl="Object" line="1272" lineend="1272" name="DATE_DELIMITER">
                <variable citdl="String" line="1272" name="value" />
                <variable citdl="String" line="1272" name="key" />
              </variable>
              <variable citdl="Object" line="1273" lineend="1273" name="DATE_FIELD_DELIMITER">
                <variable citdl="String" line="1273" name="value" />
                <variable citdl="String" line="1273" name="key" />
              </variable>
              <variable citdl="Object" line="1274" lineend="1274" name="DATE_RANGE_DELIMITER">
                <variable citdl="String" line="1274" name="value" />
                <variable citdl="String" line="1274" name="key" />
              </variable>
              <variable citdl="Object" line="1275" lineend="1275" name="MY_MONTH_POSITION">
                <variable citdl="Number" line="1275" name="value" />
                <variable citdl="String" line="1275" name="key" />
              </variable>
              <variable citdl="Object" line="1276" lineend="1276" name="MY_YEAR_POSITION">
                <variable citdl="Number" line="1276" name="value" />
                <variable citdl="String" line="1276" name="key" />
              </variable>
              <variable citdl="Object" line="1277" lineend="1277" name="MD_MONTH_POSITION">
                <variable citdl="Number" line="1277" name="value" />
                <variable citdl="String" line="1277" name="key" />
              </variable>
              <variable citdl="Object" line="1278" lineend="1278" name="MD_DAY_POSITION">
                <variable citdl="Number" line="1278" name="value" />
                <variable citdl="String" line="1278" name="key" />
              </variable>
              <variable citdl="Object" line="1279" lineend="1279" name="MDY_MONTH_POSITION">
                <variable citdl="Number" line="1279" name="value" />
                <variable citdl="String" line="1279" name="key" />
              </variable>
              <variable citdl="Object" line="1280" lineend="1280" name="MDY_DAY_POSITION">
                <variable citdl="Number" line="1280" name="value" />
                <variable citdl="String" line="1280" name="key" />
              </variable>
              <variable citdl="Object" line="1281" lineend="1281" name="MDY_YEAR_POSITION">
                <variable citdl="Number" line="1281" name="value" />
                <variable citdl="String" line="1281" name="key" />
              </variable>
              <variable citdl="Object" line="1282" lineend="1282" name="MY_LABEL_MONTH_POSITION">
                <variable citdl="Number" line="1282" name="value" />
                <variable citdl="String" line="1282" name="key" />
              </variable>
              <variable citdl="Object" line="1283" lineend="1283" name="MY_LABEL_YEAR_POSITION">
                <variable citdl="Number" line="1283" name="value" />
                <variable citdl="String" line="1283" name="key" />
              </variable>
              <variable citdl="Object" line="1284" lineend="1284" name="MY_LABEL_MONTH_SUFFIX">
                <variable citdl="String" line="1284" name="value" />
                <variable citdl="String" line="1284" name="key" />
              </variable>
              <variable citdl="Object" line="1285" lineend="1285" name="MY_LABEL_YEAR_SUFFIX">
                <variable citdl="String" line="1285" name="value" />
                <variable citdl="String" line="1285" name="key" />
              </variable>
              <variable citdl="Object" line="1286" lineend="1286" name="NAV">
                <variable line="1286" name="value" />
                <variable citdl="String" line="1286" name="key" />
              </variable>
            </variable>
            <variable attributes="private __static__ constant" citdl="Object" doc="PRIVATE STATIC CONSTANT: The set of Custom Event types supported by the Calendar" line="1297" lineend="1317" name="_EVENT_TYPES">
              <variable citdl="String" line="1298" name="BEFORE_SELECT" />
              <variable citdl="String" line="1299" name="SELECT" />
              <variable citdl="String" line="1300" name="BEFORE_DESELECT" />
              <variable citdl="String" line="1301" name="DESELECT" />
              <variable citdl="String" line="1302" name="CHANGE_PAGE" />
              <variable citdl="String" line="1303" name="BEFORE_RENDER" />
              <variable citdl="String" line="1304" name="RENDER" />
              <variable citdl="String" line="1305" name="RESET" />
              <variable citdl="String" line="1306" name="CLEAR" />
              <variable citdl="String" line="1307" name="BEFORE_HIDE" />
              <variable citdl="String" line="1308" name="HIDE" />
              <variable citdl="String" line="1309" name="BEFORE_SHOW" />
              <variable citdl="String" line="1310" name="SHOW" />
              <variable citdl="String" line="1311" name="BEFORE_HIDE_NAV" />
              <variable citdl="String" line="1312" name="HIDE_NAV" />
              <variable citdl="String" line="1313" name="BEFORE_SHOW_NAV" />
              <variable citdl="String" line="1314" name="SHOW_NAV" />
              <variable citdl="String" line="1315" name="BEFORE_RENDER_NAV" />
              <variable citdl="String" line="1316" name="RENDER_NAV" />
            </variable>
            <variable attributes="private __static__ constant" citdl="Object" doc="PRIVATE STATIC CONSTANT: The set of default style constants for the Calendar" line="1327" lineend="1360" name="_STYLES">
              <variable citdl="String" line="1328" name="CSS_ROW_HEADER" />
              <variable citdl="String" line="1329" name="CSS_ROW_FOOTER" />
              <variable citdl="String" line="1330" name="CSS_CELL" />
              <variable citdl="String" line="1331" name="CSS_CELL_SELECTOR" />
              <variable citdl="String" line="1332" name="CSS_CELL_SELECTED" />
              <variable citdl="String" line="1333" name="CSS_CELL_SELECTABLE" />
              <variable citdl="String" line="1334" name="CSS_CELL_RESTRICTED" />
              <variable citdl="String" line="1335" name="CSS_CELL_TODAY" />
              <variable citdl="String" line="1336" name="CSS_CELL_OOM" />
              <variable citdl="String" line="1337" name="CSS_CELL_OOB" />
              <variable citdl="String" line="1338" name="CSS_HEADER" />
              <variable citdl="String" line="1339" name="CSS_HEADER_TEXT" />
              <variable citdl="String" line="1340" name="CSS_BODY" />
              <variable citdl="String" line="1341" name="CSS_WEEKDAY_CELL" />
              <variable citdl="String" line="1342" name="CSS_WEEKDAY_ROW" />
              <variable citdl="String" line="1343" name="CSS_FOOTER" />
              <variable citdl="String" line="1344" name="CSS_CALENDAR" />
              <variable citdl="String" line="1345" name="CSS_SINGLE" />
              <variable citdl="String" line="1346" name="CSS_CONTAINER" />
              <variable citdl="String" line="1347" name="CSS_NAV_LEFT" />
              <variable citdl="String" line="1348" name="CSS_NAV_RIGHT" />
              <variable citdl="String" line="1349" name="CSS_NAV" />
              <variable citdl="String" line="1350" name="CSS_CLOSE" />
              <variable citdl="String" line="1351" name="CSS_CELL_TOP" />
              <variable citdl="String" line="1352" name="CSS_CELL_LEFT" />
              <variable citdl="String" line="1353" name="CSS_CELL_RIGHT" />
              <variable citdl="String" line="1354" name="CSS_CELL_BOTTOM" />
              <variable citdl="String" line="1355" name="CSS_CELL_HOVER" />
              <variable citdl="String" line="1356" name="CSS_CELL_HIGHLIGHT1" />
              <variable citdl="String" line="1357" name="CSS_CELL_HIGHLIGHT2" />
              <variable citdl="String" line="1358" name="CSS_CELL_HIGHLIGHT3" />
              <variable citdl="String" line="1359" name="CSS_CELL_HIGHLIGHT4" />
            </variable>
            <variable attributes="deprecated private" citdl="Object" doc="DEPRECATED PRIVATE: The configuration object used to set up the calendars various locale and style options." line="1371" name="Config" />
            <variable citdl="CalendarGroup" doc="The parent CalendarGroup, only to be set explicitly by the parent group" line="1378" name="parent" />
            <variable citdl="Number" doc="The index of this item in the parent group" line="1385" name="index" />
            <variable citdl="Array" doc="The collection of calendar table cells" line="1392" name="cells" />
            <variable citdl="Array" doc="The collection of calendar cell dates that is parallel to the cells collection. The array contains dates field arrays in the format of [YYYY, M, D]." line="1399" name="cellDates" />
            <variable citdl="String" doc="The id that uniquely identifies this Calendar." line="1406" name="id" />
            <variable citdl="String" doc="The unique id associated with the Calendar&apos;s container" line="1413" name="containerId" />
            <variable citdl="HTMLElement" doc="The DOM element reference that points to this calendar&apos;s container element. The calendar will be inserted into this element when the shell is rendered." line="1420" name="oDomContainer" />
            <variable citdl="Date" doc="A Date object representing today&apos;s date." line="1427" name="today" />
            <variable citdl="Array" doc="The list of render functions, along with required parameters, used to render cells." line="1434" name="renderStack" />
            <variable attributes="private" citdl="Array" doc="PRIVATE: A copy of the initial render functions created before rendering." line="1442" name="_renderStack" />
            <variable citdl="CalendarNavigator" doc="A reference to the CalendarNavigator instance created for this Calendar.&#xA;Will be null if the &quot;navigator&quot; configuration property has not been set" line="1450" name="oNavigator" />
            <variable attributes="private" citdl="Array" doc="PRIVATE: The private list of initially selected dates." line="1458" name="_selectedDates" />
            <variable citdl="Object" doc="A map of DOM event handlers to attach to cells associated with specific CSS class names" line="1465" name="domEventMap" />
            <scope doc="Protected helper used to parse Calendar constructor/init arguments.&#xA;&#xA;As of 2.4.0, Calendar supports a simpler constructor&#xA;signature. This method reconciles arguments&#xA;received in the pre 2.4.0 and 2.4.0 formats.&#xA;&#xA;**/" ilk="function" line="1480" lineend="1525" name="_parseArgs" returns="Object" signature="_parseArgs(args)">
              <variable ilk="argument" name="args" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="Object" doc="2.4.0 Constructors signatures" line="1496" lineend="1496" name="nArgs">
                <variable citdl="args[1]" line="1496" name="config" />
                <variable citdl="args[0]" line="1496" name="container" />
                <variable citdl="args[0]" line="1496" name="id" />
              </variable>
            </scope>
            <scope doc="Initializes the Calendar widget." ilk="function" line="1535" lineend="1598" name="init" signature="init(id, container, config)">
              <variable citdl="String" doc="optional The id of the table element that will represent the Calendar widget. As of 2.4.0, this argument is optional." ilk="argument" name="id" />
              <variable ilk="argument" name="container" />
              <variable citdl="Object" doc="optional The configuration object containing the initial configuration values for the Calendar." ilk="argument" name="config" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="this._parseArgs()" doc="Normalize 2.4.0, pre 2.4.0 args" line="1537" name="nArgs" />
            </scope>
            <variable citdl="YAHOO.util.Config" doc="The Config object used to hold the configuration variables for the Calendar" line="1565" name="cfg" />
            <variable citdl="Object" doc="The local object which contains the Calendar&apos;s options" line="1572" lineend="1572" name="Options" />
            <variable citdl="Object" doc="The local object which contains the Calendar&apos;s locale settings" line="1579" lineend="1579" name="Locale" />
            <scope doc="Default Config listener for the iframe property. If the iframe config property is set to true,&#xA;renders the built-in IFRAME shim if the container is relatively or absolutely positioned." ilk="function" line="1606" lineend="1639" name="configIframe" signature="configIframe(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1607" name="useIframe" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getStyle()" line="1612" name="pos" />
            </scope>
            <variable citdl="document.createElement()" line="1617" name="iframe" />
            <variable citdl="String" line="1618" name="src" />
            <scope doc="Default handler for the &quot;title&quot; property" ilk="function" line="1645" lineend="1659" name="configTitle" signature="configTitle(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1646" name="title" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="1652" name="close" />
            </scope>
            <scope doc="Default handler for the &quot;close&quot; property" ilk="function" line="1665" lineend="1680" name="configClose" signature="configClose(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="1667" name="close" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="1667" name="title" />
            </scope>
            <scope doc="Initializes Calendar&apos;s built-in CustomEvents" ilk="function" line="1686" lineend="1814" name="initEvents" signature="initEvents()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._EVENT_TYPES" line="1688" name="defEvents" />
            </scope>
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired before a selection is made" line="1694" name="beforeSelectEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when a selection is made" line="1701" name="selectEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired before a selection is made" line="1707" name="beforeDeselectEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when a selection is made" line="1714" name="deselectEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when the Calendar page is changed" line="1720" name="changePageEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired before the Calendar is rendered" line="1726" name="beforeRenderEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when the Calendar is rendered" line="1732" name="renderEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when the Calendar is reset" line="1738" name="resetEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when the Calendar is cleared" line="1744" name="clearEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired just before the Calendar is to be shown" line="1750" name="beforeShowEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired after the Calendar is shown" line="1756" name="showEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired just before the Calendar is to be hidden" line="1762" name="beforeHideEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired after the Calendar is hidden" line="1768" name="hideEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired just before the CalendarNavigator is to be shown" line="1774" name="beforeShowNavEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired after the CalendarNavigator is shown" line="1780" name="showNavEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired just before the CalendarNavigator is to be hidden" line="1786" name="beforeHideNavEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired after the CalendarNavigator is hidden" line="1792" name="hideNavEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired just before the CalendarNavigator is to be rendered" line="1798" name="beforeRenderNavEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired after the CalendarNavigator is rendered" line="1804" name="renderNavEvent" />
            <scope doc="The default event function that is attached to a date link within a calendar cell&#xA;when the calendar is rendered." ilk="function" line="1823" lineend="1881" name="doSelectCell" signature="doSelectCell(e, cal)">
              <variable citdl="DOMEvent" doc="The event" ilk="argument" name="e" />
              <variable citdl="Calendar" doc="A reference to the calendar passed by the Event utility" ilk="argument" name="cal" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="cell.id.split()[1]" line="1824" name="index" />
              <variable attributes="__local__ private" citdl="cal.cellDates[index]" line="1824" name="d" />
              <variable attributes="__local__ private" citdl="target" line="1824" name="cell" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.DateMath.getDate()" line="1824" name="date" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="1826" name="target" />
              <variable attributes="__local__ private" citdl="target.tagName.toLowerCase()" line="1827" name="tagName" />
              <variable attributes="__local__ private" citdl="Boolean" line="1828" name="defSelector" />
              <variable attributes="__local__ private" citdl="cell.getElementsByTagName()[0]" line="1856" name="link" />
              <variable attributes="__local__ private" citdl="cal.cellDates[index]" line="1864" name="cellDate" />
              <variable attributes="__local__ private" citdl="cal._indexOfSelectedFieldArray()" line="1865" name="cellDateIndex" />
            </scope>
            <scope doc="The event that is executed when the user hovers over a cell" ilk="function" line="1889" lineend="1907" name="doCellMouseOver" signature="doCellMouseOver(e, cal)">
              <variable citdl="DOMEvent" doc="The event" ilk="argument" name="e" />
              <variable citdl="Calendar" doc="A reference to the calendar passed by the Event utility" ilk="argument" name="cal" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="1890" name="target" />
            </scope>
            <scope doc="The event that is executed when the user moves the mouse out of a cell" ilk="function" line="1915" lineend="1933" name="doCellMouseOut" signature="doCellMouseOut(e, cal)">
              <variable citdl="DOMEvent" doc="The event" ilk="argument" name="e" />
              <variable citdl="Calendar" doc="A reference to the calendar passed by the Event utility" ilk="argument" name="cal" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="1916" name="target" />
            </scope>
            <scope ilk="function" line="1935" lineend="2310" name="setupConfig" signature="setupConfig()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="1937" name="defCfg" />
              <scope attributes="__local__ private" doc="PRIVATE: Refreshes the locale values used to build the Calendar." ilk="function" line="2122" lineend="2125" name="refreshLocale" signature="refreshLocale()" />
            </scope>
            <scope doc="The default handler for the &quot;pagedate&quot; property" ilk="function" line="2316" lineend="2318" name="configPageDate" signature="configPageDate(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="The default handler for the &quot;mindate&quot; property" ilk="function" line="2324" lineend="2330" name="configMinDate" signature="configMinDate(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="2325" name="val" />
            </scope>
            <scope doc="The default handler for the &quot;maxdate&quot; property" ilk="function" line="2336" lineend="2342" name="configMaxDate" signature="configMaxDate(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="2337" name="val" />
            </scope>
            <scope doc="The default handler for the &quot;selected&quot; property" ilk="function" line="2348" lineend="2360" name="configSelected" signature="configSelected(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="2349" name="selected" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.SELECTED.key" line="2350" name="cfgSelected" />
            </scope>
            <scope doc="The default handler for all configuration options properties" ilk="function" line="2366" lineend="2368" name="configOptions" signature="configOptions(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="The default handler for all configuration locale properties" ilk="function" line="2374" lineend="2380" name="configLocale" signature="configLocale(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="2375" name="defCfg" />
            </scope>
            <scope doc="The default handler for all configuration locale field length properties" ilk="function" line="2386" lineend="2428" name="configLocaleValues" signature="configLocaleValues(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="2387" name="defCfg" />
              <variable attributes="__local__ private" citdl="args[0]" line="2390" name="val" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2419" name="START_WEEKDAY" />
            </scope>
            <variable citdl="this.cfg.getProperty().concat()" line="2396" name="LOCALE_MONTHS" />
            <variable citdl="this.cfg.getProperty().concat()" line="2406" name="LOCALE_WEEKDAYS" />
            <scope doc="The default handler for the &quot;navigator&quot; property" ilk="function" line="2434" lineend="2453" name="configNavigator" signature="configNavigator(type, args, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="obj" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="2435" name="val" />
              <scope attributes="__local__ private" doc="Cleanup DOM Refs/Events before innerHTML is removed." ilk="function" line="2440" lineend="2444" name="erase" signature="erase()" />
            </scope>
            <scope doc="Defines the style constants for the Calendar" ilk="function" line="2459" lineend="2593" name="initStyles" signature="initStyles()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._STYLES" line="2461" name="defStyle" />
            </scope>
            <variable citdl="Object" line="2463" lineend="2592" name="Style">
              <variable citdl="defStyle.CSS_ROW_HEADER" doc="Style.CSS_ROW_HEADER */" line="2467" name="CSS_ROW_HEADER" />
              <variable citdl="defStyle.CSS_ROW_FOOTER" doc="Style.CSS_ROW_FOOTER */" line="2471" name="CSS_ROW_FOOTER" />
              <variable citdl="defStyle.CSS_CELL" doc="Style.CSS_CELL */" line="2475" name="CSS_CELL" />
              <variable citdl="defStyle.CSS_CELL_SELECTOR" doc="Style.CSS_CELL_SELECTOR */" line="2479" name="CSS_CELL_SELECTOR" />
              <variable citdl="defStyle.CSS_CELL_SELECTED" doc="Style.CSS_CELL_SELECTED */" line="2483" name="CSS_CELL_SELECTED" />
              <variable citdl="defStyle.CSS_CELL_SELECTABLE" doc="Style.CSS_CELL_SELECTABLE */" line="2487" name="CSS_CELL_SELECTABLE" />
              <variable citdl="defStyle.CSS_CELL_RESTRICTED" doc="Style.CSS_CELL_RESTRICTED */" line="2491" name="CSS_CELL_RESTRICTED" />
              <variable citdl="defStyle.CSS_CELL_TODAY" doc="Style.CSS_CELL_TODAY */" line="2495" name="CSS_CELL_TODAY" />
              <variable citdl="defStyle.CSS_CELL_OOM" doc="Style.CSS_CELL_OOM */" line="2499" name="CSS_CELL_OOM" />
              <variable citdl="defStyle.CSS_CELL_OOB" doc="Style.CSS_CELL_OOB */" line="2503" name="CSS_CELL_OOB" />
              <variable citdl="defStyle.CSS_HEADER" doc="Style.CSS_HEADER */" line="2507" name="CSS_HEADER" />
              <variable citdl="defStyle.CSS_HEADER_TEXT" doc="Style.CSS_HEADER_TEXT */" line="2511" name="CSS_HEADER_TEXT" />
              <variable citdl="defStyle.CSS_BODY" doc="Style.CSS_BODY */" line="2515" name="CSS_BODY" />
              <variable citdl="defStyle.CSS_WEEKDAY_CELL" doc="Style.CSS_WEEKDAY_CELL */" line="2519" name="CSS_WEEKDAY_CELL" />
              <variable citdl="defStyle.CSS_WEEKDAY_ROW" doc="Style.CSS_WEEKDAY_ROW */" line="2523" name="CSS_WEEKDAY_ROW" />
              <variable citdl="defStyle.CSS_FOOTER" doc="Style.CSS_FOOTER */" line="2527" name="CSS_FOOTER" />
              <variable citdl="defStyle.CSS_CALENDAR" doc="Style.CSS_CALENDAR */" line="2531" name="CSS_CALENDAR" />
              <variable citdl="defStyle.CSS_SINGLE" doc="Style.CSS_SINGLE */" line="2535" name="CSS_SINGLE" />
              <variable citdl="defStyle.CSS_CONTAINER" doc="Style.CSS_CONTAINER */" line="2539" name="CSS_CONTAINER" />
              <variable citdl="defStyle.CSS_NAV_LEFT" doc="Style.CSS_NAV_LEFT */" line="2543" name="CSS_NAV_LEFT" />
              <variable citdl="defStyle.CSS_NAV_RIGHT" doc="Style.CSS_NAV_RIGHT */" line="2547" name="CSS_NAV_RIGHT" />
              <variable citdl="defStyle.CSS_NAV" doc="Style.CSS_NAV */" line="2551" name="CSS_NAV" />
              <variable citdl="defStyle.CSS_CLOSE" doc="Style.CSS_CLOSE */" line="2555" name="CSS_CLOSE" />
              <variable citdl="defStyle.CSS_CELL_TOP" doc="Style.CSS_CELL_TOP */" line="2559" name="CSS_CELL_TOP" />
              <variable citdl="defStyle.CSS_CELL_LEFT" doc="Style.CSS_CELL_LEFT */" line="2563" name="CSS_CELL_LEFT" />
              <variable citdl="defStyle.CSS_CELL_RIGHT" doc="Style.CSS_CELL_RIGHT */" line="2567" name="CSS_CELL_RIGHT" />
              <variable citdl="defStyle.CSS_CELL_BOTTOM" doc="Style.CSS_CELL_BOTTOM */" line="2571" name="CSS_CELL_BOTTOM" />
              <variable citdl="defStyle.CSS_CELL_HOVER" doc="Style.CSS_CELL_HOVER */" line="2575" name="CSS_CELL_HOVER" />
              <variable citdl="defStyle.CSS_CELL_HIGHLIGHT1" doc="Style.CSS_CELL_HIGHLIGHT1 */" line="2579" name="CSS_CELL_HIGHLIGHT1" />
              <variable citdl="defStyle.CSS_CELL_HIGHLIGHT2" doc="Style.CSS_CELL_HIGHLIGHT2 */" line="2583" name="CSS_CELL_HIGHLIGHT2" />
              <variable citdl="defStyle.CSS_CELL_HIGHLIGHT3" doc="Style.CSS_CELL_HIGHLIGHT3 */" line="2587" name="CSS_CELL_HIGHLIGHT3" />
              <variable citdl="defStyle.CSS_CELL_HIGHLIGHT4" doc="Style.CSS_CELL_HIGHLIGHT4 */" line="2591" name="CSS_CELL_HIGHLIGHT4" />
            </variable>
            <scope doc="Builds the date label that will be displayed in the calendar header or&#xA;footer, depending on configuration." ilk="function" line="2601" lineend="2612" name="buildMonthLabel" returns="String" signature="buildMonthLabel()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2602" name="pageDate" />
              <variable attributes="__local__ private" citdl="this.Locale.LOCALE_MONTHS[pageDate.getMonth()]" line="2604" name="monthLabel" />
              <variable attributes="__local__ private" citdl="pageDate.getFullYear()" line="2605" name="yearLabel" />
            </scope>
            <scope doc="Builds the date digit that will be displayed in calendar cells" ilk="function" line="2620" lineend="2622" name="buildDayLabel" returns="String" signature="buildDayLabel(workingDate)">
              <variable citdl="Date" doc="The current working date" ilk="argument" name="workingDate" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Creates the title bar element and adds it to Calendar container DIV" ilk="function" line="2631" lineend="2640" name="createTitleBar" returns="tDiv" signature="createTitleBar(strTitle)">
              <variable citdl="String" doc="The title to display in the title bar" ilk="argument" name="strTitle" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getElementsByClassName()[0]" line="2632" name="tDiv" />
            </scope>
            <scope doc="Removes the title bar element from the DOM" ilk="function" line="2647" lineend="2654" name="removeTitleBar" signature="removeTitleBar()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getElementsByClassName()[0]" line="2648" name="tDiv" />
            </scope>
            <scope doc="Creates the close button HTML element and adds it to Calendar container DIV" ilk="function" line="2662" lineend="2692" name="createCloseButton" returns="lnk" signature="createCloseButton()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarGroup.CSS_2UPCLOSE" line="2666" name="cssClose" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="2666" name="Dom" />
              <variable attributes="__local__ private" citdl="String" line="2666" name="DEPR_CLOSE_PATH" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="2666" name="Event" />
              <variable attributes="__local__ private" citdl="Dom.getElementsByClassName()[0]" line="2668" name="lnk" />
              <variable attributes="__local__ private" citdl="Dom.getElementsByClassName()[0]" line="2682" name="img" />
            </scope>
            <scope doc="Removes the close button HTML element from the DOM" ilk="function" line="2699" lineend="2705" name="removeCloseButton" signature="removeCloseButton()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getElementsByClassName()[0]" line="2700" name="btn" />
            </scope>
            <scope doc="Renders the calendar header." ilk="function" line="2713" lineend="2782" name="renderHeader" returns="Array" signature="renderHeader(html)">
              <variable citdl="Array" doc="The current working HTML array" ilk="argument" name="html" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="Number" line="2714" name="colSpan" />
              <variable attributes="__local__ private" citdl="String" line="2716" name="DEPR_NAV_LEFT" />
              <variable attributes="__local__ private" citdl="String" line="2717" name="DEPR_NAV_RIGHT" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="2718" name="defCfg" />
              <variable attributes="__local__ private" citdl="Boolean" line="2733" name="renderRight" />
              <variable attributes="__local__ private" citdl="Boolean" line="2733" name="renderLeft" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2748" name="leftArrow" />
              <variable attributes="__local__ private" line="2753" name="leftStyle" />
              <variable attributes="__local__ private" citdl="this.buildMonthLabel()" line="2757" name="lbl" />
              <variable attributes="__local__ private" citdl="this.parent" line="2758" name="cal" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2765" name="rightArrow" />
              <variable attributes="__local__ private" line="2769" name="rightStyle" />
            </scope>
            <scope doc="Renders the Calendar&apos;s weekday headers." ilk="function" line="2790" lineend="2811" name="buildWeekdays" returns="Array" signature="buildWeekdays(html)">
              <variable citdl="Array" doc="The current working HTML array" ilk="argument" name="html" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="2792" name="defCfg" />
            </scope>
            <scope doc="Renders the calendar body." ilk="function" line="2820" lineend="3043" name="renderBody" returns="Array" signature="renderBody(workingDate, html)">
              <variable citdl="Date" doc="The current working Date being used for the render process" ilk="argument" name="workingDate" />
              <variable citdl="Array" doc="The current working HTML array" ilk="argument" name="html" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.DateMath" line="2825" name="DM" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar" line="2825" name="CAL" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="2825" name="D" />
              <variable attributes="__local__ private" citdl="CAL._DEFAULT_CONFIG" line="2825" name="defCfg" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2827" name="startDay" />
              <variable attributes="__local__ private" citdl="String" line="2859" name="cellPrefix" />
              <variable attributes="__local__ private" citdl="weekPrefix" line="2859" name="weekClass" />
              <variable attributes="__local__ private" citdl="this.today.getDate()" line="2859" name="todayDate" />
              <variable attributes="__local__ private" citdl="String" line="2859" name="dayPrefix" />
              <variable attributes="__local__ private" citdl="Array" line="2859" name="cellRenderers" />
              <variable attributes="__local__ private" citdl="this.today.getFullYear()" line="2859" name="todayYear" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2859" name="maxdate" />
              <variable attributes="__local__ private" citdl="String" line="2859" name="workingDayPrefix" />
              <variable attributes="__local__ private" citdl="this.today.getMonth()" line="2859" name="todayMonth" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2859" name="useDate" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2859" name="showWeekHeader" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2859" name="mindate" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2859" name="showWeekFooter" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2859" name="hideBlankWeeks" />
              <variable attributes="__local__ private" citdl="String" line="2859" name="weekPrefix" />
              <variable attributes="__local__ private" citdl="DM.getWeekNumber()" line="2859" name="weekNum" />
              <variable attributes="__local__ private" citdl="rArray[2]" line="2859" name="renderer" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="2872" name="cell" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="2872" name="tempDiv" />
              <variable attributes="__local__ private" citdl="Number" line="2872" name="i" />
              <variable attributes="__local__ private" citdl="this.parent" line="2876" name="cal" />
              <variable attributes="__local__ private" citdl="Array" line="2904" name="workingArray" />
              <variable attributes="__local__ private" citdl="rArray[1][0]" line="2922" name="year" />
              <variable attributes="__local__ private" citdl="rArray[1][1]" line="2922" name="month" />
              <variable attributes="__local__ private" citdl="this.renderStack[s]" line="2922" name="rArray" />
              <variable attributes="__local__ private" citdl="rArray[0]" line="2922" name="type" />
              <variable attributes="__local__ private" citdl="rArray[1][2]" line="2922" name="day" />
              <variable attributes="__local__ private" citdl="date1[2]" line="2954" name="d1day" />
              <variable attributes="__local__ private" citdl="DM.getDate()" line="2954" name="d2" />
              <variable attributes="__local__ private" citdl="DM.getDate()" line="2954" name="d1" />
              <variable attributes="__local__ private" citdl="rArray[1][0]" line="2954" name="date1" />
              <variable attributes="__local__ private" citdl="rArray[1][1]" line="2954" name="date2" />
              <variable attributes="__local__ private" citdl="date2[2]" line="2954" name="d2day" />
              <variable attributes="__local__ private" citdl="date1[1]" line="2954" name="d1month" />
              <variable attributes="__local__ private" citdl="date2[0]" line="2954" name="d2year" />
              <variable attributes="__local__ private" citdl="date2[1]" line="2954" name="d2month" />
              <variable attributes="__local__ private" citdl="date1[0]" line="2954" name="d1year" />
              <variable attributes="__local__ private" citdl="rArray[1][0]" line="2965" name="weekday" />
              <variable attributes="__local__ private" citdl="this.postMonthDays" line="3018" name="postDays" />
              <variable attributes="__local__ private" citdl="Math.floor()" line="3020" name="blankWeeks" />
            </scope>
            <variable citdl="workingDate.getDay()" line="2829" name="preMonthDays" />
            <variable citdl="DM.findMonthEnd().getDate()" line="2837" name="monthDays" />
            <variable citdl="CAL.DISPLAY_DAYS" line="2838" name="postMonthDays" />
            <scope doc="Renders the calendar footer. In the default implementation, there is&#xA;no footer." ilk="function" line="3052" lineend="3052" name="renderFooter" returns="Array" signature="renderFooter(html)">
              <variable citdl="Array" doc="The current working HTML array" ilk="argument" name="html" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders the calendar after it has been configured. The render() method has a specific call chain that will execute&#xA;when the method is called: renderHeader, renderBody, renderFooter.&#xA;Refer to the documentation for those methods for information on&#xA;individual render tasks." ilk="function" line="3061" lineend="3092" name="render" signature="render()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="3064" name="defCfg" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.DateMath.findMonthStart()" doc="Find starting day of the current month" line="3067" name="workingDate" />
              <variable attributes="__local__ private" citdl="Array" line="3074" name="html" />
            </scope>
            <variable citdl="Number" line="3070" name="length" />
            <variable citdl="html.join()" line="3082" name="innerHTML" />
            <scope doc="Applies the Calendar&apos;s DOM listeners to applicable elements." ilk="function" line="3098" lineend="3147" name="applyListeners" signature="applyListeners()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="this.oDomContainer" line="3099" name="root" />
              <variable attributes="__local__ private" citdl="this.parent" line="3100" name="cal" />
              <variable attributes="__local__ private" citdl="String" line="3101" name="anchor" />
              <variable attributes="__local__ private" citdl="String" line="3102" name="mousedown" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getElementsByClassName()" line="3104" name="linkLeft" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getElementsByClassName()" line="3105" name="linkRight" />
              <variable attributes="__local__ private" citdl="elements[c]" line="3122" name="el" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getElementsByClassName()" line="3122" name="elements" />
              <variable attributes="__local__ private" citdl="this.domEventMap[cls]" line="3125" name="items" />
              <variable attributes="__local__ private" citdl="items[i]" line="3132" name="item" />
            </scope>
            <variable citdl="linkLeft[0]" line="3108" name="linkLeft" />
            <variable citdl="linkRight[0]" line="3113" name="linkRight" />
            <scope ilk="function" line="3149" lineend="3176" name="applyNavListeners" signature="applyNavListeners()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="3151" name="E" />
              <variable attributes="__local__ private" citdl="this.parent" line="3153" name="calParent" />
              <variable attributes="__local__ private" citdl="this" line="3154" name="cal" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getElementsByClassName()" line="3156" name="navBtns" />
              <scope attributes="__local__ private" ilk="function" line="3160" lineend="3173" name="show" signature="show(e, obj)">
                <variable ilk="argument" name="e" />
                <variable ilk="argument" name="obj" />
                <variable attributes="__local__ private" citdl="E.getTarget()" line="3161" name="target" />
                <variable attributes="__local__ private" citdl="calParent.oNavigator" line="3166" name="navigator" />
                <variable attributes="__local__ private" citdl="cal.cfg.getProperty()" line="3168" name="pgdate" />
              </scope>
            </scope>
            <scope doc="Retrieves the Date object for the specified Calendar cell" ilk="function" line="3184" lineend="3187" name="getDateByCellId" returns="Date" signature="getDateByCellId(id)">
              <variable citdl="String" doc="The id of the cell" ilk="argument" name="id" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="this.getDateFieldsByCellId()" line="3185" name="date" />
            </scope>
            <scope doc="Retrieves the Date object for the specified Calendar cell" ilk="function" line="3195" lineend="3199" name="getDateFieldsByCellId" returns="Array" signature="getDateFieldsByCellId(id)">
              <variable citdl="String" doc="The id of the cell" ilk="argument" name="id" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Find the Calendar&apos;s cell index for a given date.&#xA;If the date is not found, the method returns -1.&#xA;&lt;p&gt;&#xA;The returned index can be used to lookup the cell HTMLElement&#xA;using the Calendar&apos;s cells array or passed to selectCell to select&#xA;cells by index.&#xA;&lt;/p&gt;&#xA;&#xA;See &lt;a href=&quot;#cells&quot;&gt;cells&lt;/a&gt;, &lt;a href=&quot;#selectCell&quot;&gt;selectCell&lt;/a&gt;." ilk="function" line="3217" lineend="3234" name="getCellIndex" returns="Number" signature="getCellIndex(date)">
              <variable citdl="Date" doc="JavaScript Date object, for which to find a cell index." ilk="argument" name="date" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="Number" line="3218" name="idx" />
              <variable attributes="__local__ private" citdl="this.cellDates" line="3223" name="dates" />
              <variable attributes="__local__ private" citdl="date.getDate()" line="3223" name="d" />
              <variable attributes="__local__ private" citdl="date.getMonth()" line="3223" name="m" />
              <variable attributes="__local__ private" citdl="date.getFullYear()" line="3223" name="y" />
              <variable attributes="__local__ private" citdl="dates[i]" line="3226" name="cellDate" />
            </scope>
            <scope doc="Renders a cell that falls before the minimum date or after the maximum date.&#xA;widget class.&#xA;*			should not be terminated" ilk="function" line="3247" lineend="3251" name="renderOutOfBoundsDate" returns="String" signature="renderOutOfBoundsDate(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders the row header for a week." ilk="function" line="3259" lineend="3262" name="renderRowHeader" returns="html" signature="renderRowHeader(weekNum, html)">
              <variable citdl="Number" doc="The week number of the current row" ilk="argument" name="weekNum" />
              <variable ilk="argument" name="html" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders the row footer for a week." ilk="function" line="3270" lineend="3273" name="renderRowFooter" returns="html" signature="renderRowFooter(weekNum, html)">
              <variable citdl="Number" doc="The week number of the current row" ilk="argument" name="weekNum" />
              <variable ilk="argument" name="html" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders a single standard calendar cell in the calendar widget table.&#xA;All logic for determining how a standard default cell will be rendered is&#xA;encapsulated in this method, and must be accounted for when extending the&#xA;widget class." ilk="function" line="3284" lineend="3286" name="renderCellDefault" signature="renderCellDefault(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Styles a selectable cell." ilk="function" line="3294" lineend="3296" name="styleCellDefault" signature="styleCellDefault(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders a single standard calendar cell using the CSS hightlight1 style" ilk="function" line="3305" lineend="3307" name="renderCellStyleHighlight1" signature="renderCellStyleHighlight1(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders a single standard calendar cell using the CSS hightlight2 style" ilk="function" line="3315" lineend="3317" name="renderCellStyleHighlight2" signature="renderCellStyleHighlight2(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders a single standard calendar cell using the CSS hightlight3 style" ilk="function" line="3325" lineend="3327" name="renderCellStyleHighlight3" signature="renderCellStyleHighlight3(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders a single standard calendar cell using the CSS hightlight4 style" ilk="function" line="3335" lineend="3337" name="renderCellStyleHighlight4" signature="renderCellStyleHighlight4(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Applies the default style used for rendering today&apos;s date to the current calendar cell" ilk="function" line="3345" lineend="3347" name="renderCellStyleToday" signature="renderCellStyleToday(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Applies the default style used for rendering selected dates to the current calendar cell&#xA;*			should not be terminated" ilk="function" line="3357" lineend="3359" name="renderCellStyleSelected" returns="String" signature="renderCellStyleSelected(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Applies the default style used for rendering dates that are not a part of the current&#xA;month (preceding or trailing the cells for the current month)&#xA;*			should not be terminated" ilk="function" line="3370" lineend="3374" name="renderCellNotThisMonth" returns="String" signature="renderCellNotThisMonth(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Renders the current calendar cell as a non-selectable &quot;black-out&quot; date using the default&#xA;restricted style.&#xA;*			should not be terminated" ilk="function" line="3385" lineend="3390" name="renderBodyCellRestricted" returns="String" signature="renderBodyCellRestricted(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Adds the designated number of months to the current calendar month, and sets the current&#xA;calendar page date to the new month." ilk="function" line="3402" lineend="3407" name="addMonths" signature="addMonths(count)">
              <variable citdl="Number" doc="The number of months to add to the current calendar" ilk="argument" name="count" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.PAGEDATE.key" line="3403" name="cfgPageDate" />
            </scope>
            <scope doc="Subtracts the designated number of months from the current calendar month, and sets the current&#xA;calendar page date to the new month." ilk="function" line="3415" lineend="3420" name="subtractMonths" signature="subtractMonths(count)">
              <variable citdl="Number" doc="The number of months to subtract from the current calendar" ilk="argument" name="count" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.PAGEDATE.key" line="3416" name="cfgPageDate" />
            </scope>
            <scope doc="Adds the designated number of years to the current calendar, and sets the current&#xA;calendar page date to the new month." ilk="function" line="3428" lineend="3433" name="addYears" signature="addYears(count)">
              <variable citdl="Number" doc="The number of years to add to the current calendar" ilk="argument" name="count" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.PAGEDATE.key" line="3429" name="cfgPageDate" />
            </scope>
            <scope doc="Subtcats the designated number of years from the current calendar, and sets the current&#xA;calendar page date to the new month." ilk="function" line="3441" lineend="3446" name="subtractYears" signature="subtractYears(count)">
              <variable citdl="Number" doc="The number of years to subtract from the current calendar" ilk="argument" name="count" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.PAGEDATE.key" line="3442" name="cfgPageDate" />
            </scope>
            <scope doc="Navigates to the next month page in the calendar widget." ilk="function" line="3452" lineend="3454" name="nextMonth" signature="nextMonth()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Navigates to the previous month page in the calendar widget." ilk="function" line="3460" lineend="3462" name="previousMonth" signature="previousMonth()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Navigates to the next year in the currently selected month in the calendar widget." ilk="function" line="3468" lineend="3470" name="nextYear" signature="nextYear()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Navigates to the previous year in the currently selected month in the calendar widget." ilk="function" line="3476" lineend="3478" name="previousYear" signature="previousYear()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Resets the calendar widget to the originally selected month and year, and&#xA;sets the calendar to the initial selection(s)." ilk="function" line="3489" lineend="3494" name="reset" signature="reset()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="3490" name="defCfg" />
            </scope>
            <scope doc="Clears the selected dates in the current calendar widget and sets the calendar&#xA;to the current month and year." ilk="function" line="3501" lineend="3506" name="clear" signature="clear()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="3502" name="defCfg" />
            </scope>
            <scope doc="Selects a date or a collection of dates on the current calendar. This method, by default,&#xA;does not call the render method explicitly. Once selection has completed, render must be&#xA;called for the changes to be reflected visually.&#xA;&#xA;Any dates which are OOB (out of bounds, not selectable) will not be selected and the array of&#xA;selected dates passed to the selectEvent will not contain OOB dates.&#xA;&#xA;If all dates are OOB, the no state change will occur; beforeSelect and select events will not be fired.&#xA;&#xA;*								individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).&#xA;*								Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).&#xA;*								This method can also take a JavaScript Date object or an array of Date objects." ilk="function" line="3525" lineend="3563" name="select" returns="Array" signature="select(date)">
              <variable citdl="Array" doc="The date string of dates to select in the current calendar. Valid formats are" ilk="argument" name="date" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="this._toFieldArray()" line="3527" name="aToBeSelected" />
              <variable attributes="__local__ private" citdl="Array" doc="Filtered array of valid dates" line="3530" name="validDates" />
              <variable attributes="__local__ private" citdl="Array" line="3531" name="selected" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.SELECTED.key" line="3532" name="cfgSelected" />
              <variable attributes="__local__ private" citdl="aToBeSelected[a]" line="3535" name="toSelect" />
            </scope>
            <scope doc="Selects a date on the current calendar by referencing the index of the cell that should be selected.&#xA;This method is used to easily select a single cell (usually with a mouse click) without having to do&#xA;a full render. The selected style is applied to the cell directly.&#xA;&#xA;If the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month&#xA;or out of bounds cells), it will not be selected and in such a case beforeSelect and select events will not be fired." ilk="function" line="3577" lineend="3609" name="selectCell" returns="Array" signature="selectCell(cellIndex)">
              <variable citdl="Number" doc="The index of the cell to select in the current calendar." ilk="argument" name="cellIndex" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="this.cells[cellIndex]" line="3579" name="cell" />
              <variable attributes="__local__ private" citdl="this.cellDates[cellIndex]" line="3580" name="cellDate" />
              <variable attributes="__local__ private" citdl="this._toDate()" line="3581" name="dCellDate" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.hasClass()" line="3583" name="selectable" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.SELECTED.key" line="3589" name="cfgSelected" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="3590" name="selected" />
              <variable attributes="__local__ private" citdl="cellDate.concat()" line="3592" name="selectDate" />
            </scope>
            <scope doc="Deselects a date or a collection of dates on the current calendar. This method, by default,&#xA;does not call the render method explicitly. Once deselection has completed, render must be&#xA;called for the changes to be reflected visually.&#xA;&#xA;The method will not attempt to deselect any dates which are OOB (out of bounds, and hence not selectable)&#xA;and the array of deselected dates passed to the deselectEvent will not contain any OOB dates.&#xA;&#xA;If all dates are OOB, beforeDeselect and deselect events will not be fired.&#xA;&#xA;*								individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).&#xA;*								Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).&#xA;*								This method can also take a JavaScript Date object or an array of Date objects." ilk="function" line="3628" lineend="3666" name="deselect" returns="Array" signature="deselect(date)">
              <variable citdl="Array" doc="The date string of dates to deselect in the current calendar. Valid formats are" ilk="argument" name="date" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="this._toFieldArray()" line="3630" name="aToBeDeselected" />
              <variable attributes="__local__ private" citdl="Array" line="3632" name="validDates" />
              <variable attributes="__local__ private" citdl="Array" line="3633" name="selected" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.SELECTED.key" line="3634" name="cfgSelected" />
              <variable attributes="__local__ private" citdl="aToBeDeselected[a]" line="3637" name="toDeselect" />
              <variable attributes="__local__ private" citdl="this._indexOfSelectedFieldArray()" line="3648" name="index" />
            </scope>
            <scope doc="Deselects a date on the current calendar by referencing the index of the cell that should be deselected.&#xA;This method is used to easily deselect a single cell (usually with a mouse click) without having to do&#xA;a full render. The selected style is removed from the cell directly.&#xA;&#xA;If the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month&#xA;or out of bounds cells), the method will not attempt to deselect it and in such a case, beforeDeselect and&#xA;deselect events will not be fired." ilk="function" line="3681" lineend="3716" name="deselectCell" returns="Array" signature="deselectCell(cellIndex)">
              <variable citdl="Number" doc="The index of the cell to deselect in the current calendar." ilk="argument" name="cellIndex" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="this.cells[cellIndex]" line="3682" name="cell" />
              <variable attributes="__local__ private" citdl="this.cellDates[cellIndex]" line="3683" name="cellDate" />
              <variable attributes="__local__ private" citdl="this._indexOfSelectedFieldArray()" line="3684" name="cellDateIndex" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.hasClass()" line="3686" name="selectable" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="3692" name="defCfg" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="3693" name="selected" />
              <variable attributes="__local__ private" citdl="this._toDate()" line="3695" name="dCellDate" />
              <variable attributes="__local__ private" citdl="cellDate.concat()" line="3696" name="selectDate" />
            </scope>
            <scope doc="Deselects all dates on the current calendar.&#xA;*						Assuming that this function executes properly, the return value should be an empty array.&#xA;*						However, the empty array is returned for the sake of being able to check the selection status&#xA;*						of the calendar." ilk="function" line="3726" lineend="3746" name="deselectAll" returns="Array" signature="deselectAll()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.SELECTED.key" line="3729" name="cfgSelected" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="3731" name="selected" />
              <variable attributes="__local__ private" citdl="selected.length" line="3732" name="count" />
              <variable attributes="__local__ private" citdl="selected.concat()" line="3733" name="sel" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Converts a date (either a JavaScript Date object, or a date string) to the internal data structure&#xA;used to represent dates: [[yyyy,mm,dd],[yyyy,mm,dd]].&#xA;*								individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).&#xA;*								Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).&#xA;*								This method can also take a JavaScript Date object or an array of Date objects." ilk="function" line="3763" lineend="3778" name="_toFieldArray" returns="Array" signature="_toFieldArray(date)">
              <variable citdl="Array" doc="The date string of dates to deselect in the current calendar. Valid formats are" ilk="argument" name="date" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="3764" name="returnDate" />
              <variable attributes="__local__ private" citdl="date[i]" line="3772" name="d" />
            </scope>
            <scope doc="Converts a date field array [yyyy,mm,dd] to a JavaScript Date object. The date field array&#xA;is the format in which dates are as provided as arguments to selectEvent and deselectEvent listeners." ilk="function" line="3788" lineend="3790" name="toDate" returns="Date" signature="toDate(dateFieldArray)">
              <variable citdl="Array" doc="The date field array to convert to a JavaScript Date." ilk="argument" name="dateFieldArray" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="deprecated private" doc="DEPRECATED PRIVATE: Converts a date field array [yyyy,mm,dd] to a JavaScript Date object." ilk="function" line="3800" lineend="3806" name="_toDate" returns="Date" signature="_toDate(dateFieldArray)">
              <variable citdl="Array" doc="The date field array to convert to a JavaScript Date." ilk="argument" name="dateFieldArray" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Converts a date field array [yyyy,mm,dd] to a JavaScript Date object." ilk="function" line="3820" lineend="3828" name="_fieldArraysAreEqual" returns="Boolean" signature="_fieldArraysAreEqual(array1, array2)">
              <variable citdl="Array" doc="The first date field array to compare" ilk="argument" name="array1" />
              <variable citdl="Array" doc="The first date field array to compare" ilk="argument" name="array2" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="3821" name="match" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Gets the index of a date field array [yyyy,mm,dd] in the current list of selected dates.&#xA;*								-1 will be returned if the date is not found." ilk="function" line="3838" lineend="3851" name="_indexOfSelectedFieldArray" returns="Number" signature="_indexOfSelectedFieldArray(find)">
              <variable citdl="Array" doc="The date field array to search for" ilk="argument" name="find" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="Number" line="3839" name="selected" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="3840" name="seldates" />
              <variable attributes="__local__ private" citdl="seldates[s]" line="3843" name="sArray" />
            </scope>
            <scope doc="Determines whether a given date is OOM (out of month)." ilk="function" line="3859" lineend="3861" name="isDateOOM" returns="Boolean" signature="isDateOOM(date)">
              <variable citdl="Date" doc="The JavaScript Date object for which to check the OOM status" ilk="argument" name="date" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Determines whether a given date is OOB (out of bounds - less than the mindate or more than the maxdate)." ilk="function" line="3870" lineend="3888" name="isDateOOB" returns="Boolean" signature="isDateOOB(date)">
              <variable citdl="Date" doc="The JavaScript Date object for which to check the OOB status" ilk="argument" name="date" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="3871" name="defCfg" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="3873" name="minDate" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="3874" name="maxDate" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.DateMath" line="3875" name="dm" />
              <variable attributes="__local__ private" citdl="Date" line="3884" name="clearedDate" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Parses a pagedate configuration property value. The value can either be specified as a string of form &quot;mm/yyyy&quot; or a Date object&#xA;and is parsed into a Date object normalized to the first day of the month. If no value is passed in, the month and year from today&apos;s date are used to create the Date object" ilk="function" line="3898" lineend="3918" name="_parsePageDate" returns="Date" signature="_parsePageDate(date)">
              <variable citdl="{Date" doc="Pagedate value which needs to be parsed" ilk="argument" name="date" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.DateMath.findMonthStart()" line="3899" name="parsedDate" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG" line="3901" name="defCfg" />
              <variable attributes="__local__ private" citdl="date.split()" line="3907" name="aMonthYear" />
              <variable attributes="__local__ private" citdl="parseInt()" line="3907" name="month" />
              <variable attributes="__local__ private" citdl="parseInt()" line="3907" name="year" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event executed before a date is selected in the calendar widget." ilk="function" line="3928" lineend="3938" name="onBeforeSelect" signature="onBeforeSelect()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event executed when a date is selected in the calendar widget." ilk="function" line="3945" lineend="3945" name="onSelect" signature="onSelect(selected)">
              <variable citdl="Array" doc="An array of date field arrays representing which date or dates were selected. Example: [ [2006,8,6],[2006,8,7],[2006,8,8] ]" ilk="argument" name="selected" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event executed before a date is deselected in the calendar widget." ilk="function" line="3951" lineend="3951" name="onBeforeDeselect" signature="onBeforeDeselect()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event executed when a date is deselected in the calendar widget." ilk="function" line="3958" lineend="3958" name="onDeselect" signature="onDeselect(deselected)">
              <variable ilk="argument" name="deselected" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event executed when the user navigates to a different calendar page." ilk="function" line="3964" lineend="3966" name="onChangePage" signature="onChangePage()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event executed when the calendar widget is rendered." ilk="function" line="3972" lineend="3972" name="onRender" signature="onRender()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event executed when the calendar widget is reset to its original state." ilk="function" line="3978" lineend="3978" name="onReset" signature="onReset()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Event executed when the calendar widget is completely cleared to the current month with no selections." ilk="function" line="3984" lineend="3984" name="onClear" signature="onClear()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope citdl="Boolean" doc="Validates the calendar widget. This method has no default implementation&#xA;and must be extended by subclassing the widget." ilk="function" line="3993" lineend="3993" name="validate" returns="Boolean" signature="validate()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope attributes="private" citdl="Array" doc="PRIVATE: Converts a date string to a date field array" ilk="function" line="4006" lineend="4023" name="_parseDate" returns="rArray" signature="_parseDate(sDate)">
              <variable citdl="String" doc="Date string. Valid formats are mm/dd and mm/dd/yyyy." ilk="argument" name="sDate" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="sDate.split()" line="4007" name="aDate" />
              <variable attributes="__local__ private" citdl="Array" line="4008" name="rArray" />
            </scope>
            <scope attributes="private" citdl="Array" doc="PRIVATE: Converts a multi or single-date string to an array of date field arrays" ilk="function" line="4032" lineend="4056" name="_parseDates" returns="aReturn" signature="_parseDates(sDates)">
              <variable citdl="String" doc="Date string with one or more comma-delimited dates. Valid formats are mm/dd, mm/dd/yyyy, mm/dd/yyyy-mm/dd/yyyy" ilk="argument" name="sDates" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="4033" name="aReturn" />
              <variable attributes="__local__ private" citdl="sDates.split()" line="4035" name="aDates" />
              <variable attributes="__local__ private" citdl="aDates[d]" line="4038" name="sDate" />
              <variable attributes="__local__ private" citdl="sDate.split()" doc="This is a range" line="4042" name="aRange" />
              <variable attributes="__local__ private" citdl="this._parseDate()" line="4044" name="dateStart" />
              <variable attributes="__local__ private" citdl="this._parseDate()" line="4045" name="dateEnd" />
              <variable attributes="__local__ private" citdl="this._parseRange()" line="4047" name="fullRange" />
              <variable attributes="__local__ private" citdl="this._parseDate()" doc="This is not a range" line="4051" name="aDate" />
            </scope>
            <scope attributes="private" citdl="Array" doc="PRIVATE: Converts a date range to the full list of included dates" ilk="function" line="4066" lineend="4077" name="_parseRange" returns="results" signature="_parseRange(startDate, endDate)">
              <variable citdl="Array" doc="Date field array representing the first date in the range" ilk="argument" name="startDate" />
              <variable citdl="Array" doc="Date field array representing the last date in the range" ilk="argument" name="endDate" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.DateMath.add()" line="4067" name="dCurrent" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.DateMath.getDate()" line="4068" name="dEnd" />
              <variable attributes="__local__ private" citdl="Array" line="4070" name="results" />
            </scope>
            <scope doc="Resets the render stack of the current calendar to its original pre-render value." ilk="function" line="4086" lineend="4088" name="resetRenderers" signature="resetRenderers()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Removes all custom renderers added to the Calendar through the addRenderer, addMonthRenderer and&#xA;addWeekdayRenderer methods. Calendar&apos;s render method needs to be called after removing renderers&#xA;to re-render the Calendar without custom renderers applied." ilk="function" line="4095" lineend="4098" name="removeRenderers" signature="removeRenderers()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Clears the inner HTML, CSS class and style information from the specified cell." ilk="function" line="4105" lineend="4108" name="clearElement" signature="clearElement(cell)">
              <variable citdl="HTMLTableCellElement" doc="The cell to clear" ilk="argument" name="cell" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Adds a renderer to the render stack. The function reference passed to this method will be executed&#xA;when a date cell matches the conditions specified in the date string for this renderer.&#xA;*									include date (12/24/2005), month/day (12/24), and range (12/1/2004-1/1/2005)" ilk="function" line="4118" lineend="4133" name="addRenderer" signature="addRenderer(sDates, fnRender)">
              <variable citdl="String" doc="A date string to associate with the specified renderer. Valid formats" ilk="argument" name="sDates" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="this._parseDates()" line="4119" name="aDates" />
              <variable attributes="__local__ private" citdl="aDates[i]" line="4121" name="aDate" />
            </scope>
            <scope attributes="private" doc="PRIVATE: The private method used for adding cell renderers to the local render stack.&#xA;This method is called by other methods that set the renderer type prior to the method call.&#xA;*									Values are YAHOO.widget.Calendar.DATE, YAHOO.widget.Calendar.MONTH_DAY, YAHOO.widget.Calendar.WEEKDAY,&#xA;*									YAHOO.widget.Calendar.RANGE, YAHOO.widget.Calendar.MONTH&#xA;*									on the renderer type" ilk="function" line="4147" lineend="4151" name="_addRenderer" signature="_addRenderer(type, aDates, fnRender)">
              <variable citdl="String" doc="The type string that indicates the type of date renderer being added." ilk="argument" name="type" />
              <variable citdl="Array" doc="An array of dates used to construct the renderer. The format varies based" ilk="argument" name="aDates" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="4148" name="add" />
            </scope>
            <scope doc="Adds a month to the render stack. The function reference passed to this method will be executed&#xA;when a date cell matches the month passed to this method." ilk="function" line="4160" lineend="4162" name="addMonthRenderer" signature="addMonthRenderer(month, fnRender)">
              <variable citdl="Number" doc="The month (1-12) to associate with this renderer" ilk="argument" name="month" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Adds a weekday to the render stack. The function reference passed to this method will be executed&#xA;when a date cell matches the weekday passed to this method." ilk="function" line="4171" lineend="4173" name="addWeekdayRenderer" signature="addWeekdayRenderer(weekday, fnRender)">
              <variable citdl="Number" doc="The weekday (Sunday = 1, Monday = 2 ... Saturday = 7) to associate with this renderer" ilk="argument" name="weekday" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Removes all styles from all body cells in the current calendar table." ilk="function" line="4184" lineend="4188" name="clearAllBodyCellStyles" signature="clearAllBodyCellStyles(style)">
              <variable citdl="style" doc="The CSS class name to remove from all calendar body cells" ilk="argument" name="style" />
              <variable citdl="Calendar" name="this" />
            </scope>
            <scope doc="Sets the calendar&apos;s month explicitly" ilk="function" line="4198" lineend="4203" name="setMonth" signature="setMonth(month)">
              <variable citdl="Number" doc="The numeric month, from 0 (January) to 11 (December)" ilk="argument" name="month" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.PAGEDATE.key" line="4199" name="cfgPageDate" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="4200" name="current" />
            </scope>
            <scope doc="Sets the calendar&apos;s year explicitly." ilk="function" line="4210" lineend="4215" name="setYear" signature="setYear(year)">
              <variable citdl="Number" doc="The numeric 4-digit year" ilk="argument" name="year" />
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._DEFAULT_CONFIG.PAGEDATE.key" line="4211" name="cfgPageDate" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="4212" name="current" />
            </scope>
            <scope doc="Gets the list of currently selected dates from the calendar." ilk="function" line="4222" lineend="4235" name="getSelectedDates" returns="Array" signature="getSelectedDates()">
              <variable citdl="Calendar" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="4223" name="returnDates" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="4224" name="selected" />
              <variable attributes="__local__ private" citdl="selected[d]" line="4227" name="dateArray" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.DateMath.getDate()" line="4229" name="date" />
            </scope>
            <scope doc="Hides the Calendar&apos;s outer container from view." ilk="function" line="4243" lineend="4248" name="hide" signature="hide()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <variable citdl="String" line="4245" name="display" />
            <scope doc="Shows the Calendar&apos;s outer container." ilk="function" line="4254" lineend="4259" name="show" signature="show()">
              <variable citdl="Calendar" name="this" />
            </scope>
            <variable attributes="deprecated" citdl="String" doc="DEPRECATED: Returns a string representing the current browser." line="4283" name="browser" />
            <scope doc="Returns a string representation of the object." ilk="function" line="4289" lineend="4291" name="toString" returns="String" signature="toString()">
              <variable citdl="Calendar" name="this" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.util.DDProxy" ilk="class" line="1237" lineend="1254" name="ColumnDD">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: ColumnDD subclasses DragDrop to support rearrangeable Columns." ilk="function" line="1237" lineend="1254" name="ColumnDD" signature="ColumnDD(oDataTable, oColumn, elTh, elTarget)">
              <variable citdl="YAHOO.widget.DataTable" doc="DataTable instance." ilk="argument" name="oDataTable" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="HTMLElement" doc="TH element reference." ilk="argument" name="elTh" />
              <variable citdl="HTMLElement" doc="Drag target element." ilk="argument" name="elTarget" />
              <variable citdl="ColumnDD" name="this" />
            </scope>
            <variable citdl="oDataTable" line="1239" name="datatable" />
            <variable citdl="oDataTable.getTheadEl().parentNode" line="1240" name="table" />
            <variable citdl="oColumn" line="1241" name="column" />
            <variable citdl="elTh" line="1242" name="headCell" />
            <variable citdl="elTarget" line="1243" name="pointer" />
            <variable citdl="Object" doc="Needed for DDProxy" line="1247" lineend="1247" name="invalidHandleTypes" />
            <scope ilk="function" line="1258" lineend="1280" name="initConstraints" signature="initConstraints()">
              <variable attributes="__local__ private" citdl="this.getEl()" doc="Set right to right minus x minus width" line="1271" name="el" />
              <variable attributes="__local__ private" doc="Set right to right minus x minus width" line="1271" name="right" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getRegion()" doc="Set right to right minus x minus width" line="1271" name="region" />
              <variable attributes="__local__ private" citdl="parseInt()" doc="Set right to right minus x minus width" line="1271" name="height" />
              <variable attributes="__local__ private" citdl="parseInt()" doc="Set right to right minus x minus width" line="1271" name="width" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getXY()" doc="Set right to right minus x minus width" line="1271" name="xy" />
              <variable attributes="__local__ private" doc="Set right to right minus x minus width" line="1271" name="left" />
            </scope>
            <scope ilk="function" line="1281" lineend="1294" name="_resizeProxy" signature="_resizeProxy()">
              <variable attributes="__local__ private" citdl="this.getEl()" line="1284" name="el" />
              <variable attributes="__local__ private" citdl="this.getDragEl()" line="1284" name="dragEl" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getXY()" line="1288" name="xy" />
            </scope>
            <scope ilk="function" line="1295" lineend="1298" name="onMouseDown" signature="onMouseDown()" />
            <scope ilk="function" line="1299" lineend="1306" name="clickValidator" signature="clickValidator(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="1301" name="target" />
            </scope>
            <scope ilk="function" line="1307" lineend="1337" name="onDragOver" signature="onDragOver(ev, id)">
              <variable ilk="argument" name="ev" />
              <variable ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="this.datatable.getColumn()" doc="Validate target" line="1309" name="target" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getPageX()" line="1316" name="mouseX" />
              <variable attributes="__local__ private" citdl="targetIndex" line="1316" name="newIndex" />
              <variable attributes="__local__ private" citdl="this.column.getTreeIndex()" line="1316" name="currentIndex" />
              <variable attributes="__local__ private" citdl="targetX" line="1316" name="midX" />
              <variable attributes="__local__ private" citdl="target.getTreeIndex()" line="1316" name="targetIndex" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getX()" line="1316" name="targetX" />
              <variable attributes="__local__ private" citdl="parseInt()" line="1322" name="thisWidth" />
            </scope>
            <variable citdl="newIndex" line="1335" name="newIndex" />
            <scope ilk="function" line="1338" lineend="1350" name="onDragDrop" signature="onDragDrop()">
              <variable attributes="__local__ private" citdl="this.datatable" line="1340" name="oDataTable" />
              <variable attributes="__local__ private" citdl="oDataTable._oColumnSet.getDefinitions()" line="1342" name="aColumnDefs" />
              <variable attributes="__local__ private" citdl="aColumnDefs.splice()[0]" line="1343" name="oColumn" />
            </scope>
            <scope ilk="function" line="1351" lineend="1354" name="endDrag" signature="endDrag()" />
          </scope>
          <scope classrefs="YAHOO.widget.Chart" ilk="class" line="1328" lineend="1330" name="PieChart">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: PieChart class for the YUI Charts widget." ilk="function" line="1328" lineend="1330" name="PieChart" signature="PieChart(containerId, dataSource, attributes)">
              <variable citdl="HTMLElement" doc="Container element for the Flash Player instance." ilk="argument" name="containerId" />
              <variable citdl="YAHOO.util.DataSource" doc="DataSource instance." ilk="argument" name="dataSource" />
              <variable citdl="Object" doc="(optional) Object literal of configuration values." ilk="argument" name="attributes" />
              <variable citdl="PieChart" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Initializes the attributes." ilk="function" line="1341" lineend="1375" name="_initAttributes" signature="_initAttributes(attributes)">
              <variable ilk="argument" name="attributes" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Getter for the dataField attribute." ilk="function" line="1384" lineend="1386" name="_getDataField" returns="this._swf.getDataField()" signature="_getDataField()" />
            <scope attributes="private" doc="PRIVATE: Setter for the dataField attribute." ilk="function" line="1395" lineend="1397" name="_setDataField" signature="_setDataField(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Getter for the categoryField attribute." ilk="function" line="1406" lineend="1408" name="_getCategoryField" returns="this._swf.getCategoryField()" signature="_getCategoryField()" />
            <scope attributes="private" doc="PRIVATE: Setter for the categoryField attribute." ilk="function" line="1417" lineend="1419" name="_setCategoryField" signature="_setCategoryField(value)">
              <variable ilk="argument" name="value" />
            </scope>
          </scope>
          <scope ilk="class" line="1386" lineend="1844" name="DualSlider">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A slider with two thumbs, one that represents the min value and&#xA;the other the max.  Actually a composition of two sliders, both with&#xA;the same background.  The constraints for each slider are adjusted&#xA;dynamically so that the min value of the max slider is equal or greater&#xA;to the current value of the min slider, and the max value of the min&#xA;slider is the current value of the max slider.&#xA;Constructor assumes both thumbs are positioned absolutely at the 0 mark on&#xA;the background." ilk="function" line="1386" lineend="1509" name="DualSlider" signature="DualSlider(minSlider, maxSlider, range, initVals)">
              <variable citdl="Slider" doc="The Slider instance used for the min value thumb" ilk="argument" name="minSlider" />
              <variable citdl="Slider" doc="The Slider instance used for the max value thumb" ilk="argument" name="maxSlider" />
              <variable citdl="Number" doc="The number of pixels the thumbs may move within" ilk="argument" name="range" />
              <variable citdl="Array" doc="(optional) [min,max] Initial thumb placement" ilk="argument" name="initVals" />
              <variable citdl="DualSlider" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.lang" line="1389" name="lang" />
              <variable attributes="__local__ private" citdl="this" line="1389" name="self" />
              <variable attributes="__local__ private" citdl="Object" line="1431" lineend="1431" name="ready">
                <variable citdl="Boolean" line="1431" name="max" />
                <variable citdl="Boolean" line="1431" name="min" />
              </variable>
              <variable citdl="Object" line="1433" name="minSlider">
                <variable citdl="Object" line="1433" name="thumb">
                  <scope ilk="function" line="1433" lineend="1442" name="onAvailable" signature="onAvailable()">
                    <variable citdl="thumb" name="this" />
                    <variable citdl="Object" line="1435" name="ready">
                      <variable citdl="Boolean" line="1435" name="min" />
                    </variable>
                  </scope>
                </variable>
                <scope doc="dispatch mousedowns to the active slider" ilk="function" line="1455" lineend="1457" name="onMouseDown" signature="onMouseDown(e)">
                  <variable ilk="argument" name="e" />
                  <variable citdl="minSlider" name="this" />
                </scope>
              </variable>
              <variable citdl="Object" line="1443" name="maxSlider">
                <variable citdl="Object" line="1443" name="thumb">
                  <scope ilk="function" line="1443" lineend="1452" name="onAvailable" signature="onAvailable()">
                    <variable citdl="thumb" name="this" />
                    <variable citdl="Object" line="1445" name="ready">
                      <variable citdl="Boolean" line="1445" name="max" />
                    </variable>
                  </scope>
                </variable>
                <scope doc="they share a background" ilk="function" line="1461" lineend="1463" name="onMouseDown" signature="onMouseDown(e)">
                  <variable ilk="argument" name="e" />
                  <variable citdl="maxSlider" name="this" />
                </scope>
                <scope doc="follows the drag" ilk="function" line="1468" lineend="1470" name="onDrag" signature="onDrag(e)">
                  <variable ilk="argument" name="e" />
                  <variable citdl="maxSlider" name="this" />
                </scope>
              </variable>
            </scope>
            <variable citdl="Slider" doc="A slider instance that keeps track of the lower value of the range.&#xA;&lt;strong&gt;read only&lt;/strong&gt;" line="1397" name="minSlider" />
            <variable citdl="Slider" doc="A slider instance that keeps track of the upper value of the range.&#xA;&lt;strong&gt;read only&lt;/strong&gt;" line="1405" name="maxSlider" />
            <variable citdl="Slider" doc="The currently active slider (min or max). &lt;strong&gt;read only&lt;/strong&gt;" line="1412" name="activeSlider" />
            <variable citdl="Boolean" doc="Is the DualSlider oriented horizontally or vertically?&#xA;&lt;strong&gt;read only&lt;/strong&gt;" line="1420" name="isHoriz" />
            <variable citdl="Number" doc="The current value of the min thumb. &lt;strong&gt;read only&lt;/strong&gt;." line="1518" name="minVal" />
            <variable citdl="Number" doc="The current value of the max thumb. &lt;strong&gt;read only&lt;/strong&gt;." line="1525" name="maxVal" />
            <variable citdl="Number" doc="Pixel distance to maintain between thumbs." line="1533" name="minRange" />
            <scope attributes="private" doc="PRIVATE: Executed when one of the sliders fires the slideStart event" ilk="function" line="1540" lineend="1542" name="_handleSlideStart" signature="_handleSlideStart(data, slider)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="slider" />
              <variable citdl="DualSlider" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Executed when one of the sliders fires the slideEnd event" ilk="function" line="1549" lineend="1551" name="_handleSlideEnd" signature="_handleSlideEnd(data, slider)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="slider" />
              <variable citdl="DualSlider" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Overrides the onDrag method for both sliders" ilk="function" line="1558" lineend="1560" name="_handleDrag" signature="_handleDrag(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DualSlider" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Executed when the min slider fires the change event" ilk="function" line="1567" lineend="1570" name="_handleMinChange" signature="_handleMinChange()">
              <variable citdl="DualSlider" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Executed when the max slider fires the change event" ilk="function" line="1577" lineend="1580" name="_handleMaxChange" signature="_handleMaxChange()">
              <variable citdl="DualSlider" name="this" />
            </scope>
            <scope doc="Sets the min and max thumbs to new values." ilk="function" line="1594" lineend="1643" name="setValues" signature="setValues(min, max, skipAnim, force, silent)">
              <variable citdl="Number" doc="Pixel offset to assign to the min thumb" ilk="argument" name="min" />
              <variable citdl="Number" doc="Pixel offset to assign to the max thumb" ilk="argument" name="max" />
              <variable citdl="Boolean" doc="(optional) Set to true to skip thumb animation.&#xA;Default false" ilk="argument" name="skipAnim" />
              <variable citdl="Boolean" doc="(optional) ignore the locked setting and set&#xA;value anyway. Default false" ilk="argument" name="force" />
              <variable citdl="Boolean" doc="(optional) Set to true to skip firing change&#xA;events.  Default false" ilk="argument" name="silent" />
              <variable citdl="DualSlider" name="this" />
              <variable attributes="__local__ private" citdl="this.maxSlider" line="1600" name="maxs" />
              <variable attributes="__local__ private" citdl="this" line="1600" name="self" />
              <variable attributes="__local__ private" citdl="maxs.thumb" line="1600" name="maxt" />
              <variable attributes="__local__ private" citdl="Object" line="1600" lineend="1600" name="done">
                <variable citdl="Boolean" line="1600" name="max" />
                <variable citdl="Boolean" line="1600" name="min" />
              </variable>
              <variable attributes="__local__ private" citdl="this.minSlider" line="1600" name="mins" />
              <variable attributes="__local__ private" citdl="mins.thumb" line="1600" name="mint" />
            </scope>
            <scope doc="Set the min thumb position to a new value." ilk="function" line="1656" lineend="1672" name="setMinValue" signature="setMinValue(min, skipAnim, force, silent)">
              <variable citdl="Number" doc="Pixel offset for min thumb" ilk="argument" name="min" />
              <variable citdl="Boolean" doc="(optional) Set to true to skip thumb animation.&#xA;Default false" ilk="argument" name="skipAnim" />
              <variable citdl="Boolean" doc="(optional) ignore the locked setting and set&#xA;value anyway. Default false" ilk="argument" name="force" />
              <variable citdl="Boolean" doc="(optional) Set to true to skip firing change&#xA;events.  Default false" ilk="argument" name="silent" />
              <variable citdl="DualSlider" name="this" />
              <variable attributes="__local__ private" citdl="this.minSlider" line="1657" name="mins" />
              <variable attributes="__local__ private" citdl="this" doc="until after the slide operation is done" line="1663" name="self" />
            </scope>
            <scope doc="Set the max thumb position to a new value." ilk="function" line="1685" lineend="1701" name="setMaxValue" signature="setMaxValue(max, skipAnim, force, silent)">
              <variable citdl="Number" doc="Pixel offset for max thumb" ilk="argument" name="max" />
              <variable citdl="Boolean" doc="(optional) Set to true to skip thumb animation.&#xA;Default false" ilk="argument" name="skipAnim" />
              <variable citdl="Boolean" doc="(optional) ignore the locked setting and set&#xA;value anyway. Default false" ilk="argument" name="force" />
              <variable citdl="Boolean" doc="(optional) Set to true to skip firing change&#xA;events.  Default false" ilk="argument" name="silent" />
              <variable citdl="DualSlider" name="this" />
              <variable attributes="__local__ private" citdl="this.maxSlider" line="1686" name="maxs" />
              <variable attributes="__local__ private" citdl="this" doc="until after the slide operation is done" line="1692" name="self" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Executed when one of the sliders is moved" ilk="function" line="1710" lineend="1750" name="updateValue" signature="updateValue(silent)">
              <variable citdl="Boolean" doc="(optional) Set to true to skip firing change&#xA;events.  Default false" ilk="argument" name="silent" />
              <variable citdl="DualSlider" name="this" />
              <variable attributes="__local__ private" citdl="this.minSlider.getValue()" line="1713" name="min" />
              <variable attributes="__local__ private" citdl="this.maxSlider.getValue()" line="1713" name="max" />
              <variable attributes="__local__ private" citdl="Boolean" line="1713" name="changed" />
              <variable attributes="__local__ private" citdl="this.minSlider.thumb" line="1718" name="mint" />
              <variable attributes="__local__ private" citdl="this.maxSlider.thumb" line="1719" name="maxt" />
              <variable attributes="__local__ private" citdl="this.minSlider.thumbCenterPoint.x" line="1721" name="thumbInnerWidth" />
              <variable citdl="Object" line="1722" name="this">
                <variable citdl="Object" line="1722" name="maxSlider">
                  <variable citdl="Object" line="1722" name="thumbCenterPoint">
                    <variable line="1722" name="x" />
                  </variable>
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="Math.max()" doc="negative minRanges." line="1727" name="minConstraint" />
              <variable attributes="__local__ private" citdl="Math.min()" line="1728" name="maxConstraint" />
            </scope>
            <scope attributes="private" doc="PRIVATE: A background click will move the slider thumb nearest to the click.&#xA;Override if you need different behavior." ilk="function" line="1759" lineend="1782" name="selectActiveSlider" signature="selectActiveSlider(e)">
              <variable citdl="Event" doc="the mousedown event" ilk="argument" name="e" />
              <variable citdl="DualSlider" name="this" />
              <variable attributes="__local__ private" citdl="this.maxSlider.getValue()" line="1762" name="max" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getPageX()" line="1762" name="d" />
              <variable attributes="__local__ private" citdl="this.minSlider.getValue()" line="1762" name="min" />
              <variable citdl="Object" line="1766" name="this">
                <variable citdl="Object" line="1766" name="minSlider">
                  <variable citdl="Object" line="1766" name="thumbCenterPoint">
                    <variable line="1766" name="x" />
                    <variable line="1769" name="y" />
                  </variable>
                </variable>
              </variable>
            </scope>
            <scope attributes="private" doc="PRIVATE: Overrides the onMouseDown for both slider, only moving the active slider" ilk="function" line="1789" lineend="1792" name="_handleMouseDown" signature="_handleMouseDown(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DualSlider" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Schedule an event callback that will execute once, then unsubscribe&#xA;itself." ilk="function" line="1803" lineend="1810" name="_oneTimeCallback" signature="_oneTimeCallback(o, evt, fn)">
              <variable citdl="EventProvider" doc="Object to attach the event to" ilk="argument" name="o" />
              <variable citdl="String" doc="Name of the event" ilk="argument" name="evt" />
              <variable citdl="Function" doc="function to execute once" ilk="argument" name="fn" />
              <variable citdl="DualSlider" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Clean up the slideEnd event subscribers array, since each one-time&#xA;callback will be replaced in the event&apos;s subscribers property with&#xA;null.  This will cause memory bloat and loss of performance." ilk="function" line="1821" lineend="1842" name="_cleanEvent" signature="_cleanEvent(o, evt)">
              <variable citdl="EventProvider" doc="object housing the CustomEvent" ilk="argument" name="o" />
              <variable citdl="String" doc="name of the CustomEvent" ilk="argument" name="evt" />
              <variable citdl="DualSlider" name="this" />
              <variable attributes="__local__ private" line="1823" name="i" />
              <variable attributes="__local__ private" line="1823" name="len" />
              <variable attributes="__local__ private" citdl="o.__yui_events[i]" line="1823" name="ce" />
              <variable attributes="__local__ private" citdl="ce.subscribers" line="1833" name="subs" />
              <variable attributes="__local__ private" citdl="Number" line="1833" name="j" />
              <variable attributes="__local__ private" citdl="Array" line="1833" name="newSubs" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.widget.Chart" ilk="class" line="1435" lineend="1437" name="CartesianChart">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: CartesianChart class for the YUI Charts widget." ilk="function" line="1435" lineend="1437" name="CartesianChart" signature="CartesianChart(type, containerId, dataSource, attributes)">
              <variable citdl="String" doc="The char type. May be &quot;line&quot;, &quot;column&quot;, or &quot;bar&quot;" ilk="argument" name="type" />
              <variable citdl="HTMLElement" doc="Container element for the Flash Player instance." ilk="argument" name="containerId" />
              <variable citdl="YAHOO.util.DataSource" doc="DataSource instance." ilk="argument" name="dataSource" />
              <variable citdl="Object" doc="(optional) Object literal of configuration values." ilk="argument" name="attributes" />
              <variable citdl="CartesianChart" name="this" />
            </scope>
            <variable attributes="private" citdl="String" doc="PRIVATE: Stores a reference to the xAxis labelFunction created by&#xA;YAHOO.widget.FlashAdapter.createProxyFunction()" line="1448" name="_xAxisLabelFunction" />
            <variable attributes="private" citdl="String" doc="PRIVATE: Stores a reference to the yAxis labelFunction created by&#xA;YAHOO.widget.FlashAdapter.createProxyFunction()" line="1457" name="_yAxisLabelFunction" />
            <scope ilk="function" line="1460" lineend="1476" name="destroy" signature="destroy()" />
            <scope attributes="private" doc="PRIVATE: Initializes the attributes." ilk="function" line="1485" lineend="1539" name="_initAttributes" signature="_initAttributes(attributes)">
              <variable ilk="argument" name="attributes" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Getter for the xField attribute." ilk="function" line="1548" lineend="1550" name="_getXField" returns="this._swf.getHorizontalField()" signature="_getXField()" />
            <scope attributes="private" doc="PRIVATE: Setter for the xField attribute." ilk="function" line="1559" lineend="1561" name="_setXField" signature="_setXField(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Getter for the yField attribute." ilk="function" line="1570" lineend="1572" name="_getYField" returns="this._swf.getVerticalField()" signature="_getYField()" />
            <scope attributes="private" doc="PRIVATE: Setter for the yField attribute." ilk="function" line="1581" lineend="1583" name="_setYField" signature="_setYField(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Setter for the xAxis attribute." ilk="function" line="1592" lineend="1604" name="_setXAxis" signature="_setXAxis(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Getter for the yAxis attribute." ilk="function" line="1613" lineend="1625" name="_setYAxis" signature="_setYAxis(value)">
              <variable ilk="argument" name="value" />
            </scope>
          </scope>
          <scope ilk="class" line="1488" lineend="2119" name="RecordSet">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A RecordSet defines and manages a set of Records." ilk="function" line="1488" lineend="1594" name="RecordSet" signature="RecordSet(data)">
              <variable citdl="{Object" doc="|| Object[]} An object literal or an array of data." ilk="argument" name="data" />
              <variable citdl="RecordSet" name="this" />
            </scope>
            <variable citdl="String" doc="Internal variables" line="1490" name="_sId" />
            <variable citdl="Array" line="1492" name="_records" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Internal class variable to name multiple Recordset instances." line="1604" name="_nCount" />
            <scope attributes="deprecated private" citdl="Number" doc="DEPRECATED PRIVATE: Internal counter of how many Records are in the RecordSet.&#xA;&#xA;*///_length : null,&#xA;/////////////////////////////////////////////////////////////////////////////&#xA;// Private methods&#xA;/////////////////////////////////////////////////////////////////////////////&#xA;/**" ilk="function" line="1648" lineend="1661" name="_addRecord" returns="YAHOO.widget.Record" signature="_addRecord(oData, index)">
              <variable citdl="Object" doc="An object literal of data." ilk="argument" name="oData" />
              <variable citdl="Number" doc="(optional) Position index." ilk="argument" name="index" />
              <variable citdl="RecordSet" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Record" line="1649" name="oRecord" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Sets/replaces one Record to the RecordSet at the given index.  Existing&#xA;Records with higher indexes are not shifted.  If no index specified, the&#xA;Record is added to the end of the RecordSet." ilk="function" line="1674" lineend="1692" name="_setRecord" returns="YAHOO.widget.Record" signature="_setRecord(oData, index)">
              <variable citdl="Object" doc="An object literal of data." ilk="argument" name="oData" />
              <variable citdl="Number" doc="(optional) Position index." ilk="argument" name="index" />
              <variable citdl="RecordSet" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Deletes Records from the RecordSet at the given index. If range is null,&#xA;then only one Record is deleted." ilk="function" line="1703" lineend="1709" name="_deleteRecord" signature="_deleteRecord(index, range)">
              <variable citdl="Number" doc="Position index." ilk="argument" name="index" />
              <variable citdl="Number" doc="(optional) How many Records to delete" ilk="argument" name="range" />
              <variable citdl="RecordSet" name="this" />
            </scope>
            <scope doc="Returns unique name of the RecordSet instance." ilk="function" line="1723" lineend="1725" name="getId" returns="String" signature="getId()">
              <variable citdl="RecordSet" name="this" />
            </scope>
            <scope doc="Public accessor to the unique name of the RecordSet instance." ilk="function" line="1733" lineend="1735" name="toString" returns="String" signature="toString()">
              <variable citdl="RecordSet" name="this" />
            </scope>
            <scope doc="Returns the number of Records held in the RecordSet." ilk="function" line="1743" lineend="1746" name="getLength" returns="Number" signature="getLength()">
              <variable citdl="RecordSet" name="this" />
            </scope>
            <scope doc="Returns Record by ID or RecordSet position index." ilk="function" line="1756" lineend="1780" name="getRecord" returns="YAHOO.widget.Record" signature="getRecord(record)">
              <variable citdl="{YAHOO.widget.Record" doc="| Number | String} Record instance,&#xA;RecordSet position index, or Record ID." ilk="argument" name="record" />
              <variable citdl="RecordSet" name="this" />
              <variable attributes="__local__ private" line="1757" name="i" />
            </scope>
            <scope doc="Returns an array of Records from the RecordSet." ilk="function" line="1792" lineend="1800" name="getRecords" returns="Array" signature="getRecords(index, range)">
              <variable citdl="Number" doc="(optional) Recordset position index of which Record to&#xA;start at." ilk="argument" name="index" />
              <variable citdl="Number" doc="(optional) Number of Records to get." ilk="argument" name="range" />
              <variable citdl="RecordSet" name="this" />
            </scope>
            <scope doc="Returns a boolean indicating whether Records exist in the RecordSet at the&#xA;specified index range.  Returns true if and only if a Record exists at each&#xA;index in the range." ilk="function" line="1811" lineend="1819" name="hasRecords" returns="Boolean" signature="hasRecords(index, range)">
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="range" />
              <variable citdl="RecordSet" name="this" />
              <variable attributes="__local__ private" citdl="this.getRecords()" line="1812" name="recs" />
            </scope>
            <scope doc="Returns current position index for the given Record." ilk="function" line="1829" lineend="1839" name="getRecordIndex" returns="Number" signature="getRecordIndex(oRecord)">
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="RecordSet" name="this" />
            </scope>
            <scope doc="Adds one Record to the RecordSet at the given index. If index is null,&#xA;then adds the Record to the end of the RecordSet." ilk="function" line="1850" lineend="1859" name="addRecord" returns="YAHOO.widget.Record" signature="addRecord(oData, index)">
              <variable citdl="Object" doc="An object literal of data." ilk="argument" name="oData" />
              <variable citdl="Number" doc="(optional) Position index." ilk="argument" name="index" />
              <variable citdl="RecordSet" name="this" />
              <variable attributes="__local__ private" citdl="this._addRecord()" line="1852" name="oRecord" />
            </scope>
            <scope doc="Adds multiple Records at once to the RecordSet at the given index with the&#xA;given object literal data. If index is null, then the new Records are&#xA;added to the end of the RecordSet." ilk="function" line="1871" lineend="1892" name="addRecords" returns="Array" signature="addRecords(aData, index)">
              <variable citdl="Array" doc="An object literal data or an array of data object literals." ilk="argument" name="aData" />
              <variable citdl="Number" doc="(optional) Position index." ilk="argument" name="index" />
              <variable citdl="RecordSet" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="1873" name="newRecords" />
              <variable attributes="__local__ private" citdl="this._addRecord()" line="1877" name="record" />
              <variable attributes="__local__ private" citdl="this._addRecord()" line="1885" name="oRecord" />
            </scope>
            <scope doc="Sets or replaces one Record to the RecordSet at the given index. Unlike&#xA;addRecord, an existing Record at that index is not shifted to preserve it.&#xA;If no index is specified, it adds the Record to the end of the RecordSet." ilk="function" line="1904" lineend="1913" name="setRecord" returns="YAHOO.widget.Record" signature="setRecord(oData, index)">
              <variable citdl="Object" doc="An object literal of data." ilk="argument" name="oData" />
              <variable citdl="Number" doc="(optional) Position index." ilk="argument" name="index" />
              <variable citdl="RecordSet" name="this" />
              <variable attributes="__local__ private" citdl="this._setRecord()" line="1906" name="oRecord" />
            </scope>
            <scope doc="Sets or replaces multiple Records at once to the RecordSet with the given&#xA;data, starting at the given index. If index is not specified, then the new&#xA;Records are added to the end of the RecordSet." ilk="function" line="1925" lineend="1945" name="setRecords" returns="Array" signature="setRecords(aData, index)">
              <variable citdl="Array" doc="An array of object literal data." ilk="argument" name="aData" />
              <variable citdl="Number" doc="(optional) Position index." ilk="argument" name="index" />
              <variable citdl="RecordSet" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.lang.isArray()" line="1929" name="a" />
              <variable attributes="__local__ private" citdl="Array" line="1929" name="added" />
              <variable attributes="__local__ private" citdl="Number" line="1929" name="i" />
              <variable attributes="__local__ private" citdl="Number" line="1929" name="j" />
              <variable attributes="__local__ private" citdl="a.length" line="1929" name="l" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Record" line="1929" name="Rec" />
            </scope>
            <scope doc="Updates given Record with given data." ilk="function" line="1956" lineend="1971" name="updateRecord" returns="YAHOO.widget.Record" signature="updateRecord(record, oData)">
              <variable citdl="{YAHOO.widget.Record" doc="| Number | String} A Record instance,&#xA;a RecordSet position index, or a Record ID." ilk="argument" name="record" />
              <variable citdl="Object" doc="Object literal of new data." ilk="argument" name="oData" />
              <variable citdl="RecordSet" name="this" />
              <variable attributes="__local__ private" citdl="this.getRecord()" line="1957" name="oRecord" />
              <variable attributes="__local__ private" citdl="Object" doc="Copy data from the Record for the event that gets fired&#xA;later" line="1960" lineend="1960" name="oldData" />
            </scope>
            <scope attributes="deprecated" doc="Use updateRecordValue */" ilk="function" line="1977" lineend="1979" name="updateKey" signature="updateKey(record, sKey, oData)">
              <variable ilk="argument" name="record" />
              <variable ilk="argument" name="sKey" />
              <variable ilk="argument" name="oData" />
              <variable citdl="RecordSet" name="this" />
            </scope>
            <scope doc="Sets given Record at given key to given data." ilk="function" line="1989" lineend="2012" name="updateRecordValue" signature="updateRecordValue(record, sKey, oData)">
              <variable citdl="{YAHOO.widget.Record" doc="| Number | String} A Record instance,&#xA;a RecordSet position index, or a Record ID." ilk="argument" name="record" />
              <variable citdl="String" doc="Key name." ilk="argument" name="sKey" />
              <variable citdl="Object" doc="New data." ilk="argument" name="oData" />
              <variable citdl="RecordSet" name="this" />
              <variable attributes="__local__ private" citdl="this.getRecord()" line="1990" name="oRecord" />
              <variable attributes="__local__ private" citdl="keyValue" line="1992" lineend="1996" name="oldData" />
              <variable attributes="__local__ private" citdl="oRecord._oData[sKey]" line="1993" name="keyValue" />
            </scope>
            <scope doc="Replaces all Records in RecordSet with new object literal data." ilk="function" line="2023" lineend="2026" name="replaceRecords" returns="YAHOO.widget.Record" signature="replaceRecords(data)">
              <variable citdl="{Object" doc="|| Object[]} An object literal of data or an array of&#xA;data object literals." ilk="argument" name="data" />
              <variable citdl="RecordSet" name="this" />
            </scope>
            <scope doc="Sorts all Records by given function. Records keep their unique IDs but will&#xA;have new RecordSet position indexes." ilk="function" line="2038" lineend="2040" name="sortRecords" returns="Array" signature="sortRecords(fnSort, desc)">
              <variable citdl="Function" doc="Reference to a sort function." ilk="argument" name="fnSort" />
              <variable citdl="Boolean" doc="True if sort direction is descending, false if sort&#xA;direction is ascending." ilk="argument" name="desc" />
              <variable citdl="RecordSet" name="this" />
            </scope>
            <scope doc="Reverses all Records, so [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;] becomes [&quot;three&quot;, &quot;two&quot;, &quot;one&quot;]." ilk="function" line="2048" lineend="2050" name="reverseRecords" returns="Array" signature="reverseRecords()">
              <variable citdl="RecordSet" name="this" />
            </scope>
            <scope doc="Removes the Record at the given position index from the RecordSet. If a range&#xA;is also provided, removes that many Records, starting from the index. Length&#xA;of RecordSet is correspondingly shortened." ilk="function" line="2062" lineend="2074" name="deleteRecord" returns="Object" signature="deleteRecord(index)">
              <variable citdl="Number" doc="Record&apos;s RecordSet position index." ilk="argument" name="index" />
              <variable citdl="RecordSet" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.DataTable._cloneObject()" doc="Copy data from the Record for the event that gets fired&#xA;later" line="2065" name="oData" />
            </scope>
            <scope doc="Removes the Record at the given position index from the RecordSet. If a range&#xA;is also provided, removes that many Records, starting from the index. Length&#xA;of RecordSet is correspondingly shortened." ilk="function" line="2086" lineend="2107" name="deleteRecords" returns="Array" signature="deleteRecords(index, range)">
              <variable citdl="Number" doc="Record&apos;s RecordSet position index." ilk="argument" name="index" />
              <variable citdl="Number" doc="(optional) How many Records to delete." ilk="argument" name="range" />
              <variable citdl="RecordSet" name="this" />
              <variable attributes="__local__ private" citdl="this.getRecords()" line="2091" name="recordsToDelete" />
              <variable attributes="__local__ private" citdl="Array" doc="Copy data from each Record for the event that gets fired&#xA;later" line="2093" name="deletedData" />
            </scope>
            <scope doc="Deletes all Records from the RecordSet." ilk="function" line="2114" lineend="2118" name="reset" signature="reset()">
              <variable citdl="RecordSet" name="this" />
            </scope>
          </scope>
          <variable attributes="__static__" citdl="Object" doc="STATIC: The singleton Logger class provides core log management functionality. Saves&#xA;logs written through the global YAHOO.log function or written by a LogWriter&#xA;instance. Provides access to logs for reading by a LogReader instance or&#xA;native browser console such as the Firebug extension to Firefox or Safari&apos;s&#xA;JavaScript console through integration with the console.log() method." line="1583" lineend="1595" name="Logger">
            <variable citdl="Boolean" doc="Initialize properties" line="1585" name="loggerEnabled" />
            <variable citdl="Boolean" line="1586" name="_browserConsoleEnabled" />
            <variable citdl="Array" line="1587" name="categories" />
            <variable citdl="Array" line="1588" name="sources" />
            <variable citdl="Array" line="1589" name="_stack" />
            <variable citdl="Number" doc="holds all log msgs" line="1590" name="maxStackEntries" />
            <variable citdl="Date" line="1591" name="_startTime" />
            <variable citdl="msecs" doc="static start timestamp" line="1592" name="_lastTime" />
            <variable citdl="Boolean" doc="timestamp of last logged message" line="1593" name="_windowErrorsHandled" />
            <variable citdl="window.onerror" line="1594" name="_origOnWindowError" />
            <scope attributes="private __static__" citdl="Date" doc="PRIVATE STATIC: True if Logger is enabled, false otherwise.&#xA;&#xA;&#xA;&#xA;&#xA;*//////////////////////////////////////////////////////////////////////////////&#xA;// Private properties&#xA;/////////////////////////////////////////////////////////////////////////////&#xA;/**&#xA;&#xA;&#xA;&#xA;&#xA;*//////////////////////////////////////////////////////////////////////////////&#xA;// Public methods&#xA;/////////////////////////////////////////////////////////////////////////////&#xA;/**" ilk="function" line="1693" lineend="1748" name="log" returns="Boolean" signature="log(sMsg, sCategory, sSource)">
              <variable citdl="String" doc="The log message." ilk="argument" name="sMsg" />
              <variable citdl="String" doc="Category of log message, or null." ilk="argument" name="sCategory" />
              <variable citdl="String" doc="Source of LogWriter, or null if global." ilk="argument" name="sSource" />
              <variable citdl="Logger" name="this" />
              <variable attributes="__local__ private" citdl="String" line="1704" name="sClass" />
              <variable attributes="__local__ private" citdl="sSource.substring()" doc="default source" line="1705" name="sDetail" />
              <variable attributes="__local__ private" citdl="sSource.indexOf()" line="1707" name="spaceIndex" />
              <variable attributes="__local__ private" citdl="Date" line="1722" name="timestamp" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.LogMsg" line="1729" name="logEntry" />
              <variable attributes="__local__ private" citdl="this._stack" line="1731" name="stack" />
              <variable attributes="__local__ private" citdl="this.maxStackEntries" line="1732" name="maxStackEntries" />
            </scope>
            <scope doc="Resets internal stack and startTime, enables Logger, and fires logResetEvent." ilk="function" line="1755" lineend="1761" name="reset" signature="reset()">
              <variable citdl="Logger" name="this" />
            </scope>
            <scope doc="Public accessor to internal stack of log message objects." ilk="function" line="1769" lineend="1771" name="getStack" returns="Array" signature="getStack()">
              <variable citdl="Logger" name="this" />
            </scope>
            <scope doc="Public accessor to internal start time." ilk="function" line="1779" lineend="1781" name="getStartTime" returns="Date" signature="getStartTime()">
              <variable citdl="Logger" name="this" />
            </scope>
            <scope doc="Disables output to the browser&apos;s global console.log() function, which is used&#xA;by the Firebug extension to Firefox as well as Safari." ilk="function" line="1789" lineend="1792" name="disableBrowserConsole" signature="disableBrowserConsole()">
              <variable citdl="Logger" name="this" />
            </scope>
            <scope doc="Enables output to the browser&apos;s global console.log() function, which is used&#xA;by the Firebug extension to Firefox as well as Safari." ilk="function" line="1800" lineend="1803" name="enableBrowserConsole" signature="enableBrowserConsole()">
              <variable citdl="Logger" name="this" />
            </scope>
            <scope doc="Surpresses native JavaScript errors and outputs to console. By default,&#xA;Logger does not handle JavaScript window error events.&#xA;NB: Not all browsers support the window.onerror event." ilk="function" line="1812" lineend="1825" name="handleWindowErrors" signature="handleWindowErrors()">
              <variable citdl="Logger" name="this" />
              <variable citdl="Object" line="1818" name="window">
                <variable citdl="YAHOO.widget.Logger._onWindowError" line="1818" name="onerror" />
              </variable>
            </scope>
            <scope doc="Unsurpresses native JavaScript errors. By default,&#xA;Logger does not handle JavaScript window error events.&#xA;NB: Not all browsers support the window.onerror event." ilk="function" line="1834" lineend="1850" name="unhandleWindowErrors" signature="unhandleWindowErrors()">
              <variable citdl="Logger" name="this" />
              <variable citdl="Object" line="1838" name="window">
                <variable citdl="YAHOO.widget.Logger._origOnWindowError" line="1838" name="onerror" />
              </variable>
            </scope>
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when a new category has been created." line="1865" name="categoryCreateEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when a new source has been named." line="1874" name="sourceCreateEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when a new log message has been created." line="1882" name="newLogEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when the Logger has been reset has been created." line="1889" name="logResetEvent" />
            <scope attributes="private" doc="PRIVATE: Creates a new category of log messages and fires categoryCreateEvent." ilk="function" line="1904" lineend="1907" name="_createNewCategory" signature="_createNewCategory(sCategory)">
              <variable citdl="String" doc="Category name." ilk="argument" name="sCategory" />
              <variable citdl="Logger" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Checks to see if a category has already been created." ilk="function" line="1917" lineend="1924" name="_isNewCategory" returns="Boolean" signature="_isNewCategory(sCategory)">
              <variable citdl="String" doc="Category name." ilk="argument" name="sCategory" />
              <variable citdl="Logger" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Creates a new source of log messages and fires sourceCreateEvent." ilk="function" line="1933" lineend="1936" name="_createNewSource" signature="_createNewSource(sSource)">
              <variable citdl="String" doc="Source name." ilk="argument" name="sSource" />
              <variable citdl="Logger" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Checks to see if a source already exists." ilk="function" line="1946" lineend="1955" name="_isNewSource" returns="Boolean" signature="_isNewSource(sSource)">
              <variable citdl="String" doc="Source name." ilk="argument" name="sSource" />
              <variable citdl="Logger" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Outputs a log message to global console.log() function." ilk="function" line="1964" lineend="1990" name="_printToBrowserConsole" signature="_printToBrowserConsole(oEntry)">
              <variable citdl="Object" doc="Log entry object." ilk="argument" name="oEntry" />
              <variable citdl="Logger" name="this" />
              <variable attributes="__local__ private" citdl="oEntry.category" line="1966" name="category" />
              <variable attributes="__local__ private" citdl="oEntry.category.substring().toUpperCase()" line="1967" name="label" />
              <variable attributes="__local__ private" citdl="oEntry.time" line="1969" name="time" />
              <variable attributes="__local__ private" citdl="time.toLocaleTimeString()" line="1970" name="localTime" />
              <variable attributes="__local__ private" citdl="time.getTime()" line="1978" name="msecs" />
              <variable attributes="__local__ private" line="1980" name="elapsedTime" />
              <variable attributes="__local__ private" citdl="localTime" line="1984" name="output" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles logging of messages due to window error events." ilk="function" line="2007" lineend="2018" name="_onWindowError" returns="Boolean" signature="_onWindowError(sMsg, sUrl, sLine)">
              <variable citdl="String" doc="The error message." ilk="argument" name="sMsg" />
              <variable citdl="String" doc="URL of the error." ilk="argument" name="sUrl" />
              <variable citdl="String" doc="Line number of the error." ilk="argument" name="sLine" />
              <variable citdl="Logger" name="this" />
            </scope>
          </variable>
          <scope ilk="class" line="1640" lineend="1642" name="LineChart">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: LineChart class for the YUI Charts widget." ilk="function" line="1640" lineend="1642" name="LineChart" signature="LineChart(containerId, dataSource, attributes)">
              <variable citdl="HTMLElement" doc="Container element for the Flash Player instance." ilk="argument" name="containerId" />
              <variable citdl="YAHOO.util.DataSource" doc="DataSource instance." ilk="argument" name="dataSource" />
              <variable citdl="Object" doc="(optional) Object literal of configuration values." ilk="argument" name="attributes" />
              <variable citdl="LineChart" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="1658" lineend="1660" name="ColumnChart">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: ColumnChart class for the YUI Charts widget." ilk="function" line="1658" lineend="1660" name="ColumnChart" signature="ColumnChart(containerId, dataSource, attributes)">
              <variable citdl="HTMLElement" doc="Container element for the Flash Player instance." ilk="argument" name="containerId" />
              <variable citdl="YAHOO.util.DataSource" doc="DataSource instance." ilk="argument" name="dataSource" />
              <variable citdl="Object" doc="(optional) Object literal of configuration values." ilk="argument" name="attributes" />
              <variable citdl="ColumnChart" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="1676" lineend="1678" name="BarChart">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: BarChart class for the YUI Charts widget." ilk="function" line="1676" lineend="1678" name="BarChart" signature="BarChart(containerId, dataSource, attributes)">
              <variable citdl="HTMLElement" doc="Container element for the Flash Player instance." ilk="argument" name="containerId" />
              <variable citdl="YAHOO.util.DataSource" doc="DataSource instance." ilk="argument" name="dataSource" />
              <variable citdl="Object" doc="(optional) Object literal of configuration values." ilk="argument" name="attributes" />
              <variable citdl="BarChart" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="1690" lineend="1735" name="Axis">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Defines a CartesianChart&apos;s vertical or horizontal axis." ilk="function" line="1690" lineend="1691" name="Axis" signature="Axis()">
              <variable citdl="Axis" name="this" />
            </scope>
            <variable citdl="String" doc="The type of axis." line="1701" name="type" />
            <variable citdl="String" doc="The direction in which the axis is drawn. May be &quot;horizontal&quot; or &quot;vertical&quot;." line="1709" name="orientation" />
            <variable citdl="Boolean" doc="If true, the items on the axis will be drawn in opposite direction." line="1717" name="reverse" />
            <variable citdl="String" doc="A string reference to the globally-accessible function that may be called to&#xA;determine each of the label values for this axis." line="1726" name="labelFunction" />
            <variable citdl="Boolean" doc="If true, labels that overlap previously drawn labels on the axis will be hidden." line="1734" name="hideOverlappingLabels" />
          </scope>
          <scope classrefs="YAHOO.widget.Axis" ilk="class" line="1745" lineend="1747" name="NumericAxis">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A type of axis whose units are measured in numeric values." ilk="function" line="1745" lineend="1747" name="NumericAxis" signature="NumericAxis()">
              <variable citdl="NumericAxis" name="this" />
            </scope>
            <variable citdl="String" line="1751" name="type" />
            <variable citdl="Number" doc="The minimum value drawn by the axis. If not set explicitly, the axis minimum&#xA;will be calculated automatically." line="1760" name="minimum" />
            <variable citdl="Number" doc="The maximum value drawn by the axis. If not set explicitly, the axis maximum&#xA;will be calculated automatically." line="1769" name="maximum" />
            <variable citdl="Number" doc="The spacing between major intervals on this axis." line="1777" name="majorUnit" />
            <variable citdl="Number" doc="The spacing between minor intervals on this axis." line="1785" name="minorUnit" />
            <variable citdl="Boolean" doc="If true, the labels, ticks, gridlines, and other objects will snap to&#xA;the nearest major or minor unit. If false, their position will be based&#xA;on the minimum value." line="1795" name="snapToUnits" />
            <variable citdl="Boolean" doc="If true, and the bounds are calculated automatically, either the minimum or&#xA;maximum will be set to zero." line="1804" name="alwaysShowZero" />
            <variable citdl="String" doc="The scaling algorithm to use on this axis. May be &quot;linear&quot; or &quot;logarithmic&quot;." line="1812" name="scale" />
          </scope>
          <scope classrefs="YAHOO.widget.Node" ilk="class" line="1819" lineend="1826" name="TextNode">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The default node presentation.  The first parameter should be&#xA;either a string that will be used as the node&apos;s label, or an object&#xA;that has a string propery called label.  By default, the clicking the&#xA;label will toggle the expanded/collapsed state of the node.  By&#xA;changing the href property of the instance, this behavior can be&#xA;changed so that the label will go to the specified href." ilk="function" line="1819" lineend="1826" name="TextNode" signature="TextNode(oData, oParent, expanded)">
              <variable citdl="Object" doc="a string or object containing the data that will&#xA;be used to render this node.&#xA;Valid properties:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;label&lt;/dt&gt;&#xA;&lt;dd&gt;The text for the node&apos;s label&lt;/dd&gt;&#xA;&lt;dt&gt;title&lt;/dt&gt;&#xA;&lt;dd&gt;The title attribute for the label anchor&lt;/dd&gt;&#xA;&lt;dt&gt;title&lt;/dt&gt;&#xA;&lt;dd&gt;The title attribute for the label anchor&lt;/dd&gt;&#xA;&lt;dt&gt;href&lt;/dt&gt;&#xA;&lt;dd&gt;The href for the node&apos;s label.  By default it is set to&#xA;expand/collapse the node.&lt;/dd&gt;&#xA;&lt;dt&gt;target&lt;/dt&gt;&#xA;&lt;dd&gt;The target attribute for the label anchor&lt;/dd&gt;&#xA;&lt;dt&gt;style&lt;/dt&gt;&#xA;&lt;dd&gt;A CSS class to apply to the label anchor&lt;/dd&gt;&#xA;&lt;/dl&gt;&#xA;All other attributes are made available in noderef.data, which&#xA;can be used to store custom attributes.  TreeView.getNode(s)ByProperty&#xA;can be used to retreive a node by one of the attributes." ilk="argument" name="oData" />
              <variable citdl="YAHOO.widget.Node" doc="this node&apos;s parent node" ilk="argument" name="oParent" />
              <variable citdl="Boolean" doc="the initial expanded/collapsed state" ilk="argument" name="expanded" />
              <variable citdl="TextNode" name="this" />
            </scope>
            <variable citdl="String" doc="The CSS class for the label href.  Defaults to ygtvlabel, but can be&#xA;overridden to provide a custom presentation for a specific node." line="1836" name="labelStyle" />
            <variable citdl="String" doc="The derived element id of the label for this node" line="1843" name="labelElId" />
            <variable citdl="String" doc="The text for the label.  It is assumed that the oData parameter will&#xA;either be a string that will be used as the label, or an object that&#xA;has a property called &quot;label&quot; that we will use." line="1852" name="label" />
            <scope ilk="function" line="1854" lineend="1870" name="textNodeParentChange" signature="textNodeParentChange()" />
            <scope doc="Sets up the node label" ilk="function" line="1877" lineend="1908" name="setUpLabel" signature="setUpLabel(oData)">
              <variable doc="string containing the label, or an object with a label property" ilk="argument" name="oData" />
            </scope>
            <variable citdl="encodeURI()" line="1891" name="href" />
            <variable citdl="oData.target" line="1896" name="target" />
            <variable citdl="oData.title" line="1904" name="title" />
            <scope doc="Returns the label element" ilk="function" line="1916" lineend="1918" name="getLabelEl" returns="Object" signature="getLabelEl()" />
            <scope doc="overrides YAHOO.widget.Node" ilk="function" line="1921" lineend="1993" name="getNodeHtml" returns="sb.join()" signature="getNodeHtml()">
              <variable attributes="__local__ private" citdl="Array" line="1922" name="sb" />
              <variable attributes="__local__ private" citdl="String" line="1933" name="getNode" />
            </scope>
            <scope doc="Executed when the label is clicked.  Fires the labelClick custom event." ilk="function" line="2003" lineend="2006" name="onLabelClick" returns="me.tree.fireEvent()" signature="onLabelClick(me)">
              <variable citdl="Node" doc="this node" ilk="argument" name="me" />
            </scope>
            <scope ilk="function" line="2008" lineend="2010" name="toString" returns="String" signature="toString()" />
          </scope>
          <scope classrefs="YAHOO.widget.Axis" ilk="class" line="1823" lineend="1825" name="TimeAxis">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A type of axis whose units are measured in time-based values." ilk="function" line="1823" lineend="1825" name="TimeAxis" signature="TimeAxis()">
              <variable citdl="TimeAxis" name="this" />
            </scope>
            <variable citdl="String" line="1829" name="type" />
            <variable citdl="Date" doc="The minimum value drawn by the axis. If not set explicitly, the axis minimum&#xA;will be calculated automatically." line="1838" name="minimum" />
            <variable citdl="Number" doc="The maximum value drawn by the axis. If not set explicitly, the axis maximum&#xA;will be calculated automatically." line="1847" name="maximum" />
            <variable citdl="Number" doc="The spacing between major intervals on this axis." line="1855" name="majorUnit" />
            <variable citdl="String" doc="The time unit used by the majorUnit." line="1863" name="majorTimeUnit" />
            <variable citdl="Number" doc="The spacing between minor intervals on this axis." line="1871" name="minorUnit" />
            <variable citdl="String" doc="The time unit used by the minorUnit." line="1879" name="minorTimeUnit" />
            <variable citdl="Boolean" doc="If true, the labels, ticks, gridlines, and other objects will snap to&#xA;the nearest major or minor unit. If false, their position will be based&#xA;on the minimum value." line="1889" name="snapToUnits" />
          </scope>
          <scope ilk="class" line="1845" lineend="1847" name="Overlay">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Overlay is a Module that is absolutely positioned above the page flow. It&#xA;has convenience methods for positioning and sizing, as well as options for&#xA;controlling zIndex and constraining the Overlay&apos;s position to the current&#xA;visible viewport. Overlay also contains a dynamicly generated IFRAME which&#xA;is placed beneath it for Internet Explorer 6 and 5.x so that it will be&#xA;properly rendered above SELECT elements." ilk="function" line="1845" lineend="1847" name="Overlay" signature="Overlay(el, userConfig)">
              <variable citdl="HTMLElement" doc="The element representing the Overlay" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing&#xA;the configuration that should be set for this Overlay. See configuration&#xA;documentation for more details." ilk="argument" name="userConfig" />
              <variable citdl="Overlay" name="this" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.widget.Axis" ilk="class" line="1900" lineend="1902" name="CategoryAxis">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A type of axis that displays items in categories." ilk="function" line="1900" lineend="1902" name="CategoryAxis" signature="CategoryAxis()">
              <variable citdl="CategoryAxis" name="this" />
            </scope>
            <variable citdl="String" line="1906" name="type" />
            <variable citdl="Array" doc="A list of category names to display along this axis." line="1914" name="categoryNames" />
          </scope>
          <scope ilk="class" line="1924" lineend="1943" name="Series">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Series class for the YUI Charts widget." ilk="function" line="1924" lineend="1924" name="Series" signature="Series()">
              <variable citdl="Series" name="this" />
            </scope>
            <variable citdl="String" doc="The type of series." line="1934" name="type" />
            <variable citdl="String" doc="The human-readable name of the series." line="1942" name="displayName" />
          </scope>
          <scope classrefs="YAHOO.widget.Series" ilk="class" line="1953" lineend="1955" name="CartesianSeries">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: CartesianSeries class for the YUI Charts widget." ilk="function" line="1953" lineend="1955" name="CartesianSeries" signature="CartesianSeries()">
              <variable citdl="CartesianSeries" name="this" />
            </scope>
            <variable citdl="String" doc="The field used to access the x-axis value from the items from the data source." line="1965" name="xField" />
            <variable citdl="String" doc="The field used to access the y-axis value from the items from the data source." line="1973" name="yField" />
          </scope>
          <scope classrefs="YAHOO.widget.CartesianSeries" ilk="class" line="1984" lineend="1986" name="ColumnSeries">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: ColumnSeries class for the YUI Charts widget." ilk="function" line="1984" lineend="1986" name="ColumnSeries" signature="ColumnSeries()">
              <variable citdl="ColumnSeries" name="this" />
            </scope>
            <variable citdl="String" line="1991" name="type" />
          </scope>
          <scope classrefs="YAHOO.widget.CartesianSeries" ilk="class" line="2001" lineend="2003" name="LineSeries">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: LineSeries class for the YUI Charts widget." ilk="function" line="2001" lineend="2003" name="LineSeries" signature="LineSeries()">
              <variable citdl="LineSeries" name="this" />
            </scope>
            <variable citdl="String" line="2008" name="type" />
          </scope>
          <scope classrefs="YAHOO.widget.CartesianSeries" ilk="class" line="2019" lineend="2021" name="BarSeries">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: BarSeries class for the YUI Charts widget." ilk="function" line="2019" lineend="2021" name="BarSeries" signature="BarSeries()">
              <variable citdl="BarSeries" name="this" />
            </scope>
            <variable citdl="String" line="2026" name="type" />
          </scope>
          <scope classrefs="YAHOO.widget.Node" ilk="class" line="2022" lineend="2033" name="RootNode">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A custom YAHOO.widget.Node that handles the unique nature of&#xA;the virtual, presentationless root node." ilk="function" line="2022" lineend="2033" name="RootNode" signature="RootNode(oTree)">
              <variable citdl="YAHOO.widget.TreeView" doc="The tree instance this node belongs to" ilk="argument" name="oTree" />
              <variable citdl="RootNode" name="this" />
            </scope>
            <variable citdl="oTree" doc="* For the root node, we get the tree reference from as a&#xA;param * to the constructor instead of from the parent&#xA;element." line="2032" name="tree" />
            <scope doc="overrides YAHOO.widget.Node" ilk="function" line="2038" lineend="2040" name="getNodeHtml" returns="String" signature="getNodeHtml()" />
            <scope ilk="function" line="2042" lineend="2044" name="toString" returns="String" signature="toString()" />
            <scope ilk="function" line="2046" lineend="2048" name="loadComplete" signature="loadComplete()" />
            <scope ilk="function" line="2050" lineend="2050" name="collapse" signature="collapse()" />
            <scope ilk="function" line="2051" lineend="2051" name="expand" signature="expand()" />
          </scope>
          <scope classrefs="YAHOO.widget.Series" ilk="class" line="2037" lineend="2039" name="PieSeries">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: PieSeries class for the YUI Charts widget." ilk="function" line="2037" lineend="2039" name="PieSeries" signature="PieSeries()">
              <variable citdl="PieSeries" name="this" />
            </scope>
            <variable citdl="String" line="2043" name="type" />
            <variable line="2044" name="dataField" />
            <variable line="2045" name="categoryField" />
          </scope>
          <variable citdl="LayoutUnit" line="2044" name="LayoutUnit" />
          <scope classrefs="YAHOO.widget.Node" ilk="class" line="2082" lineend="2087" name="HTMLNode">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This implementation takes either a string or object for the&#xA;oData argument.  If is it a string, we will use it for the display&#xA;of this node (and it can contain any html code).  If the parameter&#xA;is an object, we look for a parameter called &quot;html&quot; that will be&#xA;used for this node&apos;s display." ilk="function" line="2082" lineend="2087" name="HTMLNode" signature="HTMLNode(oData, oParent, expanded, hasIcon)">
              <variable citdl="Object" doc="a string or object containing the data that will&#xA;be used to render this node.&#xA;Valid configuration properties:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;html&lt;/dt&gt;&#xA;&lt;dd&gt;The html content for the node&lt;/dd&gt;&#xA;&lt;/dl&gt;&#xA;All other attributes are made available in noderef.data, which&#xA;can be used to store custom attributes.  TreeView.getNode(s)ByProperty&#xA;can be used to retreive a node by one of the attributes." ilk="argument" name="oData" />
              <variable citdl="YAHOO.widget.Node" doc="this node&apos;s parent node" ilk="argument" name="oParent" />
              <variable citdl="Boolean" doc="the initial expanded/collapsed state" ilk="argument" name="expanded" />
              <variable citdl="Boolean" doc="specifies whether or not leaf nodes should&#xA;be rendered with or without a horizontal line line icon. If the icon&#xA;is not displayed, the content fills the space it would have occupied.&#xA;This option operates independently of the leaf node presentation logic&#xA;for dynamic nodes." ilk="argument" name="hasIcon" />
              <variable citdl="HTMLNode" name="this" />
            </scope>
            <variable citdl="String" doc="The CSS class for the html content container.  Defaults to ygtvhtml, but&#xA;can be overridden to provide a custom presentation for a specific node." line="2097" name="contentStyle" />
            <variable citdl="String" doc="The generated id that will contain the data passed in by the implementer." line="2104" name="contentElId" />
            <variable citdl="String" doc="The HTML content to use for this node&apos;s display" line="2111" name="html" />
            <scope doc="Sets up the node label" ilk="function" line="2120" lineend="2125" name="initContent" signature="initContent(oData, hasIcon)">
              <variable citdl="Object" doc="An html string or object containing an html property" ilk="argument" name="oData" />
              <variable citdl="Boolean" doc="determines if the node will be rendered with an&#xA;icon or not" ilk="argument" name="hasIcon" />
            </scope>
            <variable citdl="hasIcon" line="2123" name="hasIcon" />
            <scope doc="Synchronizes the node.data, node.html, and the node&apos;s content" ilk="function" line="2132" lineend="2142" name="setHtml" signature="setHtml(o)">
              <variable citdl="Object" doc="An html string or object containing an html property" ilk="argument" name="o" />
              <variable attributes="__local__ private" citdl="this.getContentEl()" line="2137" name="el" />
            </scope>
            <variable citdl="o" line="2134" name="data" />
            <scope doc="Returns the outer html element for this node&apos;s content" ilk="function" line="2149" lineend="2151" name="getContentEl" returns="HTMLElement" signature="getContentEl()" />
            <scope doc="overrides YAHOO.widget.Node" ilk="function" line="2154" lineend="2193" name="getNodeHtml" returns="sb.join()" signature="getNodeHtml()">
              <variable attributes="__local__ private" citdl="Array" line="2155" name="sb" />
            </scope>
            <scope ilk="function" line="2195" lineend="2197" name="toString" returns="String" signature="toString()" />
          </scope>
          <scope classrefs="YAHOO.util.Element" ilk="class" line="2122" lineend="2175" name="SimpleEditor">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor&apos;s toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization." ilk="function" line="2122" lineend="2175" name="SimpleEditor" signature="SimpleEditor(el, attrs)">
              <variable citdl="String/HTMLElement" doc="The textarea element to turn into an editor." ilk="argument" name="el" />
              <variable citdl="Object" doc="Object liternal containing configuration parameters." ilk="argument" name="attrs" />
              <variable citdl="SimpleEditor" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="2124" lineend="2124" name="o" />
              <variable attributes="__local__ private" citdl="Dom.get()" line="2130" name="c" />
              <variable attributes="__local__ private" citdl="Object" line="2141" lineend="2144" name="oConfig">
                <variable citdl="el" line="2142" name="element" />
                <variable citdl="o" line="2143" name="attributes">
                  <variable citdl="Object" line="2167" name="toolbar_cont">
                    <variable citdl="id" line="2167" name="id" />
                  </variable>
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="el" line="2144" name="id" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="2157" name="element_cont" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="2161" name="div" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="2170" name="editorWrapper" />
            </scope>
            <variable citdl="String" doc="The DOCTYPE to use in the editable container." line="2195" name="_docType" />
            <variable citdl="Boolean" doc="This flag will be set when certain things in the Editor happen. It is to be used by the developer to check to see if content has changed." line="2201" name="editorDirty" />
            <variable citdl="String" doc="The default CSS used in the config for &apos;css&apos;. This way you can add to the config like this: { css: YAHOO.widget.SimpleEditor.prototype._defaultCSS + &apos;ADD MYY CSS HERE&apos; }" line="2207" name="_defaultCSS" />
            <variable attributes="private" citdl="Object" doc="PRIVATE: Default toolbar config." line="2214" lineend="4127" name="_defaultToolbar">
              <variable citdl="Boolean" line="4078" name="collapse" />
              <variable citdl="String" line="4079" name="titlebar" />
              <variable citdl="Boolean" line="4080" name="draggable" />
              <variable citdl="Array" line="4082" name="buttons" />
              <variable citdl="String" line="4082" name="group" />
              <variable citdl="String" line="4082" name="label" />
              <variable citdl="String" line="4084" name="value" />
              <variable citdl="Boolean" line="4084" name="disabled" />
              <variable citdl="String" line="4084" name="type" />
              <variable citdl="Array" line="4086" name="menu" />
              <variable citdl="String" line="4086" name="text" />
              <variable citdl="Boolean" line="4086" name="checked" />
              <variable citdl="Array" line="4097" name="range" />
            </variable>
            <variable attributes="private" citdl="Object" doc="PRIVATE: The last button pressed, so we don&apos;t disable it." line="2221" name="_lastButton" />
            <variable citdl="document.location.href" line="2228" name="_baseHREF" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: Safari reference for the last image selected (for styling as selected)." line="2242" name="_lastImage" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Don&apos;t load the blank image more than once.." line="2249" name="_blankImageLoaded" />
            <variable attributes="private" citdl="Date" doc="PRIVATE: Holder for the fixNodes timer" line="2256" name="_fixNodesTimer" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: Holds a reference to the nodeChange setTimeout call" line="2263" name="_nodeChangeTimer" />
            <variable attributes="private" citdl="Event" doc="PRIVATE: Flag to determine the last event that fired a node change" line="2270" name="_lastNodeChangeEvent" />
            <variable attributes="private" citdl="Date" doc="PRIVATE: Flag to determine when the last node change was fired" line="2277" name="_lastNodeChange" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Flag to determine if editor has been rendered or not" line="2284" name="_rendered" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Flag to determine if DOM is ready or not" line="2291" name="DOMReady" />
            <variable attributes="private" citdl="Object" doc="PRIVATE: Holder for caching iframe selections" line="2298" lineend="2645" name="_selection" />
            <variable attributes="private" citdl="Object" doc="PRIVATE: DOM Element holder for the editor Mask when disabled" line="2305" name="_mask" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Status of the hidden elements button" line="2312" name="_showingHiddenElements" />
            <variable citdl="Object" doc="A reference to the currently open EditorWindow" line="2318" name="currentWindow" />
            <variable citdl="Event" doc="A reference to the current editor event" line="2324" name="currentEvent" />
            <variable attributes="private" citdl="Object" doc="PRIVATE: setTimeout holder for Opera and Image DoubleClick event.." line="2331" name="operaEvent" />
            <variable citdl="HTMLElement" doc="A reference to the last font selected from the Toolbar" line="2337" name="currentFont" />
            <variable citdl="Array" doc="A reference to the current working element in the editor" line="2343" name="currentElement" />
            <variable citdl="HTMLElement" doc="A reference to the dompath container for writing the current working dom path to." line="2349" name="dompath" />
            <variable citdl="HTMLElement" doc="A reference to the H2 placed before the editor for Accessibilty." line="2355" name="beforeElement" />
            <variable citdl="HTMLElement" doc="A reference to the H2 placed after the editor for Accessibilty." line="2361" name="afterElement" />
            <variable citdl="Object" doc="Contains a list of HTML elements that are invalid inside the editor. They will be removed when they are found. If you set the value of a key to &quot;{ keepContents: true }&quot;, then the element will be replaced with a yui-non span to be filtered out when cleanHTML is called. The only tag that is ignored here is the span tag as it will force the Editor into a loop and freeze the browser. However.. all of these tags will be removed in the cleanHTML routine." line="2367" lineend="2379" name="invalidHTML">
              <variable citdl="Boolean" line="2368" name="form" />
              <variable citdl="Boolean" line="2369" name="input" />
              <variable citdl="Boolean" line="2370" name="button" />
              <variable citdl="Boolean" line="2371" name="select" />
              <variable citdl="Boolean" line="2372" name="link" />
              <variable citdl="Boolean" line="2373" name="html" />
              <variable citdl="Boolean" line="2374" name="body" />
              <variable citdl="Boolean" line="2375" name="iframe" />
              <variable citdl="Boolean" line="2376" name="script" />
              <variable citdl="Boolean" line="2377" name="style" />
              <variable citdl="Boolean" line="2378" name="textarea" />
            </variable>
            <variable citdl="YAHOO.widget.Toolbar" doc="Local property containing the &lt;a href=&quot;YAHOO.widget.Toolbar.html&quot;&gt;YAHOO.widget.Toolbar&lt;/a&gt; instance" line="2385" name="toolbar" />
            <variable attributes="private" citdl="setTimeout()" doc="PRIVATE: setTimeout holder for documentReady check" line="2391" name="_contentTimer" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: Counter to check the number of times the body is polled for before giving up" line="2398" name="_contentTimerCounter" />
            <variable attributes="private" citdl="Array" doc="PRIVATE: The Toolbar items that should be disabled if there is no selection present in the editor." line="2405" name="_disabled" />
            <variable attributes="private" citdl="Object" doc="PRIVATE: The Toolbar items that should ALWAYS be disabled event if there is a selection present in the editor." line="2412" lineend="2412" name="_alwaysDisabled" />
            <variable attributes="private" citdl="Object" doc="PRIVATE: The Toolbar items that should ALWAYS be enabled event if there isn&apos;t a selection present in the editor." line="2419" lineend="2419" name="_alwaysEnabled" />
            <variable attributes="private" citdl="Object" doc="PRIVATE: The Toolbar commands that we should attempt to make tags out of instead of using styles." line="2426" lineend="2426" name="_semantic">
              <variable citdl="Boolean" line="2426" name="bold" />
              <variable citdl="Boolean" line="2426" name="italic" />
              <variable citdl="Boolean" line="2426" name="underline" />
            </variable>
            <variable attributes="private" citdl="Object" doc="PRIVATE: A tag map of HTML tags to convert to the different types of commands so we can select the proper toolbar button." line="2433" lineend="2445" name="_tag2cmd">
              <variable citdl="String" line="2434" name="b" />
              <variable citdl="String" line="2435" name="strong" />
              <variable citdl="String" line="2436" name="i" />
              <variable citdl="String" line="2437" name="em" />
              <variable citdl="String" line="2438" name="u" />
              <variable citdl="String" line="2439" name="sup" />
              <variable citdl="String" line="2440" name="sub" />
              <variable citdl="String" line="2441" name="img" />
              <variable citdl="String" line="2442" name="a" />
              <variable citdl="String" line="2443" name="ul" />
              <variable citdl="String" line="2444" name="ol" />
            </variable>
            <scope attributes="private" doc="PRIVATE: Creates the DOM and YUI Element for the iFrame editor area." ilk="function" line="2453" lineend="2482" name="_createIframe" returns="Object" signature="_createIframe()">
              <variable attributes="__local__ private" citdl="document.createElement()" line="2454" name="ifrmDom" />
              <variable attributes="__local__ private" citdl="Object" line="2456" lineend="2465" name="config">
                <variable citdl="String" line="2457" name="border" />
                <variable citdl="String" line="2458" name="frameBorder" />
                <variable citdl="String" line="2459" name="marginWidth" />
                <variable citdl="String" line="2460" name="marginHeight" />
                <variable citdl="String" line="2461" name="leftMargin" />
                <variable citdl="String" line="2462" name="topMargin" />
                <variable citdl="String" line="2463" name="allowTransparency" />
                <variable citdl="String" line="2464" name="width" />
                <variable citdl="String" line="2467" name="scrolling" />
              </variable>
              <variable attributes="__local__ private" citdl="String" line="2474" name="isrc" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Element" line="2479" name="ifrm" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Checks to see if an Element reference is a valid one and has a certain tag type" ilk="function" line="2490" lineend="2498" name="_isElement" returns="Boolean" signature="_isElement(el, tag)">
              <variable citdl="HTMLElement" doc="The element to check" ilk="argument" name="el" />
              <variable citdl="String" doc="The tag that the element needs to be" ilk="argument" name="tag" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Checks to see if an Element reference or one of it&apos;s parents is a valid one and has a certain tag type" ilk="function" line="2506" lineend="2522" name="_hasParent" returns="Boolean" signature="_hasParent(el, tag)">
              <variable citdl="HTMLElement" doc="The element to check" ilk="argument" name="el" />
              <variable citdl="String" doc="The tag that the element needs to be" ilk="argument" name="tag" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Get the Document of the IFRAME" ilk="function" line="2529" lineend="2548" name="_getDoc" returns="Object" signature="_getDoc()">
              <variable attributes="__local__ private" citdl="Boolean" line="2530" name="value" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Get the Window of the IFRAME" ilk="function" line="2555" lineend="2557" name="_getWindow" returns="Object" signature="_getWindow()" />
            <scope attributes="private" doc="PRIVATE: Attempt to set the focus of the iframes window." ilk="function" line="2564" lineend="2591" name="_focusWindow" signature="_focusWindow(onLoad)">
              <variable citdl="Boolean" doc="Safari needs some special care to set the cursor in the iframe" ilk="argument" name="onLoad" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Determines if there is a selection in the editor document." ilk="function" line="2598" lineend="2627" name="_hasSelection" returns="Boolean" signature="_hasSelection()">
              <variable attributes="__local__ private" citdl="this._getSelection()" line="2599" name="sel" />
              <variable attributes="__local__ private" citdl="this._getRange()" line="2600" name="range" />
              <variable attributes="__local__ private" citdl="Boolean" line="2601" name="hasSel" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles the different selection objects across the A-Grade list." ilk="function" line="2634" lineend="2662" name="_getSelection" returns="Object" signature="_getSelection()">
              <variable attributes="__local__ private" citdl="this._getDoc().selection" line="2635" name="_sel" />
            </scope>
            <variable citdl="_sel.baseNode" line="2646" name="baseNode" />
            <variable citdl="_sel.baseOffset" line="2647" name="baseOffset" />
            <variable citdl="_sel.extentNode" line="2648" name="extentNode" />
            <variable citdl="_sel.extentOffset" line="2649" name="extentOffset" />
            <scope attributes="private" doc="PRIVATE: Places the highlight around a given node" ilk="function" line="2669" lineend="2697" name="_selectNode" returns="Boolean" signature="_selectNode(node)">
              <variable citdl="HTMLElement" doc="The node to select" ilk="argument" name="node" />
              <variable attributes="__local__ private" citdl="this._getDoc().body.createTextRange()" line="2674" name="range" />
              <variable attributes="__local__ private" citdl="this._getSelection()" line="2674" name="sel" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles the different range objects across the A-Grade list." ilk="function" line="2704" lineend="2734" name="_getRange" returns="Object" signature="_getRange()">
              <variable attributes="__local__ private" citdl="this._getSelection()" line="2705" name="sel" />
              <variable attributes="__local__ private" citdl="this._getDoc().createRange()" line="2712" name="_range" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Sets the designMode of the iFrame document." ilk="function" line="2741" lineend="2752" name="_setDesignMode" signature="_setDesignMode(state)">
              <variable citdl="String" doc="This should be either on or off" ilk="argument" name="state" />
              <variable attributes="__local__ private" citdl="Boolean" line="2743" name="set" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Toggles the designMode of the iFrame document on and off." ilk="function" line="2759" lineend="2767" name="_toggleDesignMode" returns="String" signature="_toggleDesignMode()">
              <variable attributes="__local__ private" citdl="this._getDoc().designMode.toLowerCase()" line="2761" name="_dMode" />
              <variable attributes="__local__ private" citdl="String" line="2761" name="_state" />
            </scope>
            <scope attributes="private" doc="PRIVATE: This method is fired from _checkLoaded when the document is ready. It turns on designMode and set&apos;s up the listeners." ilk="function" line="2773" lineend="2810" name="_initEditor" returns="Boolean" signature="_initEditor()">
              <variable attributes="__local__ private" citdl="this" line="2803" name="self" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Called from a setTimeout loop to check if the iframes body.onload event has fired, then it will init the editor." ilk="function" line="2816" lineend="2850" name="_checkLoaded" returns="Boolean" signature="_checkLoaded()">
              <variable attributes="__local__ private" citdl="Boolean" line="2824" name="init" />
              <variable attributes="__local__ private" citdl="this" line="2845" name="self" />
            </scope>
            <scope attributes="private" doc="PRIVATE: This method will open the iframes content document and write the textareas value into it, then start the body.onload checking." ilk="function" line="2856" lineend="2901" name="_setInitialContent" signature="_setInitialContent()">
              <variable attributes="__local__ private" citdl="Lang.substitute()" line="2864" name="html" />
              <variable attributes="__local__ private" citdl="Boolean" line="2864" name="check" />
              <variable attributes="__local__ private" citdl="this._getDoc().implementation.createHTMLDocument()" line="2875" name="doc" />
              <variable attributes="__local__ private" citdl="this._getDoc()" line="2876" name="origDoc">
                <variable citdl="Object" line="2884" name="body">
                  <variable citdl="Boolean" line="2884" name="_rteLoaded" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="origDoc.importNode()" line="2882" name="node" />
            </scope>
            <scope attributes="private" doc="PRIVATE: This method will turn on/off the useCSS execCommand." ilk="function" line="2908" lineend="2925" name="_setMarkupType" signature="_setMarkupType(action)">
              <variable citdl="String" doc="The action to take. Possible values are: css, default or semantic" ilk="argument" name="action" />
            </scope>
            <scope doc="Set the editor to use CSS instead of HTML" ilk="function" line="2930" lineend="2935" name="_setEditorStyle" signature="_setEditorStyle(stat)">
              <variable citdl="Booleen" doc="True/False" ilk="argument" name="stat" />
            </scope>
            <scope attributes="private" doc="PRIVATE: This method will attempt to locate the element that was last interacted with, either via selection, location or event." ilk="function" line="2942" lineend="3033" name="_getSelectedElement" returns="HTMLElement" signature="_getSelectedElement()">
              <variable attributes="__local__ private" citdl="this._getDoc()" line="2946" name="doc" />
              <variable attributes="__local__ private" citdl="this._getRange()" line="2946" name="range" />
              <variable attributes="__local__ private" citdl="this._getSelection()" line="2946" name="sel" />
              <variable attributes="__local__ private" citdl="range.item" line="2946" name="elm" />
            </scope>
            <scope attributes="private" doc="PRIVATE: This method will attempt to build the DOM path from the currently selected element." ilk="function" line="3041" lineend="3068" name="_getDomPath" returns="Array" signature="_getDomPath(el)">
              <variable ilk="argument" name="el" />
              <variable attributes="__local__ private" citdl="Array" line="3045" name="domPath" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Write the current DOM path out to the dompath container below the editor." ilk="function" line="3074" lineend="3135" name="_writeDomPath" signature="_writeDomPath()">
              <variable attributes="__local__ private" citdl="Array" line="3078" name="pathArr" />
              <variable attributes="__local__ private" citdl="String" line="3078" name="classPath" />
              <variable attributes="__local__ private" citdl="this._getDomPath()" line="3078" name="path" />
              <variable attributes="__local__ private" citdl="String" line="3078" name="pathStr" />
              <variable attributes="__local__ private" citdl="path[i].tagName.toLowerCase()" line="3080" name="tag" />
              <variable attributes="__local__ private" citdl="path[i].height" line="3110" name="h" />
              <variable attributes="__local__ private" citdl="path[i].width" line="3111" name="w" />
              <variable attributes="__local__ private" citdl="pathArr.join()" line="3130" name="str" />
            </scope>
            <variable citdl="str" line="3133" name="innerHTML" />
            <scope attributes="private" doc="PRIVATE: Fix href and imgs as well as remove invalid HTML." ilk="function" line="3141" lineend="3170" name="_fixNodes" signature="_fixNodes()">
              <variable attributes="__local__ private" citdl="this._getDoc()" line="3143" name="doc" />
              <variable attributes="__local__ private" citdl="Array" line="3143" name="els" />
              <variable attributes="__local__ private" citdl="doc.body.getElementsByTagName()" line="3148" name="tags" />
              <variable attributes="__local__ private" citdl="this._getDoc().getElementsByTagName()" line="3168" name="imgs" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Method is called at the beginning of all event handlers to check if this element or a parent element has the class yui-noedit (this.CLASS_NOEDIT) applied.&#xA;If it does, then this method will stop the event and return true. The event handlers will then return false and stop the nodeChange from occuring. This method will also&#xA;disable and enable the Editor&apos;s toolbar based on the noedit state." ilk="function" line="3180" lineend="3209" name="_isNonEditable" returns="Boolean" signature="_isNonEditable(ev)">
              <variable ilk="argument" name="ev" />
              <variable attributes="__local__ private" citdl="Event.getTarget()" line="3182" name="el" />
              <variable attributes="__local__ private" citdl="this._getDomPath()" line="3186" name="path" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Sets the current event property" ilk="function" line="3216" lineend="3218" name="_setCurrentEvent" signature="_setCurrentEvent(ev)">
              <variable citdl="Event" doc="The event to cache" ilk="argument" name="ev" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles all click events inside the iFrame document." ilk="function" line="3225" lineend="3245" name="_handleClick" returns="Boolean" signature="_handleClick(ev)">
              <variable citdl="Event" doc="The event we are working on." ilk="argument" name="ev" />
              <variable attributes="__local__ private" citdl="Event.getTarget()" line="3237" name="tar" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles all mouseup events inside the iFrame document." ilk="function" line="3252" lineend="3288" name="_handleMouseUp" returns="Boolean" signature="_handleMouseUp(ev)">
              <variable citdl="Event" doc="The event we are working on." ilk="argument" name="ev" />
              <variable attributes="__local__ private" citdl="this" doc="this._setCurrentEvent(ev);" line="3259" name="self" />
              <variable attributes="__local__ private" citdl="Event.getTarget()" doc="This work around traps the MouseUp event and sets a timer to check if another MouseUp event fires in so many seconds. If another event is fired, they we internally fire the DoubleClick event." line="3266" name="sel" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles all mousedown events inside the iFrame document." ilk="function" line="3295" lineend="3324" name="_handleMouseDown" returns="Boolean" signature="_handleMouseDown(ev)">
              <variable citdl="Event" doc="The event we are working on." ilk="argument" name="ev" />
              <variable attributes="__local__ private" citdl="Event.getTarget()" line="3300" name="sel" />
              <variable attributes="__local__ private" citdl="this._getSelection()" line="3302" name="_sel" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles all doubleclick events inside the iFrame document." ilk="function" line="3331" lineend="3355" name="_handleDoubleClick" returns="Boolean" signature="_handleDoubleClick(ev)">
              <variable citdl="Event" doc="The event we are working on." ilk="argument" name="ev" />
              <variable attributes="__local__ private" citdl="Event.getTarget()" line="3342" name="sel" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles all keyup events inside the iFrame document." ilk="function" line="3362" lineend="3395" name="_handleKeyUp" returns="Boolean" signature="_handleKeyUp(ev)">
              <variable citdl="Event" doc="The event we are working on." ilk="argument" name="ev" />
              <variable attributes="__local__ private" citdl="this" line="3382" name="self" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles all keypress events inside the iFrame document." ilk="function" line="3402" lineend="3434" name="_handleKeyPress" returns="Boolean" signature="_handleKeyPress(ev)">
              <variable citdl="Event" doc="The event we are working on." ilk="argument" name="ev" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles the Enter key, Tab Key and Shift + Tab keys for List Items." ilk="function" line="3441" lineend="3560" name="_listFix" signature="_listFix(ev)">
              <variable citdl="Event" doc="The event we are working on." ilk="argument" name="ev" />
              <variable attributes="__local__ private" citdl="Boolean" line="3442" name="preContent" />
              <variable attributes="__local__ private" citdl="this._hasParent()" line="3442" name="par">
                <variable citdl="Object" line="3488" name="style">
                  <variable citdl="String" line="3488" name="display" />
                </variable>
                <variable citdl="Object" line="3489" name="parentNode">
                  <variable citdl="Object" line="3489" name="style">
                    <variable citdl="String" line="3489" name="display" />
                  </variable>
                  <variable citdl="Object" line="3540" name="parentNode">
                    <variable citdl="Object" line="3540" name="style">
                      <variable citdl="String" line="3540" name="display" />
                    </variable>
                  </variable>
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="this._getSelectedElement()" line="3442" name="testLi" />
              <variable attributes="__local__ private" citdl="this._getDoc().body.createTextRange()" line="3442" name="range" />
              <variable attributes="__local__ private" citdl="this._hasParent()" line="3447" name="tar">
                <variable citdl="Object" line="3458" name="parentNode">
                  <variable citdl="Object" line="3458" name="style">
                    <variable citdl="String" line="3458" name="display" />
                  </variable>
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="this._getDoc().createElement()" line="3448" name="li" />
              <variable attributes="__local__ private" citdl="this._getSelectedElement()" line="3503" name="preLi" />
              <variable attributes="__local__ private" citdl="this._getDoc().createElement()" line="3513" name="newUl" />
              <variable attributes="__local__ private" citdl="Dom.getElementsByClassName()" line="3515" name="span" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles all keydown events inside the iFrame document." ilk="function" line="3567" lineend="3692" name="_handleKeyDown" returns="Boolean" signature="_handleKeyDown(ev)">
              <variable citdl="Event" doc="The event we are working on." ilk="argument" name="ev" />
              <variable attributes="__local__ private" citdl="this._getSelectedElement()" line="3568" name="tar" />
              <variable attributes="__local__ private" citdl="this._getRange()" line="3568" name="_range" />
              <variable attributes="__local__ private" citdl="Boolean" line="3581" name="exec" />
              <variable attributes="__local__ private" citdl="Boolean" line="3581" name="doExec" />
              <variable attributes="__local__ private" citdl="String" line="3581" name="action" />
              <variable attributes="__local__ private" citdl="this.toolbar.getElementsByTagName()[0]" line="3589" name="h" />
              <variable attributes="__local__ private" citdl="Boolean" line="3607" name="makeLink" />
            </scope>
            <scope doc="Handles setting up the toolbar buttons, getting the Dom path, fixing nodes." ilk="function" line="3698" lineend="3857" name="nodeChange" returns="Boolean" signature="nodeChange(force)">
              <variable citdl="Boolean" doc="Optional paramenter to skip the threshold counter" ilk="argument" name="force" />
              <variable attributes="__local__ private" citdl="parseInt()" line="3699" name="threshold" />
              <variable attributes="__local__ private" citdl="Math.round()" line="3700" name="thisNodeChange" />
              <variable attributes="__local__ private" citdl="this" line="3706" name="self" />
              <variable attributes="__local__ private" citdl="this.fireEvent()" line="3719" name="beforeNodeChange" />
              <variable attributes="__local__ private" citdl="this._getSelectedElement()" line="3737" name="el" />
              <variable attributes="__local__ private" citdl="this.toolbar.getButtonByValue()" line="3737" name="fs_button" />
              <variable attributes="__local__ private" citdl="this._getRange()" line="3737" name="range" />
              <variable attributes="__local__ private" citdl="this._getSelection()" line="3737" name="sel" />
              <variable attributes="__local__ private" citdl="this.toolbar.getButtonByValue()" line="3737" name="fn_button" />
              <variable attributes="__local__ private" citdl="Object" doc="Handle updating the toolbar with active buttons" line="3744" lineend="3744" name="_ex" />
              <variable attributes="__local__ private" citdl="this.toolbar.getButtonByValue()" line="3760" name="_button" />
              <variable attributes="__local__ private" citdl="this._getDomPath()" line="3785" name="path" />
              <variable attributes="__local__ private" citdl="this._tag2cmd[tag]" line="3786" name="cmd" />
              <variable attributes="__local__ private" citdl="path[i].tagName.toLowerCase()" line="3786" name="tag" />
              <variable attributes="__local__ private" citdl="path[i].style.textAlign.toLowerCase()" line="3822" name="alignType" />
              <variable attributes="__local__ private" citdl="fn_button._configs.label._initialConfig.value" line="3835" name="family" />
              <variable attributes="__local__ private" citdl="this.toolbar.getButtonByValue()" line="3844" name="hd_button" />
              <variable attributes="__local__ private" citdl="this.toolbar.getButtonByValue()" line="3849" name="img_button" />
            </scope>
            <variable citdl="Boolean" doc="Reset this var for next action" line="3730" name="STOP_NODE_CHANGE" />
            <scope attributes="private" doc="PRIVATE: Gets the menu from a button instance, if the menu is not rendered it will render it. It will then search the menu for the specified value, unchecking all other items and checking the specified on." ilk="function" line="3866" lineend="3872" name="_updateMenuChecked" signature="_updateMenuChecked(button, value, tbar)">
              <variable citdl="Object" doc="The command identifier of the button you want to check" ilk="argument" name="button" />
              <variable citdl="String" doc="The value of the menu item you want to check" ilk="argument" name="value" />
              <variable ilk="argument" name="tbar" />
              <variable attributes="__local__ private" citdl="tbar.getButtonByValue()" line="3870" name="_button" />
            </scope>
            <scope attributes="private" doc="PRIVATE: This is an event handler attached to the Toolbar&apos;s buttonClick event. It will fire execCommand with the command identifier from the Toolbar Button." ilk="function" line="3879" lineend="3901" name="_handleToolbarClick" returns="Boolean" signature="_handleToolbarClick(ev)">
              <variable citdl="Event" doc="The event that triggered the button click" ilk="argument" name="ev" />
              <variable attributes="__local__ private" citdl="String" line="3880" name="value" />
              <variable attributes="__local__ private" citdl="String" line="3881" name="str" />
              <variable attributes="__local__ private" citdl="ev.button.value" line="3882" name="cmd" />
              <variable attributes="__local__ private" citdl="this" line="3894" name="self" />
            </scope>
            <variable citdl="Boolean" line="3889" name="STOP_EXEC_COMMAND" />
            <scope attributes="private" doc="PRIVATE: Creates the accessibility h2 header and places it after the iframe in the Dom for navigation." ilk="function" line="3907" lineend="3922" name="_setupAfterElement" signature="_setupAfterElement()" />
            <variable citdl="String" line="3910" name="className" />
            <variable citdl="String" line="3911" name="tabIndex" />
            <scope attributes="private" doc="PRIVATE: Creates a mask to place over the Editor." ilk="function" line="3929" lineend="3963" name="_disableEditor" signature="_disableEditor(disabled)">
              <variable citdl="Boolean" doc="Pass true to disable, false to enable" ilk="argument" name="disabled" />
              <variable attributes="__local__ private" citdl="this" line="3957" name="self" />
            </scope>
            <variable citdl="String" doc="HTML id to give the properties window in the DOM." line="3969" name="EDITOR_PANEL_ID" />
            <variable citdl="String" doc="The value to place in between the Dom path items" line="3975" name="SEP_DOMPATH" />
            <variable citdl="String" doc="The accessibility string for the element after the iFrame" line="3981" name="STR_LEAVE_EDITOR" />
            <variable citdl="String" doc="The accessibility string for the element before the iFrame" line="3987" name="STR_BEFORE_EDITOR" />
            <variable citdl="String" doc="The Title of the HTML document that is created in the iFrame" line="3993" name="STR_TITLE" />
            <variable citdl="String" doc="The text to place in the URL textbox when using the blankimage." line="3999" name="STR_IMAGE_HERE" />
            <variable citdl="String" doc="The label string for the Link URL." line="4005" name="STR_LINK_URL" />
            <variable citdl="String" doc="CSS class applied to elements that are not editable." line="4026" name="CLASS_NOEDIT" />
            <variable citdl="String" doc="Default CSS class to apply to the editors container element" line="4033" name="CLASS_CONTAINER" />
            <variable citdl="String" doc="Default CSS class to apply to the editors iframe element" line="4040" name="CLASS_EDITABLE" />
            <variable citdl="String" doc="Default CSS class to apply to the editors iframe&apos;s parent element" line="4047" name="CLASS_EDITABLE_CONT" />
            <variable citdl="String" doc="Default prefix for dynamically created class names" line="4054" name="CLASS_PREFIX" />
            <variable citdl="YAHOO.env.ua" line="4060" name="browser" />
            <scope doc="The Editor class&apos; initialization method" ilk="function" line="4074" lineend="4140" name="init" signature="init(p_oElement, p_oAttributes)">
              <variable ilk="argument" name="p_oElement" />
              <variable ilk="argument" name="p_oAttributes" />
            </scope>
            <scope doc="Initializes all of the configuration attributes used to create&#xA;the editor." ilk="function" line="4148" lineend="4606" name="initAttributes" signature="initAttributes(attr)">
              <variable citdl="Object" doc="Object literal specifying a set of&#xA;configuration attributes used to create the editor." ilk="argument" name="attr" />
              <variable attributes="__local__ private" citdl="this" line="4150" name="self" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Retrieves the full url of the image to use as the blank image." ilk="function" line="4613" lineend="4642" name="_getBlankImage" returns="String" signature="_getBlankImage()">
              <variable attributes="__local__ private" citdl="String" line="4618" name="img" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="4624" name="div">
                <variable citdl="Object" line="4625" name="style">
                  <variable citdl="String" line="4625" name="position" />
                  <variable citdl="String" line="4626" name="top" />
                  <variable citdl="String" line="4627" name="left" />
                </variable>
              </variable>
              <variable citdl="Object" line="4636" name="YAHOO">
                <variable citdl="Object" line="4636" name="widget">
                  <variable citdl="Object" line="4636" name="EditorInfo">
                    <variable citdl="img" line="4636" name="blankImage" />
                  </variable>
                </variable>
              </variable>
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles resizing the editor&apos;s height based on the content" ilk="function" line="4648" lineend="4673" name="_handleAutoHeight" signature="_handleAutoHeight()">
              <variable attributes="__local__ private" citdl="doc.body" line="4651" name="body" />
              <variable attributes="__local__ private" citdl="this._getDoc()" line="4651" name="doc" />
              <variable attributes="__local__ private" citdl="doc.documentElement" line="4651" name="docEl" />
              <variable attributes="__local__ private" citdl="parseInt()" line="4653" name="height" />
              <variable attributes="__local__ private" citdl="body.scrollHeight" line="4654" name="newHeight" />
              <variable attributes="__local__ private" citdl="this" line="4667" name="self" />
            </scope>
            <variable line="4674" name="_formButtons" />
            <variable citdl="tar" line="4675" name="_formButtonClicked" />
            <scope ilk="function" line="4676" lineend="4679" name="_handleFormButtonClick" signature="_handleFormButtonClick(ev)">
              <variable ilk="argument" name="ev" />
              <variable attributes="__local__ private" citdl="Event.getTarget()" line="4677" name="tar" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles the form submission." ilk="function" line="4686" lineend="4717" name="_handleFormSubmit" signature="_handleFormSubmit(ev)">
              <variable citdl="Object" doc="The Form Submit Event" ilk="argument" name="ev" />
              <variable attributes="__local__ private" citdl="this.get().form" line="4690" name="form" />
              <variable attributes="__local__ private" citdl="this._formButtonClicked" line="4691" name="tar" />
              <variable attributes="__local__ private" citdl="this" line="4692" name="self" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles the font size button in the toolbar." ilk="function" line="4724" lineend="4729" name="_handleFontSize" signature="_handleFontSize(o)">
              <variable citdl="Object" doc="Object returned from Toolbar&apos;s buttonClick Event" ilk="argument" name="o" />
              <variable attributes="__local__ private" citdl="this.toolbar.getButtonById()" line="4725" name="button" />
              <variable attributes="__local__ private" citdl="button.get()" line="4726" name="value" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles the colorpicker buttons in the toolbar." ilk="function" line="4735" lineend="4741" name="_handleColorPicker" signature="_handleColorPicker(o)">
              <variable citdl="Object" doc="Object returned from Toolbar&apos;s buttonClick Event" ilk="argument" name="o" />
              <variable attributes="__local__ private" citdl="o.button" line="4736" name="cmd" />
              <variable attributes="__local__ private" citdl="String" line="4737" name="value" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles the alignment buttons in the toolbar." ilk="function" line="4748" lineend="4759" name="_handleAlign" signature="_handleAlign(o)">
              <variable citdl="Object" doc="Object returned from Toolbar&apos;s buttonClick Event" ilk="argument" name="o" />
              <variable attributes="__local__ private" citdl="o.button.menu[i].value" line="4749" name="cmd" />
              <variable attributes="__local__ private" citdl="this._getSelection()" line="4755" name="value" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Fires after a nodeChange happens to setup the things that where reset on the node change (button state)." ilk="function" line="4765" lineend="4850" name="_handleAfterNodeChange" signature="_handleAfterNodeChange()">
              <variable attributes="__local__ private" citdl="elm.getAttribute()" line="4770" name="family" />
              <variable attributes="__local__ private" citdl="path[i]" line="4770" name="elm" />
              <variable attributes="__local__ private" citdl="Boolean" line="4770" name="validFont" />
              <variable attributes="__local__ private" citdl="parseInt()" line="4770" name="fontsize" />
              <variable attributes="__local__ private" citdl="this._getDomPath()" line="4770" name="path" />
              <variable attributes="__local__ private" citdl="this.toolbar.getButtonByValue()" line="4771" name="fn_button" />
              <variable attributes="__local__ private" citdl="this.toolbar.getButtonByValue()" line="4772" name="fs_button" />
              <variable attributes="__local__ private" citdl="this.toolbar.getButtonByValue()" line="4773" name="hd_button" />
              <variable attributes="__local__ private" citdl="elm.tagName.toLowerCase()" line="4778" name="tag" />
              <variable attributes="__local__ private" citdl="String" line="4814" name="familyLabel" />
            </scope>
            <scope ilk="function" line="4851" lineend="4861" name="_setBusy" signature="_setBusy(off)">
              <variable ilk="argument" name="off" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Opens the Image Properties Window when the insert Image button is clicked or an Image is Double Clicked." ilk="function" line="4867" lineend="4900" name="_handleInsertImageClick" returns="Boolean" signature="_handleInsertImageClick()" />
            <scope attributes="private" doc="PRIVATE: Handles the closing of the Image Properties Window." ilk="function" line="4906" lineend="4908" name="_handleInsertImageWindowClose" signature="_handleInsertImageWindowClose()" />
            <scope attributes="private" doc="PRIVATE: Checks to see if a string (href or img src) is possibly a local file reference.." ilk="function" line="4915" lineend="4920" name="_isLocalFile" returns="Boolean" signature="_isLocalFile(url)">
              <variable citdl="String" doc="THe url/string to check" ilk="argument" name="url" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Handles the opening of the Link Properties Window when the Create Link button is clicked or an href is doubleclicked." ilk="function" line="4926" lineend="4967" name="_handleCreateLinkClick" returns="Boolean" signature="_handleCreateLinkClick()" />
            <scope attributes="private" doc="PRIVATE: Handles the closing of the Link Properties Window." ilk="function" line="4973" lineend="4976" name="_handleCreateLinkWindowClose" signature="_handleCreateLinkWindowClose()" />
            <scope doc="Calls the private method _render in a setTimeout to allow for other things on the page to continue to load." ilk="function" line="4981" lineend="4994" name="render" returns="Boolean" signature="render()">
              <variable attributes="__local__ private" citdl="this" line="4990" name="self" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Causes the toolbar and the editor to render and replace the textarea." ilk="function" line="5000" lineend="5099" name="_render" signature="_render()">
              <variable attributes="__local__ private" citdl="this" line="5002" name="self" />
              <variable attributes="__local__ private" citdl="this.get()" line="5019" name="tbarConf" />
            </scope>
            <scope doc="This method attempts to try and level the differences in the various browsers and their support for execCommand actions" ilk="function" line="5106" lineend="5149" name="execCommand" returns="Boolean" signature="execCommand(action, value)">
              <variable citdl="String" doc="The &quot;execCommand&quot; action to try to execute (Example: bold, insertimage, inserthtml)" ilk="argument" name="action" />
              <variable citdl="String" doc="(optional) The value for a given action such as action: fontname value: &apos;Verdana&apos;" ilk="argument" name="value" />
              <variable attributes="__local__ private" citdl="this.fireEvent()" line="5107" name="beforeExec" />
              <variable attributes="__local__ private" citdl="Boolean" line="5116" name="exec" />
              <variable attributes="__local__ private" citdl="this[&apos;cmd_&apos;+action.toLowerCase()]()" line="5127" name="retValue" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;backcolor&apos;) is used." ilk="function" line="5157" lineend="5199" name="cmd_backcolor" returns="Array" signature="cmd_backcolor(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
              <variable attributes="__local__ private" citdl="String" line="5160" name="action" />
              <variable attributes="__local__ private" citdl="this._getSelectedElement()" line="5160" name="el" />
              <variable attributes="__local__ private" citdl="Boolean" line="5160" name="exec" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;forecolor&apos;) is used." ilk="function" line="5205" lineend="5219" name="cmd_forecolor" returns="Array" signature="cmd_forecolor(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
              <variable attributes="__local__ private" citdl="this._getSelectedElement()" line="5207" name="el" />
              <variable attributes="__local__ private" citdl="Boolean" line="5207" name="exec" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;unlink&apos;) is used." ilk="function" line="5225" lineend="5230" name="cmd_unlink" returns="Array" signature="cmd_unlink(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;createlink&apos;) is used." ilk="function" line="5236" lineend="5248" name="cmd_createlink" returns="Array" signature="cmd_createlink(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
              <variable attributes="__local__ private" citdl="this._getSelectedElement()" line="5237" name="el" />
              <variable attributes="__local__ private" citdl="this._swapEl()" line="5237" name="_a" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;insertimage&apos;) is used." ilk="function" line="5254" lineend="5301" name="cmd_insertimage" returns="Array" signature="cmd_insertimage(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
              <variable attributes="__local__ private" citdl="this._getDoc().createElement()" line="5256" name="_img" />
              <variable attributes="__local__ private" citdl="String" line="5256" name="action" />
              <variable attributes="__local__ private" citdl="this._getSelectedElement()" line="5256" name="el" />
              <variable attributes="__local__ private" citdl="Boolean" line="5256" name="exec" />
              <variable attributes="__local__ private" citdl="this._getDoc().getElementsByTagName()" line="5275" name="imgs" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;inserthtml&apos;) is used." ilk="function" line="5307" lineend="5331" name="cmd_inserthtml" returns="Array" signature="cmd_inserthtml(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
              <variable attributes="__local__ private" citdl="String" line="5308" name="action" />
              <variable attributes="__local__ private" citdl="this._getRange()" line="5308" name="_range" />
              <variable attributes="__local__ private" citdl="this._getDoc().createElement()" line="5308" name="_span" />
              <variable attributes="__local__ private" citdl="Boolean" line="5308" name="exec" />
            </scope>
            <scope doc="This is a combined execCommand override method. It is called from the cmd_insertorderedlist and cmd_insertunorderedlist methods." ilk="function" line="5337" lineend="5435" name="cmd_list" returns="exec" signature="cmd_list(tag)">
              <variable doc="The tag of the list you want to create (eg, ul or ol)" ilk="argument" name="tag" />
              <variable attributes="__local__ private" citdl="selEl.parentNode" line="5339" name="el" />
              <variable attributes="__local__ private" citdl="Boolean" line="5339" name="exec" />
              <variable attributes="__local__ private" citdl="this._getDoc().createElement()" line="5339" name="list" />
              <variable attributes="__local__ private" citdl="this._getSelectedElement()" line="5339" name="selEl" />
              <variable attributes="__local__ private" citdl="Number" line="5339" name="li" />
              <variable attributes="__local__ private" citdl="String" line="5339" name="str" />
              <variable attributes="__local__ private" citdl="String" line="5339" name="action" />
              <variable attributes="__local__ private" citdl="el.getElementsByTagName()" line="5356" name="lis" />
              <variable attributes="__local__ private" citdl="this._getDoc().createElement()" line="5367" name="newli" />
              <variable attributes="__local__ private" citdl="this.currentElement[0].firstChild" line="5376" name="_h" />
              <variable attributes="__local__ private" citdl="el.parentNode.getElementsByTagName()" line="5389" name="lis2" />
              <variable attributes="__local__ private" citdl="this._getDoc().createElement()" line="5393" name="newEl" />
              <variable attributes="__local__ private" citdl="this" line="5404" name="self" />
              <variable attributes="__local__ private" citdl="String" line="5415" name="html" />
              <variable attributes="__local__ private" citdl="this._getRange().text.split()" line="5419" name="t" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;insertorderedlist &apos;) is used." ilk="function" line="5441" lineend="5443" name="cmd_insertorderedlist" returns="Array" signature="cmd_insertorderedlist(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;insertunorderedlist&apos;) is used." ilk="function" line="5449" lineend="5451" name="cmd_insertunorderedlist" returns="Array" signature="cmd_insertunorderedlist(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;fontname&apos;) is used." ilk="function" line="5457" lineend="5467" name="cmd_fontname" returns="Array" signature="cmd_fontname(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
              <variable attributes="__local__ private" citdl="this._getSelectedElement()" line="5459" name="selEl" />
              <variable attributes="__local__ private" citdl="Boolean" line="5459" name="exec" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;fontsize&apos;) is used." ilk="function" line="5473" lineend="5485" name="cmd_fontsize" returns="Array" signature="cmd_fontsize(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
              <variable attributes="__local__ private" citdl="this._getSelectedElement()" line="5477" name="el" />
            </scope>
            <scope attributes="private" doc="PRIVATE: This function will create a new element in the DOM and populate it with the contents of another element. Then it will assume it&apos;s place." ilk="function" line="5495" lineend="5503" name="_swapEl" returns="_el" signature="_swapEl(el, tagName, callback)">
              <variable citdl="HTMLElement" doc="The element to swap with" ilk="argument" name="el" />
              <variable citdl="String" doc="The tagname of the element that you wish to create" ilk="argument" name="tagName" />
              <variable citdl="Function" doc="(optional) A function to run on the element after it is created, but before it is replaced. An element reference is passed to this function." ilk="argument" name="callback" />
              <variable attributes="__local__ private" citdl="this._getDoc().createElement()" line="5496" name="_el" />
            </scope>
            <scope attributes="private" doc="PRIVATE: This is a work around for the various browser issues with execCommand. This method will run &lt;code&gt;execCommand(&apos;fontname&apos;, false, &apos;yui-tmp&apos;)&lt;/code&gt; on the given selection.&#xA;It will then search the document for an element with the font-family set to &lt;strong&gt;yui-tmp&lt;/strong&gt; and replace that with another span that has other information in it, then assign the new span to the&#xA;&lt;code&gt;this.currentElement&lt;/code&gt; array, so we now have element references to the elements that were just modified. At this point we can use standard DOM manipulation to change them as we see fit." ilk="function" line="5513" lineend="5687" name="_createCurrentElement" signature="_createCurrentElement(tagName, tagStyle)">
              <variable citdl="String" doc="(optional defaults to a) The tagname of the element that you wish to create" ilk="argument" name="tagName" />
              <variable citdl="Object" doc="(optional) Object literal containing styles to apply to the new element." ilk="argument" name="tagStyle" />
              <variable attributes="__local__ private" citdl="Array" line="5517" name="el" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="5517" name="tar" />
              <variable attributes="__local__ private" citdl="this._getDoc()" line="5517" name="_doc" />
              <scope attributes="__local__ private" ilk="function" line="5528" lineend="5553" name="_elCreate" returns="el" signature="_elCreate()">
                <variable attributes="__local__ private" citdl="_doc.createElement()" line="5529" name="el" />
              </scope>
              <variable attributes="__local__ private" citdl="this._getDoc().getElementsByTagName()" line="5558" name="imgs" />
              <variable attributes="__local__ private" citdl="Array" line="5609" name="_tmp" />
              <variable attributes="__local__ private" citdl="this._getDoc().getElementsByTagName()" doc="TODO: This needs to be cleaned up.." line="5611" name="_tmp1" />
              <variable attributes="__local__ private" citdl="this._getDoc().getElementsByTagName()" line="5612" name="_tmp2" />
              <variable attributes="__local__ private" citdl="this._getDoc().getElementsByTagName()" line="5613" name="_tmp3" />
              <variable attributes="__local__ private" citdl="this._getDoc().getElementsByTagName()" line="5614" name="_tmp4" />
              <variable attributes="__local__ private" citdl="this._getDoc().getElementsByTagName()" line="5615" name="_tmp5" />
              <variable attributes="__local__ private" citdl="this._getDoc().getElementsByTagName()" line="5616" name="_tmp6" />
              <variable attributes="__local__ private" citdl="_tmp[i].getElementsByTagName()[0]" line="5640" name="fc">
                <variable citdl="Object" line="5642" name="style">
                  <variable citdl="String" line="5642" name="fontFamily" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="this.currentElement.length" line="5676" name="len" />
            </scope>
            <scope doc="Cleans the HTML with the cleanHTML method then places that string back into the textarea." ilk="function" line="5693" lineend="5697" name="saveHTML" returns="html" signature="saveHTML()">
              <variable attributes="__local__ private" citdl="this.cleanHTML()" line="5694" name="html" />
            </scope>
            <scope doc="Loads HTML into the editors body" ilk="function" line="5703" lineend="5707" name="setEditorHTML" signature="setEditorHTML(html)">
              <variable citdl="String" doc="The html content to load into the editor" ilk="argument" name="html" />
            </scope>
            <scope doc="Gets the unprocessed/unfiltered HTML from the editor" ilk="function" line="5712" lineend="5718" name="getEditorHTML" returns="this._getDoc().body.innerHTML" signature="getEditorHTML()">
              <variable attributes="__local__ private" citdl="this._getDoc().body" line="5713" name="b" />
            </scope>
            <scope doc="This method needs to be called if the Editor was hidden (like in a TabView or Panel). It is used to reset the editor after being in a container that was set to display none." ilk="function" line="5723" lineend="5741" name="show" signature="show()">
              <variable attributes="__local__ private" citdl="this" line="5729" name="self" />
            </scope>
            <scope doc="This method needs to be called if the Editor is to be hidden (like in a TabView or Panel). It should be called to clear timeouts and close open editor windows." ilk="function" line="5746" lineend="5763" name="hide" signature="hide()" />
            <scope doc="Process the HTML with a few regexes to clean it up and stabilize the input" ilk="function" line="5770" lineend="5801" name="_cleanIncomingHTML" returns="String" signature="_cleanIncomingHTML(html)">
              <variable citdl="String" doc="The unfiltered HTML" ilk="argument" name="html" />
            </scope>
            <scope doc="Process the HTML with a few regexes to clean it up and stabilize the output" ilk="function" line="5808" lineend="5929" name="cleanHTML" returns="String" signature="cleanHTML(html)">
              <variable citdl="String" doc="The unfiltered HTML" ilk="argument" name="html" />
              <variable attributes="__local__ private" citdl="this.get()" line="5814" name="markup" />
            </scope>
            <scope doc="Filters invalid ol and ul list markup, converts this: &lt;li&gt;&lt;/li&gt;&lt;ol&gt;..&lt;/ol&gt; to this: &lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;ol&gt;..&lt;/ol&gt;&lt;/li&gt;" ilk="function" line="5935" lineend="5951" name="filter_invalid_lists" returns="html" signature="filter_invalid_lists(html)">
              <variable ilk="argument" name="html" />
            </scope>
            <scope doc="Filters strings specific to Safari" ilk="function" line="5958" lineend="5973" name="filter_safari" returns="html" signature="filter_safari(html)">
              <variable ilk="argument" name="html" />
            </scope>
            <scope doc="Filters internal RTE strings and bogus attrs we don&apos;t want" ilk="function" line="5980" lineend="6007" name="filter_internals" returns="html" signature="filter_internals(html)">
              <variable ilk="argument" name="html" />
            </scope>
            <scope doc="Converts all RGB color strings found in passed string to a hex color, example: style=&quot;color: rgb(0, 255, 0)&quot; converts to style=&quot;color: #00ff00&quot;" ilk="function" line="6014" lineend="6025" name="filter_all_rgb" returns="str" signature="filter_all_rgb(str)">
              <variable ilk="argument" name="str" />
              <variable attributes="__local__ private" citdl="RegExp" line="6015" name="exp" />
              <variable attributes="__local__ private" citdl="str.match()" line="6016" name="arr" />
              <variable attributes="__local__ private" citdl="this.filter_rgb()" line="6019" name="color" />
            </scope>
            <scope doc="Converts an RGB color string to a hex color, example: rgb(0, 255, 0) converts to #00ff00" ilk="function" line="6032" lineend="6050" name="filter_rgb" returns="css" signature="filter_rgb(css)">
              <variable ilk="argument" name="css" />
              <variable attributes="__local__ private" citdl="RegExp" line="6034" name="exp" />
              <variable attributes="__local__ private" citdl="css.replace().split()" line="6035" name="rgb" />
              <variable attributes="__local__ private" citdl="parseInt().toString()" line="6038" name="r" />
              <variable attributes="__local__ private" citdl="parseInt().toString()" line="6039" name="g" />
              <variable attributes="__local__ private" citdl="parseInt().toString()" line="6040" name="b" />
            </scope>
            <scope doc="HTML Pre Filter" ilk="function" line="6058" lineend="6076" name="pre_filter_linebreaks" returns="html" signature="pre_filter_linebreaks(html, markup)">
              <variable ilk="argument" name="html" />
              <variable ilk="argument" name="markup" />
            </scope>
            <scope doc="HTML Pre Filter" ilk="function" line="6084" lineend="6091" name="post_filter_linebreaks" returns="html" signature="post_filter_linebreaks(html, markup)">
              <variable ilk="argument" name="html" />
              <variable ilk="argument" name="markup" />
            </scope>
            <scope doc="Clear the doc of the Editor" ilk="function" line="6096" lineend="6098" name="clearEditorDoc" signature="clearEditorDoc()" />
            <scope attributes="private" doc="PRIVATE: Override Method for Advanced Editor" ilk="function" line="6104" lineend="6105" name="_renderPanel" signature="_renderPanel()" />
            <scope doc="Override Method for Advanced Editor" ilk="function" line="6110" lineend="6111" name="openWindow" signature="openWindow(win)">
              <variable ilk="argument" name="win" />
            </scope>
            <scope doc="Override Method for Advanced Editor" ilk="function" line="6116" lineend="6117" name="moveWindow" signature="moveWindow()" />
            <scope attributes="private" doc="PRIVATE: Override Method for Advanced Editor" ilk="function" line="6123" lineend="6124" name="_closeWindow" signature="_closeWindow()" />
            <scope doc="Override Method for Advanced Editor" ilk="function" line="6129" lineend="6133" name="closeWindow" signature="closeWindow()" />
            <scope doc="Destroys the editor, all of it&apos;s elements and objects." ilk="function" line="6139" lineend="6157" name="destroy" returns="Boolean" signature="destroy()">
              <variable attributes="__local__ private" citdl="this.get()" line="6146" name="textArea" />
            </scope>
            <scope doc="Returns a string representing the editor." ilk="function" line="6163" lineend="6169" name="toString" returns="String" signature="toString()">
              <variable attributes="__local__ private" citdl="String" line="6164" name="str" />
            </scope>
          </scope>
          <scope ilk="class" line="2135" lineend="2231" name="Record">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Record class defines a DataTable record." ilk="function" line="2135" lineend="2144" name="Record" signature="Record(oLiteral)">
              <variable ilk="argument" name="oLiteral" />
              <variable citdl="Record" name="this" />
            </scope>
            <variable citdl="String" line="2136" name="_sId" />
            <variable citdl="Object" line="2138" lineend="2138" name="_oData" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: Internal class variable to give unique IDs to Record instances." line="2159" name="_nCount" />
            <scope doc="Returns unique ID assigned at instantiation." ilk="function" line="2199" lineend="2201" name="getId" returns="this._sId" signature="getId()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Returns data for the Record for a key if given, or the entire object&#xA;literal otherwise." ilk="function" line="2211" lineend="2218" name="getData" returns="this._oData" signature="getData(sKey)">
              <variable citdl="String" doc="(Optional) The key to retrieve a single data value." ilk="argument" name="sKey" />
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Sets given data at the given key. Use the RecordSet method setValue to trigger&#xA;events." ilk="function" line="2228" lineend="2230" name="setData" signature="setData(sKey, oData)">
              <variable citdl="String" doc="The key of the new value." ilk="argument" name="sKey" />
              <variable citdl="MIXED" doc="The new value." ilk="argument" name="oData" />
              <variable citdl="Record" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="2179" lineend="2181" name="DataSource">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The DataSource classes manages sending a request and returning response from a live&#xA;database. Supported data include local JavaScript arrays and objects and databases&#xA;accessible via XHR connections. Supported response formats include JavaScript arrays,&#xA;JSON, XML, and flat-file textual data." ilk="function" line="2179" lineend="2181" name="DataSource" signature="DataSource()">
              <variable citdl="DataSource" name="this" />
            </scope>
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Error message for null data responses." line="2198" name="ERROR_DATANULL" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Error message for data responses with parsing errors." line="2208" name="ERROR_DATAPARSE" />
            <scope doc="Public accessor to the unique name of the DataSource instance." ilk="function" line="2281" lineend="2283" name="toString" returns="String" signature="toString()">
              <variable citdl="DataSource" name="this" />
            </scope>
            <scope doc="Retrieves query results, first checking the local cache, then making the&#xA;query request to the live data source as defined by the function doQuery." ilk="function" line="2294" lineend="2303" name="getResults" signature="getResults(oCallbackFn, sQuery, oParent)">
              <variable citdl="HTMLFunction" doc="Callback function defined by oParent object to which to return results." ilk="argument" name="oCallbackFn" />
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="The object instance that has requested data." ilk="argument" name="oParent" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this._doQueryCache()" doc="First look in cache" line="2297" name="aResults" />
            </scope>
            <scope doc="Abstract method implemented by subclasses to make a query to the live data&#xA;source. Must call the callback function with the response returned from the&#xA;query. Populates cache (if enabled)." ilk="function" line="2315" lineend="2317" name="doQuery" signature="doQuery(oCallbackFn, sQuery, oParent)">
              <variable citdl="HTMLFunction" doc="Callback function implemented by oParent to which to return results." ilk="argument" name="oCallbackFn" />
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="The object instance that has requested data." ilk="argument" name="oParent" />
              <variable citdl="DataSource" name="this" />
            </scope>
            <scope doc="Flushes cache." ilk="function" line="2324" lineend="2333" name="flushCache" signature="flushCache()">
              <variable citdl="DataSource" name="this" />
            </scope>
            <variable citdl="Array" line="2326" name="_aCache" />
            <variable citdl="Array" line="2329" name="_aCacheHelper" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Internal class variable to index multiple DataSource instances." line="2416" name="_nIndex" />
            <scope attributes="private" doc="PRIVATE: Initializes DataSource instance." ilk="function" line="2449" lineend="2469" name="_init" signature="_init()">
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this.maxCacheEntries" doc="Validate and initialize public configs" line="2451" name="maxCacheEntries" />
            </scope>
            <variable citdl="String" line="2460" name="_sName" />
            <variable citdl="YAHOO.util.CustomEvent" line="2463" name="queryEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="2464" name="cacheQueryEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="2465" name="getResultsEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="2466" name="getCachedResultsEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="2467" name="dataErrorEvent" />
            <variable citdl="YAHOO.util.CustomEvent" line="2468" name="cacheFlushEvent" />
            <scope attributes="private" doc="PRIVATE: Adds a result object to the local cache, evicting the oldest element if the&#xA;cache is full. Newer items will have higher indexes, the oldest item will have&#xA;index of 0." ilk="function" line="2480" lineend="2494" name="_addCacheElem" signature="_addCacheElem(oResult)">
              <variable citdl="Object" doc="Data result object, including array of results." ilk="argument" name="oResult" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this._aCache" line="2481" name="aCache" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Queries the local cache for results. If query has been cached, the callback&#xA;function is called with the results, and the cached is refreshed so that it&#xA;is now the newest element." ilk="function" line="2508" lineend="2598" name="_doQueryCache" returns="Array" signature="_doQueryCache(oCallbackFn, sQuery, oParent)">
              <variable citdl="HTMLFunction" doc="Callback function defined by oParent object to which to return results." ilk="argument" name="oCallbackFn" />
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="The object instance that has requested data." ilk="argument" name="oParent" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="2509" name="aResults" />
              <variable attributes="__local__ private" citdl="Boolean" line="2510" name="bMatchFound" />
              <variable attributes="__local__ private" citdl="this._aCache" line="2511" name="aCache" />
              <variable attributes="__local__ private" line="2512" name="nCacheLength" />
              <variable attributes="__local__ private" citdl="this.queryMatchContains" line="2513" name="bMatchContains" />
              <variable attributes="__local__ private" citdl="sQuery" line="2514" name="sOrigQuery" />
              <variable attributes="__local__ private" citdl="aCache[i]" line="2527" lineend="2578" name="resultObj" />
              <variable attributes="__local__ private" citdl="resultObj.results" line="2528" name="aAllResultItems" />
              <variable attributes="__local__ private" doc="If case is unimportant, normalize match key for comparison" line="2530" name="matchKey" />
              <variable attributes="__local__ private" citdl="sQuery.substr()" line="2554" name="subQuery" />
              <variable attributes="__local__ private" citdl="aAllResultItems[k]" line="2562" name="aRecord" />
              <variable attributes="__local__ private" line="2563" name="sKeyIndex" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.widget.TextNode" ilk="class" line="2231" lineend="2243" name="MenuNode">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A menu-specific implementation that differs from TextNode in that only&#xA;one sibling can be expanded at a time." ilk="function" line="2231" lineend="2243" name="MenuNode" signature="MenuNode(oData, oParent, expanded)">
              <variable citdl="Object" doc="a string or object containing the data that will&#xA;be used to render this node.&#xA;Valid properties:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;label&lt;/dt&gt;&#xA;&lt;dd&gt;The text for the node&apos;s label&lt;/dd&gt;&#xA;&lt;dt&gt;title&lt;/dt&gt;&#xA;&lt;dd&gt;The title attribute for the label anchor&lt;/dd&gt;&#xA;&lt;dt&gt;title&lt;/dt&gt;&#xA;&lt;dd&gt;The title attribute for the label anchor&lt;/dd&gt;&#xA;&lt;dt&gt;href&lt;/dt&gt;&#xA;&lt;dd&gt;The href for the node&apos;s label.  By default it is set to&#xA;expand/collapse the node.&lt;/dd&gt;&#xA;&lt;dt&gt;target&lt;/dt&gt;&#xA;&lt;dd&gt;The target attribute for the label anchor&lt;/dd&gt;&#xA;&lt;dt&gt;style&lt;/dt&gt;&#xA;&lt;dd&gt;A CSS class to apply to the label anchor&lt;/dd&gt;&#xA;&lt;/dl&gt;&#xA;All other attributes are made available in noderef.data, which&#xA;can be used to store custom attributes.  TreeView.getNode(s)ByProperty&#xA;can be used to retreive a node by one of the attributes." ilk="argument" name="oData" />
              <variable citdl="YAHOO.widget.Node" doc="this node&apos;s parent node" ilk="argument" name="oParent" />
              <variable citdl="Boolean" doc="the initial expanded/collapsed state" ilk="argument" name="expanded" />
              <variable citdl="MenuNode" name="this" />
            </scope>
            <variable citdl="Boolean" doc="* Menus usually allow only one branch to be open at a time." line="2240" name="multiExpand" />
            <scope ilk="function" line="2247" lineend="2249" name="toString" returns="String" signature="toString()" />
          </scope>
          <scope ilk="class" line="2245" lineend="3035" name="Paginator">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Paginator widget provides a set of controls to navigate through paged&#xA;data." ilk="function" line="2245" lineend="2281" name="Paginator" signature="Paginator(config)">
              <variable citdl="Object" doc="Object literal to set instance and ui component&#xA;configuration." ilk="argument" name="config" />
              <variable citdl="Paginator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.lang" line="2248" name="lang" />
              <variable attributes="__local__ private" citdl="this.get()" line="2248" name="perPage" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Paginator.VALUE_UNLIMITED" line="2248" name="UNLIMITED" />
              <variable attributes="__local__ private" citdl="this.get()" line="2248" name="records" />
              <variable attributes="__local__ private" line="2248" name="attrib" />
              <variable attributes="__local__ private" citdl="this.get()" line="2248" name="initialPage" />
              <variable attributes="__local__ private" line="2276" name="startIndex" />
            </scope>
            <variable attributes="private" citdl="Array(HTMLElement)" doc="PRIVATE: Array of nodes in which to render pagination controls.  This is set via&#xA;the &amp;quot;containers&amp;quot; attribute." line="2348" name="_containers" />
            <scope attributes="private" doc="PRIVATE: Initialize the Paginator&apos;s attributes (see YAHOO.util.Element class&#xA;AttributeProvider)." ilk="function" line="2361" lineend="2532" name="initConfig" signature="initConfig()">
              <variable citdl="Paginator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Paginator.VALUE_UNLIMITED" line="2364" name="UNLIMITED" />
              <variable attributes="__local__ private" citdl="YAHOO.lang" line="2364" name="l" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Initialize registered ui components onto this instance." ilk="function" line="2539" lineend="2548" name="initUIComponents" signature="initUIComponents()">
              <variable citdl="Paginator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Paginator.ui" line="2540" name="ui" />
              <variable attributes="__local__ private" citdl="ui[name]" line="2542" name="UIComp" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Initialize this instance&apos;s CustomEvents." ilk="function" line="2555" lineend="2568" name="initEvents" signature="initEvents()">
              <variable citdl="Paginator" name="this" />
            </scope>
            <scope doc="Render the pagination controls per the format attribute into the&#xA;specified container nodes." ilk="function" line="2575" lineend="2640" name="render" signature="render()">
              <variable citdl="Paginator" name="this" />
              <variable attributes="__local__ private" citdl="this.get()" doc="Forgo rendering if only one page and alwaysVisible is off" line="2581" name="totalRecords" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="2590" name="Dom" />
              <variable attributes="__local__ private" citdl="this.get()" line="2590" name="containerClass" />
              <variable attributes="__local__ private" citdl="this.get()" line="2590" name="template" />
              <variable attributes="__local__ private" citdl="this._containers[i]" doc="ex." line="2599" name="c">
                <variable citdl="Object" line="2606" name="style">
                  <variable citdl="String" doc="Hide the container while its contents are rendered" line="2606" name="display" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="YAHOO.widget.Paginator.ID_BASE" doc="ex." line="2599" name="id_base" />
              <variable attributes="__local__ private" citdl="Dom.getElementsByClassName()" doc="Replace each marker with the ui component&apos;s render() output" line="2614" name="markers" />
              <variable attributes="__local__ private" citdl="m.className.replace()" line="2620" name="name" />
              <variable attributes="__local__ private" citdl="markers[j]" line="2620" name="m" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Paginator.ui[name]" line="2620" name="UIComp" />
              <variable attributes="__local__ private" citdl="m.parentNode" line="2620" name="mp" />
              <variable attributes="__local__ private" citdl="UIComp" line="2623" name="comp" />
            </scope>
            <scope doc="Removes controls from the page and unhooks events." ilk="function" line="2646" lineend="2652" name="destroy" signature="destroy()">
              <variable citdl="Paginator" name="this" />
            </scope>
            <scope doc="Hides the containers if there is only one page of data and attribute&#xA;alwaysVisible is false.  Conversely, it displays the containers if either&#xA;there is more than one page worth of data or alwaysVisible is turned on." ilk="function" line="2660" lineend="2687" name="updateVisibility" signature="updateVisibility(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Paginator" name="this" />
              <variable attributes="__local__ private" citdl="this.get()" line="2661" name="alwaysVisible" />
              <variable attributes="__local__ private" citdl="this.get()" line="2667" name="rpp" />
              <variable attributes="__local__ private" citdl="this.get()" line="2667" name="rppOptions" />
              <variable attributes="__local__ private" line="2667" name="i" />
              <variable attributes="__local__ private" line="2667" name="len" />
              <variable attributes="__local__ private" citdl="this.get()" line="2667" name="totalRecords" />
              <variable attributes="__local__ private" citdl="Boolean" line="2667" name="visible" />
            </scope>
            <scope doc="Get the configured container nodes" ilk="function" line="2697" lineend="2699" name="getContainerNodes" returns="Array" signature="getContainerNodes()">
              <variable citdl="Paginator" name="this" />
            </scope>
            <scope doc="Get the total number of pages in the data set according to the current&#xA;rowsPerPage and totalRecords values.  If totalRecords is not set, or&#xA;set to YAHOO.widget.Paginator.VALUE_UNLIMITED, returns&#xA;YAHOO.widget.Paginator.VALUE_UNLIMITED." ilk="function" line="2709" lineend="2723" name="getTotalPages" returns="Number" signature="getTotalPages()">
              <variable citdl="Paginator" name="this" />
              <variable attributes="__local__ private" citdl="this.get()" line="2710" name="records" />
              <variable attributes="__local__ private" citdl="this.get()" line="2711" name="perPage" />
            </scope>
            <scope doc="Does the requested page have any records?" ilk="function" line="2731" lineend="2739" name="hasPage" returns="Boolean" signature="hasPage(page)">
              <variable citdl="Number" doc="the page in question" ilk="argument" name="page" />
              <variable citdl="Paginator" name="this" />
              <variable attributes="__local__ private" citdl="this.getTotalPages()" line="2736" name="totalPages" />
            </scope>
            <scope doc="Get the page number corresponding to the current record offset." ilk="function" line="2746" lineend="2752" name="getCurrentPage" returns="Number" signature="getCurrentPage()">
              <variable citdl="Paginator" name="this" />
              <variable attributes="__local__ private" citdl="this.get()" line="2747" name="perPage" />
            </scope>
            <scope doc="Are there records on the next page?" ilk="function" line="2759" lineend="2764" name="hasNextPage" returns="Boolean" signature="hasNextPage()">
              <variable citdl="Paginator" name="this" />
              <variable attributes="__local__ private" citdl="this.getTotalPages()" line="2761" name="totalPages" />
              <variable attributes="__local__ private" citdl="this.getCurrentPage()" line="2761" name="currentPage" />
            </scope>
            <scope doc="Get the page number of the next page, or null if the current page is the&#xA;last page." ilk="function" line="2772" lineend="2774" name="getNextPage" returns="Number" signature="getNextPage()">
              <variable citdl="Paginator" name="this" />
            </scope>
            <scope doc="Is there a page before the current page?" ilk="function" line="2781" lineend="2783" name="hasPreviousPage" returns="Boolean" signature="hasPreviousPage()">
              <variable citdl="Paginator" name="this" />
            </scope>
            <scope doc="Get the page number of the previous page, or null if the current page&#xA;is the first page." ilk="function" line="2791" lineend="2793" name="getPreviousPage" returns="Number" signature="getPreviousPage()">
              <variable citdl="Paginator" name="this" />
            </scope>
            <scope doc="Get the start and end record indexes of the specified page." ilk="function" line="2801" lineend="2825" name="getPageRecords" returns="Array" signature="getPageRecords(page)">
              <variable citdl="Number" doc="(optional) The page (current page if not specified)" ilk="argument" name="page" />
              <variable citdl="Paginator" name="this" />
              <variable attributes="__local__ private" citdl="this.get()" line="2808" name="records" />
              <variable attributes="__local__ private" citdl="this.get()" line="2808" name="perPage" />
              <variable attributes="__local__ private" citdl="Math.min()" line="2808" name="end" />
              <variable attributes="__local__ private" line="2808" name="start" />
            </scope>
            <scope doc="Set the current page to the provided page number if possible." ilk="function" line="2834" lineend="2842" name="setPage" signature="setPage(page, silent)">
              <variable ilk="argument" name="page" />
              <variable citdl="Boolean" doc="whether to forcibly avoid firing the&#xA;changeRequest event" ilk="argument" name="silent" />
              <variable citdl="Paginator" name="this" />
            </scope>
            <scope doc="Get the number of rows per page." ilk="function" line="2849" lineend="2851" name="getRowsPerPage" returns="Number" signature="getRowsPerPage()">
              <variable citdl="Paginator" name="this" />
            </scope>
            <scope doc="Set the number of rows per page." ilk="function" line="2860" lineend="2870" name="setRowsPerPage" signature="setRowsPerPage(rpp, silent)">
              <variable citdl="Number" doc="the new number of rows per page" ilk="argument" name="rpp" />
              <variable citdl="Boolean" doc="whether to forcibly avoid firing the&#xA;changeRequest event" ilk="argument" name="silent" />
              <variable citdl="Paginator" name="this" />
            </scope>
            <scope doc="Get the total number of records." ilk="function" line="2877" lineend="2879" name="getTotalRecords" returns="Number" signature="getTotalRecords()">
              <variable citdl="Paginator" name="this" />
            </scope>
            <scope doc="Set the total number of records." ilk="function" line="2887" lineend="2897" name="setTotalRecords" signature="setTotalRecords(total, silent)">
              <variable citdl="Number" doc="the new total number of records" ilk="argument" name="total" />
              <variable citdl="Boolean" doc="whether to forcibly avoid firing the changeRequest event" ilk="argument" name="silent" />
              <variable citdl="Paginator" name="this" />
            </scope>
            <scope doc="Get the index of the first record on the current page" ilk="function" line="2904" lineend="2906" name="getStartIndex" returns="Number" signature="getStartIndex()">
              <variable citdl="Paginator" name="this" />
            </scope>
            <scope doc="Move the record offset to a new starting index.  This will likely cause&#xA;the calculated current page to change.  You should probably use setPage." ilk="function" line="2915" lineend="2925" name="setStartIndex" signature="setStartIndex(offset, silent)">
              <variable citdl="Number" doc="the new record offset" ilk="argument" name="offset" />
              <variable citdl="Boolean" doc="whether to forcibly avoid firing the changeRequest event" ilk="argument" name="silent" />
              <variable citdl="Paginator" name="this" />
            </scope>
            <scope doc="Get an object literal describing the current state of the paginator.  If&#xA;an object literal of proposed values is passed, the proposed state will&#xA;be returned as an object literal with the following keys:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;paginator - instance of the Paginator&lt;/li&gt;&#xA;&lt;li&gt;page - number&lt;/li&gt;&#xA;&lt;li&gt;totalRecords - number&lt;/li&gt;&#xA;&lt;li&gt;recordOffset - number&lt;/li&gt;&#xA;&lt;li&gt;rowsPerPage - number&lt;/li&gt;&#xA;&lt;li&gt;records - [ start_index, end_index ]&lt;/li&gt;&#xA;&lt;li&gt;before - (OPTIONAL) { state object literal for current state }&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="function" line="2951" lineend="3016" name="getState" returns="Object" signature="getState(changes)">
              <variable citdl="Object" doc="OPTIONAL object literal with proposed values&#xA;Supported change keys include:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;rowsPerPage&lt;/li&gt;&#xA;&lt;li&gt;totalRecords&lt;/li&gt;&#xA;&lt;li&gt;recordOffset OR&lt;/li&gt;&#xA;&lt;li&gt;page&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="argument" name="changes" />
              <variable citdl="Paginator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Paginator.VALUE_UNLIMITED" line="2953" name="UNLIMITED" />
              <variable attributes="__local__ private" citdl="YAHOO.lang" line="2953" name="L" />
              <variable attributes="__local__ private" citdl="Object" line="2955" lineend="2962" name="currentState">
                <variable citdl="this" line="2956" name="paginator" />
                <variable citdl="this.getCurrentPage()" line="2957" name="page" />
                <variable citdl="this.get()" line="2958" name="totalRecords" />
                <variable citdl="this.get()" line="2959" name="recordOffset" />
                <variable citdl="this.get()" line="2960" name="rowsPerPage" />
                <variable citdl="this.getPageRecords()" line="2961" name="records" />
              </variable>
              <variable attributes="__local__ private" citdl="currentState.recordOffset" line="2968" name="newOffset" />
              <variable attributes="__local__ private" citdl="Object" line="2969" lineend="2977" name="state">
                <variable citdl="this" line="2970" name="paginator" />
                <variable citdl="currentState" line="2971" name="before" />
                <variable citdl="changes.rowsPerPage" line="2973" name="rowsPerPage" />
                <variable line="2976" name="totalRecords" />
                <variable citdl="Number" line="2981" name="page" />
                <variable citdl="state.recordOffset" doc="Jump offset to top of page" line="3002" name="recordOffset" />
                <variable citdl="Array" line="3005" name="records" />
              </variable>
            </scope>
            <scope attributes="private" doc="PRIVATE: Setting totalRecords to a value lower than the current recordOffset&#xA;will result in the recordOffset being adjusted to the starting index&#xA;of the previous page.  Called from totalRecords attribute method." ilk="function" line="3026" lineend="3034" name="_syncRecordOffset" signature="_syncRecordOffset(v)">
              <variable citdl="Number" doc="new value for totalRecords" ilk="argument" name="v" />
              <variable citdl="Paginator" name="this" />
              <variable attributes="__local__ private" citdl="this.get()" line="3028" name="rpp" />
            </scope>
            <variable citdl="Object" doc="UI Component namespace" line="3049" lineend="3049" name="ui" />
          </scope>
          <variable citdl="Object" line="2257" lineend="2302" name="TVAnim">
            <variable attributes="__static__" citdl="String" doc="STATIC: Constant for the fade in animation" line="2265" name="FADE_IN" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Constant for the fade out animation" line="2273" name="FADE_OUT" />
            <scope attributes="__static__" doc="STATIC: Returns a ygAnim instance of the given type" ilk="function" line="2284" lineend="2290" name="getAnim" returns="YAHOO.util.Animation" signature="getAnim(type, el, callback)">
              <variable citdl="String" doc="the type of animation" ilk="argument" name="type" />
              <variable citdl="HTMLElement" doc="the element to element (probably the children div)" ilk="argument" name="el" />
              <variable citdl="Function" doc="function to invoke when the animation is done." ilk="argument" name="callback" />
              <variable citdl="TVAnim" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns true if the specified animation class is available" ilk="function" line="2299" lineend="2301" name="isValid" returns="Boolean" signature="isValid(type)">
              <variable citdl="String" doc="the type of animation" ilk="argument" name="type" />
              <variable citdl="TVAnim" name="this" />
            </scope>
          </variable>
          <scope ilk="class" line="2312" lineend="2364" name="TVFadeIn">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A 1/2 second fade-in animation." ilk="function" line="2312" lineend="2327" name="TVFadeIn" signature="TVFadeIn(el, callback)">
              <variable citdl="HTMLElement" doc="the element to animate" ilk="argument" name="el" />
              <variable citdl="Function" doc="function to invoke when the animation is finished" ilk="argument" name="callback" />
              <variable citdl="TVFadeIn" name="this" />
            </scope>
            <variable citdl="HTMLElement" doc="The element to animate" line="2318" name="el" />
            <variable citdl="Function" doc="the callback to invoke when the animation is complete" line="2325" name="callback" />
            <scope doc="Performs the animation" ilk="function" line="2334" lineend="2346" name="animate" signature="animate()">
              <variable citdl="TVFadeIn" name="this" />
              <variable attributes="__local__ private" citdl="this" line="2335" name="tvanim" />
              <variable attributes="__local__ private" citdl="this.el.style" line="2337" name="s" />
              <variable attributes="__local__ private" citdl="Number" line="2342" name="dur" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Anim" line="2343" name="a" />
            </scope>
            <scope doc="Clean up and invoke callback" ilk="function" line="2352" lineend="2354" name="onComplete" signature="onComplete()">
              <variable citdl="TVFadeIn" name="this" />
            </scope>
            <scope doc="toString" ilk="function" line="2361" lineend="2363" name="toString" returns="String" signature="toString()">
              <variable citdl="TVFadeIn" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="2373" lineend="2423" name="TVFadeOut">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A 1/2 second fade out animation." ilk="function" line="2373" lineend="2388" name="TVFadeOut" signature="TVFadeOut(el, callback)">
              <variable citdl="HTMLElement" doc="the element to animate" ilk="argument" name="el" />
              <variable citdl="Function" doc="function to invoke when the animation is finished" ilk="argument" name="callback" />
              <variable citdl="TVFadeOut" name="this" />
            </scope>
            <variable citdl="HTMLElement" doc="The element to animate" line="2379" name="el" />
            <variable citdl="Function" doc="the callback to invoke when the animation is complete" line="2386" name="callback" />
            <scope doc="Performs the animation" ilk="function" line="2395" lineend="2401" name="animate" signature="animate()">
              <variable citdl="TVFadeOut" name="this" />
              <variable attributes="__local__ private" citdl="this" line="2396" name="tvanim" />
              <variable attributes="__local__ private" citdl="Number" line="2397" name="dur" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Anim" line="2398" name="a" />
            </scope>
            <scope doc="Clean up and invoke callback" ilk="function" line="2407" lineend="2413" name="onComplete" signature="onComplete()">
              <variable citdl="TVFadeOut" name="this" />
              <variable attributes="__local__ private" citdl="this.el.style" line="2408" name="s" />
            </scope>
            <scope doc="toString" ilk="function" line="2420" lineend="2422" name="toString" returns="String" signature="toString()">
              <variable citdl="TVFadeOut" name="this" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.widget.DataSource" ilk="class" line="2618" lineend="2635" name="DS_XHR">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Implementation of YAHOO.widget.DataSource using XML HTTP requests that return&#xA;query results." ilk="function" line="2618" lineend="2635" name="DS_XHR" signature="DS_XHR(sScriptURI, aSchema, oConfigs)">
              <variable citdl="String" doc="Absolute or relative URI to script that returns query&#xA;results as JSON, XML, or delimited flat-file data." ilk="argument" name="sScriptURI" />
              <variable citdl="Array" doc="Data schema definition of results." ilk="argument" name="aSchema" />
              <variable citdl="Object" doc="(optional) Object literal of config params." ilk="argument" name="oConfigs" />
              <variable citdl="DS_XHR" name="this" />
            </scope>
            <variable citdl="aSchema" line="2631" name="schema" />
            <variable citdl="sScriptURI" line="2632" name="scriptURI" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: JSON data type." line="2653" name="TYPE_JSON" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: XML data type." line="2663" name="TYPE_XML" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Flat-file data type." line="2673" name="TYPE_FLAT" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Error message for XHR failure." line="2683" name="ERROR_DATAXHR" />
            <scope doc="Queries the live data source defined by scriptURI for results. Results are&#xA;passed back to a callback function." ilk="function" line="2778" lineend="2847" name="doQuery" signature="doQuery(oCallbackFn, sQuery, oParent)">
              <variable citdl="HTMLFunction" doc="Callback function defined by oParent object to which to return results." ilk="argument" name="oCallbackFn" />
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="The object instance that has requested data." ilk="argument" name="oParent" />
              <variable citdl="DS_XHR" name="this" />
              <variable attributes="__local__ private" line="2779" name="isXML" />
              <variable attributes="__local__ private" citdl="this.scriptURI" line="2780" name="sUri" />
              <variable attributes="__local__ private" line="2784" name="oResponse" />
              <variable attributes="__local__ private" citdl="this" line="2786" name="oSelf" />
              <scope attributes="__local__ private" doc="* Sets up ajax request callback * * @param {object} oReq&#xA;HTTPXMLRequest object * @private */" ilk="function" line="2793" lineend="2826" name="responseSuccess" signature="responseSuccess(oResp)">
                <variable ilk="argument" name="oResp" />
                <variable attributes="__local__ private" citdl="oSelf.parseResponse()" line="2813" name="aResults" />
                <variable attributes="__local__ private" citdl="Object" line="2814" lineend="2814" name="resultObj">
                  <variable citdl="decodeURIComponent()" line="2815" name="query" />
                  <variable citdl="aResults" line="2816" name="results" />
                </variable>
              </scope>
              <scope attributes="__local__ private" ilk="function" line="2828" lineend="2831" name="responseFailure" signature="responseFailure(oResp)">
                <variable ilk="argument" name="oResp" />
              </scope>
              <variable attributes="__local__ private" citdl="Object" line="2833" lineend="2836" name="oCallback">
                <variable citdl="responseSuccess" line="2834" name="success" />
                <variable citdl="responseFailure" line="2835" name="failure" />
                <variable citdl="this.connTimeout" line="2839" name="timeout" />
              </variable>
            </scope>
            <scope doc="Parses raw response data into an array of result objects. The result data key&#xA;is always stashed in the [0] element of each result object." ilk="function" line="2859" lineend="3061" name="parseResponse" returns="Array" signature="parseResponse(sQuery, oResponse, oParent)">
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="The raw response data to parse." ilk="argument" name="oResponse" />
              <variable citdl="Object" doc="The object instance that has requested data." ilk="argument" name="oParent" />
              <variable citdl="DS_XHR" name="this" />
              <variable attributes="__local__ private" citdl="this.schema" line="2860" name="aSchema" />
              <variable attributes="__local__ private" citdl="Array" line="2861" name="aResults" />
              <variable attributes="__local__ private" citdl="Boolean" line="2862" name="bError" />
              <variable attributes="__local__ private" doc="Strip out comment at the end of results" line="2865" name="nEnd" />
              <variable attributes="__local__ private" citdl="eval()" line="2873" name="jsonList" />
              <variable attributes="__local__ private" citdl="YAHOO.lang.JSON.parse()" line="2873" name="jsonObjParsed" />
              <variable attributes="__local__ private" citdl="eval()" doc="...eval is necessary here" line="2950" name="jsonObjRaw" />
              <variable attributes="__local__ private" citdl="Array" line="2977" name="aResultItem" />
              <variable attributes="__local__ private" citdl="jsonList[i]" line="2978" name="jsonResult" />
              <variable attributes="__local__ private" citdl="jsonResult[aSchema[j]]" doc="...and capture data into an array mapped according to the&#xA;schema..." line="2982" name="dataFieldValue" />
              <variable attributes="__local__ private" citdl="oResponse.getElementsByTagName()" line="2998" name="xmlList" />
              <variable attributes="__local__ private" citdl="xmlList.item()" line="3005" name="result" />
              <variable attributes="__local__ private" citdl="Array" line="3006" name="aFieldSet" />
              <variable attributes="__local__ private" citdl="xmlAttr.value" line="3009" name="sValue" />
              <variable attributes="__local__ private" citdl="result.attributes.getNamedItem()" doc="Values may be held in an attribute..." line="3011" name="xmlAttr" />
              <variable attributes="__local__ private" citdl="result.getElementsByTagName()" line="3017" name="xmlNode" />
              <variable attributes="__local__ private" citdl="oResponse.length" doc="Delete the last line delimiter at the end of the data if it&#xA;exists" line="3035" name="newLength" />
              <variable attributes="__local__ private" citdl="oResponse.split()" line="3040" name="aRecords" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.widget.DataSource" ilk="class" line="3094" lineend="3111" name="DS_ScriptNode">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Implementation of YAHOO.widget.DataSource using the Get Utility to generate&#xA;dynamic SCRIPT nodes for data retrieval." ilk="function" line="3094" lineend="3111" name="DS_ScriptNode" signature="DS_ScriptNode(sUri, aSchema, oConfigs)">
              <variable citdl="String" doc="URI to the script location that will return data." ilk="argument" name="sUri" />
              <variable citdl="Array" doc="Data schema definition of results." ilk="argument" name="aSchema" />
              <variable citdl="Object" doc="(optional) Object literal of config params." ilk="argument" name="oConfigs" />
              <variable citdl="DS_ScriptNode" name="this" />
            </scope>
            <variable citdl="aSchema" line="3107" name="schema" />
            <variable citdl="sUri" line="3108" name="scriptURI" />
            <variable attributes="__static__" citdl="Array" doc="STATIC: Global array of callback functions, one for each request sent." line="3185" name="callbacks" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Unique ID to track requests." line="3201" name="_nId" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Counter for pending requests. When this is 0, it is safe to purge callbacks&#xA;array." line="3212" name="_nPending" />
            <scope doc="Queries the live data source. Results are passed back to a callback function." ilk="function" line="3228" lineend="3262" name="doQuery" signature="doQuery(oCallbackFn, sQuery, oParent)">
              <variable citdl="HTMLFunction" doc="Callback function defined by oParent object to which to return results." ilk="argument" name="oCallbackFn" />
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="The object instance that has requested data." ilk="argument" name="oParent" />
              <variable citdl="DS_ScriptNode" name="this" />
              <variable attributes="__local__ private" citdl="this" line="3229" name="oSelf" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.DS_ScriptNode._nId" doc="ID for this request" line="3238" name="id" />
              <variable attributes="__local__ private" citdl="this.scriptURI" line="3256" name="sUri" />
            </scope>
            <scope doc="Parses JSON response data into an array of result objects and passes it to&#xA;the callback function." ilk="function" line="3274" lineend="3339" name="handleResponse" signature="handleResponse(oResponse, oCallbackFn, sQuery, oParent)">
              <variable citdl="Object" doc="The raw response data to parse." ilk="argument" name="oResponse" />
              <variable citdl="HTMLFunction" doc="Callback function defined by oParent object to which to return results." ilk="argument" name="oCallbackFn" />
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="The object instance that has requested data." ilk="argument" name="oParent" />
              <variable citdl="DS_ScriptNode" name="this" />
              <variable attributes="__local__ private" citdl="this.schema" line="3275" name="aSchema" />
              <variable attributes="__local__ private" citdl="Array" line="3276" name="aResults" />
              <variable attributes="__local__ private" citdl="Boolean" line="3277" name="bError" />
              <variable attributes="__local__ private" citdl="eval()" line="3279" name="jsonList" />
              <variable attributes="__local__ private" line="3279" name="jsonObjParsed" />
              <variable attributes="__local__ private" citdl="Array" line="3302" name="aResultItem" />
              <variable attributes="__local__ private" citdl="jsonList[i]" line="3303" name="jsonResult" />
              <variable attributes="__local__ private" citdl="jsonResult[aSchema[j]]" doc="...and capture data into an array mapped according to the&#xA;schema..." line="3307" name="dataFieldValue" />
              <variable attributes="__local__ private" citdl="Object" line="3330" lineend="3330" name="resultObj">
                <variable citdl="decodeURIComponent()" line="3331" name="query" />
                <variable citdl="aResults" line="3332" name="results" />
              </variable>
            </scope>
            <scope attributes="private" doc="PRIVATE: Any success/failure response should decrement counter." ilk="function" line="3353" lineend="3355" name="_bumpPendingDown" signature="_bumpPendingDown()">
              <variable citdl="DS_ScriptNode" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="3365" lineend="3852" name="OverlayManager">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: OverlayManager is used for maintaining the focus status of&#xA;multiple Overlays." ilk="function" line="3365" lineend="3367" name="OverlayManager" signature="OverlayManager(userConfig)">
              <variable citdl="Object" doc="The object literal representing the user&#xA;configuration of the OverlayManager" ilk="argument" name="userConfig" />
              <variable citdl="OverlayManager" name="this" />
            </scope>
            <variable citdl="Function" doc="The class&apos;s constructor function" line="3392" name="constructor" />
            <variable citdl="Array" doc="The array of Overlays that are currently registered" line="3399" name="overlays" />
            <scope doc="Initializes the default configuration of the OverlayManager" ilk="function" line="3405" lineend="3424" name="initDefaultConfig" signature="initDefaultConfig()">
              <variable citdl="OverlayManager" name="this" />
            </scope>
            <scope doc="Initializes the OverlayManager" ilk="function" line="3434" lineend="3574" name="init" signature="init(userConfig)">
              <variable citdl="Object" doc="The object literal representing the user&#xA;configuration of the OverlayManager" ilk="argument" name="userConfig" />
              <variable citdl="OverlayManager" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Overlay" doc="PRIVATE: The currently activated Overlay" line="3457" name="activeOverlay" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="3564" name="overlays" />
            </scope>
            <variable citdl="Config" doc="The OverlayManager&apos;s Config object used for monitoring&#xA;configuration properties." line="3442" name="cfg" />
            <scope doc="Returns the currently focused Overlay" ilk="function" line="3464" lineend="3466" name="getActive" returns="Overlay" signature="getActive()">
              <variable citdl="OverlayManager" name="this" />
            </scope>
            <scope doc="Focuses the specified Overlay" ilk="function" line="3474" lineend="3491" name="focus" signature="focus(overlay)">
              <variable citdl="String" doc="The id of the Overlay to focus" ilk="argument" name="overlay" />
              <variable citdl="OverlayManager" name="this" />
              <variable attributes="__local__ private" citdl="this.find()" line="3475" name="o" />
            </scope>
            <scope doc="Removes the specified Overlay from the manager" ilk="function" line="3499" lineend="3539" name="remove" signature="remove(overlay)">
              <variable citdl="String" doc="The id of the Overlay to remove" ilk="argument" name="overlay" />
              <variable citdl="OverlayManager" name="this" />
              <variable attributes="__local__ private" citdl="Dom.getStyle()" line="3501" name="originalZ" />
              <variable attributes="__local__ private" citdl="this.find()" line="3501" name="o" />
              <variable attributes="__local__ private" line="3507" name="bDestroyed" />
            </scope>
            <scope doc="Removes focus from all registered Overlays in the manager" ilk="function" line="3545" lineend="3558" name="blurAll" signature="blurAll()">
              <variable citdl="OverlayManager" name="this" />
              <variable attributes="__local__ private" citdl="this.overlays.length" line="3548" name="nOverlays" />
              <variable attributes="__local__ private" citdl="nOverlays" line="3548" name="i" />
            </scope>
            <scope ilk="function" line="3560" lineend="3562" name="_onOverlayBlur" signature="_onOverlayBlur(p_sType, p_aArgs)">
              <variable ilk="argument" name="p_sType" />
              <variable ilk="argument" name="p_aArgs" />
              <variable citdl="OverlayManager" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Event handler for the DOM event that is used to focus&#xA;the Overlay instance as specified by the &quot;focusevent&quot;&#xA;configuration property." ilk="function" line="3586" lineend="3596" name="_onOverlayElementFocus" signature="_onOverlayElementFocus(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event&#xA;object passed back by the event utility (Event)." ilk="argument" name="p_oEvent" />
              <variable citdl="OverlayManager" name="this" />
              <variable attributes="__local__ private" citdl="this.close" line="3589" name="oClose" />
              <variable attributes="__local__ private" citdl="Event.getTarget()" line="3589" name="oTarget" />
            </scope>
            <scope attributes="private" doc="PRIVATE: &quot;destroy&quot; event handler for the Overlay." ilk="function" line="3610" lineend="3612" name="_onOverlayDestroy" signature="_onOverlayDestroy(p_sType, p_aArgs, p_oOverlay)">
              <variable citdl="String" doc="String representing the name of the event&#xA;that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event&#xA;was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="Overlay" doc="Object representing the menu that&#xA;fired the event." ilk="argument" name="p_oOverlay" />
              <variable citdl="OverlayManager" name="this" />
            </scope>
            <scope doc="Registers an Overlay or an array of Overlays with the manager. Upon&#xA;registration, the Overlay receives functions for focus and blur,&#xA;along with CustomEvents for each." ilk="function" line="3624" lineend="3691" name="register" returns="Boolean" signature="register(overlay)">
              <variable citdl="Array" doc="An array of Overlays to register with&#xA;the manager." ilk="argument" name="overlay" />
              <variable citdl="OverlayManager" name="this" />
              <variable attributes="__local__ private" citdl="overlay.length" line="3630" name="nOverlays" />
              <variable attributes="__local__ private" line="3630" name="i" />
              <variable attributes="__local__ private" citdl="Dom.getStyle()" line="3630" name="zIndex" />
              <variable attributes="__local__ private" citdl="this" line="3630" name="mgr" />
              <variable attributes="__local__ private" citdl="Number" line="3630" name="regcount" />
              <variable citdl="Object" line="3642" name="overlay">
                <scope ilk="function" line="3642" lineend="3644" name="focus" signature="focus()">
                  <variable citdl="overlay" name="this" />
                </scope>
                <scope ilk="function" line="3646" lineend="3651" name="blur" signature="blur()">
                  <variable citdl="overlay" name="this" />
                </scope>
              </variable>
            </scope>
            <scope doc="Places the specified Overlay instance on top of all other&#xA;Overlay instances." ilk="function" line="3702" lineend="3740" name="bringToTop" signature="bringToTop(p_oOverlay)">
              <variable citdl="String" doc="String representing the id of an&#xA;Overlay instance." ilk="argument" name="p_oOverlay" />
              <variable citdl="OverlayManager" name="this" />
              <variable attributes="__local__ private" citdl="aOverlays[0]" line="3707" name="oTopOverlay" />
              <variable attributes="__local__ private" citdl="this.find()" line="3707" name="oOverlay" />
              <variable attributes="__local__ private" citdl="Dom.getStyle()" line="3707" name="nTopZIndex" />
              <variable attributes="__local__ private" citdl="this.overlays" line="3707" name="aOverlays" />
              <variable attributes="__local__ private" citdl="Boolean" line="3721" name="bRequiresBump" />
              <variable attributes="__local__ private" citdl="Dom.getStyle()" line="3726" name="nNextZIndex" />
            </scope>
            <scope doc="Attempts to locate an Overlay by instance or ID." ilk="function" line="3750" lineend="3777" name="find" returns="Overlay" signature="find(overlay)">
              <variable citdl="String" doc="An Overlay id to locate within the manager" ilk="argument" name="overlay" />
              <variable citdl="OverlayManager" name="this" />
              <variable attributes="__local__ private" citdl="aOverlays.length" line="3754" name="nOverlays" />
              <variable attributes="__local__ private" citdl="nOverlays" line="3754" name="i" />
              <variable attributes="__local__ private" citdl="this.overlays" line="3754" name="aOverlays" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Used for sorting the manager&apos;s Overlays by z-index." ilk="function" line="3786" lineend="3804" name="compareZIndexDesc" returns="Number" signature="compareZIndexDesc(o1, o2)">
              <variable ilk="argument" name="o1" />
              <variable ilk="argument" name="o2" />
              <variable citdl="OverlayManager" name="this" />
              <variable attributes="__local__ private" doc="Sort invalid (destroyed)" line="3789" name="zIndex1" />
              <variable attributes="__local__ private" doc="Sort invalid (destroyed)" line="3789" name="zIndex2" />
            </scope>
            <scope doc="Shows all Overlays in the manager." ilk="function" line="3810" lineend="3823" name="showAll" signature="showAll()">
              <variable citdl="OverlayManager" name="this" />
              <variable attributes="__local__ private" citdl="aOverlays.length" line="3814" name="nOverlays" />
              <variable attributes="__local__ private" citdl="nOverlays" line="3814" name="i" />
              <variable attributes="__local__ private" citdl="this.overlays" line="3814" name="aOverlays" />
            </scope>
            <scope doc="Hides all Overlays in the manager." ilk="function" line="3829" lineend="3842" name="hideAll" signature="hideAll()">
              <variable citdl="OverlayManager" name="this" />
              <variable attributes="__local__ private" citdl="aOverlays.length" line="3833" name="nOverlays" />
              <variable attributes="__local__ private" citdl="nOverlays" line="3833" name="i" />
              <variable attributes="__local__ private" citdl="this.overlays" line="3833" name="aOverlays" />
            </scope>
            <scope doc="Returns a string representation of the object." ilk="function" line="3849" lineend="3851" name="toString" returns="String" signature="toString()">
              <variable citdl="OverlayManager" name="this" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.widget.DataSource" ilk="class" line="3372" lineend="3388" name="DS_JSFunction">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Implementation of YAHOO.widget.DataSource using a native Javascript function as&#xA;its live data source." ilk="function" line="3372" lineend="3388" name="DS_JSFunction" signature="DS_JSFunction(oFunction, oConfigs)">
              <variable citdl="HTMLFunction" doc="In-memory Javascript function that returns query results as an array of objects." ilk="argument" name="oFunction" />
              <variable citdl="Object" doc="(optional) Object literal of config params." ilk="argument" name="oConfigs" />
              <variable citdl="DS_JSFunction" name="this" />
            </scope>
            <variable citdl="oFunction" line="3385" name="dataFunction" />
            <scope doc="Queries the live data source defined by function for results. Results are&#xA;passed back to a callback function." ilk="function" line="3421" lineend="3439" name="doQuery" signature="doQuery(oCallbackFn, sQuery, oParent)">
              <variable citdl="HTMLFunction" doc="Callback function defined by oParent object to which to return results." ilk="argument" name="oCallbackFn" />
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="The object instance that has requested data." ilk="argument" name="oParent" />
              <variable citdl="DS_JSFunction" name="this" />
              <variable attributes="__local__ private" citdl="this.dataFunction" line="3422" name="oFunction" />
              <variable attributes="__local__ private" citdl="Array" line="3423" name="aResults" />
              <variable attributes="__local__ private" citdl="Object" line="3431" lineend="3431" name="resultObj">
                <variable citdl="decodeURIComponent()" line="3432" name="query" />
                <variable citdl="aResults" line="3433" name="results" />
              </variable>
            </scope>
          </scope>
          <scope classrefs="YAHOO.widget.DataSource" ilk="class" line="3456" lineend="3472" name="DS_JSArray">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Implementation of YAHOO.widget.DataSource using a native Javascript array as&#xA;its live data source." ilk="function" line="3456" lineend="3472" name="DS_JSArray" signature="DS_JSArray(aData, oConfigs)">
              <variable citdl="Array" doc="In-memory Javascript array of simple string data." ilk="argument" name="aData" />
              <variable citdl="Object" doc="(optional) Object literal of config params." ilk="argument" name="oConfigs" />
              <variable citdl="DS_JSArray" name="this" />
            </scope>
            <variable citdl="aData" line="3469" name="data" />
            <scope doc="Queries the live data source defined by data for results. Results are passed&#xA;back to a callback function." ilk="function" line="3505" lineend="3556" name="doQuery" signature="doQuery(oCallbackFn, sQuery, oParent)">
              <variable citdl="HTMLFunction" doc="Callback function defined by oParent object to which to return results." ilk="argument" name="oCallbackFn" />
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="The object instance that has requested data." ilk="argument" name="oParent" />
              <variable citdl="DS_JSArray" name="this" />
              <variable attributes="__local__ private" line="3506" name="i" />
              <variable attributes="__local__ private" citdl="this.data" line="3507" name="aData" />
              <variable attributes="__local__ private" citdl="Array" doc="the array" line="3508" name="aResults" />
              <variable attributes="__local__ private" citdl="Boolean" doc="container for results" line="3509" name="bMatchFound" />
              <variable attributes="__local__ private" citdl="this.queryMatchContains" line="3510" name="bMatchContains" />
              <variable attributes="__local__ private" citdl="Array" line="3519" name="aDataset" />
              <variable attributes="__local__ private" line="3529" name="sKeyIndex" />
            </scope>
          </scope>
          <scope ilk="class" line="3872" lineend="3874" name="Tooltip">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Tooltip is an implementation of Overlay that behaves like an OS tooltip,&#xA;displaying when the user mouses over a particular element, and&#xA;disappearing on mouse out." ilk="function" line="3872" lineend="3874" name="Tooltip" signature="Tooltip(el, userConfig)">
              <variable citdl="HTMLElement" doc="The element representing the Tooltip" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing&#xA;the configuration that should be set for this Overlay. See configuration&#xA;documentation for more details." ilk="argument" name="userConfig" />
              <variable citdl="Tooltip" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="3881" lineend="4242" name="ContainerEffect">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: ContainerEffect encapsulates animation transitions that are executed when&#xA;an Overlay is shown or hidden." ilk="function" line="3881" lineend="3922" name="ContainerEffect" signature="ContainerEffect(overlay, attrIn, attrOut, targetElement, animClass)">
              <variable citdl="YAHOO.widget.Overlay" doc="The Overlay that the animation&#xA;should be associated with" ilk="argument" name="overlay" />
              <variable citdl="Object" doc="The object literal representing the animation&#xA;arguments to be used for the animate-in transition. The arguments for&#xA;this literal are: attributes(object, see YAHOO.util.Anim for description),&#xA;duration(Number), and method(i.e. Easing.easeIn)." ilk="argument" name="attrIn" />
              <variable citdl="Object" doc="The object literal representing the animation&#xA;arguments to be used for the animate-out transition. The arguments for&#xA;this literal are: attributes(object, see YAHOO.util.Anim for description),&#xA;duration(Number), and method(i.e. Easing.easeIn)." ilk="argument" name="attrOut" />
              <variable citdl="HTMLElement" doc="Optional. The target element that&#xA;should be animated during the transition. Defaults to overlay.element." ilk="argument" name="targetElement" />
              <variable ilk="argument" name="animClass" />
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <variable citdl="YAHOO.widget.Overlay" doc="The overlay to animate" line="3892" name="overlay" />
            <variable citdl="Object" doc="The animation attributes to use when transitioning into view" line="3899" name="attrIn" />
            <variable citdl="Object" doc="The animation attributes to use when transitioning out of view" line="3906" name="attrOut" />
            <variable citdl="HTMLElement" doc="The target element to be animated" line="3913" name="targetElement" />
            <variable citdl="class" doc="The animation class to use for animating the overlay" line="3920" name="animClass" />
            <scope doc="Initializes the animation classes and events." ilk="function" line="4121" lineend="4155" name="init" signature="init()">
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <variable citdl="this.createEvent()" line="4123" name="beforeAnimateInEvent" />
            <variable citdl="CustomEvent.LIST" line="4124" name="signature" />
            <variable citdl="this.createEvent()" line="4126" name="beforeAnimateOutEvent" />
            <variable citdl="this.createEvent()" line="4129" name="animateInCompleteEvent" />
            <variable citdl="this.createEvent()" line="4133" name="animateOutCompleteEvent" />
            <variable line="4138" name="animIn" />
            <variable line="4148" name="animOut" />
            <scope doc="Triggers the in-animation." ilk="function" line="4161" lineend="4164" name="animateIn" signature="animateIn()">
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <scope doc="Triggers the out-animation." ilk="function" line="4170" lineend="4173" name="animateOut" signature="animateOut()">
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <scope doc="The default onStart handler for the in-animation." ilk="function" line="4182" lineend="4182" name="handleStartAnimateIn" signature="handleStartAnimateIn(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments" ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <scope doc="The default onTween handler for the in-animation." ilk="function" line="4191" lineend="4191" name="handleTweenAnimateIn" signature="handleTweenAnimateIn(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments" ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <scope doc="The default onComplete handler for the in-animation." ilk="function" line="4200" lineend="4200" name="handleCompleteAnimateIn" signature="handleCompleteAnimateIn(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments" ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <scope doc="The default onStart handler for the out-animation." ilk="function" line="4209" lineend="4209" name="handleStartAnimateOut" signature="handleStartAnimateOut(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments" ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <scope doc="The default onTween handler for the out-animation." ilk="function" line="4218" lineend="4218" name="handleTweenAnimateOut" signature="handleTweenAnimateOut(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments" ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <scope doc="The default onComplete handler for the out-animation." ilk="function" line="4227" lineend="4227" name="handleCompleteAnimateOut" signature="handleCompleteAnimateOut(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments" ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
              <variable citdl="ContainerEffect" name="this" />
            </scope>
            <scope doc="Returns a string representation of the object." ilk="function" line="4234" lineend="4240" name="toString" returns="String" signature="toString()">
              <variable citdl="ContainerEffect" name="this" />
              <variable attributes="__local__ private" citdl="String" line="4235" name="output" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.util.Element" ilk="class" line="3893" lineend="3953" name="ButtonGroup">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The ButtonGroup class creates a set of buttons that are mutually&#xA;exclusive; checking one button in the set will uncheck all others in the&#xA;button group." ilk="function" line="3893" lineend="3953" name="ButtonGroup" signature="ButtonGroup(p_oElement, p_oAttributes)">
              <variable citdl="Object" doc="Object literal specifying a set of&#xA;configuration attributes used to create the button group." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying a set&#xA;of configuration attributes used to create the button group." ilk="argument" name="p_oAttributes" />
              <variable citdl="ButtonGroup" name="this" />
              <variable attributes="__local__ private" citdl="Dom.generateId()" line="3898" name="sId" />
              <variable attributes="__local__ private" citdl="p_oElement.nodeName.toUpperCase()" line="3898" name="sNodeName" />
              <variable attributes="__local__ private" citdl="Dom.get()" line="3898" name="oElement" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.ButtonGroup.superclass.constructor" line="3898" name="fnSuperClass" />
            </scope>
            <variable citdl="Array" doc="Array of buttons in the button group." line="3969" name="_buttons" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: The name of the tag to be used for the button&#xA;group&apos;s element." line="3984" name="NODE_NAME" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: String representing the CSS class(es) to be applied&#xA;to the button group&apos;s element." line="3995" name="CSS_CLASS_NAME" />
            <scope doc="Creates the button group&apos;s element." ilk="function" line="4009" lineend="4015" name="_createGroupElement" returns="HTMLDivElement" signature="_createGroupElement()">
              <variable attributes="__local__ private" citdl="document.createElement()" line="4011" name="oElement" />
            </scope>
            <scope doc="Sets the value of the button groups&apos;s&#xA;&quot;disabled&quot; attribute." ilk="function" line="4030" lineend="4048" name="_setDisabled" signature="_setDisabled(p_bDisabled)">
              <variable citdl="Boolean" doc="Boolean indicating the value for&#xA;the button group&apos;s &quot;disabled&quot; attribute." ilk="argument" name="p_bDisabled" />
              <variable attributes="__local__ private" citdl="nButtons" line="4033" name="i" />
              <variable attributes="__local__ private" citdl="this.getCount()" line="4033" name="nButtons" />
            </scope>
            <scope doc="&quot;keydown&quot; event handler for the button group." ilk="function" line="4062" lineend="4092" name="_onKeyDown" signature="_onKeyDown(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object&#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
              <variable attributes="__local__ private" citdl="Event.getCharCode()" line="4068" name="nCharCode" />
              <variable attributes="__local__ private" citdl="Number" line="4068" name="nIndex" />
              <variable attributes="__local__ private" citdl="oTarget.parentNode.parentNode.id" line="4068" name="sId" />
              <variable attributes="__local__ private" citdl="m_oButtons[sId]" line="4068" name="oButton" />
              <variable attributes="__local__ private" citdl="Event.getTarget()" line="4068" name="oTarget" />
            </scope>
            <scope doc="&quot;appendTo&quot; event handler for the button group." ilk="function" line="4101" lineend="4113" name="_onAppendTo" signature="_onAppendTo(p_oEvent)">
              <variable citdl="Event" doc="Object representing the event that was fired." ilk="argument" name="p_oEvent" />
              <variable attributes="__local__ private" citdl="this._buttons" line="4105" name="aButtons" />
              <variable attributes="__local__ private" citdl="aButtons.length" line="4105" name="nButtons" />
              <variable attributes="__local__ private" line="4105" name="i" />
            </scope>
            <scope doc="&quot;checkedChange&quot; event handler for each button in the&#xA;button group." ilk="function" line="4125" lineend="4148" name="_onButtonCheckedChange" signature="_onButtonCheckedChange(p_oEvent, p_oButton)">
              <variable citdl="Event" doc="Object representing the event that was fired." ilk="argument" name="p_oEvent" />
              <variable ilk="argument" name="p_oButton" />
              <variable attributes="__local__ private" citdl="this.get()" line="4128" name="oCheckedButton" />
              <variable attributes="__local__ private" citdl="p_oEvent.newValue" line="4128" name="bChecked" />
            </scope>
            <scope doc="The ButtonGroup class&apos;s initialization method." ilk="function" line="4168" lineend="4234" name="init" signature="init(p_oElement, p_oAttributes)">
              <variable citdl="Object" doc="Object literal specifying a set of&#xA;configuration attributes used to create the button group." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying a&#xA;set of configuration attributes used to create the button group." ilk="argument" name="p_oAttributes" />
              <variable attributes="__local__ private" citdl="this.getElementsByClassName()" line="4178" name="aButtons" />
              <scope attributes="__local__ private" ilk="function" line="4190" lineend="4194" name="isRadioButton" signature="isRadioButton(p_oElement)">
                <variable ilk="argument" name="p_oElement" />
              </scope>
              <variable attributes="__local__ private" citdl="this.get()" line="4211" name="oContainer" />
            </scope>
            <scope doc="Initializes all of the configuration attributes used to&#xA;create the button group." ilk="function" line="4244" lineend="4328" name="initAttributes" signature="initAttributes(p_oAttributes)">
              <variable citdl="Object" doc="Object literal specifying a set of&#xA;configuration attributes used to create the button group." ilk="argument" name="p_oAttributes" />
              <variable attributes="__local__ private" citdl="p_oAttributes" line="4246" name="oAttributes" />
            </scope>
            <scope doc="Adds the button to the button group." ilk="function" line="4352" lineend="4433" name="addButton" returns="YAHOO.widget.Button" signature="addButton(p_oButton)">
              <variable citdl="Object" doc="Object literal specifying a set of&#xA;&lt;a href=&quot;YAHOO.widget.Button.html&quot;&gt;YAHOO.widget.Button&lt;/a&gt;&#xA;configuration attributes used to configure the button to be added to&#xA;the button group." ilk="argument" name="p_oButton" />
              <variable attributes="__local__ private" citdl="oButton.get()" line="4359" name="sButtonName" />
              <variable attributes="__local__ private" citdl="p_oButton" line="4359" name="oButton" />
              <variable attributes="__local__ private" citdl="this.get()" line="4359" name="sGroupName" />
              <variable attributes="__local__ private" citdl="oButton.get()" line="4359" name="oButtonElement" />
              <variable attributes="__local__ private" citdl="this.get()" line="4359" name="oGroupElement" />
              <variable attributes="__local__ private" citdl="this._buttons.length" line="4359" name="nIndex" />
            </scope>
            <scope doc="Adds the array of buttons to the button group." ilk="function" line="4455" lineend="4492" name="addButtons" returns="Array" signature="addButtons(p_aButtons)">
              <variable citdl="Array" doc="Array of object literals, each containing&#xA;a set of &lt;a href=&quot;YAHOO.widget.Button.html&quot;&gt;YAHOO.widget.Button&lt;/a&gt;&#xA;configuration attributes used to configure each button to be added&#xA;to the button group." ilk="argument" name="p_aButtons" />
              <variable attributes="__local__ private" citdl="Array" line="4460" name="aButtons" />
              <variable attributes="__local__ private" citdl="p_aButtons.length" line="4460" name="nButtons" />
              <variable attributes="__local__ private" citdl="this.addButton()" line="4460" name="oButton" />
              <variable attributes="__local__ private" line="4460" name="i" />
            </scope>
            <scope doc="Removes the button at the specified index from the&#xA;button group." ilk="function" line="4502" lineend="4538" name="removeButton" signature="removeButton(p_nIndex)">
              <variable citdl="Number" doc="Number specifying the index of the button&#xA;to be removed from the button group." ilk="argument" name="p_nIndex" />
              <variable attributes="__local__ private" citdl="this._buttons.length" line="4506" name="i" />
              <variable attributes="__local__ private" citdl="this._buttons.length" line="4506" name="nButtons" />
              <variable attributes="__local__ private" citdl="this.getButton()" line="4506" name="oButton" />
            </scope>
            <scope doc="Returns the button at the specified index." ilk="function" line="4548" lineend="4556" name="getButton" returns="YAHOO.widget.Button" signature="getButton(p_nIndex)">
              <variable citdl="Number" doc="The index of the button to retrieve from the&#xA;button group." ilk="argument" name="p_nIndex" />
            </scope>
            <scope doc="Returns an array of the buttons in the button group." ilk="function" line="4564" lineend="4568" name="getButtons" returns="Array" signature="getButtons()" />
            <scope doc="Returns the number of buttons in the button group." ilk="function" line="4576" lineend="4580" name="getCount" returns="Number" signature="getCount()" />
            <scope doc="Sets focus to the button at the specified index." ilk="function" line="4589" lineend="4625" name="focus" signature="focus(p_nIndex)">
              <variable citdl="Number" doc="Number indicating the index of the button&#xA;to focus." ilk="argument" name="p_nIndex" />
              <variable attributes="__local__ private" line="4593" name="i" />
              <variable attributes="__local__ private" citdl="this.getCount()" line="4593" name="nButtons" />
              <variable attributes="__local__ private" citdl="this._buttons[p_nIndex]" line="4593" name="oButton" />
            </scope>
            <scope doc="Checks the button at the specified index." ilk="function" line="4634" lineend="4644" name="check" signature="check(p_nIndex)">
              <variable citdl="Number" doc="Number indicating the index of the button&#xA;to check." ilk="argument" name="p_nIndex" />
              <variable attributes="__local__ private" citdl="this.getButton()" line="4636" name="oButton" />
            </scope>
            <scope doc="Removes the button group&apos;s element from its parent&#xA;element and removes all event handlers." ilk="function" line="4652" lineend="4679" name="destroy" signature="destroy()">
              <variable attributes="__local__ private" citdl="this._buttons.length" line="4658" name="i" />
              <variable attributes="__local__ private" citdl="this._buttons.length" line="4658" name="nButtons" />
              <variable attributes="__local__ private" citdl="oElement.parentNode" line="4658" name="oParentNode" />
              <variable attributes="__local__ private" citdl="this.get()" line="4658" name="oElement" />
            </scope>
            <scope doc="Returns a string representing the button group." ilk="function" line="4687" lineend="4691" name="toString" returns="String" signature="toString()" />
          </scope>
          <variable attributes="deprecated" citdl="YAHOO.widget.Calendar" doc="The old Calendar_Core class is no longer necessary." line="4300" name="Calendar_Core" />
          <variable citdl="YAHOO.widget.Calendar" line="4302" name="Cal_Core" />
          <scope ilk="class" line="4313" lineend="4399" name="DataTable">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The DataTable widget provides a progressively enhanced DHTML control for&#xA;displaying tabular data across A-grade browsers." ilk="function" line="4313" lineend="4424" name="DataTable" signature="DataTable(elContainer, aColumnDefs, oDataSource, oConfigs)">
              <variable citdl="HTMLElement" doc="Container element for the TABLE." ilk="argument" name="elContainer" />
              <variable citdl="Array" doc="Array of object literal Column definitions." ilk="argument" name="aColumnDefs" />
              <variable citdl="YAHOO.util.DataSource" doc="DataSource instance." ilk="argument" name="oDataSource" />
              <variable citdl="Object" doc="(optional) Object literal of configuration values." ilk="argument" name="oConfigs" />
              <variable citdl="DataTable" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.DataTable" line="4315" name="DT" />
              <variable attributes="__local__ private" citdl="YAHOO.util.DataSource" line="4315" name="DS" />
              <variable attributes="__local__ private" citdl="this.get()" doc="HACK: Set sortedBy values for backward compatibility" line="4365" name="oSortedBy" />
              <variable attributes="__local__ private" citdl="Object" doc="Send a simple initial request" line="4395" lineend="4400" name="oCallback">
                <variable citdl="this.onDataReturnSetRows" line="4396" name="success" />
                <variable citdl="this.onDataReturnSetRows" line="4397" name="failure" />
                <variable citdl="this" line="4398" name="scope" />
                <variable citdl="Object" line="4399" lineend="4399" name="argument" />
              </variable>
              <variable attributes="__local__ private" citdl="this.get()" line="4420" name="oCustom" />
            </scope>
            <variable citdl="DT._nCount" doc="Internal vars" line="4318" name="_nIndex" />
            <variable citdl="String" line="4319" name="_sId" />
            <variable citdl="YAHOO.util.Chain" line="4320" name="_oChainRender" />
            <variable citdl="YAHOO.util.Chain" line="4321" name="_oChainSync" />
            <variable citdl="DT.CLASS_DESC" line="4368" name="dir" />
          </scope>
          <scope ilk="class" line="4346" lineend="5512" name="CalendarGroup">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: YAHOO.widget.CalendarGroup is a special container class for YAHOO.widget.Calendar. This class facilitates&#xA;the ability to have multi-page calendar views that share a single dataset and are&#xA;dependent on each other.&#xA;&#xA;The calendar group instance will refer to each of its elements using a 0-based index.&#xA;For example, to construct the placeholder for a calendar group widget with id &quot;cal1&quot; and&#xA;containerId of &quot;cal1Container&quot;, the markup would be as follows:&#xA;*	&lt;xmp&gt;&#xA;*		&lt;div id=&quot;cal1Container_0&quot;&gt;&lt;/div&gt;&#xA;*		&lt;div id=&quot;cal1Container_1&quot;&gt;&lt;/div&gt;&#xA;*	&lt;/xmp&gt;&#xA;The tables for the calendars (&quot;cal1_0&quot; and &quot;cal1_1&quot;) will be inserted into those containers.&#xA;&#xA;&lt;p&gt;&#xA;&lt;strong&gt;NOTE: As of 2.4.0, the constructor&apos;s ID argument is optional.&lt;/strong&gt;&#xA;The CalendarGroup can be constructed by simply providing a container ID string,&#xA;or a reference to a container DIV HTMLElement (the element needs to exist&#xA;in the document).&#xA;&#xA;E.g.:&#xA;*	&lt;xmp&gt;&#xA;*		var c = new YAHOO.widget.CalendarGroup(&quot;calContainer&quot;, configOptions);&#xA;*	&lt;/xmp&gt;&#xA;or:&#xA;&lt;xmp&gt;&#xA;var containerDiv = YAHOO.util.Dom.get(&quot;calContainer&quot;);&#xA;*		var c = new YAHOO.widget.CalendarGroup(containerDiv, configOptions);&#xA;*	&lt;/xmp&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;If not provided, the ID will be generated from the container DIV ID by adding an &quot;_t&quot; suffix.&#xA;For example if an ID is not provided, and the container&apos;s ID is &quot;calContainer&quot;, the CalendarGroup&apos;s ID will be set to &quot;calContainer_t&quot;.&#xA;&lt;/p&gt;" ilk="function" line="4346" lineend="4350" name="CalendarGroup" signature="CalendarGroup(id, containerId, config)">
              <variable citdl="String" doc="optional The id of the table element that will represent the CalendarGroup widget. As of 2.4.0, this argument is optional." ilk="argument" name="id" />
              <variable ilk="argument" name="containerId" />
              <variable citdl="Object" doc="optional The configuration object containing the initial configuration values for the CalendarGroup." ilk="argument" name="config" />
              <variable citdl="CalendarGroup" name="this" />
            </scope>
            <scope doc="Initializes the calendar group. All subclasses must call this method in order for the&#xA;group to be initialized properly." ilk="function" line="4362" lineend="4442" name="init" signature="init(id, container, config)">
              <variable citdl="String" doc="optional The id of the table element that will represent the CalendarGroup widget. As of 2.4.0, this argument is optional." ilk="argument" name="id" />
              <variable ilk="argument" name="container" />
              <variable citdl="Object" doc="optional The configuration object containing the initial configuration values for the CalendarGroup." ilk="argument" name="config" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this._parseArgs()" doc="Normalize 2.4.0, pre 2.4.0 args" line="4365" name="nArgs" />
            </scope>
            <variable citdl="YAHOO.util.Dom.get()" line="4371" name="oDomContainer" />
            <variable citdl="YAHOO.util.Dom.generateId()" line="4374" name="id" />
            <variable citdl="String" doc="The unique id associated with the CalendarGroup container" line="4392" name="containerId" />
            <variable citdl="Array" doc="The collection of Calendar pages contained within the CalendarGroup" line="4402" name="pages" />
            <variable citdl="YAHOO.util.Config" doc="The Config object used to hold the configuration variables for the CalendarGroup" line="4412" name="cfg" />
            <variable citdl="Object" doc="The local object which contains the CalendarGroup&apos;s options" line="4419" lineend="4419" name="Options" />
            <variable citdl="Object" doc="The local object which contains the CalendarGroup&apos;s locale settings" line="4426" lineend="4426" name="Locale" />
            <scope ilk="function" line="4444" lineend="4768" name="setupConfig" signature="setupConfig()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarGroup._DEFAULT_CONFIG" line="4446" name="defCfg" />
            </scope>
            <scope doc="Initializes CalendarGroup&apos;s built-in CustomEvents" ilk="function" line="4774" lineend="4933" name="initEvents" signature="initEvents()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this" line="4775" name="me" />
              <variable attributes="__local__ private" citdl="String" line="4776" name="strEvent" />
              <scope attributes="__local__ private" doc="PRIVATE: Proxy subscriber to subscribe to the CalendarGroup&apos;s child Calendars&apos; CustomEvents" ilk="function" line="4786" lineend="4791" name="sub" signature="sub(fn, obj, bOverride)">
                <variable citdl="Function" doc="The function to subscribe to this CustomEvent" ilk="argument" name="fn" />
                <variable citdl="Object" doc="The CustomEvent&apos;s scope object" ilk="argument" name="obj" />
                <variable citdl="Boolean" doc="Whether or not to apply scope correction" ilk="argument" name="bOverride" />
                <variable attributes="__local__ private" citdl="me.pages[p]" line="4788" name="cal" />
              </scope>
              <scope attributes="__local__ private" doc="PRIVATE: Proxy unsubscriber to unsubscribe from the CalendarGroup&apos;s child Calendars&apos; CustomEvents" ilk="function" line="4800" lineend="4805" name="unsub" signature="unsub(fn, obj)">
                <variable citdl="Function" doc="The function to subscribe to this CustomEvent" ilk="argument" name="fn" />
                <variable citdl="Object" doc="The CustomEvent&apos;s scope object" ilk="argument" name="obj" />
                <variable attributes="__local__ private" citdl="me.pages[p]" line="4802" name="cal" />
              </scope>
              <variable attributes="__local__ private" citdl="YAHOO.widget.Calendar._EVENT_TYPES" line="4807" name="defEvents" />
            </scope>
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired before a selection is made" line="4813" name="beforeSelectEvent" />
            <variable citdl="sub" line="4814" name="subscribe" />
            <variable citdl="unsub" line="4814" name="unsubscribe" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when a selection is made" line="4821" name="selectEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired before a selection is made" line="4828" name="beforeDeselectEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when a selection is made" line="4836" name="deselectEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when the Calendar page is changed" line="4843" name="changePageEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired before the Calendar is rendered" line="4850" name="beforeRenderEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when the Calendar is rendered" line="4857" name="renderEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when the Calendar is reset" line="4864" name="resetEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired when the Calendar is cleared" line="4871" name="clearEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired just before the CalendarGroup is to be shown" line="4878" name="beforeShowEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired after the CalendarGroup is shown" line="4884" name="showEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired just before the CalendarGroup is to be hidden" line="4890" name="beforeHideEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired after the CalendarGroup is hidden" line="4896" name="hideEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired just before the CalendarNavigator is to be shown" line="4902" name="beforeShowNavEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired after the CalendarNavigator is shown" line="4908" name="showNavEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired just before the CalendarNavigator is to be hidden" line="4914" name="beforeHideNavEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired after the CalendarNavigator is hidden" line="4920" name="hideNavEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired just before the CalendarNavigator is to be rendered" line="4926" name="beforeRenderNavEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fired after the CalendarNavigator is rendered" line="4932" name="renderNavEvent" />
            <scope doc="The default Config handler for the &quot;pages&quot; property" ilk="function" line="4942" lineend="4984" name="configPages" signature="configPages(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="4943" name="pageCount" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarGroup._DEFAULT_CONFIG.PAGEDATE.key" line="4945" name="cfgPageDate" />
              <variable attributes="__local__ private" citdl="String" doc="Define literals outside loop" line="4948" name="sep" />
              <variable attributes="__local__ private" citdl="String" line="4949" name="groupCalClass" />
              <variable attributes="__local__ private" citdl="String" line="4951" name="firstClass" />
              <variable attributes="__local__ private" citdl="String" line="4952" name="lastClass" />
              <variable attributes="__local__ private" citdl="this.id" line="4955" name="calId" />
              <variable attributes="__local__ private" citdl="this.containerId" line="4956" name="calContainerId" />
              <variable attributes="__local__ private" citdl="this.cfg.getConfig()" line="4958" name="childConfig" />
              <variable attributes="__local__ private" citdl="this.constructChild()" line="4963" name="cal" />
              <variable attributes="__local__ private" citdl="cal.cfg.getProperty()" line="4964" name="caldate" />
            </scope>
            <scope doc="The default Config handler for the &quot;pagedate&quot; property" ilk="function" line="4993" lineend="5010" name="configPageDate" signature="configPageDate(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="4994" name="val" />
              <variable attributes="__local__ private" citdl="cal._parsePageDate()" line="4995" name="firstPageDate" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarGroup._DEFAULT_CONFIG.PAGEDATE.key" line="4997" name="cfgPageDate" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5000" name="cal" />
              <variable attributes="__local__ private" citdl="Date" line="5005" name="pageDate" />
            </scope>
            <scope doc="The default Config handler for the CalendarGroup &quot;selected&quot; property" ilk="function" line="5019" lineend="5024" name="configSelected" signature="configSelected(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarGroup._DEFAULT_CONFIG.SELECTED.key" line="5020" name="cfgSelected" />
              <variable attributes="__local__ private" line="5022" name="selected" />
            </scope>
            <scope doc="Delegates a configuration property to the CustomEvents associated with the CalendarGroup&apos;s children" ilk="function" line="5034" lineend="5042" name="delegateConfig" signature="delegateConfig(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Array" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="args[0]" line="5035" name="val" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5036" name="cal" />
            </scope>
            <scope doc="Adds a function to all child Calendars within this CalendarGroup." ilk="function" line="5050" lineend="5056" name="setChildFunction" signature="setChildFunction(fnName, fn)">
              <variable citdl="String" doc="The name of the function" ilk="argument" name="fnName" />
              <variable citdl="Function" doc="The function to apply to each Calendar page object" ilk="argument" name="fn" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="5051" name="pageCount" />
            </scope>
            <scope doc="Calls a function within all child Calendars within this CalendarGroup." ilk="function" line="5064" lineend="5074" name="callChildFunction" signature="callChildFunction(fnName, args)">
              <variable citdl="String" doc="The name of the function" ilk="argument" name="fnName" />
              <variable citdl="Array" doc="The arguments to pass to the function" ilk="argument" name="args" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="5065" name="pageCount" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5068" name="page" />
              <variable attributes="__local__ private" citdl="page[fnName]" line="5070" name="fn" />
            </scope>
            <scope doc="Constructs a child calendar. This method can be overridden if a subclassed version of the default&#xA;calendar is to be used." ilk="function" line="5085" lineend="5093" name="constructChild" returns="YAHOO.widget.Calendar" signature="constructChild(id, containerId, config)">
              <variable citdl="String" doc="The id of the table element that will represent the calendar widget" ilk="argument" name="id" />
              <variable citdl="String" doc="The id of the container div element that will wrap the calendar table" ilk="argument" name="containerId" />
              <variable citdl="Object" doc="The configuration object containing the Calendar&apos;s arguments" ilk="argument" name="config" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="document.getElementById()" line="5086" name="container" />
            </scope>
            <scope doc="Sets the calendar group&apos;s month explicitly. This month will be set into the first&#xA;page of the multi-page calendar, and all other months will be iterated appropriately." ilk="function" line="5101" lineend="5118" name="setMonth" signature="setMonth(month)">
              <variable citdl="Number" doc="The numeric month, from 0 (January) to 11 (December)" ilk="argument" name="month" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="pageDate.getFullYear()" line="5103" name="currYear" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarGroup._DEFAULT_CONFIG.PAGEDATE.key" line="5105" name="cfgPageDate" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5108" name="cal" />
              <variable attributes="__local__ private" citdl="cal.cfg.getProperty()" line="5109" name="pageDate" />
            </scope>
            <scope doc="Sets the calendar group&apos;s year explicitly. This year will be set into the first&#xA;page of the multi-page calendar, and all other months will be iterated appropriately." ilk="function" line="5126" lineend="5140" name="setYear" signature="setYear(year)">
              <variable citdl="Number" doc="The numeric 4-digit year" ilk="argument" name="year" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarGroup._DEFAULT_CONFIG.PAGEDATE.key" line="5128" name="cfgPageDate" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5132" name="cal" />
              <variable attributes="__local__ private" citdl="cal.cfg.getProperty()" line="5133" name="pageDate" />
            </scope>
            <scope doc="Calls the render function of all child calendars within the group." ilk="function" line="5146" lineend="5153" name="render" signature="render()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5149" name="cal" />
            </scope>
            <scope doc="Selects a date or a collection of dates on the current calendar. This method, by default,&#xA;does not call the render method explicitly. Once selection has completed, render must be&#xA;called for the changes to be reflected visually.&#xA;*								individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).&#xA;*								Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).&#xA;*								This method can also take a JavaScript Date object or an array of Date objects." ilk="function" line="5166" lineend="5172" name="select" returns="Array" signature="select(date)">
              <variable citdl="Array" doc="The date string of dates to select in the current calendar. Valid formats are" ilk="argument" name="date" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5168" name="cal" />
            </scope>
            <scope doc="Selects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.&#xA;The value of the MULTI_SELECT Configuration attribute will determine the set of dates which get selected.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If MULTI_SELECT is false, selectCell will select the cell at the specified index for only the last displayed Calendar page.&lt;/li&gt;&#xA;&lt;li&gt;If MULTI_SELECT is true, selectCell will select the cell at the specified index, on each displayed Calendar page.&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="function" line="5185" lineend="5191" name="selectCell" returns="Array" signature="selectCell(cellIndex)">
              <variable citdl="Number" doc="The index of the cell to be selected." ilk="argument" name="cellIndex" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5187" name="cal" />
            </scope>
            <scope doc="Deselects a date or a collection of dates on the current calendar. This method, by default,&#xA;does not call the render method explicitly. Once deselection has completed, render must be&#xA;called for the changes to be reflected visually.&#xA;*								individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).&#xA;*								Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).&#xA;*								This method can also take a JavaScript Date object or an array of Date objects." ilk="function" line="5204" lineend="5210" name="deselect" returns="Array" signature="deselect(date)">
              <variable citdl="Array" doc="The date string of dates to deselect in the current calendar. Valid formats are" ilk="argument" name="date" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5206" name="cal" />
            </scope>
            <scope doc="Deselects all dates on the current calendar.&#xA;*						Assuming that this function executes properly, the return value should be an empty array.&#xA;*						However, the empty array is returned for the sake of being able to check the selection status&#xA;*						of the calendar." ilk="function" line="5220" lineend="5226" name="deselectAll" returns="Array" signature="deselectAll()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5222" name="cal" />
            </scope>
            <scope doc="Deselects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.&#xA;deselectCell will deselect the cell at the specified index on each displayed Calendar page." ilk="function" line="5236" lineend="5242" name="deselectCell" returns="Array" signature="deselectCell(cellIndex)">
              <variable citdl="Number" doc="The index of the cell to deselect." ilk="argument" name="cellIndex" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5238" name="cal" />
            </scope>
            <scope doc="Resets the calendar widget to the originally selected month and year, and&#xA;sets the calendar to the initial selection(s)." ilk="function" line="5249" lineend="5254" name="reset" signature="reset()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5251" name="cal" />
            </scope>
            <scope doc="Clears the selected dates in the current calendar widget and sets the calendar&#xA;to the current month and year." ilk="function" line="5261" lineend="5266" name="clear" signature="clear()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5263" name="cal" />
            </scope>
            <scope doc="Navigates to the next month page in the calendar widget." ilk="function" line="5272" lineend="5277" name="nextMonth" signature="nextMonth()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5274" name="cal" />
            </scope>
            <scope doc="Navigates to the previous month page in the calendar widget." ilk="function" line="5283" lineend="5288" name="previousMonth" signature="previousMonth()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5285" name="cal" />
            </scope>
            <scope doc="Navigates to the next year in the currently selected month in the calendar widget." ilk="function" line="5294" lineend="5299" name="nextYear" signature="nextYear()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5296" name="cal" />
            </scope>
            <scope doc="Navigates to the previous year in the currently selected month in the calendar widget." ilk="function" line="5305" lineend="5310" name="previousYear" signature="previousYear()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5307" name="cal" />
            </scope>
            <scope citdl="Array" doc="Gets the list of currently selected dates from the calendar." ilk="function" line="5317" lineend="5329" name="getSelectedDates" returns="returnDates" signature="getSelectedDates()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="5318" name="returnDates" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="5319" name="selected" />
              <variable attributes="__local__ private" citdl="selected[d]" line="5321" name="dateArray" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.DateMath.getDate()" line="5323" name="date" />
            </scope>
            <scope doc="Adds a renderer to the render stack. The function reference passed to this method will be executed&#xA;when a date cell matches the conditions specified in the date string for this renderer.&#xA;*									include date (12/24/2005), month/day (12/24), and range (12/1/2004-1/1/2005)" ilk="function" line="5339" lineend="5344" name="addRenderer" signature="addRenderer(sDates, fnRender)">
              <variable citdl="String" doc="A date string to associate with the specified renderer. Valid formats" ilk="argument" name="sDates" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5341" name="cal" />
            </scope>
            <scope doc="Adds a month to the render stack. The function reference passed to this method will be executed&#xA;when a date cell matches the month passed to this method." ilk="function" line="5353" lineend="5358" name="addMonthRenderer" signature="addMonthRenderer(month, fnRender)">
              <variable citdl="Number" doc="The month (1-12) to associate with this renderer" ilk="argument" name="month" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5355" name="cal" />
            </scope>
            <scope doc="Adds a weekday to the render stack. The function reference passed to this method will be executed&#xA;when a date cell matches the weekday passed to this method." ilk="function" line="5367" lineend="5372" name="addWeekdayRenderer" signature="addWeekdayRenderer(weekday, fnRender)">
              <variable citdl="Number" doc="The weekday (1-7) to associate with this renderer. 1=Sunday, 2=Monday etc." ilk="argument" name="weekday" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5369" name="cal" />
            </scope>
            <scope doc="Removes all custom renderers added to the CalendarGroup through the addRenderer, addMonthRenderer and&#xA;addWeekRenderer methods. CalendarGroup&apos;s render method needs to be called to after removing renderers&#xA;to see the changes applied." ilk="function" line="5381" lineend="5383" name="removeRenderers" signature="removeRenderers()">
              <variable citdl="CalendarGroup" name="this" />
            </scope>
            <scope doc="Renders the header for the CalendarGroup." ilk="function" line="5389" lineend="5391" name="renderHeader" signature="renderHeader()">
              <variable citdl="CalendarGroup" name="this" />
            </scope>
            <scope doc="Renders a footer for the 2-up calendar container. By default, this method is&#xA;unimplemented." ilk="function" line="5398" lineend="5400" name="renderFooter" signature="renderFooter()">
              <variable citdl="CalendarGroup" name="this" />
            </scope>
            <scope doc="Adds the designated number of months to the current calendar month, and sets the current&#xA;calendar page date to the new month." ilk="function" line="5408" lineend="5410" name="addMonths" signature="addMonths(count)">
              <variable citdl="Number" doc="The number of months to add to the current calendar" ilk="argument" name="count" />
              <variable citdl="CalendarGroup" name="this" />
            </scope>
            <scope doc="Subtracts the designated number of months from the current calendar month, and sets the current&#xA;calendar page date to the new month." ilk="function" line="5418" lineend="5420" name="subtractMonths" signature="subtractMonths(count)">
              <variable citdl="Number" doc="The number of months to subtract from the current calendar" ilk="argument" name="count" />
              <variable citdl="CalendarGroup" name="this" />
            </scope>
            <scope doc="Adds the designated number of years to the current calendar, and sets the current&#xA;calendar page date to the new month." ilk="function" line="5428" lineend="5430" name="addYears" signature="addYears(count)">
              <variable citdl="Number" doc="The number of years to add to the current calendar" ilk="argument" name="count" />
              <variable citdl="CalendarGroup" name="this" />
            </scope>
            <scope doc="Subtcats the designated number of years from the current calendar, and sets the current&#xA;calendar page date to the new month." ilk="function" line="5438" lineend="5440" name="subtractYears" signature="subtractYears(count)">
              <variable citdl="Number" doc="The number of years to subtract from the current calendar" ilk="argument" name="count" />
              <variable citdl="CalendarGroup" name="this" />
            </scope>
            <scope doc="Returns the Calendar page instance which has a pagedate (month/year) matching the given date.&#xA;Returns null if no match is found." ilk="function" line="5451" lineend="5467" name="getCalendarPage" returns="Calendar" signature="getCalendarPage(date)">
              <variable citdl="Date" doc="The JavaScript Date object for which a Calendar page is to be found." ilk="argument" name="date" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="pages[i]" line="5452" name="cal" />
              <variable attributes="__local__ private" citdl="date.getFullYear()" line="5455" name="y" />
              <variable attributes="__local__ private" citdl="date.getMonth()" line="5455" name="m" />
              <variable attributes="__local__ private" citdl="this.pages" line="5457" name="pages" />
              <variable attributes="__local__ private" citdl="pages[i].cfg.getProperty()" line="5459" name="pageDate" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Sets the month on a Date object, taking into account year rollover if the month is less than 0 or greater than 11.&#xA;The Date object passed in is modified. It should be cloned before passing it into this method if the original value needs to be maintained" ilk="function" line="5477" lineend="5486" name="_setMonthOnDate" signature="_setMonthOnDate(date, iMonth)">
              <variable citdl="Date" doc="The Date object on which to set the month index" ilk="argument" name="date" />
              <variable citdl="Number" doc="The month index to set" ilk="argument" name="iMonth" />
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.DateMath" line="5480" name="DM" />
              <variable attributes="__local__ private" citdl="DM.add()" line="5481" name="newDate" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Fixes the width of the CalendarGroup container element, to account for miswrapped floats" ilk="function" line="5493" lineend="5502" name="_fixWidth" signature="_fixWidth()">
              <variable citdl="CalendarGroup" name="this" />
              <variable attributes="__local__ private" citdl="Number" line="5494" name="w" />
              <variable attributes="__local__ private" citdl="this.pages[p]" line="5496" name="cal" />
            </scope>
            <variable citdl="w" line="5500" name="width" />
            <scope doc="Returns a string representation of the object." ilk="function" line="5509" lineend="5511" name="toString" returns="String" signature="toString()">
              <variable citdl="CalendarGroup" name="this" />
            </scope>
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: CSS class representing the container for the calendar" line="5521" name="CSS_CONTAINER" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: CSS class representing the container for the calendar" line="5530" name="CSS_MULTI_UP" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: CSS class representing the title for the 2-up calendar" line="5539" name="CSS_2UPTITLE" />
            <variable attributes="deprecated __static__ constant" citdl="String" doc="DEPRECATED STATIC CONSTANT: CSS class representing the close icon for the 2-up calendar&#xA;*					Calendar&apos;s &lt;a href=&quot;YAHOO.widget.Calendar.html#Style.CSS_CLOSE&quot;&gt;Style.CSS_CLOSE&lt;/a&gt; property now represents the CSS class used to render the close icon" line="5550" name="CSS_2UPCLOSE" />
            <variable attributes="private __static__ constant" citdl="Object" doc="PRIVATE STATIC CONSTANT: The set of default Config property keys and values for the CalendarGroup" line="5591" name="_DEFAULT_CONFIG">
              <variable citdl="Object" line="5592" lineend="5592" name="PAGES">
                <variable citdl="Number" line="5592" name="value" />
                <variable citdl="String" line="5592" name="key" />
              </variable>
            </variable>
          </scope>
          <scope ilk="class" line="4686" lineend="4688" name="Panel">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Panel is an implementation of Overlay that behaves like an OS window,&#xA;with a draggable header and an optional close icon at the top right." ilk="function" line="4686" lineend="4688" name="Panel" signature="Panel(el, userConfig)">
              <variable citdl="HTMLElement" doc="The element representing the Panel" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing&#xA;the configuration that should be set for this Panel. See configuration&#xA;documentation for more details." ilk="argument" name="userConfig" />
              <variable citdl="Panel" name="this" />
            </scope>
          </scope>
          <variable citdl="YAHOO.widget.CalendarGroup" line="5594" name="CalGrp" />
          <scope ilk="class" line="5601" lineend="5603" name="Calendar2up">
            <scope attributes="__ctor__ deprecated" doc="The old Calendar2up class is no longer necessary, since&#xA;CalendarGroup renders in a 2up view by default." ilk="function" line="5601" lineend="5603" name="Calendar2up" signature="Calendar2up(id, containerId, config)">
              <variable ilk="argument" name="id" />
              <variable ilk="argument" name="containerId" />
              <variable ilk="argument" name="config" />
              <variable citdl="Calendar2up" name="this" />
            </scope>
          </scope>
          <variable attributes="deprecated" citdl="YAHOO.widget.Calendar2up" doc="The old Calendar2up class is no longer necessary, since&#xA;CalendarGroup renders in a 2up view by default." line="5610" name="Cal2up" />
          <scope ilk="class" line="5623" lineend="6849" name="CalendarNavigator">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The CalendarNavigator is used along with a Calendar/CalendarGroup to&#xA;provide a Month/Year popup navigation control, allowing the user to navigate&#xA;to a specific month/year in the Calendar/CalendarGroup without having to&#xA;scroll through months sequentially" ilk="function" line="5623" lineend="5625" name="CalendarNavigator" signature="CalendarNavigator(cal)">
              <variable citdl="{Calendar" doc="The instance of the Calendar or CalendarGroup to which this CalendarNavigator should be attached." ilk="argument" name="cal" />
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <variable citdl="String" doc="The unique ID for this CalendarNavigator instance" line="5877" name="id" />
            <variable citdl="{Calendar" doc="The Calendar/CalendarGroup instance to which the navigator belongs" line="5884" name="cal" />
            <variable citdl="HTMLElement" doc="Reference to the HTMLElement used to render the navigator&apos;s bounding box" line="5891" name="navEl" />
            <variable citdl="HTMLElement" doc="Reference to the HTMLElement used to render the navigator&apos;s mask" line="5898" name="maskEl" />
            <variable citdl="HTMLElement" doc="Reference to the HTMLElement used to input the year" line="5905" name="yearEl" />
            <variable citdl="HTMLElement" doc="Reference to the HTMLElement used to input the month" line="5912" name="monthEl" />
            <variable citdl="HTMLElement" doc="Reference to the HTMLElement used to display validation errors" line="5919" name="errorEl" />
            <variable citdl="HTMLElement" doc="Reference to the HTMLElement used to update the Calendar/Calendar group&#xA;with the month/year values" line="5927" name="submitEl" />
            <variable citdl="HTMLElement" doc="Reference to the HTMLElement used to hide the navigator without updating the&#xA;Calendar/Calendar group" line="5935" name="cancelEl" />
            <variable citdl="HTMLElement" doc="Reference to the first focusable control in the navigator (by default monthEl)" line="5942" name="firstCtrl" />
            <variable citdl="HTMLElement" doc="Reference to the last focusable control in the navigator (by default cancelEl)" line="5949" name="lastCtrl" />
            <variable citdl="HTMLDocument" doc="The document containing the Calendar/Calendar group instance" line="5957" name="_doc" />
            <variable citdl="Number" doc="Internal state property for the current year displayed in the navigator" line="5965" name="_year" />
            <variable citdl="Number" doc="Internal state property for the current month index displayed in the navigator" line="5973" name="_month" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Private internal state property which indicates whether or not the&#xA;Navigator has been rendered." line="5982" name="__rendered" />
            <scope doc="Init lifecycle method called as part of construction" ilk="function" line="5990" lineend="6004" name="init" signature="init(cal)">
              <variable citdl="Calendar" doc="The instance of the Calendar or CalendarGroup to which this CalendarNavigator should be attached" ilk="argument" name="cal" />
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="cal.oDomContainer" line="5991" name="calBox" />
              <variable attributes="__local__ private" citdl="YAHOO.env.ua.ie" doc="PRIVATE: Private flag, to identify IE6/IE7 Quirks" line="6002" name="ie" />
            </scope>
            <variable line="6003" name="__isIEQuirks" />
            <scope doc="Displays the navigator and mask, updating the input controls to reflect the&#xA;currently set month and year. The show method will invoke the render method&#xA;if the navigator has not been renderered already, allowing for lazy rendering&#xA;of the control.&#xA;&#xA;The show method will fire the Calendar/CalendarGroup&apos;s beforeShowNav and showNav events" ilk="function" line="6016" lineend="6035" name="show" signature="show()">
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarNavigator.CLASSES" line="6017" name="CLASSES" />
            </scope>
            <scope doc="Hides the navigator and mask&#xA;&#xA;The show method will fire the Calendar/CalendarGroup&apos;s beforeHideNav event and hideNav events" ilk="function" line="6043" lineend="6052" name="hide" signature="hide()">
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarNavigator.CLASSES" line="6044" name="CLASSES" />
            </scope>
            <scope doc="Displays the navigator&apos;s mask element" ilk="function" line="6060" lineend="6065" name="showMask" signature="showMask()">
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <scope doc="Hides the navigator&apos;s mask element" ilk="function" line="6072" lineend="6074" name="hideMask" signature="hideMask()">
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <scope doc="Returns the current month set on the navigator&#xA;&#xA;Note: This may not be the month set in the UI, if&#xA;the UI contains an invalid value." ilk="function" line="6085" lineend="6087" name="getMonth" returns="Number" signature="getMonth()">
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <scope doc="Returns the current year set on the navigator&#xA;&#xA;Note: This may not be the year set in the UI, if&#xA;the UI contains an invalid value." ilk="function" line="6098" lineend="6100" name="getYear" returns="Number" signature="getYear()">
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <scope doc="Sets the current month on the Navigator, and updates the UI" ilk="function" line="6108" lineend="6113" name="setMonth" signature="setMonth(nMonth)">
              <variable citdl="Number" doc="The month index, from 0 (Jan) through 11 (Dec)." ilk="argument" name="nMonth" />
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <scope doc="Sets the current year on the Navigator, and updates the UI. If the&#xA;provided year is invalid, it will not be set." ilk="function" line="6122" lineend="6128" name="setYear" signature="setYear(nYear)">
              <variable citdl="Number" doc="The full year value to set the Navigator to." ilk="argument" name="nYear" />
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarNavigator.YR_PATTERN" line="6123" name="yrPattern" />
            </scope>
            <scope doc="Renders the HTML for the navigator, adding it to the&#xA;document and attaches event listeners if it has not&#xA;already been rendered." ilk="function" line="6137" lineend="6146" name="render" signature="render()">
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <scope doc="Creates the navigator&apos;s containing HTMLElement, it&apos;s contents, and appends&#xA;the containg element to the Calendar/CalendarGroup&apos;s container." ilk="function" line="6154" lineend="6181" name="createNav" signature="createNav()">
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarNavigator" line="6155" name="NAV" />
              <variable attributes="__local__ private" citdl="this._doc" line="6156" name="doc" />
              <variable attributes="__local__ private" citdl="doc.createElement()" line="6158" name="d" />
              <variable attributes="__local__ private" citdl="this.renderNavContents()" line="6161" name="htmlBuf" />
            </scope>
            <scope doc="Creates the Mask HTMLElement and appends it to the Calendar/CalendarGroups&#xA;container." ilk="function" line="6189" lineend="6197" name="createMask" signature="createMask()">
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarNavigator.CLASSES" line="6190" name="C" />
              <variable attributes="__local__ private" citdl="this._doc.createElement()" line="6192" name="d" />
            </scope>
            <scope doc="Used to set the width/height of the mask in pixels to match the Calendar Container.&#xA;Currently only used for IE6 and IE7 quirks mode. The other A-Grade browser are handled using CSS (width/height 100%).&#xA;&lt;p&gt;&#xA;The method is also registered as an HTMLElement resize listener on the Calendars container element.&#xA;&lt;/p&gt;" ilk="function" line="6208" lineend="6215" name="_syncMask" signature="_syncMask()">
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="this.cal.oDomContainer" line="6209" name="c" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getRegion()" line="6211" name="r" />
            </scope>
            <scope doc="Renders the contents of the navigator" ilk="function" line="6225" lineend="6242" name="renderNavContents" returns="Array" signature="renderNavContents(html)">
              <variable citdl="Array" doc="The HTML buffer to append the HTML to." ilk="argument" name="html" />
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="html" line="6228" name="h" />
              <variable attributes="__local__ private" citdl="NAV.CLASSES" line="6228" name="C" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarNavigator" line="6228" name="NAV" />
            </scope>
            <scope doc="Renders the month label and control for the navigator" ilk="function" line="6251" lineend="6273" name="renderMonth" returns="Array" signature="renderMonth(html)">
              <variable citdl="Array" doc="The HTML buffer to append the HTML to." ilk="argument" name="html" />
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="NAV.CLASSES" line="6253" name="C" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarNavigator" line="6253" name="NAV" />
              <variable attributes="__local__ private" citdl="this.__getCfg()" line="6258" name="mf" />
              <variable attributes="__local__ private" citdl="html" line="6258" name="h" />
              <variable attributes="__local__ private" citdl="this.cal.cfg.getProperty()" line="6258" name="months" />
              <variable attributes="__local__ private" citdl="this.id" line="6258" name="id" />
            </scope>
            <scope doc="Renders the year label and control for the navigator" ilk="function" line="6282" lineend="6295" name="renderYear" returns="Array" signature="renderYear(html)">
              <variable citdl="Array" doc="The HTML buffer to append the HTML to." ilk="argument" name="html" />
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="NAV.CLASSES" line="6284" name="C" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarNavigator" line="6284" name="NAV" />
              <variable attributes="__local__ private" citdl="html" line="6288" name="h" />
              <variable attributes="__local__ private" citdl="this.id" line="6288" name="id" />
              <variable attributes="__local__ private" citdl="NAV.YR_MAX_DIGITS" line="6288" name="size" />
            </scope>
            <scope doc="Renders the submit/cancel buttons for the navigator" ilk="function" line="6303" lineend="6319" name="renderButtons" returns="String" signature="renderButtons(html)">
              <variable ilk="argument" name="html" />
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarNavigator.CLASSES" line="6304" name="C" />
              <variable attributes="__local__ private" citdl="html" line="6305" name="h" />
            </scope>
            <scope doc="Attaches DOM event listeners to the rendered elements&#xA;&lt;p&gt;&#xA;The method will call applyKeyListeners, to setup keyboard specific&#xA;listeners&#xA;&lt;/p&gt;" ilk="function" line="6329" lineend="6352" name="applyListeners" signature="applyListeners()">
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="6330" name="E" />
              <scope attributes="__local__ private" ilk="function" line="6332" lineend="6336" name="yearUpdateHandler" signature="yearUpdateHandler()" />
              <scope attributes="__local__ private" ilk="function" line="6338" lineend="6340" name="monthUpdateHandler" signature="monthUpdateHandler()" />
            </scope>
            <scope doc="Removes/purges DOM event listeners from the rendered elements" ilk="function" line="6359" lineend="6370" name="purgeListeners" signature="purgeListeners()">
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="6360" name="E" />
            </scope>
            <scope doc="Attaches DOM listeners for keyboard support.&#xA;Tab/Shift-Tab looping, Enter Key Submit on Year element,&#xA;Up/Down/PgUp/PgDown year increment on Year element&#xA;&lt;p&gt;&#xA;NOTE: MacOSX Safari 2.x doesn&apos;t let you tab to buttons and&#xA;MacOSX Gecko does not let you tab to buttons or select controls,&#xA;so for these browsers, Tab/Shift-Tab looping is limited to the&#xA;elements which can be reached using the tab key.&#xA;&lt;/p&gt;" ilk="function" line="6384" lineend="6402" name="applyKeyListeners" signature="applyKeyListeners()">
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.env.ua" line="6386" name="ua" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="6386" name="E" />
              <variable attributes="__local__ private" doc="IE/Safari 3.1 doesn&apos;t fire keypress for arrow/pg keys (non-&#xA;char keys)" line="6389" name="arrowEvt" />
              <variable attributes="__local__ private" doc="changes focus successfully on keydown (keypress is too late&#xA;to change focus - opera&apos;s already moved on)." line="6394" name="tabEvt" />
            </scope>
            <scope doc="Removes/purges DOM listeners for keyboard support" ilk="function" line="6409" lineend="6420" name="purgeKeyListeners" signature="purgeKeyListeners()">
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.env.ua" line="6411" name="ua" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="6411" name="E" />
              <variable attributes="__local__ private" line="6413" name="arrowEvt" />
              <variable attributes="__local__ private" line="6414" name="tabEvt" />
            </scope>
            <scope doc="Updates the Calendar/CalendarGroup&apos;s pagedate with the currently set month and year if valid.&#xA;&lt;p&gt;&#xA;If the currently set month/year is invalid, a validation error will be displayed and the&#xA;Calendar/CalendarGroup&apos;s pagedate will not be updated.&#xA;&lt;/p&gt;" ilk="function" line="6430" lineend="6453" name="submit" signature="submit()">
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="this.cal" line="6437" name="cal" />
              <variable attributes="__local__ private" citdl="this" line="6438" name="nav" />
              <scope attributes="__local__ private" ilk="function" line="6440" lineend="6444" name="update" signature="update()" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarNavigator.UPDATE_DELAY" doc="Artificial delay, just to help the user see something&#xA;changed" line="6446" name="delay" />
            </scope>
            <scope doc="Hides the navigator and mask, without updating the Calendar/CalendarGroup&apos;s state" ilk="function" line="6460" lineend="6462" name="cancel" signature="cancel()">
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <scope doc="Validates the current state of the UI controls" ilk="function" line="6470" lineend="6479" name="validate" returns="Boolean" signature="validate()">
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <scope doc="Displays an error message in the Navigator&apos;s error panel" ilk="function" line="6486" lineend="6491" name="setError" signature="setError(msg)">
              <variable citdl="String" doc="The error message to display" ilk="argument" name="msg" />
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <variable citdl="msg" line="6488" name="innerHTML" />
            <scope doc="Clears the navigator&apos;s error message and hides the error panel" ilk="function" line="6497" lineend="6502" name="clearError" signature="clearError()">
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <scope doc="Displays the validation error UI for the year control" ilk="function" line="6508" lineend="6510" name="setYearError" signature="setYearError()">
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <scope doc="Removes the validation error UI for the year control" ilk="function" line="6516" lineend="6518" name="clearYearError" signature="clearYearError()">
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <scope doc="Clears all validation and error messages in the UI" ilk="function" line="6524" lineend="6527" name="clearErrors" signature="clearErrors()">
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <scope doc="Sets the initial focus, based on the configured value" ilk="function" line="6533" lineend="6558" name="setInitialFocus" signature="setInitialFocus()">
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="this.submitEl" line="6535" name="el" />
              <variable attributes="__local__ private" citdl="this.__getCfg()" line="6535" name="f" />
            </scope>
            <scope doc="Removes all renderered HTML elements for the Navigator from&#xA;the DOM, purges event listeners and clears (nulls) any property&#xA;references to HTML references" ilk="function" line="6566" lineend="6595" name="erase" signature="erase()">
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="this.navEl.parentNode" line="6582" name="p" />
              <variable attributes="__local__ private" citdl="this.maskEl.parentNode" line="6588" name="pm" />
            </scope>
            <scope doc="Destroys the Navigator object and any HTML references" ilk="function" line="6601" lineend="6606" name="destroy" signature="destroy()">
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <scope doc="Protected implementation to handle how UI elements are&#xA;hidden/shown." ilk="function" line="6615" lineend="6619" name="_show" signature="_show(el, bShow)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="bShow" />
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <scope doc="Returns the month value (index), from the month UI element" ilk="function" line="6628" lineend="6634" name="_getMonthFromUI" returns="Number" signature="_getMonthFromUI()">
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <scope doc="Returns the year value, from the Navitator&apos;s year UI element" ilk="function" line="6643" lineend="6656" name="_getYearFromUI" returns="Number" signature="_getYearFromUI()">
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarNavigator" line="6644" name="NAV" />
              <variable attributes="__local__ private" citdl="parseInt()" line="6646" name="yr" />
              <variable attributes="__local__ private" citdl="this.yearEl.value" line="6648" name="value" />
            </scope>
            <scope doc="Updates the Navigator&apos;s year UI, based on the year value set on the Navigator object" ilk="function" line="6663" lineend="6667" name="_updateYearUI" signature="_updateYearUI()">
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <variable citdl="this._year" line="6665" name="value" />
            <scope doc="Updates the Navigator&apos;s month UI, based on the month value set on the Navigator object" ilk="function" line="6674" lineend="6678" name="_updateMonthUI" signature="_updateMonthUI()">
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <variable citdl="this._month" line="6676" name="selectedIndex" />
            <scope doc="Sets up references to the first and last focusable element in the Navigator&apos;s UI&#xA;in terms of tab order (Naviagator&apos;s firstEl and lastEl properties). The references&#xA;are used to control modality by looping around from the first to the last control&#xA;and visa versa for tab/shift-tab navigation.&#xA;&lt;p&gt;&#xA;See &lt;a href=&quot;#applyKeyListeners&quot;&gt;applyKeyListeners&lt;/a&gt;&#xA;&lt;/p&gt;" ilk="function" line="6691" lineend="6708" name="_setFirstLastElements" signature="_setFirstLastElements()">
              <variable citdl="CalendarNavigator" name="this" />
            </scope>
            <scope doc="Default Keyboard event handler to capture Enter&#xA;on the Navigator&apos;s year control (yearEl)" ilk="function" line="6718" lineend="6725" name="_handleEnterKey" signature="_handleEnterKey(e)">
              <variable citdl="Event" doc="The DOM event being handled" ilk="argument" name="e" />
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.KeyListener.KEY" line="6719" name="KEYS" />
            </scope>
            <scope doc="Default Keyboard event handler to capture up/down/pgup/pgdown&#xA;on the Navigator&apos;s year control (yearEl)." ilk="function" line="6735" lineend="6772" name="_handleDirectionKeys" signature="_handleDirectionKeys(e)">
              <variable citdl="Event" doc="The DOM event being handled" ilk="argument" name="e" />
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.KeyListener.KEY" line="6738" name="KEYS" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarNavigator" line="6738" name="NAV" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="6738" name="E" />
              <variable attributes="__local__ private" line="6740" name="value" />
              <variable attributes="__local__ private" citdl="Boolean" line="6742" name="dir" />
            </scope>
            <scope doc="Default Keyboard event handler to capture Tab&#xA;on the last control (lastCtrl) in the Navigator." ilk="function" line="6782" lineend="6794" name="_handleTabKey" signature="_handleTabKey(e)">
              <variable citdl="Event" doc="The DOM event being handled" ilk="argument" name="e" />
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.KeyListener.KEY" line="6784" name="KEYS" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="6784" name="E" />
            </scope>
            <scope doc="Default Keyboard event handler to capture Shift-Tab&#xA;on the first control (firstCtrl) in the Navigator." ilk="function" line="6804" lineend="6816" name="_handleShiftTabKey" signature="_handleShiftTabKey(e)">
              <variable citdl="Event" doc="The DOM event being handled" ilk="argument" name="e" />
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.KeyListener.KEY" line="6806" name="KEYS" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="6806" name="E" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Retrieve Navigator configuration values from&#xA;the parent Calendar/CalendarGroup&apos;s config value.&#xA;&lt;p&gt;&#xA;If it has not been set in the user provided configuration, the method will&#xA;return the default value of the configuration property, as set in _DEFAULT_CFG&#xA;&lt;/p&gt;" ilk="function" line="6831" lineend="6840" name="__getCfg" signature="__getCfg(prop, bIsStr)">
              <variable ilk="argument" name="prop" />
              <variable ilk="argument" name="bIsStr" />
              <variable citdl="CalendarNavigator" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarNavigator._DEFAULT_CFG" line="6832" name="DEF_CFG" />
              <variable attributes="__local__ private" citdl="this.cal.cfg.getProperty()" line="6833" name="cfg" />
            </scope>
            <variable attributes="private" doc="PRIVATE: Private flag, to identify MacOS" line="6847" name="__isMac" />
          </scope>
          <scope ilk="class" line="5881" lineend="5883" name="Dialog">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: &lt;p&gt;&#xA;Dialog is an implementation of Panel that can be used to submit form&#xA;data.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Built-in functionality for buttons with event handlers is included.&#xA;If the optional YUI Button dependancy is included on the page, the buttons&#xA;created will be instances of YAHOO.widget.Button, otherwise regular HTML buttons&#xA;will be created.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Forms can be processed in 3 ways -- via an asynchronous Connection utility call,&#xA;a simple form POST or GET, or manually. The YUI Connection utility should be&#xA;included if you&apos;re using the default &quot;async&quot; postmethod, but is not required if&#xA;you&apos;re using any of the other postmethod values.&#xA;&lt;/p&gt;" ilk="function" line="5881" lineend="5883" name="Dialog" signature="Dialog(el, userConfig)">
              <variable citdl="HTMLElement" doc="The element representing the Dialog" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing&#xA;the configuration that should be set for this Dialog. See configuration&#xA;documentation for more details." ilk="argument" name="userConfig" />
              <variable citdl="Dialog" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="5928" lineend="7889" name="MenuItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Creates an item for a menu." ilk="function" line="5928" lineend="5944" name="MenuItem" signature="MenuItem(p_oObject, p_oConfig)">
              <variable citdl="String" doc="String specifying the text of the menu item." ilk="argument" name="p_oObject" />
              <variable citdl="Object" doc="Optional. Object literal specifying the&#xA;configuration for the menu item. See configuration class documentation&#xA;for more details." ilk="argument" name="p_oConfig" />
              <variable citdl="MenuItem" name="this" />
            </scope>
            <variable citdl="p_oConfig.parent" line="5934" name="parent" />
            <variable citdl="p_oConfig.value" line="5935" name="value" />
            <variable citdl="p_oConfig.id" line="5936" name="id" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: String representing the CSS class(es) to be applied to the&#xA;&lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element of the menu item." line="6084" name="CSS_CLASS_NAME" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: String representing the CSS class(es) to be applied to the&#xA;menu item&apos;s &lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt; element." line="6095" name="CSS_LABEL_CLASS_NAME" />
            <variable attributes="constant" citdl="YAHOO.widget.Menu" doc="CONSTANT: Object representing the type of menu to instantiate and&#xA;add when parsing the child nodes of the menu item&apos;s source HTML element." line="6105" name="SUBMENU_TYPE" />
            <variable attributes="private" citdl="HTMLAnchorElement" doc="PRIVATE: Object reference to the menu item&apos;s&#xA;&lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt; element." line="6121" name="_oAnchor" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: Object reference to the menu item&apos;s help text&#xA;&lt;code&gt;&amp;#60;em&amp;#62;&lt;/code&gt; element." line="6133" name="_oHelpTextEM" />
            <variable attributes="private" citdl="YAHOO.widget.Menu" doc="PRIVATE: Object reference to the menu item&apos;s submenu." line="6143" name="_oSubmenu" />
            <variable attributes="private" citdl="Object" doc="PRIVATE: Object reference to the menu item&apos;s current value for the&#xA;&quot;onclick&quot; configuration attribute." line="6154" name="_oOnclickAttributeValue" />
            <variable attributes="private" citdl="String" doc="PRIVATE: The current value of the &quot;classname&quot; configuration attribute." line="6164" name="_sClassName" />
            <variable citdl="YAHOO.widget.MenuItem" doc="Object reference to the menu item&apos;s constructor function." line="6177" name="constructor" />
            <variable citdl="Number" doc="Number indicating the ordinal position of the menu item in&#xA;its group." line="6187" name="index" />
            <variable citdl="Number" doc="Number indicating the index of the group to which the menu&#xA;item belongs." line="6197" name="groupIndex" />
            <variable citdl="HTMLLIElement" doc="Object reference to the menu item&apos;s&#xA;&lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element." line="6218" name="element" />
            <variable citdl="HTMLLIElement" doc="Object reference to the HTML element (either&#xA;&lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt;, &lt;code&gt;&amp;#60;optgroup&amp;#62;&lt;/code&gt; or&#xA;&lt;code&gt;&amp;#60;option&amp;#62;&lt;/code&gt;) used create the menu item." line="6237" name="srcElement" />
            <variable attributes="deprecated" citdl="String" doc="DEPRECATED: String representing the browser." line="6255" name="browser" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fires when the menu item&apos;s &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt;&#xA;element is removed from its parent &lt;code&gt;&amp;#60;ul&amp;#62;&lt;/code&gt; element." line="6280" name="destroyEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fires when the mouse has entered the menu item.  Passes&#xA;back the DOM Event object as an argument." line="6289" name="mouseOverEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fires when the mouse has left the menu item.  Passes back&#xA;the DOM Event object as an argument." line="6298" name="mouseOutEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fires when the user mouses down on the menu item.  Passes&#xA;back the DOM Event object as an argument." line="6307" name="mouseDownEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fires when the user releases a mouse button while the mouse&#xA;is over the menu item.  Passes back the DOM Event object as an argument." line="6316" name="mouseUpEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fires when the user clicks the on the menu item.  Passes&#xA;back the DOM Event object as an argument." line="6325" name="clickEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fires when the user presses an alphanumeric key when the&#xA;menu item has focus.  Passes back the DOM Event object as an argument." line="6334" name="keyPressEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fires when the user presses a key when the menu item has&#xA;focus.  Passes back the DOM Event object as an argument." line="6343" name="keyDownEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fires when the user releases a key when the menu item has&#xA;focus.  Passes back the DOM Event object as an argument." line="6352" name="keyUpEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fires when the menu item receives focus." line="6360" name="focusEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Fires when the menu item loses the input focus." line="6368" name="blurEvent" />
            <scope doc="The MenuItem class&apos;s initialization method. This method is&#xA;automatically called by the constructor, and sets up all DOM references&#xA;for pre-existing markup, and creates required markup if it is not&#xA;already present." ilk="function" line="6391" lineend="6558" name="init" signature="init(p_oObject, p_oConfig)">
              <variable citdl="String" doc="String specifying the text of the menu item." ilk="argument" name="p_oObject" />
              <variable citdl="Object" doc="Optional. Object literal specifying the&#xA;configuration for the menu item. See configuration class documentation&#xA;for more details." ilk="argument" name="p_oConfig" />
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="this.id" line="6413" name="sId" />
              <variable attributes="__local__ private" citdl="oAnchor.getAttribute()" line="6413" name="sTarget" />
              <variable attributes="__local__ private" citdl="String" line="6413" name="sURL" />
              <variable attributes="__local__ private" citdl="oAnchor.innerHTML" line="6413" name="sText" />
              <variable attributes="__local__ private" citdl="this.cfg" line="6413" name="oConfig" />
              <variable attributes="__local__ private" citdl="Dom.getFirstChild()" line="6413" name="oAnchor" />
              <variable attributes="__local__ private" citdl="CustomEvent.LIST" line="6413" name="SIGNATURE" />
            </scope>
            <variable citdl="YAHOO.util.Config" doc="Create the config object" line="6403" name="cfg" />
            <variable citdl="SIGNATURE" line="6516" name="signature" />
            <scope attributes="private" doc="PRIVATE: Creates the core DOM structure for the menu item." ilk="function" line="6570" lineend="6591" name="_createRootNodeStructure" signature="_createRootNodeStructure()">
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="oElement.firstChild" line="6573" name="oAnchor" />
              <variable attributes="__local__ private" citdl="m_oMenuItemTemplate.cloneNode()" line="6573" name="oElement" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Iterates the source element&apos;s childNodes collection and uses&#xA;the child nodes to instantiate other menus." ilk="function" line="6600" lineend="6673" name="_initSubTree" signature="_initSubTree()">
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="oSrcEl.firstChild" line="6608" name="oNode" />
              <variable attributes="__local__ private" line="6608" name="n" />
              <variable attributes="__local__ private" citdl="this.cfg" line="6608" name="oConfig" />
              <variable attributes="__local__ private" line="6608" name="oMenu" />
              <variable attributes="__local__ private" citdl="aOptions.length" line="6608" name="nOptions" />
              <variable attributes="__local__ private" citdl="Array" line="6608" name="aOptions" />
              <variable attributes="__local__ private" citdl="this.srcElement" line="6608" name="oSrcEl" />
            </scope>
            <scope doc="Event handler for when the &quot;text&quot; configuration property of&#xA;the menu item changes." ilk="function" line="6690" lineend="6732" name="configText" signature="configText(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="this._oAnchor" line="6698" name="oAnchor" />
              <variable attributes="__local__ private" citdl="String" line="6698" name="sEmphasisStartTag" />
              <variable attributes="__local__ private" citdl="String" line="6698" name="sHelpTextHTML" />
              <variable attributes="__local__ private" citdl="String" line="6698" name="sEmphasisEndTag" />
              <variable attributes="__local__ private" citdl="p_aArgs[0]" line="6698" name="sText" />
              <variable attributes="__local__ private" citdl="this.cfg" line="6698" name="oConfig" />
              <variable attributes="__local__ private" citdl="oConfig.getProperty()" line="6698" name="sHelpText" />
            </scope>
            <scope doc="Event handler for when the &quot;helptext&quot; configuration property&#xA;of the menu item changes." ilk="function" line="6745" lineend="6749" name="configHelpText" signature="configHelpText(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
              <variable citdl="MenuItem" name="this" />
            </scope>
            <scope doc="Event handler for when the &quot;url&quot; configuration property of&#xA;the menu item changes." ilk="function" line="6762" lineend="6782" name="configURL" signature="configURL(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="p_aArgs[0]" line="6764" name="sURL" />
              <variable attributes="__local__ private" citdl="this._oAnchor" line="6772" name="oAnchor" />
            </scope>
            <scope doc="Event handler for when the &quot;target&quot; configuration property&#xA;of the menu item changes." ilk="function" line="6795" lineend="6811" name="configTarget" signature="configTarget(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="p_aArgs[0]" line="6798" name="sTarget" />
              <variable attributes="__local__ private" citdl="this._oAnchor" line="6798" name="oAnchor" />
            </scope>
            <scope doc="Event handler for when the &quot;emphasis&quot; configuration property&#xA;of the menu item changes." ilk="function" line="6824" lineend="6839" name="configEmphasis" signature="configEmphasis(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="this.cfg" line="6827" name="oConfig" />
              <variable attributes="__local__ private" citdl="p_aArgs[0]" line="6827" name="bEmphasis" />
            </scope>
            <scope doc="Event handler for when the &quot;strongemphasis&quot; configuration&#xA;property of the menu item changes." ilk="function" line="6852" lineend="6866" name="configStrongEmphasis" signature="configStrongEmphasis(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="this.cfg" line="6855" name="oConfig" />
              <variable attributes="__local__ private" citdl="p_aArgs[0]" line="6855" name="bStrongEmphasis" />
            </scope>
            <scope doc="Event handler for when the &quot;checked&quot; configuration property&#xA;of the menu item changes." ilk="function" line="6879" lineend="6920" name="configChecked" signature="configChecked(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="this._oAnchor" line="6887" name="oAnchor" />
              <variable attributes="__local__ private" citdl="this.CSS_CLASS_NAME" line="6887" name="sClassName" />
              <variable attributes="__local__ private" citdl="this.cfg" line="6887" name="oConfig" />
              <variable attributes="__local__ private" citdl="p_aArgs[0]" line="6887" name="bChecked" />
              <variable attributes="__local__ private" citdl="String" line="6887" name="sState" />
              <variable attributes="__local__ private" citdl="this.element" line="6887" name="oElement" />
              <variable attributes="__local__ private" citdl="this.CSS_LABEL_CLASS_NAME" line="6887" name="sLabelClassName" />
            </scope>
            <scope doc="Event handler for when the &quot;disabled&quot; configuration property&#xA;of the menu item changes." ilk="function" line="6934" lineend="7004" name="configDisabled" signature="configDisabled(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="this.CSS_LABEL_CLASS_NAME" line="6950" name="sLabelSubmenuClassName" />
              <variable attributes="__local__ private" citdl="this._oAnchor" line="6950" name="oAnchor" />
              <variable attributes="__local__ private" citdl="this.CSS_CLASS_NAME" line="6950" name="sSubmenuClassName" />
              <variable attributes="__local__ private" citdl="String" line="6950" name="sCheckedState" />
              <variable attributes="__local__ private" citdl="this.CSS_CLASS_NAME" line="6950" name="sCheckedClassName" />
              <variable attributes="__local__ private" citdl="this.CSS_CLASS_NAME" line="6950" name="sClassName" />
              <variable attributes="__local__ private" citdl="this.cfg" line="6950" name="oConfig" />
              <variable attributes="__local__ private" citdl="p_aArgs[0]" line="6950" name="bDisabled" />
              <variable attributes="__local__ private" citdl="this.CSS_LABEL_CLASS_NAME" line="6950" name="sLabelCheckedClassName" />
              <variable attributes="__local__ private" citdl="oConfig.getProperty()" line="6950" name="bChecked" />
              <variable attributes="__local__ private" citdl="String" line="6950" name="sState" />
              <variable attributes="__local__ private" citdl="String" line="6950" name="sSubmenuState" />
              <variable attributes="__local__ private" citdl="this.element" line="6950" name="oElement" />
              <variable attributes="__local__ private" citdl="oConfig.getProperty()" line="6950" name="oSubmenu" />
              <variable attributes="__local__ private" citdl="this.CSS_LABEL_CLASS_NAME" line="6950" name="sLabelClassName" />
            </scope>
            <scope doc="Event handler for when the &quot;selected&quot; configuration property&#xA;of the menu item changes." ilk="function" line="7017" lineend="7095" name="configSelected" signature="configSelected(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="this.CSS_LABEL_CLASS_NAME" line="7033" name="sLabelSubmenuClassName" />
              <variable attributes="__local__ private" citdl="this._oAnchor" line="7033" name="oAnchor" />
              <variable attributes="__local__ private" citdl="this.CSS_CLASS_NAME" line="7033" name="sSubmenuClassName" />
              <variable attributes="__local__ private" citdl="String" line="7033" name="sCheckedState" />
              <variable attributes="__local__ private" citdl="String" line="7033" name="sSubmenuState" />
              <variable attributes="__local__ private" citdl="this.CSS_CLASS_NAME" line="7033" name="sCheckedClassName" />
              <variable attributes="__local__ private" citdl="this.CSS_CLASS_NAME" line="7033" name="sClassName" />
              <variable attributes="__local__ private" citdl="this.cfg" line="7033" name="oConfig" />
              <variable attributes="__local__ private" citdl="this.CSS_LABEL_CLASS_NAME" line="7033" name="sLabelCheckedClassName" />
              <variable attributes="__local__ private" citdl="oConfig.getProperty()" line="7033" name="bChecked" />
              <variable attributes="__local__ private" citdl="String" line="7033" name="sState" />
              <variable attributes="__local__ private" citdl="p_aArgs[0]" line="7033" name="bSelected" />
              <variable attributes="__local__ private" citdl="this.element" line="7033" name="oElement" />
              <variable attributes="__local__ private" citdl="oConfig.getProperty()" line="7033" name="oSubmenu" />
              <variable attributes="__local__ private" citdl="this.CSS_LABEL_CLASS_NAME" line="7033" name="sLabelClassName" />
            </scope>
            <scope attributes="private" doc="PRIVATE: &quot;beforehide&quot; Custom Event handler for a submenu." ilk="function" line="7106" lineend="7127" name="_onSubmenuBeforeHide" signature="_onSubmenuBeforeHide(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="oItem.parent" line="7109" name="oMenu" />
              <variable attributes="__local__ private" citdl="this.parent" line="7109" name="oItem" />
              <scope attributes="__local__ private" ilk="function" line="7111" lineend="7116" name="onHide" signature="onHide()" />
            </scope>
            <scope doc="Event handler for when the &quot;submenu&quot; configuration property&#xA;of the menu item changes." ilk="function" line="7140" lineend="7237" name="configSubmenu" signature="configSubmenu(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="this.parent" line="7152" name="bLazyLoad" />
              <variable attributes="__local__ private" citdl="this._oAnchor" line="7152" name="oAnchor" />
              <variable attributes="__local__ private" citdl="oSubmenu" line="7152" name="oSubmenuConfig" />
              <variable attributes="__local__ private" citdl="oSubmenu.id" line="7152" name="sSubmenuId" />
              <variable attributes="__local__ private" citdl="this.CSS_CLASS_NAME" line="7152" name="sClassName" />
              <variable attributes="__local__ private" citdl="this.cfg" line="7152" name="oConfig" />
              <variable attributes="__local__ private" citdl="oSubmenu" line="7152" name="oMenu" />
              <variable attributes="__local__ private" citdl="String" line="7152" name="sState" />
              <variable attributes="__local__ private" citdl="this.element" line="7152" name="oElement" />
              <variable attributes="__local__ private" citdl="p_aArgs[0]" line="7152" name="oSubmenu" />
              <variable attributes="__local__ private" citdl="this.CSS_LABEL_CLASS_NAME" line="7152" name="sLabelClassName" />
            </scope>
            <scope doc="Event handler for when the &quot;onclick&quot; configuration property&#xA;of the menu item changes." ilk="function" line="7250" lineend="7281" name="configOnClick" signature="configOnClick(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="p_aArgs[0]" line="7252" name="oObject" />
            </scope>
            <scope doc="Event handler for when the &quot;classname&quot; configuration&#xA;property of a menu item changes." ilk="function" line="7294" lineend="7307" name="configClassName" signature="configClassName(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="p_aArgs[0]" line="7296" name="sClassName" />
            </scope>
            <scope doc="Initializes an item&apos;s configurable properties." ilk="function" line="7318" lineend="7570" name="initDefaultConfig" signature="initDefaultConfig()">
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="this.cfg" line="7320" name="oConfig" />
            </scope>
            <scope doc="Finds the menu item&apos;s next enabled sibling." ilk="function" line="7578" lineend="7632" name="getNextEnabledSibling" signature="getNextEnabledSibling()">
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="nGroupIndex" line="7584" name="nNextGroupIndex" />
              <variable attributes="__local__ private" citdl="this.groupIndex" line="7584" name="nGroupIndex" />
              <variable attributes="__local__ private" citdl="getNextArrayItem()" line="7584" name="oNextItem" />
              <variable attributes="__local__ private" citdl="getNextArrayItem()" line="7584" name="aNextGroup" />
              <variable attributes="__local__ private" citdl="this.parent.getItemGroups()" line="7584" name="aItemGroups" />
              <scope attributes="__local__ private" ilk="function" line="7586" lineend="7591" name="getNextArrayItem" returns="p_aArray[p_nStartIndex]" signature="getNextArrayItem(p_aArray, p_nStartIndex)">
                <variable ilk="argument" name="p_aArray" />
                <variable ilk="argument" name="p_nStartIndex" />
              </scope>
            </scope>
            <scope doc="Finds the menu item&apos;s previous enabled sibling." ilk="function" line="7640" lineend="7701" name="getPreviousEnabledSibling" returns="YAHOO.widget.MenuItem" signature="getPreviousEnabledSibling()">
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="getPreviousArrayItem()" line="7646" name="oPreviousItem" />
              <variable attributes="__local__ private" citdl="this.groupIndex" line="7646" name="nGroupIndex" />
              <variable attributes="__local__ private" citdl="getPreviousArrayItem()" line="7646" name="aPreviousGroup" />
              <variable attributes="__local__ private" citdl="nGroupIndex" line="7646" name="nPreviousGroupIndex" />
              <variable attributes="__local__ private" citdl="this.parent.getItemGroups()" line="7646" name="aItemGroups" />
              <scope attributes="__local__ private" ilk="function" line="7648" lineend="7653" name="getPreviousArrayItem" returns="p_aArray[p_nStartIndex]" signature="getPreviousArrayItem(p_aArray, p_nStartIndex)">
                <variable ilk="argument" name="p_aArray" />
                <variable ilk="argument" name="p_nStartIndex" />
              </scope>
              <scope attributes="__local__ private" ilk="function" line="7655" lineend="7660" name="getFirstItemIndex" returns="p_aArray[p_nStartIndex]" signature="getFirstItemIndex(p_aArray, p_nStartIndex)">
                <variable ilk="argument" name="p_aArray" />
                <variable ilk="argument" name="p_nStartIndex" />
              </scope>
            </scope>
            <scope doc="Causes the menu item to receive the focus and fires the&#xA;focus event." ilk="function" line="7709" lineend="7760" name="focus" signature="focus()">
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="this.parent" line="7714" name="oParent" />
              <variable attributes="__local__ private" citdl="this" line="7714" name="me" />
              <variable attributes="__local__ private" citdl="this._oAnchor" line="7714" name="oAnchor" />
              <variable attributes="__local__ private" citdl="oParent.activeItem" line="7714" name="oActiveItem" />
              <scope attributes="__local__ private" ilk="function" line="7717" lineend="7742" name="setFocus" signature="setFocus()" />
            </scope>
            <scope doc="Causes the menu item to lose focus and fires the&#xA;blur event." ilk="function" line="7768" lineend="7794" name="blur" signature="blur()">
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="this.parent" line="7770" name="oParent" />
              <variable attributes="__local__ private" citdl="this" line="7776" name="me" />
            </scope>
            <scope doc="Returns a boolean indicating whether or not the menu item&#xA;has focus." ilk="function" line="7803" lineend="7807" name="hasFocus" returns="Boolean" signature="hasFocus()">
              <variable citdl="MenuItem" name="this" />
            </scope>
            <scope doc="Removes the menu item&apos;s &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element&#xA;from its parent &lt;code&gt;&amp;#60;ul&amp;#62;&lt;/code&gt; element." ilk="function" line="7815" lineend="7866" name="destroy" signature="destroy()">
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="oEl.parentNode" line="7819" name="oParentNode" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="7819" name="oSubmenu" />
              <variable attributes="__local__ private" citdl="this.element" line="7819" name="oEl" />
            </scope>
            <scope doc="Returns a string representing the menu item." ilk="function" line="7874" lineend="7887" name="toString" returns="String" signature="toString()">
              <variable citdl="MenuItem" name="this" />
              <variable attributes="__local__ private" citdl="String" line="7877" name="sReturnVal" />
              <variable attributes="__local__ private" citdl="this.id" line="7877" name="sId" />
            </scope>
          </scope>
          <variable attributes="__static__" citdl="YAHOO.util.CustomEvent" doc="STATIC: Event is fired during the render process directly after the Toolbar is loaded. Allowing you to attach events to the toolbar. See &lt;a href=&quot;YAHOO.util.Element.html#addListener&quot;&gt;Element.addListener&lt;/a&gt; for more information on listening for this event.&#xA;Event is fired after the cleanHTML method is called.&#xA;Event is fired after the render process finishes. See &lt;a href=&quot;YAHOO.util.Element.html#addListener&quot;&gt;Element.addListener&lt;/a&gt; for more information on listening for this event.&#xA;Event is fired after the editor iframe&apos;s document fully loads and fires it&apos;s onload event. From here you can start injecting your own things into the document. See &lt;a href=&quot;YAHOO.util.Element.html#addListener&quot;&gt;Element.addListener&lt;/a&gt; for more information on listening for this event.&#xA;Passed through HTML Event. See &lt;a href=&quot;YAHOO.util.Element.html#addListener&quot;&gt;Element.addListener&lt;/a&gt; for more information on listening for this event.&#xA;Passed through HTML Event. See &lt;a href=&quot;YAHOO.util.Element.html#addListener&quot;&gt;Element.addListener&lt;/a&gt; for more information on listening for this event.&#xA;Passed through HTML Event. See &lt;a href=&quot;YAHOO.util.Element.html#addListener&quot;&gt;Element.addListener&lt;/a&gt; for more information on listening for this event.&#xA;Passed through HTML Event. See &lt;a href=&quot;YAHOO.util.Element.html#addListener&quot;&gt;Element.addListener&lt;/a&gt; for more information on listening for this event.&#xA;Passed through HTML Event. See &lt;a href=&quot;YAHOO.util.Element.html#addListener&quot;&gt;Element.addListener&lt;/a&gt; for more information on listening for this event.&#xA;Passed through HTML Event. See &lt;a href=&quot;YAHOO.util.Element.html#addListener&quot;&gt;Element.addListener&lt;/a&gt; for more information on listening for this event.&#xA;Event fires at the beginning of the nodeChange process. See &lt;a href=&quot;YAHOO.util.Element.html#addListener&quot;&gt;Element.addListener&lt;/a&gt; for more information on listening for this event.&#xA;Event fires at the end of the nodeChange process. See &lt;a href=&quot;YAHOO.util.Element.html#addListener&quot;&gt;Element.addListener&lt;/a&gt; for more information on listening for this event.&#xA;Event fires at the beginning of the execCommand process. See &lt;a href=&quot;YAHOO.util.Element.html#addListener&quot;&gt;Element.addListener&lt;/a&gt; for more information on listening for this event.&#xA;Event fires at the end of the execCommand process. See &lt;a href=&quot;YAHOO.util.Element.html#addListener&quot;&gt;Element.addListener&lt;/a&gt; for more information on listening for this event.&#xA;Singleton object used to track the open window objects and panels across the various open editors" line="6254" lineend="6311" name="EditorInfo">
            <variable attributes="private" citdl="Object" doc="PRIVATE: A reference to all editors on the page." line="6261" lineend="6261" name="_instances" />
            <variable attributes="private" citdl="String" doc="PRIVATE: A reference to the blankImage url" line="6268" name="blankImage" />
            <variable attributes="private" citdl="YAHOO.widget.EditorWindow" doc="PRIVATE: A reference to the currently open window object in any editor on the page." line="6275" lineend="6275" name="window" />
            <variable attributes="private" citdl="YAHOO.widget.Overlay" doc="PRIVATE: A reference to the currently open panel in any editor on the page." line="6282" name="panel" />
            <scope doc="Returns a reference to the Editor object associated with the given textarea" ilk="function" line="6289" lineend="6298" name="getEditorById" returns="Boolean" signature="getEditorById(id)">
              <variable citdl="String/HTMLElement" doc="The id or reference of the textarea to return the Editor instance of" ilk="argument" name="id" />
              <variable citdl="EditorInfo" name="this" />
            </scope>
            <scope doc="Returns a string representing the EditorInfo." ilk="function" line="6304" lineend="6310" name="toString" returns="String" signature="toString()">
              <variable citdl="EditorInfo" name="this" />
              <variable attributes="__local__ private" citdl="Number" line="6305" name="len" />
            </scope>
          </variable>
          <scope classrefs="YAHOO.widget.SimpleEditor" ilk="class" line="6341" lineend="6343" name="Editor">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor&apos;s toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization." ilk="function" line="6341" lineend="6343" name="Editor" signature="Editor(el, attrs)">
              <variable citdl="String/HTMLElement" doc="The textarea element to turn into an editor." ilk="argument" name="el" />
              <variable citdl="Object" doc="Object liternal containing configuration parameters." ilk="argument" name="attrs" />
              <variable citdl="Editor" name="this" />
            </scope>
            <variable citdl="String" doc="The accessibility string for the element before the iFrame" line="6363" name="STR_BEFORE_EDITOR" />
            <variable citdl="String" doc="The Title of the close button in the Editor Window" line="6369" name="STR_CLOSE_WINDOW" />
            <variable citdl="String" doc="A note appearing in the Editor Window to tell the user that the Escape key will close the window" line="6375" name="STR_CLOSE_WINDOW_NOTE" />
            <variable citdl="String" doc="The title for the Image Property Editor Window" line="6381" name="STR_IMAGE_PROP_TITLE" />
            <variable citdl="String" doc="The label string for Image URL" line="6387" name="STR_IMAGE_URL" />
            <variable citdl="String" doc="The label string for Image Description" line="6393" name="STR_IMAGE_TITLE" />
            <variable citdl="String" doc="The label string for Image Size" line="6399" name="STR_IMAGE_SIZE" />
            <variable citdl="String" doc="The label string for Original Image Size" line="6405" name="STR_IMAGE_ORIG_SIZE" />
            <variable citdl="String" doc="The label string for the image copy and paste message for Opera and Safari" line="6411" name="STR_IMAGE_COPY" />
            <variable citdl="String" doc="The label string for the image padding." line="6417" name="STR_IMAGE_PADDING" />
            <variable citdl="String" doc="The label string for the image border." line="6423" name="STR_IMAGE_BORDER" />
            <variable citdl="String" doc="The label string for the image text flow." line="6429" name="STR_IMAGE_TEXTFLOW" />
            <variable citdl="String" doc="The label string for the local file warning." line="6435" name="STR_LOCAL_FILE_WARNING" />
            <variable citdl="String" doc="The label string for the Link Property Editor Window." line="6441" name="STR_LINK_PROP_TITLE" />
            <variable citdl="String" doc="The label string for the Remove link from text link inside the property editor." line="6447" name="STR_LINK_PROP_REMOVE" />
            <variable citdl="String" doc="The string for the open in a new window label." line="6453" name="STR_LINK_NEW_WINDOW" />
            <variable citdl="String" doc="The string for the link description." line="6459" name="STR_LINK_TITLE" />
            <variable citdl="String" doc="CSS class applied to an element when it&apos;s found to have a local url." line="6466" name="CLASS_LOCAL_FILE" />
            <variable citdl="String" doc="CSS class applied to the body when the hiddenelements button is pressed." line="6473" name="CLASS_HIDDEN" />
            <scope doc="The Editor class&apos; initialization method" ilk="function" line="6478" lineend="6567" name="init" signature="init(p_oElement, p_oAttributes)">
              <variable ilk="argument" name="p_oElement" />
              <variable ilk="argument" name="p_oAttributes" />
            </scope>
            <variable citdl="Object" line="6480" lineend="6563" name="_defaultToolbar">
              <variable citdl="Boolean" line="6481" name="collapse" />
              <variable citdl="String" line="6482" name="titlebar" />
              <variable citdl="Boolean" line="6483" name="draggable" />
              <variable citdl="String" line="6484" name="buttonType" />
              <variable citdl="Array" line="6486" name="buttons" />
              <variable citdl="String" line="6486" name="group" />
              <variable citdl="String" line="6486" name="label" />
              <variable citdl="String" line="6488" name="value" />
              <variable citdl="Boolean" line="6488" name="disabled" />
              <variable citdl="String" line="6488" name="type" />
              <variable citdl="Array" line="6490" name="menu" />
              <variable citdl="String" line="6490" name="text" />
              <variable citdl="Boolean" line="6490" name="checked" />
              <variable citdl="Array" line="6501" name="range" />
            </variable>
            <scope doc="Initializes all of the configuration attributes used to create&#xA;the editor." ilk="function" line="6575" lineend="6608" name="initAttributes" signature="initAttributes(attr)">
              <variable citdl="Object" doc="Object literal specifying a set of&#xA;configuration attributes used to create the editor." ilk="argument" name="attr" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Fix href and imgs as well as remove invalid HTML." ilk="function" line="6614" lineend="6640" name="_fixNodes" signature="_fixNodes()">
              <variable attributes="__local__ private" citdl="String" line="6616" name="url" />
              <variable attributes="__local__ private" citdl="this._getDoc().getElementsByTagName()" line="6618" name="imgs" />
              <variable attributes="__local__ private" citdl="this._getDoc().body.getElementsByTagName()" line="6629" name="fakeAs" />
            </scope>
            <variable attributes="private" citdl="Array" doc="PRIVATE: The Toolbar items that should be disabled if there is no selection present in the editor." line="6647" name="_disabled" />
            <variable attributes="private" citdl="Object" doc="PRIVATE: The Toolbar items that should ALWAYS be disabled event if there is a selection present in the editor." line="6654" lineend="6654" name="_alwaysDisabled">
              <variable citdl="Boolean" line="6654" name="outdent" />
            </variable>
            <variable attributes="private" citdl="Object" doc="PRIVATE: The Toolbar items that should ALWAYS be enabled event if there isn&apos;t a selection present in the editor." line="6661" lineend="6661" name="_alwaysEnabled">
              <variable citdl="Boolean" line="6661" name="hiddenelements" />
            </variable>
            <scope attributes="private" doc="PRIVATE: Override method that handles some new keydown events inside the iFrame document." ilk="function" line="6668" lineend="6693" name="_handleKeyDown" signature="_handleKeyDown(ev)">
              <variable citdl="Event" doc="The event we are working on." ilk="argument" name="ev" />
              <variable attributes="__local__ private" citdl="String" line="6672" name="action" />
              <variable attributes="__local__ private" citdl="Boolean" line="6672" name="doExec" />
              <variable attributes="__local__ private" citdl="Boolean" line="6672" name="exec" />
            </scope>
            <scope ilk="function" line="6694" lineend="6783" name="_handleCreateLinkClick" returns="Boolean" signature="_handleCreateLinkClick()">
              <variable attributes="__local__ private" citdl="this._getSelectedElement()" line="6695" name="el" />
            </scope>
            <variable citdl="Boolean" line="6697" name="STOP_EXEC_COMMAND" />
            <scope attributes="private" doc="PRIVATE: Handles the closing of the Link Properties Window." ilk="function" line="6789" lineend="6825" name="_handleCreateLinkWindowClose" signature="_handleCreateLinkWindowClose()">
              <variable attributes="__local__ private" citdl="el" line="6794" name="a" />
              <variable attributes="__local__ private" citdl="this.currentElement[0]" line="6794" name="el" />
              <variable attributes="__local__ private" citdl="Dom.get()" line="6794" name="target" />
              <variable attributes="__local__ private" citdl="Dom.get()" line="6794" name="title" />
              <variable attributes="__local__ private" citdl="Dom.get()" line="6794" name="url" />
              <variable attributes="__local__ private" citdl="url.value" line="6796" name="urlValue" />
              <variable attributes="__local__ private" citdl="this._getDoc().createElement()" line="6818" name="_span" />
            </scope>
            <variable citdl="Array" line="6824" name="currentElement" />
            <scope attributes="private" doc="PRIVATE: Opens the Image Properties Window when the insert Image button is clicked or an Image is Double Clicked." ilk="function" line="6831" lineend="7207" name="_handleInsertImageClick" returns="Boolean" signature="_handleInsertImageClick()" />
            <scope attributes="private" doc="PRIVATE: Handles the closing of the Image Properties Window." ilk="function" line="7213" lineend="7264" name="_handleInsertImageWindowClose" signature="_handleInsertImageWindowClose()">
              <variable attributes="__local__ private" citdl="Dom.get()" line="7214" name="url" />
              <variable attributes="__local__ private" citdl="Dom.get()" line="7215" name="title" />
              <variable attributes="__local__ private" citdl="Dom.get()" line="7216" name="link" />
              <variable attributes="__local__ private" citdl="Dom.get()" line="7217" name="target" />
              <variable attributes="__local__ private" citdl="this.currentElement[0]" line="7218" name="el" />
              <variable attributes="__local__ private" citdl="el.parentNode" line="7223" name="par" />
              <variable attributes="__local__ private" citdl="link.value" line="7225" name="urlValue" />
              <variable attributes="__local__ private" citdl="this._getDoc().createElement()" line="7243" name="_a" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Renders the panel used for Editor Windows to the document so we can start using it.." ilk="function" line="7271" lineend="7304" name="_renderPanel" returns="YAHOO.widget.Overlay" signature="_renderPanel()">
              <variable attributes="__local__ private" citdl="YAHOO.widget.Overlay" line="7272" name="panel" />
              <variable citdl="Object" line="7282" name="YAHOO">
                <variable citdl="Object" line="7282" name="widget">
                  <variable citdl="Object" line="7282" name="EditorInfo">
                    <variable citdl="panel" line="7282" name="panel" />
                  </variable>
                </variable>
              </variable>
            </scope>
            <scope doc="Opens a new &quot;window/panel&quot;" ilk="function" line="7310" lineend="7410" name="openWindow" signature="openWindow(win)">
              <variable ilk="argument" name="win" />
              <variable citdl="Object" line="7316" name="YAHOO">
                <variable citdl="Object" line="7316" name="widget">
                  <variable citdl="Object" line="7316" name="EditorInfo">
                    <variable citdl="Object" line="7316" name="window">
                      <variable citdl="win" line="7316" name="win" />
                      <variable citdl="this" line="7317" name="scope" />
                    </variable>
                  </variable>
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="this" line="7326" name="self" />
              <variable attributes="__local__ private" citdl="Dom.getXY()" line="7326" name="elXY" />
              <variable attributes="__local__ private" citdl="Dom.getXY()" line="7326" name="xy" />
              <variable attributes="__local__ private" citdl="Array" line="7326" name="newXY" />
              <variable attributes="__local__ private" citdl="this.get()" line="7326" name="panel" />
              <variable citdl="Object" line="7331" name="body">
                <variable citdl="this.CLASS_PREFIX" line="7331" name="className" />
              </variable>
              <variable attributes="__local__ private" citdl="document.createElement()" line="7340" name="_note" />
              <variable attributes="__local__ private" citdl="win.name" line="7346" name="windowName" />
              <variable attributes="__local__ private" citdl="document.createElement()" doc="Assume it&apos;s a string" line="7357" name="_tmp" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="7361" name="_close" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="7368" name="_knob" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="7373" name="_header" />
              <scope attributes="__local__ private" doc="Append the new DOM node to it" ilk="function" line="7390" lineend="7397" name="fireShowEvent" signature="fireShowEvent()" />
              <scope attributes="__local__ private" ilk="class" line="7399" lineend="7404" name="fireCloseEvent">
                <scope attributes="__local__ private __ctor__" ilk="function" line="7399" lineend="7404" name="fireCloseEvent" signature="fireCloseEvent()">
                  <variable citdl="fireCloseEvent" name="this" />
                  <variable attributes="__local__ private" citdl="String" line="7401" name="evName" />
                </scope>
                <variable line="7400" name="currentWindow" />
              </scope>
            </scope>
            <variable citdl="win" line="7406" name="currentWindow" />
            <scope doc="Realign the window with the currentElement and reposition the knob above the panel." ilk="function" line="7416" lineend="7560" name="moveWindow" returns="Boolean" signature="moveWindow(force)">
              <variable citdl="Boolean" doc="Boolean to tell it to move but not use any animation (Usually done the first time the window is loaded.)" ilk="argument" name="force" />
              <variable attributes="__local__ private" citdl="this.currentWindow" doc="newXY = [(xy[0] + elXY[0] - 20), (xy[1] + elXY[1] + 10)]," line="7432" name="win" />
              <variable attributes="__local__ private" citdl="Dom.getXY()" doc="newXY = [(xy[0] + elXY[0] - 20), (xy[1] + elXY[1] + 10)]," line="7432" name="elXY" />
              <variable attributes="__local__ private" citdl="Dom.getXY()" doc="newXY = [(xy[0] + elXY[0] - 20), (xy[1] + elXY[1] + 10)]," line="7432" name="xy" />
              <variable attributes="__local__ private" citdl="Array" doc="newXY = [(xy[0] + elXY[0] - 20), (xy[1] + elXY[1] + 10)]," line="7432" name="newXY" />
              <variable attributes="__local__ private" citdl="this.get()" doc="newXY = [(xy[0] + elXY[0] - 20), (xy[1] + elXY[1] + 10)]," line="7432" name="panel">
                <variable citdl="Object" line="7522" name="element">
                  <variable citdl="Object" line="7522" name="style">
                    <variable citdl="String" line="7522" name="filter" />
                  </variable>
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="parseInt()" line="7445" name="w" />
              <variable attributes="__local__ private" citdl="parseInt()" line="7446" name="h" />
              <variable attributes="__local__ private" citdl="Dom.getStyle()" line="7452" name="fs" />
              <variable attributes="__local__ private" citdl="elXY[1]" line="7475" name="iTop" />
              <variable attributes="__local__ private" citdl="elXY[0]" line="7476" name="iLeft" />
              <variable attributes="__local__ private" citdl="Number" doc="Only move the window if it&apos;s supposed to move more than 10px&#xA;or force was passed (new window)" line="7490" name="_knobLeft" />
              <variable attributes="__local__ private" citdl="Number" doc="Only move the window if it&apos;s supposed to move more than 10px&#xA;or force was passed (new window)" line="7490" name="elW" />
              <variable attributes="__local__ private" citdl="xy[0]" line="7496" name="leftOffset" />
              <variable citdl="Object" line="7509" name="_knob">
                <variable citdl="Object" line="7509" name="style">
                  <variable citdl="_knobLeft" line="7509" name="left" />
                </variable>
              </variable>
              <variable citdl="Object" line="7532" name="anim">
                <variable citdl="Object" line="7532" lineend="7539" name="attributes">
                  <variable citdl="Object" line="7533" lineend="7535" name="top">
                    <variable citdl="newXY[1]" line="7534" name="to" />
                  </variable>
                  <variable citdl="Object" line="7536" lineend="7538" name="left">
                    <variable citdl="newXY[0]" line="7537" name="to" />
                  </variable>
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="YAHOO.util.Anim" doc="We have to animate the iframe shim at the same time as the&#xA;panel or we get scrollbar bleed .." line="7544" name="iframeAnim" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Anim" line="7550" name="_knobAnim" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Close the currently open EditorWindow with the Escape key." ilk="function" line="7567" lineend="7573" name="_closeWindow" signature="_closeWindow(ev)">
              <variable citdl="Event" doc="The keypress Event that we are trapping" ilk="argument" name="ev" />
            </scope>
            <scope doc="Close the currently open EditorWindow." ilk="function" line="7578" lineend="7590" name="closeWindow" signature="closeWindow()">
              <variable citdl="Object" line="7579" name="YAHOO">
                <variable citdl="Object" line="7579" name="widget">
                  <variable citdl="Object" line="7579" name="EditorInfo">
                    <variable citdl="Object" line="7579" lineend="7579" name="window" />
                  </variable>
                </variable>
              </variable>
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;heading&apos;) is used." ilk="function" line="7597" lineend="7638" name="cmd_heading" returns="Array" signature="cmd_heading(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
              <variable attributes="__local__ private" citdl="String" line="7602" name="action" />
              <variable attributes="__local__ private" citdl="this._swapEl()" line="7602" name="el" />
              <variable attributes="__local__ private" citdl="this._getSelectedElement()" line="7602" name="_selEl" />
              <variable attributes="__local__ private" citdl="this._getSelection()" line="7602" name="_sel" />
              <variable attributes="__local__ private" citdl="Boolean" line="7602" name="exec" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;hiddenelements&apos;) is used." ilk="function" line="7644" lineend="7657" name="cmd_hiddenelements" returns="Array" signature="cmd_hiddenelements(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <variable doc="Don&apos;t auto highlight the hidden button" line="7647" name="_lastButton" />
            <variable citdl="Boolean" line="7648" name="_showingHiddenElements" />
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;removeformat&apos;) is used." ilk="function" line="7663" lineend="7692" name="cmd_removeformat" returns="Array" signature="cmd_removeformat(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
              <variable attributes="__local__ private" citdl="Boolean" line="7664" name="exec" />
              <variable attributes="__local__ private" citdl="this._getSelection()" line="7673" name="_txt" />
            </scope>
            <scope doc="This is a combined execCommand override method. It is called from the cmd_superscript and cmd_subscript methods." ilk="function" line="7699" lineend="7718" name="cmd_script" returns="exec" signature="cmd_script(action, value)">
              <variable doc="action passed from the execCommand method" ilk="argument" name="action" />
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
              <variable attributes="__local__ private" citdl="this._getSelectedElement()" line="7701" name="_selEl" />
              <variable attributes="__local__ private" citdl="action.toLowerCase().substring()" line="7701" name="tag" />
              <variable attributes="__local__ private" citdl="this._swapEl()" line="7701" name="_span" />
              <variable attributes="__local__ private" citdl="Boolean" line="7701" name="exec" />
              <variable attributes="__local__ private" citdl="this._swapEl()" line="7711" name="_sub" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;superscript&apos;) is used." ilk="function" line="7724" lineend="7726" name="cmd_superscript" returns="Array" signature="cmd_superscript(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;subscript&apos;) is used." ilk="function" line="7732" lineend="7734" name="cmd_subscript" returns="Array" signature="cmd_subscript(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;indent&apos;) is used." ilk="function" line="7740" lineend="7765" name="cmd_indent" returns="Array" signature="cmd_indent(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
              <variable attributes="__local__ private" citdl="this._getDoc().createElement()" line="7741" name="_bq" />
              <variable attributes="__local__ private" citdl="this._getSelectedElement()" line="7741" name="selEl" />
              <variable attributes="__local__ private" citdl="Boolean" line="7741" name="exec" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;outdent&apos;) is used." ilk="function" line="7771" lineend="7794" name="cmd_outdent" returns="Array" signature="cmd_outdent(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
              <variable attributes="__local__ private" line="7772" name="_bq" />
              <variable attributes="__local__ private" citdl="this._getDoc().createElement()" line="7772" name="_span" />
              <variable attributes="__local__ private" citdl="this._getSelectedElement()" line="7772" name="selEl" />
              <variable attributes="__local__ private" citdl="Boolean" line="7772" name="exec" />
              <variable attributes="__local__ private" citdl="selEl.parentNode" line="7776" name="par" />
            </scope>
            <scope doc="Returns a string representing the editor." ilk="function" line="7801" lineend="7807" name="toString" returns="String" signature="toString()">
              <variable attributes="__local__ private" citdl="String" line="7802" name="str" />
            </scope>
          </scope>
          <scope ilk="class" line="7136" lineend="7141" name="SimpleDialog">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: SimpleDialog is a simple implementation of Dialog that can be used to&#xA;submit a single value. Forms can be processed in 3 ways -- via an&#xA;asynchronous Connection utility call, a simple form POST or GET,&#xA;or manually." ilk="function" line="7136" lineend="7141" name="SimpleDialog" signature="SimpleDialog(el, userConfig)">
              <variable citdl="HTMLElement" doc="The element representing the SimpleDialog" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing&#xA;the configuration that should be set for this SimpleDialog. See&#xA;configuration documentation for more details." ilk="argument" name="userConfig" />
              <variable citdl="SimpleDialog" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="7816" lineend="7888" name="EditorWindow">
            <scope attributes="__ctor__" doc="Class to hold Window information between uses. We use the same panel to show the windows, so using this will allow you to configure a window before it is shown.&#xA;This is what you pass to Editor.openWindow();. These parameters will not take effect until the openWindow() is called in the editor." ilk="function" line="7816" lineend="7829" name="EditorWindow" signature="EditorWindow(name, attrs)">
              <variable citdl="String" doc="The name of the window." ilk="argument" name="name" />
              <variable citdl="Object" doc="Attributes for the window. Current attributes used are : height and width" ilk="argument" name="attrs" />
              <variable citdl="EditorWindow" name="this" />
            </scope>
            <variable attributes="private" citdl="name.replace()" doc="PRIVATE: A unique name for the window" line="7822" name="name" />
            <variable attributes="private" citdl="attrs" doc="PRIVATE: The window attributes" line="7828" name="attrs" />
            <variable attributes="private" doc="PRIVATE: Holds a cache of the DOM for the window so we only have to build it once.." line="7837" name="_cache" />
            <variable attributes="private" citdl="str" doc="PRIVATE: Holder for the header of the window, used in Editor.openWindow" line="7843" name="header" />
            <variable attributes="private" citdl="str" doc="PRIVATE: Holder for the body of the window, used in Editor.openWindow" line="7849" name="body" />
            <variable attributes="private" citdl="str" doc="PRIVATE: Holder for the footer of the window, used in Editor.openWindow" line="7855" name="footer" />
            <scope doc="Sets the header for the window." ilk="function" line="7861" lineend="7863" name="setHeader" signature="setHeader(str)">
              <variable citdl="String/HTMLElement" doc="The string or DOM reference to be used as the windows header." ilk="argument" name="str" />
              <variable citdl="EditorWindow" name="this" />
            </scope>
            <scope doc="Sets the body for the window." ilk="function" line="7869" lineend="7871" name="setBody" signature="setBody(str)">
              <variable citdl="String/HTMLElement" doc="The string or DOM reference to be used as the windows body." ilk="argument" name="str" />
              <variable citdl="EditorWindow" name="this" />
            </scope>
            <scope doc="Sets the footer for the window." ilk="function" line="7877" lineend="7879" name="setFooter" signature="setFooter(str)">
              <variable citdl="String/HTMLElement" doc="The string or DOM reference to be used as the windows footer." ilk="argument" name="str" />
              <variable citdl="EditorWindow" name="this" />
            </scope>
            <scope doc="Returns a string representing the EditorWindow." ilk="function" line="7885" lineend="7887" name="toString" returns="String" signature="toString()">
              <variable citdl="EditorWindow" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="7921" lineend="7926" name="ContextMenu">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Creates a list of options or commands which are made visible in response to&#xA;an HTML element&apos;s &quot;contextmenu&quot; event (&quot;mousedown&quot; for Opera)." ilk="function" line="7921" lineend="7926" name="ContextMenu" signature="ContextMenu(p_oElement, p_oConfig)">
              <variable citdl="String" doc="String specifying the id attribute of the&#xA;&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for the&#xA;context menu." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying the&#xA;configuration for the context menu. See configuration class documentation&#xA;for more details." ilk="argument" name="p_oConfig" />
              <variable citdl="ContextMenu" name="this" />
            </scope>
          </scope>
          <variable attributes="deprecated __ctor__" citdl="YAHOO.widget.MenuItem" doc="DEPRECATED CONSTRUCTOR: Creates an item for a context menu." line="8415" name="ContextMenuItem" />
          <scope ilk="class" line="8442" lineend="8447" name="MenuBar">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Horizontal collection of items, each of which can contain a submenu." ilk="function" line="8442" lineend="8447" name="MenuBar" signature="MenuBar(p_oElement, p_oConfig)">
              <variable citdl="String" doc="String specifying the id attribute of the&#xA;&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for the&#xA;menu bar." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying the&#xA;configuration for the menu bar. See configuration class documentation for&#xA;more details." ilk="argument" name="p_oConfig" />
              <variable citdl="MenuBar" name="this" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.widget.MenuItem" ilk="class" line="8910" lineend="8915" name="MenuBarItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Creates an item for a menu bar." ilk="function" line="8910" lineend="8915" name="MenuBarItem" signature="MenuBarItem(p_oObject, p_oConfig)">
              <variable citdl="String" doc="String specifying the text of the menu bar item." ilk="argument" name="p_oObject" />
              <variable citdl="Object" doc="Optional. Object literal specifying the&#xA;configuration for the menu bar item. See configuration class documentation&#xA;for more details." ilk="argument" name="p_oConfig" />
              <variable citdl="MenuBarItem" name="this" />
            </scope>
            <scope doc="The MenuBarItem class&apos;s initialization method. This method is&#xA;automatically called by the constructor, and sets up all DOM references for&#xA;pre-existing markup, and creates required markup if it is not already present." ilk="function" line="8940" lineend="8969" name="init" signature="init(p_oObject, p_oConfig)">
              <variable citdl="String" doc="String specifying the text of the menu bar item." ilk="argument" name="p_oObject" />
              <variable citdl="Object" doc="Optional. Object literal specifying the&#xA;configuration for the menu bar item. See configuration class documentation&#xA;for more details." ilk="argument" name="p_oConfig" />
              <variable attributes="__local__ private" citdl="this.cfg" line="8959" name="oConfig" />
            </scope>
            <variable citdl="YAHOO.widget.Menu" line="8944" name="SUBMENU_TYPE" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: String representing the CSS class(es) to be applied to the&#xA;&lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element of the menu bar item." line="8984" name="CSS_CLASS_NAME" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: String representing the CSS class(es) to be applied to the&#xA;menu bar item&apos;s &lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt; element." line="8995" name="CSS_LABEL_CLASS_NAME" />
            <scope doc="Returns a string representing the menu bar item." ilk="function" line="9007" lineend="9019" name="toString" returns="String" signature="toString()">
              <variable attributes="__local__ private" citdl="String" line="9009" name="sReturnVal" />
            </scope>
          </scope>
        </variable>
        <variable citdl="YAHOO.lang" doc="Provides the language utilites and extensions used by the library" line="404" name="lang">
          <variable attributes="__static__" citdl="Object" doc="STATIC: Provides methods to parse JSON strings and convert objects to JSON strings." line="16" lineend="368" name="JSON">
            <variable attributes="private __static__" citdl="RegExp" doc="PRIVATE STATIC: First step in the validation.  Regex used to replace all escape&#xA;sequences (i.e. &quot;\\&quot;, etc) with &apos;@&apos; characters (a non-JSON character)." line="25" name="_ESCAPES" />
            <variable attributes="private __static__" citdl="RegExp" doc="PRIVATE STATIC: Second step in the validation.  Regex used to replace all simple&#xA;values with &apos;]&apos; characters." line="34" name="_VALUES" />
            <variable attributes="private __static__" citdl="RegExp" doc="PRIVATE STATIC: Third step in the validation.  Regex used to remove all open square&#xA;brackets following a colon, comma, or at the beginning of the string." line="43" name="_BRACKETS" />
            <variable attributes="private __static__" citdl="RegExp" doc="PRIVATE STATIC: Final step in the validation.  Regex used to test the string left after&#xA;all previous replacements for invalid characters." line="52" name="_INVALID" />
            <variable attributes="private __static__" citdl="RegExp" doc="PRIVATE STATIC: Regex used to replace special characters in strings for JSON&#xA;stringification." line="62" name="_SPECIAL_CHARS" />
            <variable attributes="private __static__" citdl="RegExp" doc="PRIVATE STATIC: Regex used to reconstitute serialized Dates." line="71" name="_PARSE_DATE" />
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Character substitution map for common escapes and special characters." line="80" lineend="88" name="_CHARS">
              <variable citdl="String" line="81" name="\b" />
              <variable citdl="String" line="82" name="\t" />
              <variable citdl="String" line="83" name="\n" />
              <variable citdl="String" line="84" name="\f" />
              <variable citdl="String" line="85" name="\r" />
              <variable citdl="String" line="86" name="&quot;" />
              <variable citdl="String" line="87" name="\\" />
            </variable>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Traverses nested objects, applying a filter or mutation function to&#xA;each value.  The value returned from the function will replace the&#xA;original value in the key:value pair.  If the value returned is&#xA;undefined, the key will be omitted from the returned object." ilk="function" line="102" lineend="125" name="_applyFilter" returns="MIXED" signature="_applyFilter(data, filter)">
              <variable citdl="MIXED" doc="Any JavaScript data" ilk="argument" name="data" />
              <variable citdl="Function" doc="filter or mutation function" ilk="argument" name="filter" />
              <variable citdl="JSON" name="this" />
              <scope attributes="__local__ private" ilk="function" line="103" lineend="118" name="walk" returns="filter()" signature="walk(k, v)">
                <variable ilk="argument" name="k" />
                <variable ilk="argument" name="v" />
                <variable attributes="__local__ private" line="104" name="i" />
                <variable attributes="__local__ private" citdl="walk()" line="104" name="n" />
              </scope>
            </scope>
            <scope attributes="__static__" doc="STATIC: Four step determination whether a string is valid JSON.  In three steps,&#xA;escape sequences, safe values, and properly placed open square brackets&#xA;are replaced with placeholders or removed.  Then in the final step, the&#xA;result of all these replacements is checked for invalid characters." ilk="function" line="137" lineend="146" name="isValid" returns="Boolean" signature="isValid(str)">
              <variable citdl="String" doc="JSON string to be tested" ilk="argument" name="str" />
              <variable citdl="JSON" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Serializes a Date instance as a UTC date string.  Used internally by&#xA;stringify.  Override this method if you need Dates serialized in a&#xA;different format." ilk="function" line="157" lineend="168" name="dateToString" returns="String" signature="dateToString(d)">
              <variable citdl="Date" doc="The Date to serialize" ilk="argument" name="d" />
              <variable citdl="JSON" name="this" />
              <scope attributes="__local__ private" ilk="function" line="158" lineend="160" name="_zeroPad" returns="v" signature="_zeroPad(v)">
                <variable ilk="argument" name="v" />
              </scope>
            </scope>
            <scope doc="Reconstitute Date instances from the default JSON UTC serialization.&#xA;Reference this from a parse filter function to rebuild Dates during the&#xA;parse operation." ilk="function" line="178" lineend="185" name="stringToDate" returns="Date" signature="stringToDate(str)">
              <variable citdl="String" doc="String serialization of a Date" ilk="argument" name="str" />
              <variable citdl="JSON" name="this" />
              <variable attributes="__local__ private" citdl="Date" line="180" name="d" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Parse a JSON string, returning the native JavaScript representation.&#xA;Only minor modifications from http://www.json.org/json.js." ilk="function" line="198" lineend="208" name="parse" returns="MIXED" signature="parse(s, filter)">
              <variable citdl="String" doc="JSON string data" ilk="argument" name="s" />
              <variable citdl="Function" doc="(optional) function(k,v) passed each key value pair of object literals, allowing pruning or altering values" ilk="argument" name="filter" />
              <variable citdl="JSON" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Converts an arbitrary value to a JSON string representation.&#xA;Cyclical object or array references are replaced with null.&#xA;If a whitelist is provided, only matching object keys will be included.&#xA;If a depth limit is provided, objects and arrays at that depth will&#xA;be stringified as empty." ilk="function" line="225" lineend="367" name="stringify" returns="String" signature="stringify(o, w, d)">
              <variable citdl="MIXED" doc="any arbitrary object to convert to JSON string" ilk="argument" name="o" />
              <variable citdl="Array" doc="(optional) whitelist of acceptable object keys to include" ilk="argument" name="w" />
              <variable citdl="Number" doc="(optional) depth limit to recurse objects/arrays (practical minimum 1)" ilk="argument" name="d" />
              <variable citdl="JSON" name="this" />
              <variable attributes="__local__ private" citdl="l.JSON" line="231" name="J" />
              <variable attributes="__local__ private" citdl="J._CHARS" line="231" name="m" />
              <variable attributes="__local__ private" citdl="YAHOO.lang" line="231" name="l" />
              <variable attributes="__local__ private" citdl="Array" line="231" name="pstack" />
              <variable attributes="__local__ private" citdl="this._SPECIAL_CHARS" line="231" name="str_re" />
              <scope attributes="__local__ private" doc="escape encode special characters" ilk="function" line="234" lineend="241" name="_char" returns="m[c]" signature="_char(c)">
                <variable ilk="argument" name="c" />
                <variable attributes="__local__ private" citdl="c.charCodeAt()" line="236" name="a" />
              </scope>
              <scope attributes="__local__ private" doc="Enclose the escaped string in double quotes" ilk="function" line="244" lineend="246" name="_string" returns="String" signature="_string(s)">
                <variable ilk="argument" name="s" />
              </scope>
              <variable attributes="__local__ private" citdl="J.dateToString" doc="Use the configured date conversion" line="249" name="_date" />
              <scope attributes="__local__ private" doc="arrays per the configured depth." ilk="function" line="253" lineend="360" name="_stringify" signature="_stringify(o, w, d)">
                <variable ilk="argument" name="o" />
                <variable ilk="argument" name="w" />
                <variable ilk="argument" name="d" />
                <variable attributes="__local__ private" citdl="Array" doc="typeof v during iteration" line="258" name="a" />
                <variable attributes="__local__ private" doc="typeof v during iteration" line="258" name="i" />
                <variable attributes="__local__ private" doc="typeof v during iteration" line="258" name="k" />
                <variable attributes="__local__ private" citdl="Number" doc="typeof v during iteration" line="258" name="j" />
                <variable attributes="__local__ private" doc="typeof v during iteration" line="258" name="len" />
                <variable attributes="__local__ private" doc="typeof v during iteration" line="258" name="vt" />
                <variable attributes="__local__ private" doc="typeof v during iteration" line="258" name="t" />
                <variable attributes="__local__ private" citdl="_stringify()" doc="typeof v during iteration" line="258" name="v" />
              </scope>
            </scope>
          </variable>
        </variable>
        <variable citdl="Object" line="889" name="util">
          <variable citdl="Object" line="7" lineend="8" name="Get">
            <scope ilk="function" line="8" lineend="8" name="abort" signature="abort(T)">
              <variable ilk="argument" name="T" />
              <variable citdl="Get" name="this" />
              <variable attributes="__local__ private" citdl="M[U]" line="8" name="S" />
              <variable attributes="__local__ private" line="8" name="U" />
            </scope>
            <scope ilk="function" line="8" lineend="8" name="_finalize" signature="_finalize(S)">
              <variable ilk="argument" name="S" />
              <variable citdl="Get" name="this" />
            </scope>
            <scope ilk="function" line="8" lineend="8" name="css" returns="I()" signature="css(S, T)">
              <variable ilk="argument" name="S" />
              <variable ilk="argument" name="T" />
              <variable citdl="Get" name="this" />
            </scope>
            <scope ilk="function" line="8" lineend="8" name="script" returns="I()" signature="script(S, T)">
              <variable ilk="argument" name="S" />
              <variable ilk="argument" name="T" />
              <variable citdl="Get" name="this" />
            </scope>
            <variable citdl="Number" line="8" name="POLL_FREQ" />
            <variable citdl="Number" line="8" name="TIMEOUT" />
            <variable citdl="Number" line="8" name="PURGE_THRESH" />
          </variable>
          <scope ilk="function" line="9" lineend="9" name="YUILoader" signature="YUILoader(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="util" name="this" />
            <variable attributes="__local__ private" citdl="this" line="9" name="self" />
          </scope>
          <scope ilk="function" line="11" lineend="11" name="Point" signature="Point(A, B)">
            <variable ilk="argument" name="A" />
            <variable ilk="argument" name="B" />
            <variable citdl="util" name="this" />
          </scope>
          <scope ilk="function" line="11" lineend="11" name="Region" signature="Region(C, D, A, B)">
            <variable ilk="argument" name="C" />
            <variable ilk="argument" name="D" />
            <variable ilk="argument" name="A" />
            <variable ilk="argument" name="B" />
            <variable citdl="util" name="this" />
          </scope>
          <variable citdl="D" line="11" name="right" />
          <variable citdl="C" line="11" name="top" />
          <variable citdl="A" line="11" name="bottom" />
          <variable citdl="this.top" line="11" name="y" />
          <variable citdl="this.right" line="11" name="x" />
          <variable citdl="B" line="11" name="left" />
          <variable citdl="Object" line="12" lineend="201" name="Color">
            <scope doc="Converts 0-1 to 0-255" ilk="function" line="24" lineend="26" name="real2dec" returns="Number" signature="real2dec(n)">
              <variable citdl="Number" doc="the number to convert" ilk="argument" name="n" />
              <variable citdl="Color" name="this" />
            </scope>
            <scope doc="Converts HSV (h[0-360], s[0-1]), v[0-1] to RGB [255,255,255]" ilk="function" line="38" lineend="62" name="hsv2rgb" returns="Array" signature="hsv2rgb(h, s, v)">
              <variable citdl="{int" doc="float, float]} the hue, or an&#xA;array containing all three parameters" ilk="argument" name="h" />
              <variable citdl="Number" doc="the saturation" ilk="argument" name="s" />
              <variable citdl="Number" doc="the value/brightness" ilk="argument" name="v" />
              <variable citdl="Color" name="this" />
              <variable attributes="__local__ private" citdl="p" line="44" name="b" />
              <variable attributes="__local__ private" citdl="t" line="44" name="g" />
              <variable attributes="__local__ private" line="44" name="f" />
              <variable attributes="__local__ private" citdl="Math.floor()" line="44" name="i" />
              <variable attributes="__local__ private" citdl="v" line="44" name="q" />
              <variable attributes="__local__ private" citdl="v" line="44" name="p" />
              <variable attributes="__local__ private" line="44" name="r" />
              <variable attributes="__local__ private" citdl="v" line="44" name="t" />
              <variable attributes="__local__ private" citdl="this.real2dec" line="59" name="fn" />
            </scope>
            <scope doc="Converts to RGB [255,255,255] to HSV (h[0-360], s[0-1]), v[0-1]" ilk="function" line="73" lineend="105" name="rgb2hsv" returns="Array" signature="rgb2hsv(r, g, b)">
              <variable citdl="{int" doc="int, int]} the red value, or an&#xA;array containing all three parameters" ilk="argument" name="r" />
              <variable citdl="Number" doc="the green value" ilk="argument" name="g" />
              <variable citdl="Number" doc="the blue value" ilk="argument" name="b" />
              <variable citdl="Color" name="this" />
              <variable attributes="__local__ private" line="83" name="v" />
              <variable attributes="__local__ private" citdl="Math.min()" line="83" name="min" />
              <variable attributes="__local__ private" line="83" name="h" />
              <variable attributes="__local__ private" citdl="max" line="83" name="delta" />
              <variable attributes="__local__ private" line="83" name="s" />
              <variable attributes="__local__ private" citdl="Math.max()" line="83" name="max" />
              <variable attributes="__local__ private" citdl="Array" line="101" name="hsv" />
            </scope>
            <scope doc="Converts decimal rgb values into a hex string&#xA;255,255,255 -&gt; FFFFFF" ilk="function" line="117" lineend="124" name="rgb2hex" returns="String" signature="rgb2hex(r, g, b)">
              <variable citdl="{int" doc="int, int]} the red value, or an&#xA;array containing all three parameters" ilk="argument" name="r" />
              <variable citdl="Number" doc="the green value" ilk="argument" name="g" />
              <variable citdl="Number" doc="the blue value" ilk="argument" name="b" />
              <variable citdl="Color" name="this" />
              <variable attributes="__local__ private" citdl="this.dec2hex" line="122" name="f" />
            </scope>
            <scope doc="Converts an int 0...255 to hex pair 00...FF" ilk="function" line="132" lineend="138" name="dec2hex" returns="String" signature="dec2hex(n)">
              <variable citdl="Number" doc="the number to convert" ilk="argument" name="n" />
              <variable citdl="Color" name="this" />
            </scope>
            <scope doc="Converts a hex pair 00...FF to an int 0...255" ilk="function" line="146" lineend="154" name="hex2dec" returns="Number" signature="hex2dec(str)">
              <variable citdl="String" doc="the hex pair to convert" ilk="argument" name="str" />
              <variable citdl="Color" name="this" />
              <scope attributes="__local__ private" ilk="function" line="147" lineend="149" name="f" returns="HCHARS.indexOf()" signature="f(c)">
                <variable ilk="argument" name="c" />
              </scope>
              <variable attributes="__local__ private" citdl="str.split()" line="151" name="s" />
            </scope>
            <scope doc="Converts a hex string to rgb" ilk="function" line="162" lineend="165" name="hex2rgb" returns="Array" signature="hex2rgb(s)">
              <variable ilk="argument" name="s" />
              <variable citdl="Color" name="this" />
              <variable attributes="__local__ private" citdl="this.hex2dec" line="163" name="f" />
            </scope>
            <scope doc="Returns the closest websafe color to the supplied rgb value." ilk="function" line="177" lineend="200" name="websafe" returns="Array" signature="websafe(r, g, b)">
              <variable citdl="{int" doc="int, int]} the red value, or an&#xA;array containing all three parameters" ilk="argument" name="r" />
              <variable citdl="Number" doc="the green value" ilk="argument" name="g" />
              <variable citdl="Number" doc="the blue value" ilk="argument" name="b" />
              <variable citdl="Color" name="this" />
              <scope attributes="__local__ private" doc="returns the closest match [0, 51, 102, 153, 204, 255]" ilk="function" line="184" lineend="197" name="f" returns="v" signature="f(v)">
                <variable ilk="argument" name="v" />
                <variable attributes="__local__ private" line="187" name="i" />
                <variable attributes="__local__ private" citdl="i" line="187" name="next" />
              </scope>
            </scope>
          </variable>
          <scope ilk="class" line="14" lineend="2156" name="EventProvider">
            <scope attributes="__ctor__" ilk="function" line="14" lineend="14" name="EventProvider" signature="EventProvider()">
              <variable citdl="EventProvider" name="this" />
            </scope>
            <variable citdl="this.__yui_subscribers" line="14" name="__yui_subscribers" />
            <variable citdl="this.__yui_events" line="14" name="__yui_events" />
            <scope doc="Subscribe to a CustomEvent by event type" ilk="function" line="1980" lineend="1996" name="subscribe" signature="subscribe(p_type, p_fn, p_obj, p_override)">
              <variable citdl="String" doc="the type, or name of the event" ilk="argument" name="p_type" />
              <variable citdl="Function" doc="the function to exectute when the event fires" ilk="argument" name="p_fn" />
              <variable citdl="Object" doc="An object to be passed along when the event&#xA;fires" ilk="argument" name="p_obj" />
              <variable citdl="Boolean" doc="If true, the obj passed in becomes the&#xA;execution scope of the listener" ilk="argument" name="p_override" />
              <variable citdl="EventProvider" name="this" />
              <variable attributes="__local__ private" citdl="this.__yui_events[p_type]" line="1983" name="ce" />
              <variable attributes="__local__ private" citdl="this.__yui_subscribers" line="1989" name="subs" />
            </scope>
            <scope doc="Unsubscribes one or more listeners the from the specified event" ilk="function" line="2013" lineend="2032" name="unsubscribe" returns="Boolean" signature="unsubscribe(p_type, p_fn, p_obj)">
              <variable citdl="String" doc="The type, or name of the event.  If the type&#xA;is not specified, it will attempt to remove&#xA;the listener from all hosted events." ilk="argument" name="p_type" />
              <variable citdl="Function" doc="The subscribed function to unsubscribe, if not&#xA;supplied, all subscribers will be removed." ilk="argument" name="p_fn" />
              <variable citdl="Object" doc="The custom object passed to subscribe.  This is&#xA;optional, but if supplied will be used to&#xA;disambiguate multiple listeners that are the same&#xA;(e.g., you subscribe many object using a function&#xA;that lives on the prototype)" ilk="argument" name="p_obj" />
              <variable citdl="EventProvider" name="this" />
              <variable attributes="__local__ private" citdl="this.__yui_events" line="2015" name="evts" />
              <variable attributes="__local__ private" citdl="evts[p_type]" line="2017" name="ce" />
              <variable attributes="__local__ private" citdl="Boolean" line="2022" name="ret" />
            </scope>
            <scope doc="Removes all listeners from the specified event.  If the event type&#xA;is not specified, all listeners from all hosted custom events will&#xA;be removed." ilk="function" line="2041" lineend="2043" name="unsubscribeAll" returns="this.unsubscribe()" signature="unsubscribeAll(p_type)">
              <variable citdl="String" doc="The type, or name of the event" ilk="argument" name="p_type" />
              <variable citdl="EventProvider" name="this" />
            </scope>
            <scope doc="Creates a new custom event of the specified type.  If a custom event&#xA;by that name already exists, it will not be re-created.  In either&#xA;case the custom event is returned." ilk="function" line="2075" lineend="2106" name="createEvent" returns="CustomEvent" signature="createEvent(p_type, p_config)">
              <variable citdl="String" doc="the type, or name of the event" ilk="argument" name="p_type" />
              <variable citdl="Object" doc="optional config params.  Valid properties are:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;scope: defines the default execution scope.  If not defined&#xA;the default scope will be this instance.&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;silent: if true, the custom event will not generate log messages.&#xA;This is false by default.&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;onSubscribeCallback: specifies a callback to execute when the&#xA;event has a new subscriber.  This will fire immediately for&#xA;each queued subscriber if any exist prior to the creation of&#xA;the event.&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="argument" name="p_config" />
              <variable citdl="EventProvider" name="this" />
              <variable attributes="__local__ private" citdl="p_config" line="2078" name="opts" />
              <variable attributes="__local__ private" citdl="this.__yui_events" line="2079" name="events" />
              <variable attributes="__local__ private" citdl="opts.scope" line="2084" name="scope" />
              <variable attributes="__local__ private" line="2085" name="silent" />
              <variable attributes="__local__ private" citdl="YAHOO.util.CustomEvent" line="2088" name="ce" />
              <variable attributes="__local__ private" citdl="this.__yui_subscribers[p_type]" line="2096" name="qs" />
            </scope>
            <scope doc="Fire a custom event by name.  The callback functions will be executed&#xA;from the scope specified when the event was created, and with the&#xA;following parameters:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The first argument fire() was executed with&lt;/li&gt;&#xA;&lt;li&gt;The custom object (if any) that was passed into the subscribe()&#xA;method&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="function" line="2125" lineend="2139" name="fireEvent" returns="Boolean" signature="fireEvent(p_type, arg1, arg2, etc)">
              <variable citdl="String" doc="the type, or name of the event" ilk="argument" name="p_type" />
              <variable ilk="argument" name="arg1" />
              <variable ilk="argument" name="arg2" />
              <variable ilk="argument" name="etc" />
              <variable citdl="EventProvider" name="this" />
              <variable attributes="__local__ private" citdl="this.__yui_events[p_type]" line="2128" name="ce" />
              <variable attributes="__local__ private" citdl="Array" line="2134" name="args" />
            </scope>
            <scope doc="Returns true if the custom event of the provided type has been created&#xA;with createEvent." ilk="function" line="2147" lineend="2154" name="hasEvent" returns="Boolean" signature="hasEvent(type)">
              <variable citdl="String" doc="the type, or name of the event" ilk="argument" name="type" />
              <variable citdl="EventProvider" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="16" lineend="196" name="Attribute">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides Attribute configurations." ilk="function" line="16" lineend="21" name="Attribute" signature="Attribute(hash, owner)">
              <variable citdl="Object" doc="The intial Attribute." ilk="argument" name="hash" />
              <variable ilk="argument" name="owner" />
              <variable citdl="Attribute" name="this" />
            </scope>
            <variable citdl="owner" line="18" name="owner" />
            <variable citdl="String" doc="The name of the attribute." line="29" name="name" />
            <variable citdl="String" doc="The value of the attribute." line="36" name="value" />
            <variable citdl="Boolean" doc="Whether or not the attribute is read only." line="50" name="readOnly" />
            <variable citdl="Boolean" doc="Whether or not the attribute can only be written once." line="57" name="writeOnce" />
            <variable attributes="private" citdl="Object" doc="PRIVATE: The attribute&apos;s initial configuration." line="65" name="_initialConfig" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Whether or not the attribute&apos;s value has been set." line="73" name="_written" />
            <variable citdl="Function" doc="The method to use when setting the attribute&apos;s value.&#xA;The method recieves the new value as the only argument." line="81" name="method" />
            <variable citdl="Function" doc="The validator to use when setting the attribute&apos;s value." line="89" name="validator" />
            <scope doc="Retrieves the current value of the attribute." ilk="function" line="96" lineend="98" name="getValue" returns="any" signature="getValue()">
              <variable citdl="Attribute" name="this" />
            </scope>
            <scope doc="Sets the value of the attribute and fires beforeChange and change events." ilk="function" line="107" lineend="147" name="setValue" returns="Boolean" signature="setValue(value, silent)">
              <variable citdl="Any" doc="The value to apply to the attribute." ilk="argument" name="value" />
              <variable citdl="Boolean" doc="If true the change events will not be fired." ilk="argument" name="silent" />
              <variable citdl="Attribute" name="this" />
              <variable attributes="__local__ private" citdl="owner.fireBeforeChangeEvent()" line="108" name="beforeRetVal" />
              <variable attributes="__local__ private" citdl="this.owner" line="109" name="owner" />
              <variable attributes="__local__ private" citdl="this.name" line="110" name="name" />
              <variable attributes="__local__ private" citdl="Object" line="112" lineend="116" name="event">
                <variable citdl="name" line="113" name="type" />
                <variable citdl="this.getValue()" line="114" name="prevValue" />
                <variable citdl="value" line="115" name="newValue" />
              </variable>
            </scope>
            <scope doc="Allows for configuring the Attribute&apos;s properties." ilk="function" line="155" lineend="168" name="configure" signature="configure(map, init)">
              <variable citdl="Object" doc="A key-value map of Attribute properties." ilk="argument" name="map" />
              <variable citdl="Boolean" doc="Whether or not this should become the initial config." ilk="argument" name="init" />
              <variable citdl="Attribute" name="this" />
            </scope>
            <scope doc="Resets the value to the initial config value." ilk="function" line="175" lineend="177" name="resetValue" returns="Boolean" signature="resetValue()">
              <variable citdl="Attribute" name="this" />
            </scope>
            <scope doc="Resets the attribute config to the initial config state." ilk="function" line="183" lineend="185" name="resetConfig" signature="resetConfig()">
              <variable citdl="Attribute" name="this" />
            </scope>
            <scope doc="Resets the value to the current value.&#xA;Useful when values may have gotten out of sync with actual properties." ilk="function" line="193" lineend="195" name="refresh" returns="Boolean" signature="refresh(silent)">
              <variable ilk="argument" name="silent" />
              <variable citdl="Attribute" name="this" />
            </scope>
          </scope>
          <variable citdl="Object" line="17" lineend="17" name="ImageLoader">
            <scope ilk="class" line="30" lineend="108" name="group">
              <scope attributes="__ctor__" doc="CONSTRUCTOR: A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints." ilk="function" line="30" lineend="108" name="group" signature="group(trigEl, trigAct, timeout)">
                <variable citdl="{String" doc="The HTML element id or reference to assign the trigger event to. Can be null for no trigger" ilk="argument" name="trigEl" />
                <variable citdl="String" doc="The type of event to assign to trigEl. Can be null for no trigger" ilk="argument" name="trigAct" />
                <variable citdl="Number" doc="Timeout (time limit) length, in seconds. Can be undefined, or &lt;= 0, for no time limit" ilk="argument" name="timeout" />
                <variable citdl="group" name="this" />
              </scope>
              <variable citdl="String" doc="Name for the group. Only used to identify the group in logging statements" line="36" name="name" />
              <variable attributes="private" citdl="Object" doc="PRIVATE: Collection of images registered with this group" line="44" lineend="44" name="_imgObjs" />
              <variable citdl="Number" doc="Timeout (time limit) length, in seconds" line="51" name="timeoutLen" />
              <variable attributes="private" citdl="Object" doc="PRIVATE: Timeout object to keep a handle on the time limit" line="59" name="_timeout" />
              <variable attributes="private" citdl="Array" doc="PRIVATE: Collection of triggers for this group.&#xA;Keeps track of each trigger&apos;s element, event, and event-listener-callback &quot;fetch&quot; function" line="68" name="_triggers" />
              <variable attributes="private" citdl="Array" doc="PRIVATE: Collection of custom-event triggers for this group.&#xA;Keeps track of each trigger&apos;s event object and event-listener-callback &quot;fetch&quot; function" line="77" name="_customTriggers" />
              <variable citdl="Boolean" doc="Flag to check if images are above the fold. If foldConditional is true, the group will check each of its image locations at page load. If any part of the image is within the client viewport, the image is displayed immediately" line="84" name="foldConditional" />
              <variable citdl="String" doc="Class name that will identify images belonging to the group. This class name will be removed from each element in order to fetch images.&#xA;This class should have, in its CSS style definition, &quot;background:none !important;&quot;" line="92" name="className" />
              <variable attributes="private" citdl="Array" doc="PRIVATE: HTML elements having the class name that is associated with this group&#xA;Elements are stored during the _foldCheck function and reused later during the fetch function. Gives a slight performance improvement when className and foldConditional are both used" line="101" name="_classImageEls" />
              <scope doc="Adds a trigger to the group. Call this with the same style as YAHOO.util.Event.addListener" ilk="function" line="116" lineend="130" name="addTrigger" signature="addTrigger(trigEl, trigAct)">
                <variable citdl="{String" doc="The HTML element id or reference to assign the trigger event to" ilk="argument" name="trigEl" />
                <variable citdl="String" doc="The type of event to assign to trigEl" ilk="argument" name="trigAct" />
                <variable citdl="group" name="this" />
                <scope attributes="__local__ private" doc="Need to wrap the fetch function." ilk="function" line="125" lineend="127" name="wrappedFetch" signature="wrappedFetch()" />
              </scope>
              <scope doc="Adds a custom event trigger to the group." ilk="function" line="137" lineend="149" name="addCustomTrigger" signature="addCustomTrigger(event)">
                <variable citdl="Object" doc="A YAHOO.util.CustomEvent object" ilk="argument" name="event" />
                <variable citdl="group" name="this" />
                <scope attributes="__local__ private" doc="see comment in addTrigger()" ilk="function" line="144" lineend="146" name="wrappedFetch" signature="wrappedFetch()" />
              </scope>
              <scope attributes="private" doc="PRIVATE: Setup to do in the window&apos;s onload&#xA;Initiates time limit for group; executes the fold check for the images" ilk="function" line="157" lineend="165" name="_onloadTasks" signature="_onloadTasks()">
                <variable citdl="group" name="this" />
              </scope>
              <scope attributes="private" doc="PRIVATE: Returns the group&apos;s fetch method, with the proper closure, for use with setTimeout" ilk="function" line="173" lineend="176" name="_getFetchTimeout" returns="Function" signature="_getFetchTimeout()">
                <variable citdl="group" name="this" />
                <variable attributes="__local__ private" citdl="this" line="174" name="self" />
              </scope>
              <scope doc="Registers a background image with the group" ilk="function" line="185" lineend="188" name="registerBgImage" returns="Object" signature="registerBgImage(domId, url)">
                <variable citdl="String" doc="HTML DOM id of the image element" ilk="argument" name="domId" />
                <variable citdl="String" doc="URL for the image" ilk="argument" name="url" />
                <variable citdl="group" name="this" />
              </scope>
              <scope doc="Registers a src image with the group" ilk="function" line="198" lineend="201" name="registerSrcImage" returns="Object" signature="registerSrcImage(domId, url, width, height)">
                <variable citdl="String" doc="HTML DOM id of the image element" ilk="argument" name="domId" />
                <variable citdl="String" doc="URL for the image" ilk="argument" name="url" />
                <variable citdl="Number" doc="pixel width of the image - defaults to image&apos;s natural size" ilk="argument" name="width" />
                <variable citdl="Number" doc="pixel height of the image - defaults to image&apos;s natural size" ilk="argument" name="height" />
                <variable citdl="group" name="this" />
              </scope>
              <scope doc="Registers an alpha-channel-type png background image with the group" ilk="function" line="211" lineend="214" name="registerPngBgImage" returns="Object" signature="registerPngBgImage(domId, url, ailProps)">
                <variable citdl="String" doc="HTML DOM id of the image element" ilk="argument" name="domId" />
                <variable citdl="String" doc="URL for the image" ilk="argument" name="url" />
                <variable citdl="Object" doc="The AlphaImageLoader properties to be set for the image&#xA;Valid properties are &apos;sizingMethod&apos; and &apos;enabled&apos;" ilk="argument" name="ailProps" />
                <variable citdl="group" name="this" />
              </scope>
              <scope doc="Displays the images in the group" ilk="function" line="220" lineend="241" name="fetch" signature="fetch()">
                <variable citdl="group" name="this" />
              </scope>
              <scope attributes="private" doc="PRIVATE: Checks the position of each image in the group. If any part of the image is within the client viewport, shows the image immediately." ilk="function" line="248" lineend="273" name="_foldCheck" signature="_foldCheck()">
                <variable citdl="group" name="this" />
                <variable attributes="__local__ private" line="249" name="scrollTop" />
                <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getViewportHeight()" line="250" name="viewHeight" />
                <variable attributes="__local__ private" citdl="scrollTop" line="251" name="hLimit" />
                <variable attributes="__local__ private" line="252" name="scrollLeft" />
                <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getViewportWidth()" line="253" name="viewWidth" />
                <variable attributes="__local__ private" citdl="scrollLeft" line="254" name="wLimit" />
                <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getXY()" line="257" name="elPos" />
              </scope>
              <scope attributes="private" doc="PRIVATE: Finds all elements in the Dom with the class name specified in the group. Removes the class from the element in order to let the style definitions trigger the image fetching" ilk="function" line="280" lineend="290" name="_fetchByClass" signature="_fetchByClass()">
                <variable citdl="group" name="this" />
              </scope>
            </scope>
            <scope ilk="class" line="300" lineend="348" name="imgObj">
              <scope attributes="__ctor__" doc="CONSTRUCTOR: Base class for image objects to be registered with the groups" ilk="function" line="300" lineend="348" name="imgObj" signature="imgObj(domId, url)">
                <variable citdl="String" doc="HTML DOM id of the image element" ilk="argument" name="domId" />
                <variable citdl="String" doc="URL for the image" ilk="argument" name="url" />
                <variable citdl="imgObj" name="this" />
              </scope>
              <variable citdl="String" doc="HTML DOM id of the image element" line="306" name="domId" />
              <variable citdl="String" doc="URL for the image" line="313" name="url" />
              <variable citdl="Number" doc="Pixel width of the image. Will be set as a &quot;width&quot; attribute after the image is fetched.&#xA;Detaults to the natural width of the image.&#xA;Only appropriate with src images" line="322" name="width" />
              <variable citdl="Number" doc="Pixel height of the image. Will be set as a &quot;height&quot; attribute after the image is fetched.&#xA;Detaults to the natural height of the image.&#xA;Only appropriate with src images" line="331" name="height" />
              <variable citdl="Boolean" doc="Whether the style.visibility should be set to &quot;visible&quot; after the image is fetched.&#xA;Used when setting src images as visibility:hidden prior to image fetching" line="339" name="setVisible" />
              <variable attributes="private" citdl="Boolean" doc="PRIVATE: Whether the image has already been fetched. In the case of a foldCondional group, keeps track for when the trigger is fired so images aren&apos;t fetched twice" line="347" name="_fetched" />
              <scope doc="Displays the image; puts the URL into the DOM" ilk="function" line="354" lineend="374" name="fetch" signature="fetch()">
                <variable citdl="imgObj" name="this" />
                <variable attributes="__local__ private" citdl="document.getElementById()" line="358" name="el">
                  <variable citdl="Object" line="365" name="style">
                    <variable citdl="String" line="365" name="visibility" />
                  </variable>
                </variable>
              </scope>
              <scope attributes="private" doc="PRIVATE: Inserts the image URL into the DOM so that the image is displayed.&#xA;Must be overridden by child class" ilk="function" line="383" lineend="384" name="_applyUrl" signature="_applyUrl(el)">
                <variable citdl="Object" doc="HTML DOM element" ilk="argument" name="el" />
                <variable citdl="imgObj" name="this" />
              </scope>
            </scope>
            <scope ilk="class" line="394" lineend="396" name="bgImgObj">
              <scope attributes="__ctor__" doc="CONSTRUCTOR: Background image object. A background image is one whose URL is specified by &quot;background-image&quot; in the element&apos;s style" ilk="function" line="394" lineend="396" name="bgImgObj" signature="bgImgObj(domId, url)">
                <variable citdl="String" doc="HTML DOM id of the image element" ilk="argument" name="domId" />
                <variable citdl="String" doc="URL for the image" ilk="argument" name="url" />
                <variable citdl="bgImgObj" name="this" />
              </scope>
              <scope attributes="private" doc="PRIVATE: Inserts the image URL into the DOM so that the image is displayed.&#xA;Sets style.backgroundImage" ilk="function" line="407" lineend="409" name="_applyUrl" signature="_applyUrl(el)">
                <variable citdl="Object" doc="HTML DOM element" ilk="argument" name="el" />
                <variable citdl="bgImgObj" name="this" />
              </scope>
            </scope>
            <scope ilk="class" line="421" lineend="425" name="srcImgObj">
              <scope attributes="__ctor__" doc="CONSTRUCTOR: Source image object. A source image is one whose URL is specified by a src attribute in the DOM element" ilk="function" line="421" lineend="425" name="srcImgObj" signature="srcImgObj(domId, url, width, height)">
                <variable citdl="String" doc="HTML DOM id of the image element" ilk="argument" name="domId" />
                <variable citdl="String" doc="URL for the image" ilk="argument" name="url" />
                <variable citdl="Number" doc="pixel width of the image - defaults to image&apos;s natural size" ilk="argument" name="width" />
                <variable citdl="Number" doc="pixel height of the image - defaults to image&apos;s natural size" ilk="argument" name="height" />
                <variable citdl="srcImgObj" name="this" />
              </scope>
              <variable citdl="width" line="423" name="width" />
              <variable citdl="height" line="424" name="height" />
              <scope attributes="private" doc="PRIVATE: Inserts the image URL into the DOM so that the image is displayed.&#xA;Sets src" ilk="function" line="436" lineend="438" name="_applyUrl" signature="_applyUrl(el)">
                <variable citdl="Object" doc="HTML DOM element" ilk="argument" name="el" />
                <variable citdl="srcImgObj" name="this" />
              </scope>
            </scope>
            <scope ilk="class" line="450" lineend="460" name="pngBgImgObj">
              <scope attributes="__ctor__" doc="CONSTRUCTOR: PNG background image object. A PNG background image is one whose URL is specified through AlphaImageLoader or by &quot;background-image&quot; in the element&apos;s style" ilk="function" line="450" lineend="460" name="pngBgImgObj" signature="pngBgImgObj(domId, url, ailProps)">
                <variable citdl="String" doc="HTML DOM id of the image element" ilk="argument" name="domId" />
                <variable citdl="String" doc="URL for the image" ilk="argument" name="url" />
                <variable citdl="Object" doc="The AlphaImageLoader properties to be set for the image&#xA;Valid properties are &apos;sizingMethod&apos; and &apos;enabled&apos;" ilk="argument" name="ailProps" />
                <variable citdl="pngBgImgObj" name="this" />
              </scope>
              <variable citdl="Object" doc="AlphaImageLoader properties to be set for the image.&#xA;Valid properties are &quot;sizingMethod&quot; and &quot;enabled&quot;." line="459" name="props" />
              <scope attributes="private" doc="PRIVATE: Inserts the image URL into the DOM so that the image is displayed.&#xA;If the browser is determined to be IE6 (or older), sets the AlphaImageLoader src; otherwise sets style.backgroundImage" ilk="function" line="471" lineend="480" name="_applyUrl" signature="_applyUrl(el)">
                <variable citdl="Object" doc="HTML DOM element" ilk="argument" name="el" />
                <variable citdl="pngBgImgObj" name="this" />
                <variable attributes="__local__ private" line="473" name="sizingMethod" />
                <variable attributes="__local__ private" line="474" name="enabled" />
              </scope>
            </scope>
          </variable>
          <scope ilk="class" line="20" lineend="642" name="Config">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Config is a utility used within an Object to allow the implementer to&#xA;maintain a list of local configuration properties and listen for changes&#xA;to those properties dynamically using CustomEvent. The initial values are&#xA;also maintained so that the configuration can be reset at any given point&#xA;to its initial state." ilk="function" line="20" lineend="27" name="Config" signature="Config(owner)">
              <variable citdl="Object" doc="The owner Object to which this Config Object belongs" ilk="argument" name="owner" />
              <variable citdl="Config" name="this" />
            </scope>
            <variable citdl="Object" doc="Object reference to the owner of this Config Object" line="60" name="owner" />
            <variable citdl="Boolean" doc="Boolean flag that specifies whether a queue is currently&#xA;being executed" line="68" name="queueInProgress" />
            <variable attributes="private" citdl="Object" doc="PRIVATE: Maintains the local collection of configuration property objects and&#xA;their specified values" line="77" lineend="119" name="config" />
            <variable attributes="private" citdl="Object" doc="PRIVATE: Maintains the local collection of configuration property objects as&#xA;they were initially applied.&#xA;This object is used when resetting a property." line="87" lineend="120" name="initialConfig" />
            <variable attributes="private" citdl="Object" doc="PRIVATE: Maintains the local, normalized CustomEvent queue" line="95" name="eventQueue" />
            <variable citdl="this.createEvent()" doc="Custom Event, notifying subscribers when Config properties are set&#xA;(setProperty is called without the silent flag" line="102" name="configChangedEvent" />
            <scope doc="Initializes the configuration Object and all of its local members." ilk="function" line="110" lineend="123" name="init" signature="init(owner)">
              <variable citdl="Object" doc="The owner Object to which this Config&#xA;Object belongs" ilk="argument" name="owner" />
              <variable citdl="Config" name="this" />
            </scope>
            <variable citdl="CustomEvent.LIST" line="117" name="signature" />
            <scope doc="Validates that the value passed in is a Boolean." ilk="function" line="131" lineend="133" name="checkBoolean" returns="Boolean" signature="checkBoolean(val)">
              <variable citdl="Object" doc="The value to validate" ilk="argument" name="val" />
              <variable citdl="Config" name="this" />
            </scope>
            <scope doc="Validates that the value passed in is a number." ilk="function" line="141" lineend="143" name="checkNumber" returns="Boolean" signature="checkNumber(val)">
              <variable citdl="Object" doc="The value to validate" ilk="argument" name="val" />
              <variable citdl="Config" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Fires a configuration property event using the specified value." ilk="function" line="152" lineend="158" name="fireEvent" signature="fireEvent(key, value)">
              <variable citdl="String" doc="The configuration property&apos;s name" ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="this.config[key]" line="153" name="property" />
            </scope>
            <scope doc="Adds a property to the Config Object&apos;s private config hash." ilk="function" line="167" lineend="189" name="addProperty" signature="addProperty(key, propertyObject)">
              <variable citdl="String" doc="The configuration property&apos;s name" ilk="argument" name="key" />
              <variable citdl="Object" doc="The Object containing all of this&#xA;property&apos;s arguments" ilk="argument" name="propertyObject" />
              <variable citdl="Config" name="this" />
            </scope>
            <scope doc="Returns a key-value configuration map of the values currently set in&#xA;the Config Object." ilk="function" line="197" lineend="211" name="getConfig" returns="Object" signature="getConfig()">
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="199" lineend="199" name="cfg" />
              <variable attributes="__local__ private" line="200" name="prop" />
              <variable attributes="__local__ private" citdl="this.config[prop]" line="201" name="property" />
            </scope>
            <scope doc="Returns the value of specified property." ilk="function" line="219" lineend="226" name="getProperty" returns="Object" signature="getProperty(key)">
              <variable citdl="String" doc="The name of the property" ilk="argument" name="key" />
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="this.config[key.toLowerCase()]" line="220" name="property" />
            </scope>
            <scope doc="Resets the specified property&apos;s value to its initial value." ilk="function" line="234" lineend="256" name="resetProperty" returns="Boolean" signature="resetProperty(key)">
              <variable citdl="String" doc="The name of the property" ilk="argument" name="key" />
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="this.config[key]" line="238" name="property" />
            </scope>
            <scope doc="Sets the value of a property. If the silent property is passed as&#xA;true, the property&apos;s event will not be fired." ilk="function" line="268" lineend="296" name="setProperty" returns="Boolean" signature="setProperty(key, value, silent)">
              <variable citdl="String" doc="The name of the property" ilk="argument" name="key" />
              <variable citdl="String" doc="The value to set the property to" ilk="argument" name="value" />
              <variable citdl="Boolean" doc="Whether the value should be set silently,&#xA;without firing the property event." ilk="argument" name="silent" />
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="this.config[key]" line="270" name="property" />
            </scope>
            <scope doc="Sets the value of a property and queues its event to execute. If the&#xA;event is already scheduled to execute, it is&#xA;moved from its current position to the end of the queue." ilk="function" line="308" lineend="413" name="queueProperty" returns="Boolean" signature="queueProperty(key, value)">
              <variable citdl="String" doc="The name of the property" ilk="argument" name="key" />
              <variable citdl="String" doc="The value to set the property to" ilk="argument" name="value" />
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="this.eventQueue.length" line="326" name="qLen" />
              <variable attributes="__local__ private" citdl="property.supercedes.length" line="326" name="sLen" />
              <variable attributes="__local__ private" citdl="this.eventQueue[i]" line="326" name="queueItem" />
              <variable attributes="__local__ private" line="326" name="i" />
              <variable attributes="__local__ private" line="326" name="s" />
              <variable attributes="__local__ private" citdl="this.eventQueue.length" line="326" name="iLen" />
              <variable attributes="__local__ private" citdl="queueItem[1]" line="326" name="queueItemValue" />
              <variable attributes="__local__ private" citdl="this.eventQueue[q]" line="326" name="queueItemCheck" />
              <variable attributes="__local__ private" line="326" name="q" />
              <variable attributes="__local__ private" citdl="queueItem[0]" line="326" name="queueItemKey" />
              <variable attributes="__local__ private" citdl="property.supercedes[s]" line="326" name="supercedesCheck" />
              <variable attributes="__local__ private" citdl="queueItemCheck[0]" line="326" name="queueItemCheckKey" />
              <variable attributes="__local__ private" citdl="queueItemCheck[1]" line="326" name="queueItemCheckValue" />
              <variable attributes="__local__ private" citdl="Boolean" line="326" name="foundDuplicate" />
              <variable attributes="__local__ private" citdl="this.config[key]" line="326" name="property" />
            </scope>
            <scope doc="Fires the event for a property using the property&apos;s current value." ilk="function" line="420" lineend="441" name="refireEvent" signature="refireEvent(key)">
              <variable citdl="String" doc="The name of the property" ilk="argument" name="key" />
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="this.config[key]" line="424" name="property" />
            </scope>
            <scope doc="Applies a key-value Object literal to the configuration, replacing&#xA;any existing values, and queueing the property events.&#xA;Although the values will be set, fireQueue() must be called for their&#xA;associated events to execute." ilk="function" line="454" lineend="474" name="applyConfig" signature="applyConfig(userConfig, init)">
              <variable citdl="Object" doc="The configuration Object literal" ilk="argument" name="userConfig" />
              <variable citdl="Boolean" doc="When set to true, the initialConfig will&#xA;be set to the userConfig passed in, so that calling a reset will&#xA;reset the properties to the passed values." ilk="argument" name="init" />
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" line="457" lineend="460" name="oConfig" />
              <variable attributes="__local__ private" line="457" name="sKey" />
            </scope>
            <scope doc="Refires the events for all configuration properties using their&#xA;current values." ilk="function" line="481" lineend="488" name="refresh" signature="refresh()">
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" line="483" name="prop" />
            </scope>
            <scope doc="Fires the normalized list of queued property change events" ilk="function" line="494" lineend="519" name="fireQueue" signature="fireQueue()">
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" line="500" name="i" />
              <variable attributes="__local__ private" citdl="this.eventQueue[i]" line="500" name="queueItem" />
              <variable attributes="__local__ private" citdl="this.config[key]" line="500" name="property" />
              <variable attributes="__local__ private" citdl="queueItem[1]" line="500" name="value" />
              <variable attributes="__local__ private" citdl="queueItem[0]" line="500" name="key" />
            </scope>
            <scope doc="Subscribes an external handler to the change event for any&#xA;given property." ilk="function" line="535" lineend="548" name="subscribeToConfigEvent" returns="Boolean" signature="subscribeToConfigEvent(key, handler, obj, override)">
              <variable citdl="String" doc="The property name" ilk="argument" name="key" />
              <variable citdl="Function" doc="The handler function to use subscribe to&#xA;the property&apos;s event" ilk="argument" name="handler" />
              <variable citdl="Object" doc="The Object to use for scoping the event handler&#xA;(see CustomEvent documentation)" ilk="argument" name="obj" />
              <variable citdl="Boolean" doc="Optional. If true, will override &quot;this&quot;&#xA;within the handler to map to the scope Object passed into the method." ilk="argument" name="override" />
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="this.config[key.toLowerCase()]" line="537" name="property" />
            </scope>
            <scope doc="Unsubscribes an external handler from the change event for any&#xA;given property." ilk="function" line="562" lineend="569" name="unsubscribeFromConfigEvent" returns="Boolean" signature="unsubscribeFromConfigEvent(key, handler, obj)">
              <variable citdl="String" doc="The property name" ilk="argument" name="key" />
              <variable citdl="Function" doc="The handler function to use subscribe to&#xA;the property&apos;s event" ilk="argument" name="handler" />
              <variable citdl="Object" doc="The Object to use for scoping the event&#xA;handler (see CustomEvent documentation)" ilk="argument" name="obj" />
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="this.config[key.toLowerCase()]" line="563" name="property" />
            </scope>
            <scope doc="Returns a string representation of the Config object" ilk="function" line="576" lineend="582" name="toString" returns="String" signature="toString()">
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="String" line="577" name="output" />
            </scope>
            <scope doc="Returns a string representation of the Config object&apos;s current&#xA;CustomEvent queue" ilk="function" line="591" lineend="605" name="outputEventQueue" returns="String" signature="outputEventQueue()">
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" line="596" name="q" />
              <variable attributes="__local__ private" citdl="String" line="596" name="output" />
              <variable attributes="__local__ private" citdl="this.eventQueue.length" line="596" name="nQueue" />
              <variable attributes="__local__ private" citdl="this.eventQueue[q]" line="596" name="queueItem" />
            </scope>
            <scope doc="Sets all properties to null, unsubscribes all listeners from each&#xA;property&apos;s change event and all listeners from the configChangedEvent." ilk="function" line="612" lineend="640" name="destroy" signature="destroy()">
              <variable citdl="Config" name="this" />
              <variable attributes="__local__ private" citdl="oConfig[sProperty]" line="616" name="oProperty" />
              <variable attributes="__local__ private" citdl="this.config" line="616" name="oConfig" />
              <variable attributes="__local__ private" line="616" name="sProperty" />
            </scope>
          </scope>
          <variable attributes="__static__" citdl="Object" doc="STATIC: Cookie utility." line="20" lineend="383" name="Cookie">
            <scope attributes="private __static__" doc="PRIVATE STATIC: Creates a cookie string that can be assigned into document.cookie.&#xA;*//*:String*/" ilk="function" line="37" lineend="68" name="_createCookieString" returns="String" signature="_createCookieString(name, value, encodeValue, options)">
              <variable citdl="String" doc="The name of the cookie." ilk="argument" name="name" />
              <variable citdl="String" doc="The value of the cookie." ilk="argument" name="value" />
              <variable citdl="encodeValue" doc="True to encode the value, false to leave as-is." ilk="argument" name="encodeValue" />
              <variable citdl="Object" doc="(Optional) Options for the cookie." ilk="argument" name="options" />
              <variable citdl="Cookie" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.lang" doc="shortcut" line="40" name="lang" />
              <variable attributes="__local__ private" citdl="encodeURIComponent()" doc=":String*/" line="42" name="text" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Formats a cookie value for an object containing multiple values.&#xA;*//*:String*/" ilk="function" line="78" lineend="96" name="_createCookieHashString" returns="String" signature="_createCookieHashString(hash)">
              <variable citdl="Object" doc="An object of key-value pairs to create a string for." ilk="argument" name="hash" />
              <variable citdl="Cookie" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.lang" doc="shortcuts" line="81" name="lang" />
              <variable attributes="__local__ private" citdl="Array" doc=":Array*/" line="87" name="text" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Parses a cookie hash string into an object.&#xA;*//*:Object*/" ilk="function" line="106" lineend="118" name="_parseCookieHash" returns="Object" signature="_parseCookieHash(text)">
              <variable citdl="String" doc="The cookie hash string to parse. The string should already be URL-decoded." ilk="argument" name="text" />
              <variable citdl="Cookie" name="this" />
              <variable attributes="__local__ private" citdl="text.split()" doc=":Array*/" line="108" name="hashParts" />
              <variable attributes="__local__ private" citdl="hashParts[i].split()" doc=":Array*/" line="109" name="hashPart" />
              <variable attributes="__local__ private" citdl="Object" doc=":Object*/" line="110" name="hash" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Parses a cookie string into an object representing all accessible cookies.&#xA;*//*:Object*/" ilk="function" line="129" lineend="161" name="_parseCookieString" returns="Object" signature="_parseCookieString(text, decode)">
              <variable citdl="String" doc="The cookie string to parse." ilk="argument" name="text" />
              <variable citdl="Boolean" doc="(Optional) Indicates if the cookie values should be decoded or not. Default is true." ilk="argument" name="decode" />
              <variable citdl="Cookie" name="this" />
              <variable attributes="__local__ private" citdl="Object" doc=":Object*/" line="131" name="cookies" />
              <variable attributes="__local__ private" line="135" name="decodeValue" />
              <variable attributes="__local__ private" citdl="text.split()" doc=":Array*/" line="138" name="cookieParts" />
              <variable attributes="__local__ private" citdl="decodeURIComponent()" doc=":String*/" line="139" name="cookieName" />
              <variable attributes="__local__ private" citdl="decodeValue()" doc=":String*/" line="140" name="cookieValue" />
              <variable attributes="__local__ private" citdl="cookieParts[i].match()" doc=":Array*/" line="141" name="cookieNameValue" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the cookie value for the given name.&#xA;*//*:Variant*/" ilk="function" line="178" lineend="196" name="get" returns="Variant" signature="get(name, converter)">
              <variable citdl="String" doc="The name of the cookie to retrieve." ilk="argument" name="name" />
              <variable citdl="Function" doc="(Optional) A function to run on the value before returning&#xA;it. The function is not used if the cookie doesn&apos;t exist." ilk="argument" name="converter" />
              <variable citdl="Cookie" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.lang" line="180" name="lang" />
              <variable attributes="__local__ private" citdl="this._parseCookieString()" doc=":Object*/" line="181" name="cookies" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the value of a subcookie.&#xA;*//*:Variant*/" ilk="function" line="211" lineend="235" name="getSub" returns="Variant" signature="getSub(name, subName, converter)">
              <variable citdl="String" doc="The name of the cookie to retrieve." ilk="argument" name="name" />
              <variable citdl="String" doc="The name of the subcookie to retrieve." ilk="argument" name="subName" />
              <variable citdl="Function" doc="(Optional) A function to run on the value before returning&#xA;it. The function is not used if the cookie doesn&apos;t exist." ilk="argument" name="converter" />
              <variable citdl="Cookie" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.lang" line="213" name="lang" />
              <variable attributes="__local__ private" citdl="this.getSubs()" doc=":Variant*/" line="214" name="hash" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns an object containing name-value pairs stored in the cookie with the given name.&#xA;*//*:Object*/" ilk="function" line="245" lineend="257" name="getSubs" returns="Object" signature="getSubs(name)">
              <variable citdl="String" doc="The name of the cookie to retrieve." ilk="argument" name="name" />
              <variable citdl="Cookie" name="this" />
              <variable attributes="__local__ private" citdl="this._parseCookieString()" line="252" name="cookies" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Removes a cookie from the machine by setting its expiration date to&#xA;sometime in the past.&#xA;*//*:String*/" ilk="function" line="271" lineend="284" name="remove" returns="String" signature="remove(name, options)">
              <variable citdl="String" doc="The name of the cookie to remove." ilk="argument" name="name" />
              <variable citdl="Object" doc="(Optional) An object containing one or more&#xA;cookie options: path (a string), domain (a string),&#xA;and secure (true/false). The expires option will be overwritten&#xA;by the method." ilk="argument" name="options" />
              <variable citdl="Cookie" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Sets a cookie with a given name and value.&#xA;*//*:String*/" ilk="function" line="297" lineend="313" name="set" returns="String" signature="set(name, value, options)">
              <variable citdl="String" doc="The name of the cookie to set." ilk="argument" name="name" />
              <variable citdl="Variant" doc="The value to set for the cookie." ilk="argument" name="value" />
              <variable citdl="Object" doc="(Optional) An object containing one or more&#xA;cookie options: path (a string), domain (a string), expires (a Date object),&#xA;and secure (true/false)." ilk="argument" name="options" />
              <variable citdl="Cookie" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.lang" line="299" name="lang" />
              <variable attributes="__local__ private" citdl="this._createCookieString()" doc=":String*/" line="310" name="text" />
              <variable citdl="Object" line="311" name="document">
                <variable citdl="String" line="311" name="cookie" />
              </variable>
            </scope>
            <scope attributes="__static__" doc="STATIC: Sets a sub cookie with a given name to a particular value.&#xA;*//*:String*/" ilk="function" line="327" lineend="353" name="setSub" returns="String" signature="setSub(name, subName, value, options)">
              <variable citdl="String" doc="The name of the cookie to set." ilk="argument" name="name" />
              <variable citdl="String" doc="The name of the subcookie to set." ilk="argument" name="subName" />
              <variable citdl="Variant" doc="The value to set." ilk="argument" name="value" />
              <variable citdl="Object" doc="(Optional) An object containing one or more&#xA;cookie options: path (a string), domain (a string), expires (a Date object),&#xA;and secure (true/false)." ilk="argument" name="options" />
              <variable citdl="Cookie" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.lang" line="329" name="lang" />
              <variable attributes="__local__ private" citdl="this.getSubs()" doc=":Object*/" line="343" name="hash" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Sets a cookie with a given name to contain a hash of name-value pairs.&#xA;*//*:String*/" ilk="function" line="366" lineend="381" name="setSubs" returns="String" signature="setSubs(name, value, options)">
              <variable citdl="String" doc="The name of the cookie to set." ilk="argument" name="name" />
              <variable citdl="Object" doc="An object containing name-value pairs." ilk="argument" name="value" />
              <variable citdl="Object" doc="(Optional) An object containing one or more&#xA;cookie options: path (a string), domain (a string), expires (a Date object),&#xA;and secure (true/false)." ilk="argument" name="options" />
              <variable citdl="Cookie" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.lang" line="368" name="lang" />
              <variable attributes="__local__ private" citdl="this._createCookieString()" doc=":String*/" line="378" name="text" />
              <variable citdl="Object" line="379" name="document">
                <variable citdl="String" line="379" name="cookie" />
              </variable>
            </scope>
          </variable>
          <scope ilk="class" line="23" lineend="167" name="Chain">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Mechanism to execute a series of callbacks in a non-blocking queue.  Each callback is executed via setTimout unless configured with a negative timeout, in which case it is run in blocking mode in the same execution thread as the previous callback.  Callbacks can be function references or object literals with the following keys:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;method&lt;/code&gt; - {Function} REQUIRED the callback function.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;scope&lt;/code&gt; - {Object} the scope from which to execute the callback.  Default is the global window scope.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;argument&lt;/code&gt; - {Array} parameters to be passed to method as individual arguments.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt; - {number} millisecond delay to wait after previous callback completion before executing this callback.  Negative values cause immediate blocking execution.  Default 0.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;until&lt;/code&gt; - {Function} boolean function executed before each iteration.  Return true to indicate completion and proceed to the next callback.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;iterations&lt;/code&gt; - {Number} number of times to execute the callback before proceeding to the next callback in the chain. Incompatible with &lt;code&gt;until&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="function" line="23" lineend="38" name="Chain" signature="Chain()">
              <variable citdl="Chain" name="this" />
            </scope>
            <variable attributes="private" citdl="Array" doc="PRIVATE: The callback queue" line="30" name="q" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: Timeout id used to pause or stop execution and indicate the execution state of the Chain.  0 indicates paused or stopped, -1 indicates blocking execution, and any positive number indicates non-blocking execution." line="47" name="id" />
            <scope doc="Begin executing the chain, or resume execution from the last paused position." ilk="function" line="54" lineend="129" name="run" returns="Chain" signature="run()">
              <variable citdl="Chain" name="this" />
              <variable attributes="__local__ private" citdl="this.q[0]" doc="Grab the first callback in the queue" line="57" name="c" />
              <variable attributes="__local__ private" citdl="c.method" doc="Grab the first callback in the queue" line="57" name="fn" />
              <variable attributes="__local__ private" citdl="c.scope" line="71" name="o" />
              <variable attributes="__local__ private" citdl="c.argument" line="72" name="args" />
              <variable attributes="__local__ private" citdl="c.timeout" line="73" name="ms" />
              <variable attributes="__local__ private" citdl="this" line="74" name="me" />
            </scope>
            <scope doc="Add a callback to the end of the queue" ilk="function" line="137" lineend="140" name="add" returns="Chain" signature="add(c)">
              <variable citdl="{Function" doc="the callback function ref or object literal" ilk="argument" name="c" />
              <variable citdl="Chain" name="this" />
            </scope>
            <scope doc="Pause the execution of the Chain after the current execution of the&#xA;current callback completes.  If called interstitially, clears the&#xA;timeout for the pending callback. Paused Chains can be restarted with&#xA;chain.run()" ilk="function" line="150" lineend="154" name="pause" returns="Chain" signature="pause()">
              <variable citdl="Chain" name="this" />
            </scope>
            <scope doc="Stop and clear the Chain&apos;s queue after the current execution of the&#xA;current callback completes." ilk="function" line="162" lineend="166" name="stop" returns="Chain" signature="stop()">
              <variable citdl="Chain" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="27" lineend="323" name="CustomEvent">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The CustomEvent class lets you define events for your application&#xA;that can be subscribed to by one or more independent component." ilk="function" line="27" lineend="122" name="CustomEvent" signature="CustomEvent(type, oScope, silent, signature)">
              <variable citdl="String" doc="The type of event, which is passed to the callback&#xA;when the event fires" ilk="argument" name="type" />
              <variable citdl="Object" doc="The context the event will fire from.  &quot;this&quot; will&#xA;refer to this object in the callback.  Default value:&#xA;the window object.  The listener can override this." ilk="argument" name="oScope" />
              <variable citdl="Boolean" doc="pass true to prevent the event from writing to&#xA;the debugsystem" ilk="argument" name="silent" />
              <variable citdl="Number" doc="the signature that the custom event subscriber&#xA;will receive. YAHOO.util.CustomEvent.LIST or&#xA;YAHOO.util.CustomEvent.FLAT.  The default is&#xA;YAHOO.util.CustomEvent.LIST." ilk="argument" name="signature" />
              <variable citdl="CustomEvent" name="this" />
              <variable attributes="__local__ private" citdl="String" line="86" name="onsubscribeType" />
            </scope>
            <variable citdl="String" doc="The type of event, returned to subscribers when the event fires" line="34" name="type" />
            <variable citdl="Object" doc="The scope the the event will fire from by default.  Defaults to the window&#xA;obj" line="42" name="scope" />
            <variable citdl="Boolean" doc="By default all custom events are logged in the debug build, set silent&#xA;to true to disable debug outpu for this event." line="50" name="silent" />
            <variable citdl="Number" doc="Custom events support two styles of arguments provided to the event&#xA;subscribers.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;YAHOO.util.CustomEvent.LIST:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;param1: event name&lt;/li&gt;&#xA;&lt;li&gt;param2: array of arguments sent to fire&lt;/li&gt;&#xA;&lt;li&gt;param3: &lt;optional&gt; a custom object supplied by the subscriber&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;YAHOO.util.CustomEvent.FLAT&#xA;&lt;ul&gt;&#xA;&lt;li&gt;param1: the first argument passed to fire.  If you need to&#xA;pass multiple parameters, use and array or object literal&lt;/li&gt;&#xA;&lt;li&gt;param2: &lt;optional&gt; a custom object supplied by the subscriber&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;" line="74" name="signature" />
            <variable citdl="Array" doc="The subscribers to this event" line="81" name="subscribers" />
            <variable citdl="YAHOO.util.CustomEvent" doc="Custom events provide a custom event that fires whenever there is&#xA;a new subscriber to the event.  This provides an opportunity to&#xA;handle the case where there is a non-repeating event that has&#xA;already fired has a new subscriber." line="109" name="subscribeEvent" />
            <variable citdl="Error" doc="In order to make it possible to execute the rest of the subscriber&#xA;stack when one thows an exception, the subscribers exceptions are&#xA;caught.  The most recent exception is stored in this property" line="121" name="lastError" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: Subscriber listener sigature constant.  The LIST type returns three&#xA;parameters: the event type, the array of args passed to fire, and&#xA;the optional custom object" line="132" name="LIST" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: Subscriber listener sigature constant.  The FLAT type returns two&#xA;parameters: the first argument passed to fire and the optional&#xA;custom object" line="142" name="FLAT" />
            <scope doc="Subscribes the caller to this event" ilk="function" line="157" lineend="168" name="subscribe" signature="subscribe(fn, obj, override)">
              <variable citdl="Function" doc="The function to execute" ilk="argument" name="fn" />
              <variable citdl="Object" doc="An object to be passed along when the event&#xA;fires" ilk="argument" name="obj" />
              <variable citdl="{boolean" doc="If true, the obj passed in becomes&#xA;the execution scope of the listener.&#xA;if an object, that object becomes the&#xA;the execution scope." ilk="argument" name="override" />
              <variable citdl="CustomEvent" name="this" />
            </scope>
            <scope doc="Unsubscribes subscribers." ilk="function" line="182" lineend="198" name="unsubscribe" returns="Boolean" signature="unsubscribe(fn, obj)">
              <variable citdl="Function" doc="The subscribed function to remove, if not supplied&#xA;all will be removed" ilk="argument" name="fn" />
              <variable citdl="Object" doc="The custom object passed to subscribe.  This is&#xA;optional, but if supplied will be used to&#xA;disambiguate multiple listeners that are the same&#xA;(e.g., you subscribe many object using a function&#xA;that lives on the prototype)" ilk="argument" name="obj" />
              <variable citdl="CustomEvent" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="188" name="found" />
              <variable attributes="__local__ private" citdl="this.subscribers[i]" line="190" name="s" />
            </scope>
            <scope doc="Notifies the subscribers.  The callback functions will be executed&#xA;from the scope specified when the event was created, and with the&#xA;following parameters:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The type of event&lt;/li&gt;&#xA;&lt;li&gt;All of the arguments fire() was executed with as an array&lt;/li&gt;&#xA;&lt;li&gt;The custom object (if any) that was passed into the subscribe()&#xA;method&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="function" line="216" lineend="283" name="fire" returns="Boolean" signature="fire()">
              <variable citdl="CustomEvent" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="221" name="errors" />
              <variable attributes="__local__ private" citdl="this.subscribers.length" line="221" name="len" />
              <variable attributes="__local__ private" line="227" name="i" />
              <variable attributes="__local__ private" citdl="Boolean" line="227" name="rebuild" />
              <variable attributes="__local__ private" citdl="Array" line="227" name="args" />
              <variable attributes="__local__ private" citdl="Boolean" line="227" name="ret" />
              <variable attributes="__local__ private" citdl="this.subscribers.slice()" doc="no index problems if one subscriber removes another." line="234" name="subs" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.throwErrors" doc="no index problems if one subscriber removes another." line="234" name="throwErrors" />
              <variable attributes="__local__ private" citdl="subs[i]" line="237" name="s" />
              <variable attributes="__local__ private" citdl="s.getScope()" line="244" name="scope" />
              <variable attributes="__local__ private" citdl="args[0]" line="247" name="param" />
            </scope>
            <scope doc="Removes all listeners" ilk="function" line="290" lineend="298" name="unsubscribeAll" returns="Number" signature="unsubscribeAll()">
              <variable citdl="CustomEvent" name="this" />
            </scope>
            <scope attributes="private" doc="*/" ilk="function" line="304" lineend="313" name="_delete" signature="_delete(index)">
              <variable ilk="argument" name="index" />
              <variable citdl="CustomEvent" name="this" />
              <variable attributes="__local__ private" citdl="this.subscribers[index]" line="305" name="s" />
            </scope>
            <scope doc="toString */" ilk="function" line="318" lineend="322" name="toString" returns="String" signature="toString()">
              <variable citdl="CustomEvent" name="this" />
            </scope>
          </scope>
          <variable citdl="Object" doc="The Connection Manager provides a simplified interface to the XMLHttpRequest&#xA;object.  It handles cross-browser instantiantion of XMLHttpRequest, negotiates the&#xA;interactive states and server response, returning the results to a pre-defined&#xA;callback you create." line="27" lineend="1360" name="Connect">
            <variable attributes="private __static__" citdl="Array" doc="PRIVATE STATIC: Array of MSFT ActiveX ids for XMLHttpRequest." line="36" name="_msxml_progid" />
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Object literal of HTTP header(s)" line="48" lineend="877" name="_http_headers" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Determines if HTTP headers are set." line="57" name="_has_http_headers" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Determines if a default header of&#xA;Content-Type of &apos;application/x-www-form-urlencoded&apos;&#xA;will be added to any client HTTP headers sent for POST&#xA;transactions." line="69" name="_use_default_post_header" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: The default header used for POST transactions." line="78" name="_default_post_header" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: The default header used for transactions involving the&#xA;use of HTML forms." line="88" name="_default_form_header" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Determines if a default header of&#xA;&apos;X-Requested-With: XMLHttpRequest&apos;&#xA;will be added to each transaction." line="99" name="_use_default_xhr_header" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: The default header value for the label&#xA;&quot;X-Requested-With&quot;.  This is sent with each&#xA;transaction, by default, to identify the&#xA;request as being made by YUI Connection Manager." line="111" name="_default_xhr_header" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Determines if custom, default headers&#xA;are set for each transaction." line="121" name="_has_default_headers" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Determines if custom, default headers&#xA;are set for each transaction." line="131" lineend="891" name="_default_headers" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Property modified by setForm() to determine if the data&#xA;should be submitted as an HTML form." line="141" name="_isFormSubmit" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Property modified by setForm() to determine if a file(s)&#xA;upload is expected." line="151" name="_isFileUpload" />
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Property modified by setForm() to set a reference to the HTML&#xA;form node if the desired action is file upload." line="161" name="_formNode" />
            <variable attributes="private __static__" citdl="String" doc="PRIVATE STATIC: Property modified by setForm() to set the HTML form data&#xA;for each transaction." line="171" name="_sFormData" />
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Collection of polling references to the polling mechanism in handleReadyState." line="180" lineend="180" name="_poll" />
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Queue of timeout values for each transaction callback with a defined timeout value." line="189" lineend="189" name="_timeOut" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: The polling frequency, in milliseconds, for HandleReadyState.&#xA;when attempting to determine a transaction&apos;s XHR readyState.&#xA;The default is 50 milliseconds." line="200" name="_polling_interval" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: A transaction counter that increments the transaction id for each transaction." line="209" name="_transaction_id" />
            <variable attributes="private __static__" citdl="String" doc="PRIVATE STATIC: Tracks the name-value pair of the &quot;clicked&quot; submit button if multiple submit&#xA;buttons are present in an HTML form; and, if YAHOO.util.Event is available." line="219" name="_submitElementValue" />
            <variable attributes="private __static__" doc="PRIVATE STATIC: Determines whether YAHOO.util.Event is available and returns true or false.&#xA;If true, an event listener is bound at the document level to trap click events that&#xA;resolve to a target type of &quot;Submit&quot;.  This listener will enable setForm() to determine&#xA;the clicked &quot;Submit&quot; value in a multi-Submit button, HTML form." line="245" name="_hasSubmitListener" />
            <variable attributes="private __static__" citdl="CustomEvent" doc="PRIVATE STATIC: Custom event that fires at the start of a transaction" line="254" name="startEvent" />
            <variable attributes="private __static__" citdl="CustomEvent" doc="PRIVATE STATIC: Custom event that fires when a transaction response has completed." line="263" name="completeEvent" />
            <variable attributes="private __static__" citdl="CustomEvent" doc="PRIVATE STATIC: Custom event that fires when handleTransactionResponse() determines a&#xA;response in the HTTP 2xx range." line="273" name="successEvent" />
            <variable attributes="private __static__" citdl="CustomEvent" doc="PRIVATE STATIC: Custom event that fires when handleTransactionResponse() determines a&#xA;response in the HTTP 4xx/5xx range." line="283" name="failureEvent" />
            <variable attributes="private __static__" citdl="CustomEvent" doc="PRIVATE STATIC: Custom event that fires when handleTransactionResponse() determines a&#xA;response in the HTTP 4xx/5xx range." line="293" name="uploadEvent" />
            <variable attributes="private __static__" citdl="CustomEvent" doc="PRIVATE STATIC: Custom event that fires when a transaction is successfully aborted." line="302" name="abortEvent" />
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: A reference table that maps callback custom events members to its specific&#xA;event name." line="313" lineend="320" name="_customEvents">
              <variable citdl="Array" line="314" name="onStart" />
              <variable citdl="Array" line="315" name="onComplete" />
              <variable citdl="Array" line="316" name="onSuccess" />
              <variable citdl="Array" line="317" name="onFailure" />
              <variable citdl="Array" line="318" name="onUpload" />
              <variable citdl="Array" line="319" name="onAbort" />
            </variable>
            <scope attributes="__static__" doc="STATIC: Member to add an ActiveX id to the existing xml_progid array.&#xA;In the event(unlikely) a new ActiveX id is introduced, it can be added&#xA;without internal code modifications." ilk="function" line="333" lineend="335" name="setProgId" signature="setProgId(id)">
              <variable citdl="String" doc="The ActiveX id to be added to initialize the XHR object." ilk="argument" name="id" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Member to override the default POST header." ilk="function" line="346" lineend="353" name="setDefaultPostHeader" signature="setDefaultPostHeader(b)">
              <variable citdl="Boolean" doc="Set and use default header - true or false ." ilk="argument" name="b" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Member to override the default transaction header.." ilk="function" line="364" lineend="371" name="setDefaultXhrHeader" signature="setDefaultXhrHeader(b)">
              <variable citdl="Boolean" doc="Set and use default header - true or false ." ilk="argument" name="b" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Member to modify the default polling interval." ilk="function" line="382" lineend="386" name="setPollingInterval" signature="setPollingInterval(i)">
              <variable citdl="Number" doc="The polling interval in milliseconds." ilk="argument" name="i" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Instantiates a XMLHttpRequest object and returns an object with two properties:&#xA;the XMLHttpRequest instance and the transaction id." ilk="function" line="398" lineend="425" name="createXhrObject" returns="Object" signature="createXhrObject(transactionId)">
              <variable citdl="Number" doc="Property containing the transaction id for this transaction." ilk="argument" name="transactionId" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="XMLHttpRequest" line="399" name="http" />
              <variable attributes="__local__ private" line="399" lineend="415" name="obj">
                <variable citdl="transactionId" line="405" name="tId" />
                <variable citdl="http" line="405" name="conn" />
              </variable>
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: This method is called by asyncRequest to create a&#xA;valid connection object for the transaction.  It also passes a&#xA;transaction id and increments the transaction id counter." ilk="function" line="437" lineend="461" name="getConnectionObject" returns="Object" signature="getConnectionObject(isFileUpload)">
              <variable ilk="argument" name="isFileUpload" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="this.createXhrObject()" line="438" lineend="447" name="o" />
              <variable attributes="__local__ private" citdl="this._transaction_id" line="439" name="tId" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Method for initiating an asynchronous request via the XHR object." ilk="function" line="475" lineend="559" name="asyncRequest" returns="Object" signature="asyncRequest(method, uri, callback, postData)">
              <variable citdl="String" doc="HTTP transaction method" ilk="argument" name="method" />
              <variable citdl="String" doc="Fully qualified path of resource" ilk="argument" name="uri" />
              <variable citdl="callback" doc="User-defined callback function or object" ilk="argument" name="callback" />
              <variable citdl="String" doc="POST body" ilk="argument" name="postData" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" line="476" name="o" />
              <variable attributes="__local__ private" line="477" name="args" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: This method creates and subscribes custom events,&#xA;specific to each transaction" ilk="function" line="572" lineend="584" name="initCustomEvents" signature="initCustomEvents(o, callback)">
              <variable citdl="Object" doc="The connection object" ilk="argument" name="o" />
              <variable citdl="callback" doc="The user-defined callback object" ilk="argument" name="callback" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: This method serves as a timer that polls the XHR object&apos;s readyState&#xA;property during a transaction, instead of binding a callback to the&#xA;onreadystatechange event.  Upon readyState 4, handleTransactionResponse&#xA;will process the response, and the timer will be cleared." ilk="function" line="601" lineend="635" name="handleReadyState" signature="handleReadyState(o, callback)">
              <variable citdl="Object" doc="The connection object" ilk="argument" name="o" />
              <variable citdl="callback" doc="The user-defined callback object" ilk="argument" name="callback" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="this" line="602" name="oConn" />
              <variable attributes="__local__ private" line="603" name="args" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: This method attempts to interpret the server response and&#xA;determine whether the transaction was successful, or if an error or&#xA;exception was encountered." ilk="function" line="650" lineend="736" name="handleTransactionResponse" signature="handleTransactionResponse(o, callback, isAbort)">
              <variable citdl="Object" doc="The connection object" ilk="argument" name="o" />
              <variable citdl="Object" doc="The user-defined callback object" ilk="argument" name="callback" />
              <variable citdl="Boolean" doc="Determines if the transaction was terminated via abort()." ilk="argument" name="isAbort" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="this.createResponseObject()" line="651" name="responseObject" />
              <variable attributes="__local__ private" citdl="o.conn.status" line="651" name="httpStatus" />
              <variable attributes="__local__ private" line="652" name="args" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: This method evaluates the server response, creates and returns the results via&#xA;its properties.  Success and failure cases will differ in the response&#xA;object&apos;s property values." ilk="function" line="750" lineend="782" name="createResponseObject" returns="Object" signature="createResponseObject(o, callbackArg)">
              <variable citdl="Object" doc="The connection object" ilk="argument" name="o" />
              <variable citdl="callbackArg" doc="The user-defined argument or arguments to be passed to the callback" ilk="argument" name="callbackArg" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="751" lineend="751" name="obj">
                <variable citdl="o.tId" line="767" name="tId" />
                <variable doc="Normalize IE&apos;s response to HTTP 204 when Win error 1223." line="769" name="status" />
                <variable doc="Normalize IE&apos;s statusText to &quot;No Content&quot; instead of&#xA;&quot;Unknown&quot;." line="771" name="statusText" />
                <variable citdl="headerObj" line="772" name="getResponseHeader" />
                <variable citdl="headerStr" line="773" name="getAllResponseHeaders" />
                <variable citdl="o.conn.responseText" line="774" name="responseText" />
                <variable citdl="o.conn.responseXML" line="775" name="responseXML" />
                <variable citdl="callbackArg" line="778" name="argument" />
              </variable>
              <variable attributes="__local__ private" citdl="Object" line="752" lineend="752" name="headerObj" />
              <variable attributes="__local__ private" citdl="o.conn.getAllResponseHeaders()" line="756" name="headerStr" />
              <variable attributes="__local__ private" citdl="headerStr.split()" line="757" name="header" />
              <variable attributes="__local__ private" citdl="header[i].indexOf()" line="759" name="delimitPos" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: If a transaction cannot be completed due to dropped or closed connections,&#xA;there may be not be enough information to build a full response object.&#xA;The failure callback will be fired and this specific condition can be identified&#xA;by a status property value of 0.&#xA;&#xA;If an abort was successful, the status property will report a value of -1." ilk="function" line="801" lineend="824" name="createExceptionObject" returns="Object" signature="createExceptionObject(tId, callbackArg, isAbort)">
              <variable citdl="Number" doc="The Transaction Id" ilk="argument" name="tId" />
              <variable citdl="callbackArg" doc="The user-defined argument or arguments to be passed to the callback" ilk="argument" name="callbackArg" />
              <variable citdl="Boolean" doc="Determines if the exception case is caused by a transaction abort" ilk="argument" name="isAbort" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="Number" line="802" name="COMM_CODE" />
              <variable attributes="__local__ private" citdl="String" line="803" name="COMM_ERROR" />
              <variable attributes="__local__ private" citdl="Number" line="804" name="ABORT_CODE" />
              <variable attributes="__local__ private" citdl="String" line="805" name="ABORT_ERROR" />
              <variable attributes="__local__ private" citdl="Object" line="807" lineend="807" name="obj">
                <variable citdl="tId" line="809" name="tId" />
                <variable citdl="ABORT_CODE" line="811" name="status" />
                <variable citdl="ABORT_ERROR" line="812" name="statusText" />
                <variable citdl="callbackArg" line="820" name="argument" />
              </variable>
            </scope>
            <scope attributes="__static__" doc="STATIC: Method that initializes the custom HTTP headers for the each transaction." ilk="function" line="838" lineend="848" name="initHeader" signature="initHeader(label, value, isDefault)">
              <variable citdl="String" doc="The HTTP header label" ilk="argument" name="label" />
              <variable citdl="String" doc="The HTTP header value" ilk="argument" name="value" />
              <variable citdl="String" doc="Determines if the specific header is a default header&#xA;automatically sent with each transaction." ilk="argument" name="isDefault" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" line="839" name="headerObj" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Accessor that sets the HTTP headers for each transaction." ilk="function" line="860" lineend="880" name="setHeader" signature="setHeader(o)">
              <variable citdl="Object" doc="The connection object for the transaction." ilk="argument" name="o" />
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Resets the default HTTP headers object" ilk="function" line="889" lineend="893" name="resetDefaultHeaders" signature="resetDefaultHeaders()">
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: This method assembles the form label and value pairs and&#xA;constructs an encoded string.&#xA;asyncRequest() will automatically initialize the transaction with a&#xA;a HTTP header Content-Type of application/x-www-form-urlencoded." ilk="function" line="909" lineend="1016" name="setForm" returns="String" signature="setForm(formId, isUpload, secureUri)">
              <variable ilk="argument" name="formId" />
              <variable ilk="argument" name="isUpload" />
              <variable ilk="argument" name="secureUri" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="formId" line="913" name="oForm" />
              <variable attributes="__local__ private" citdl="this.createFrame()" doc="Create iframe in preparation for file upload." line="937" name="io" />
              <variable attributes="__local__ private" citdl="oElement.value" line="947" name="oValue" />
              <variable attributes="__local__ private" citdl="oElement.disabled" line="947" name="oDisabled" />
              <variable attributes="__local__ private" citdl="oForm.elements[i]" line="947" name="oElement" />
              <variable attributes="__local__ private" citdl="oElement.name" line="947" name="oName" />
              <variable attributes="__local__ private" citdl="Boolean" line="948" name="hasSubmit" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Resets HTML form properties when an HTML form or HTML form&#xA;with file upload transaction is sent." ilk="function" line="1026" lineend="1031" name="resetFormState" signature="resetFormState()">
              <variable citdl="Connect" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Creates an iframe to be used for form file uploads.  It is remove from the&#xA;document upon completion of the upload transaction." ilk="function" line="1042" lineend="1069" name="createFrame" signature="createFrame(secureUri)">
              <variable ilk="argument" name="secureUri" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="String" doc="pattern is required for IE." line="1047" name="frameId" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="1048" name="io">
                <variable citdl="Object" line="1064" name="style">
                  <variable citdl="String" line="1064" name="position" />
                  <variable citdl="String" line="1065" name="top" />
                  <variable citdl="String" line="1066" name="left" />
                </variable>
              </variable>
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Parses the POST data and creates hidden form elements&#xA;for each key-value, and appends them to the HTML form object." ilk="function" line="1081" lineend="1096" name="appendPostData" returns="Array" signature="appendPostData(postData)">
              <variable citdl="String" doc="The HTTP POST data" ilk="argument" name="postData" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="1082" name="formElements" />
              <variable attributes="__local__ private" citdl="postData.split()" line="1083" name="postMessage" />
              <variable attributes="__local__ private" citdl="postMessage[i].indexOf()" line="1085" name="delimitPos" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Uploads HTML form, inclusive of files/attachments, using the&#xA;iframe created in createFrame to facilitate the transaction." ilk="function" line="1110" lineend="1246" name="uploadFile" signature="uploadFile(o, callback, uri, postData)">
              <variable ilk="argument" name="o" />
              <variable citdl="Object" doc="User-defined callback object." ilk="argument" name="callback" />
              <variable citdl="String" doc="Fully qualified path of resource." ilk="argument" name="uri" />
              <variable citdl="String" doc="POST data to be submitted in addition to HTML form." ilk="argument" name="postData" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="this" doc="by the unique transaction id." line="1114" name="oConn" />
              <variable attributes="__local__ private" citdl="String" line="1115" name="frameId" />
              <variable attributes="__local__ private" citdl="String" line="1116" name="uploadEncoding" />
              <variable attributes="__local__ private" citdl="document.getElementById()" line="1117" name="io" />
              <variable attributes="__local__ private" line="1118" name="args" />
              <variable attributes="__local__ private" citdl="Object" doc="Track original HTML form attribute values." line="1122" lineend="1126" name="rawFormAttributes">
                <variable citdl="this._formNode.getAttribute()" line="1123" name="action" />
                <variable citdl="this._formNode.getAttribute()" line="1124" name="method" />
                <variable citdl="this._formNode.getAttribute()" line="1125" name="target" />
              </variable>
              <variable attributes="__local__ private" citdl="this.appendPostData()" line="1144" name="oElements" />
              <scope attributes="__local__ private" doc="and the iframe removed from the document." ilk="function" line="1191" lineend="1242" name="uploadCallback" signature="uploadCallback()">
                <variable attributes="__local__ private" citdl="Object" line="1205" lineend="1205" name="obj">
                  <variable citdl="o.tId" line="1206" name="tId" />
                  <variable citdl="callback.argument" line="1207" name="argument" />
                  <variable citdl="io.contentWindow.document.body" doc="Since the HTTP headers cannot be read from the iframe" line="1213" name="responseText" />
                  <variable citdl="io.contentWindow.document.XMLDocument" line="1214" name="responseXML" />
                </variable>
              </scope>
            </scope>
            <scope attributes="__static__" doc="STATIC: Method to terminate a transaction, if it has not reached readyState 4." ilk="function" line="1259" lineend="1316" name="abort" returns="Boolean" signature="abort(o, callback, isTimeout)">
              <variable citdl="Object" doc="The connection object returned by asyncRequest." ilk="argument" name="o" />
              <variable citdl="Object" doc="User-defined callback object." ilk="argument" name="callback" />
              <variable citdl="String" doc="boolean to indicate if abort resulted from a callback timeout." ilk="argument" name="isTimeout" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="1260" name="abortStatus" />
              <variable attributes="__local__ private" line="1261" name="args" />
              <variable attributes="__local__ private" citdl="String" line="1281" name="frameId" />
              <variable attributes="__local__ private" citdl="document.getElementById()" line="1282" name="io" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Determines if the transaction is still being processed." ilk="function" line="1327" lineend="1340" name="isCallInProgress" returns="Boolean" signature="isCallInProgress(o)">
              <variable citdl="Object" doc="The connection object returned by asyncRequest" ilk="argument" name="o" />
              <variable citdl="Connect" name="this" />
              <variable attributes="__local__ private" citdl="String" line="1334" name="frameId" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Dereference the XHR instance and the connection object after the transaction is completed." ilk="function" line="1351" lineend="1359" name="releaseObject" signature="releaseObject(o)">
              <variable citdl="Object" doc="The connection object" ilk="argument" name="o" />
              <variable citdl="Connect" name="this" />
            </scope>
          </variable>
          <variable citdl="Object" line="31" lineend="1410" name="DragDropMgr">
            <variable attributes="private __static__" citdl="String" doc="PRIVATE STATIC: Two dimensional Array of registered DragDrop objects.  The first&#xA;dimension is the DragDrop item group, the second the DragDrop&#xA;object." line="45" lineend="1131" name="ids" />
            <variable attributes="private __static__" citdl="String" doc="PRIVATE STATIC: Array of element ids defined as drag handles.  Used to determine&#xA;if the element that generated the mousedown event is actually the&#xA;handle and not the html element itself." line="56" lineend="56" name="handleIds" />
            <variable attributes="private __static__" citdl="DragDrop" doc="PRIVATE STATIC: the DragDrop object that is currently being dragged&#xA;**/" line="65" name="dragCurrent" />
            <variable attributes="private __static__" citdl="Array" doc="PRIVATE STATIC: the DragDrop object(s) that are being hovered over" line="74" lineend="668" name="dragOvers" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: the X distance between the cursor and the object being dragged" line="83" name="deltaX" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: the Y distance between the cursor and the object being dragged" line="92" name="deltaY" />
            <variable attributes="__static__" citdl="Boolean" doc="STATIC: Flag to determine if we should prevent the default behavior of the&#xA;events we define. By default this is true, but this can be set to&#xA;false if you need the default behavior (not recommended)" line="102" name="preventDefault" />
            <variable attributes="__static__" citdl="Boolean" doc="STATIC: Flag to determine if we should stop the propagation of the events&#xA;we generate. This is true by default but you may want to set it to&#xA;false if the html element contains other features that require the&#xA;mouse click." line="113" name="stopPropagation" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Internal flag that is set to true when drag and drop has been&#xA;initialized" line="122" name="initialized" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: All drag and drop can be disabled." line="130" name="locked" />
            <variable attributes="__static__" citdl="Object" doc="STATIC: Provides additional information about the the current set of&#xA;interactions.  Can be accessed from the event handlers. It&#xA;contains the following properties:&#xA;&#xA;out:       onDragOut interactions&#xA;enter:     onDragEnter interactions&#xA;over:      onDragOver interactions&#xA;drop:      onDragDrop interactions&#xA;point:     The location of the cursor&#xA;draggedRegion: The location of dragged element at the time&#xA;of the interaction&#xA;sourceRegion: The location of the source elemtn at the time&#xA;of the interaction&#xA;validDrop: boolean" line="151" lineend="835" name="interactionInfo">
              <variable citdl="data.outEvts" line="827" name="out" />
              <variable citdl="data.enterEvts" line="828" name="enter" />
              <variable citdl="data.overEvts" line="829" name="over" />
              <variable citdl="data.dropEvts" line="830" name="drop" />
              <variable citdl="pt" line="831" name="point" />
              <variable citdl="curRegion" line="832" name="draggedRegion" />
              <variable citdl="this.locationCache[dc.id]" line="833" name="sourceRegion" />
              <variable citdl="isDrop" line="834" name="validDrop" />
            </variable>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Called the first time an element is registered." ilk="function" line="159" lineend="161" name="init" signature="init()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: In point mode, drag and drop interaction is defined by the&#xA;location of the cursor during the drag/drop" line="171" name="POINT" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: In intersect mode, drag and drop interaction is defined by the&#xA;cursor position or the amount of overlap of two or more drag and&#xA;drop objects." line="182" name="INTERSECT" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: In intersect mode, drag and drop interaction is defined only by the&#xA;overlap of two or more drag and drop objects." line="192" name="STRICT_INTERSECT" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: The current drag and drop mode.  Default: POINT" line="200" name="mode" />
            <scope attributes="private __static__" doc="PRIVATE STATIC: Runs method on all drag and drop objects" ilk="function" line="208" lineend="218" name="_execOnAll" signature="_execOnAll(sMethod, args)">
              <variable ilk="argument" name="sMethod" />
              <variable ilk="argument" name="args" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.ids[i][j]" line="211" name="oDD" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Drag and drop initialization.  Sets up the global event handlers" ilk="function" line="226" lineend="237" name="_onLoad" signature="_onLoad()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Reset constraints on all drag and drop objs" ilk="function" line="245" lineend="247" name="_onResize" signature="_onResize(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Lock all drag and drop functionality" ilk="function" line="254" lineend="254" name="lock" signature="lock()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Unlock all drag and drop functionality" ilk="function" line="261" lineend="261" name="unlock" signature="unlock()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Is drag and drop locked?" ilk="function" line="269" lineend="269" name="isLocked" returns="Boolean" signature="isLocked()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Location cache that is set for all drag drop objects when a drag is&#xA;initiated, cleared when the drag is finished." line="278" lineend="278" name="locationCache" />
            <variable attributes="__static__" citdl="Boolean" doc="STATIC: Set useCache to false if you want to force object the lookup of each&#xA;drag and drop linked element constantly during a drag." line="287" name="useCache" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: The number of pixels that the mouse needs to move after the&#xA;mousedown before the drag is initiated.  Default=3;" line="296" name="clickPixelThresh" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: The number of milliseconds after the mousedown event to initiate the&#xA;drag if we don&apos;t get a mouseup event. Default=1000" line="305" name="clickTimeThresh" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Flag that indicates that either the drag pixel threshold or the&#xA;mousdown time threshold has been met" line="315" name="dragThreshMet" />
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Timeout used for the click time threshold" line="324" name="clickTimeout" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: The X position of the mousedown event stored for later use when a&#xA;drag threshold is met." line="334" name="startX" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: The Y position of the mousedown event stored for later use when a&#xA;drag threshold is met." line="344" name="startY" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Flag to determine if the drag event was fired from the click timeout and&#xA;not the mouse move threshold." line="354" name="fromTimeout" />
            <scope attributes="__static__" doc="STATIC: Each DragDrop instance must be registered with the DragDropMgr.&#xA;This is executed in DragDrop.init()" ilk="function" line="364" lineend="371" name="regDragDrop" signature="regDragDrop(oDD, sGroup)">
              <variable citdl="DragDrop" doc="the DragDrop object to register" ilk="argument" name="oDD" />
              <variable citdl="String" doc="the name of the group this element belongs to" ilk="argument" name="sGroup" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Removes the supplied dd instance from the supplied group. Executed&#xA;by DragDrop.removeFromGroup, so don&apos;t call this function directly." ilk="function" line="380" lineend="389" name="removeDDFromGroup" signature="removeDDFromGroup(oDD, sGroup)">
              <variable ilk="argument" name="oDD" />
              <variable ilk="argument" name="sGroup" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.ids[sGroup]" line="385" name="obj" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Unregisters a drag and drop item.  This is executed in&#xA;DragDrop.unreg, use that method instead of calling this directly." ilk="function" line="398" lineend="405" name="_remove" signature="_remove(oDD)">
              <variable ilk="argument" name="oDD" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Each DragDrop handle element must be registered.  This is done&#xA;automatically when executing DragDrop.setHandleElId()" ilk="function" line="416" lineend="421" name="regHandle" signature="regHandle(sDDId, sHandleId)">
              <variable citdl="String" doc="the DragDrop id this element is a handle for" ilk="argument" name="sDDId" />
              <variable citdl="String" doc="the id of the element that is the drag&#xA;handle" ilk="argument" name="sHandleId" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Utility function to determine if a given element has been&#xA;registered as a drag drop item." ilk="function" line="432" lineend="434" name="isDragDrop" returns="Boolean" signature="isDragDrop(id)">
              <variable citdl="String" doc="the element id to check" ilk="argument" name="id" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the drag and drop instances that are in all groups the&#xA;passed in instance belongs to." ilk="function" line="445" lineend="460" name="getRelated" returns="Array" signature="getRelated(p_oDD, bTargetsOnly)">
              <variable citdl="DragDrop" doc="the obj to get related data for" ilk="argument" name="p_oDD" />
              <variable citdl="Boolean" doc="if true, only return targetable objs" ilk="argument" name="bTargetsOnly" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="446" name="oDDs" />
              <variable attributes="__local__ private" citdl="this.ids[i][j]" line="449" name="dd" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns true if the specified dd target is a legal target for&#xA;the specifice drag obj" ilk="function" line="472" lineend="481" name="isLegalTarget" returns="Boolean" signature="isLegalTarget(oDD, oTargetDD)">
              <variable ilk="argument" name="oDD" />
              <variable ilk="argument" name="oTargetDD" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.getRelated()" line="473" name="targets" />
            </scope>
            <scope attributes="__static__" doc="STATIC: My goal is to be able to transparently determine if an object is&#xA;typeof DragDrop, and the exact subclass of DragDrop.  typeof&#xA;returns &quot;object&quot;, oDD.constructor.toString() always returns&#xA;&quot;DragDrop&quot; and not the name of the subclass.  So for now it just&#xA;evaluates a well-known variable in DragDrop." ilk="function" line="494" lineend="496" name="isTypeOfDD" returns="Boolean" signature="isTypeOfDD(oDD)">
              <variable ilk="argument" name="oDD" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Utility function to determine if a given element has been&#xA;registered as a drag drop handle for the given Drag Drop object." ilk="function" line="507" lineend="510" name="isHandle" returns="Boolean" signature="isHandle(sDDId, sHandleId)">
              <variable ilk="argument" name="sDDId" />
              <variable ilk="argument" name="sHandleId" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the DragDrop instance for a given id" ilk="function" line="519" lineend="526" name="getDDById" returns="DragDrop" signature="getDDById(id)">
              <variable citdl="String" doc="the id of the DragDrop object" ilk="argument" name="id" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Fired after a registered DragDrop object gets the mousedown event.&#xA;Sets up the events required to track the object being dragged" ilk="function" line="537" lineend="561" name="handleMouseDown" signature="handleMouseDown(e, oDD)">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
              <variable doc="the DragDrop object being dragged" ilk="argument" name="oDD" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="oDD.getEl()" line="543" name="el" />
            </scope>
            <variable citdl="YAHOO.util.Event.getTarget()" line="539" name="currentTarget" />
            <scope attributes="__static__" doc="STATIC: Fired when either the drag pixel threshol or the mousedown hold&#xA;time threshold has been met." ilk="function" line="571" lineend="583" name="startDrag" signature="startDrag(x, y)">
              <variable citdl="Number" doc="the X position of the original mousedown" ilk="argument" name="x" />
              <variable citdl="Number" doc="the Y position of the original mousedown" ilk="argument" name="y" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.dragCurrent" line="573" name="dc" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Internal function to handle the mouseup event.  Will be invoked&#xA;from the context of the document." ilk="function" line="593" lineend="611" name="handleMouseUp" signature="handleMouseUp(e)">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Utility to stop event propagation and event default, if these&#xA;features are turned on." ilk="function" line="620" lineend="628" name="stopEvent" signature="stopEvent(e)">
              <variable citdl="Event" doc="the event as returned by this.getEvent()" ilk="argument" name="e" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Ends the current drag, cleans up the state, and fires the endDrag&#xA;and mouseUp events.  Called internally when a mouseup is detected&#xA;during the drag.  Can be fired manually during the drag by passing&#xA;either another event (such as the mousemove event received in onDrag)&#xA;or a fake event with pageX and pageY defined (so that endDrag and&#xA;onMouseUp have usable position data.).  Alternatively, pass true&#xA;for the silent parameter so that the endDrag and onMouseUp events&#xA;are skipped (so no event data is needed.)" ilk="function" line="647" lineend="669" name="stopDrag" signature="stopDrag(e, silent)">
              <variable citdl="Event" doc="the mouseup event, another event (or a fake event)&#xA;with pageX and pageY defined, or nothing if the&#xA;silent parameter is true" ilk="argument" name="e" />
              <variable citdl="Boolean" doc="skips the enddrag and mouseup events if true" ilk="argument" name="silent" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.dragCurrent" line="648" name="dc" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Internal function to handle the mousemove event.  Will be invoked&#xA;from the context of the html element." ilk="function" line="685" lineend="730" name="handleMouseMove" returns="this.handleMouseUp()" signature="handleMouseMove(e)">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.dragCurrent" line="687" name="dc" />
              <variable attributes="__local__ private" citdl="Math.abs()" line="706" name="diffX" />
              <variable attributes="__local__ private" citdl="Math.abs()" line="707" name="diffY" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Iterates over all of the DragDrop elements to find ones we are&#xA;hovering over or dropping on" ilk="function" line="741" lineend="886" name="fireEvents" signature="fireEvents(e, isDrop)">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
              <variable citdl="Boolean" doc="is this a drop op or a mouseover op?" ilk="argument" name="isDrop" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.dragCurrent" line="742" name="dc" />
              <variable attributes="__local__ private" citdl="dc.getDragEl()" doc="cache the previous dragOver array" line="763" name="el" />
              <variable attributes="__local__ private" citdl="Array" doc="cache the previous dragOver array" line="763" name="oldOvers" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Point" doc="cache the previous dragOver array" line="763" name="pt" />
              <variable attributes="__local__ private" citdl="Object" doc="cache the previous dragOver array" line="763" lineend="763" name="inGroupsObj" />
              <variable attributes="__local__ private" citdl="dc.getTargetCoord()" doc="cache the previous dragOver array" line="763" name="pos" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Region" doc="cache the previous dragOver array" line="763" name="curRegion" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getPageY()" doc="cache the previous dragOver array" line="763" name="y" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getPageX()" doc="cache the previous dragOver array" line="763" name="x" />
              <variable attributes="__local__ private" citdl="Array" doc="cache the previous dragOver array" line="763" name="events" />
              <variable attributes="__local__ private" citdl="Array" line="764" name="inGroups" />
              <variable attributes="__local__ private" citdl="Object" line="765" lineend="770" name="data">
                <variable citdl="Array" line="766" name="outEvts" />
                <variable citdl="Array" line="767" name="overEvts" />
                <variable citdl="Array" line="768" name="dropEvts" />
                <variable citdl="Array" line="769" name="enterEvts" />
              </variable>
              <variable attributes="__local__ private" citdl="this.dragOvers[i]" line="777" name="ddo" />
              <variable attributes="__local__ private" citdl="this.ids[sGroup][i]" line="797" name="oDD" />
              <variable attributes="__local__ private" citdl="data[events[i]+&apos;Evts&apos;]" line="852" name="tmp" />
              <variable attributes="__local__ private" citdl="String" line="861" name="ev" />
              <variable attributes="__local__ private" citdl="String" line="861" name="check" />
              <variable attributes="__local__ private" citdl="String" line="861" name="b4" />
              <variable attributes="__local__ private" citdl="String" line="861" name="cev" />
              <variable attributes="__local__ private" citdl="events[i].charAt().toUpperCase()" line="861" name="type" />
            </scope>
            <variable citdl="Boolean" line="844" name="validDrop" />
            <scope attributes="__static__" doc="STATIC: Helper function for getting the best match from the list of drag&#xA;and drop objects returned by the drag and drop events when we are&#xA;in INTERSECT mode.  It returns either the first object that the&#xA;cursor is over, or the object that has the greatest overlap with&#xA;the dragged element." ilk="function" line="900" lineend="928" name="getBestMatch" returns="DragDrop" signature="getBestMatch(dds)">
              <variable citdl="Array" doc="The array of drag and drop objects&#xA;targeted" ilk="argument" name="dds" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="dds[0]" line="901" name="winner" />
              <variable attributes="__local__ private" citdl="dds.length" line="903" name="len" />
              <variable attributes="__local__ private" citdl="dds[i]" line="910" name="dd" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Refreshes the cache of the top-left and bottom-right points of the&#xA;drag and drop objects in the specified group(s).  This is in the&#xA;format that is stored in the drag and drop instance, so typical&#xA;usage is:&#xA;&lt;code&gt;&#xA;YAHOO.util.DragDropMgr.refreshCache(ddinstance.groups);&#xA;&lt;/code&gt;&#xA;Alternatively:&#xA;&lt;code&gt;&#xA;YAHOO.util.DragDropMgr.refreshCache({group1:true, group2:true});&#xA;&lt;/code&gt;" ilk="function" line="948" lineend="970" name="refreshCache" signature="refreshCache(groups)">
              <variable citdl="Object" doc="an associative array of groups to refresh" ilk="argument" name="groups" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="groups" doc="refresh everything if group array is not provided" line="951" name="g" />
              <variable attributes="__local__ private" citdl="this.ids[sGroup][i]" line="958" name="oDD" />
              <variable attributes="__local__ private" citdl="this.getLocation()" line="961" name="loc" />
            </scope>
            <scope attributes="__static__" doc="STATIC: This checks to make sure an element exists and is in the DOM.  The&#xA;main purpose is to handle cases where innerHTML is used to remove&#xA;drag and drop objects from the DOM.  IE provides an &apos;unspecified&#xA;error&apos; when trying to access the offsetParent of such an element" ilk="function" line="982" lineend="994" name="verifyEl" returns="Boolean" signature="verifyEl(el)">
              <variable citdl="HTMLElement" doc="the element to check" ilk="argument" name="el" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="el.offsetParent" line="985" name="parent" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns a Region object containing the drag and drop element&apos;s position&#xA;and size, including the padding configured for it" ilk="function" line="1007" lineend="1033" name="getLocation" returns="YAHOO.util.Region" signature="getLocation(oDD)">
              <variable citdl="DragDrop" doc="the drag and drop object to get the&#xA;location for" ilk="argument" name="oDD" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="oDD.getEl()" line="1012" name="el" />
              <variable attributes="__local__ private" citdl="y1" line="1012" name="y2" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getXY()" line="1012" name="pos" />
              <variable attributes="__local__ private" citdl="x1" line="1012" name="l" />
              <variable attributes="__local__ private" citdl="pos[1]" line="1012" name="y1" />
              <variable attributes="__local__ private" citdl="x2" line="1012" name="r" />
              <variable attributes="__local__ private" citdl="y1" line="1012" name="t" />
              <variable attributes="__local__ private" citdl="x1" line="1012" name="x2" />
              <variable attributes="__local__ private" citdl="pos[0]" line="1012" name="x1" />
              <variable attributes="__local__ private" citdl="y2" line="1012" name="b" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Checks the cursor location to see if it over the target" ilk="function" line="1046" lineend="1099" name="isOverTarget" returns="Boolean" signature="isOverTarget(pt, oTarget, intersect, curRegion)">
              <variable citdl="YAHOO.util.Point" doc="The point to evaluate" ilk="argument" name="pt" />
              <variable citdl="DragDrop" doc="the DragDrop object we are inspecting" ilk="argument" name="oTarget" />
              <variable citdl="Boolean" doc="true if we are in intersect mode" ilk="argument" name="intersect" />
              <variable ilk="argument" name="curRegion" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.locationCache[oTarget.id]" doc="use cache if available" line="1048" name="loc" />
              <variable attributes="__local__ private" citdl="this.dragCurrent" doc="overlaps with it." line="1067" name="dc" />
              <variable attributes="__local__ private" citdl="dc.getTargetCoord()" line="1083" name="pos" />
              <variable attributes="__local__ private" citdl="dc.getDragEl()" line="1084" name="el" />
              <variable attributes="__local__ private" citdl="curRegion.intersect()" line="1091" name="overlap" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: unload event handler" ilk="function" line="1107" lineend="1109" name="_onUnload" signature="_onUnload(e, me)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="me" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Cleans up the drag and drop events and objects." ilk="function" line="1117" lineend="1132" name="unregAll" signature="unregAll()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <variable attributes="deprecated private __static__" citdl="Object" doc="DEPRECATED PRIVATE STATIC: A cache of DOM elements" line="1141" lineend="1141" name="elementCache" />
            <scope attributes="deprecated private __static__" doc="DEPRECATED PRIVATE STATIC: Get the wrapper for the DOM element specified" ilk="function" line="1152" lineend="1159" name="getElWrapper" returns="YAHOO.util.DDM.ElementWrapper" signature="getElWrapper(id)">
              <variable citdl="String" doc="the id of the element to get" ilk="argument" name="id" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.elementCache[id]" line="1153" name="oWrapper" />
            </scope>
            <variable line="1156" name="elementCache[id]" />
            <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the actual DOM element" ilk="function" line="1169" lineend="1171" name="getElement" returns="Object" signature="getElement(id)">
              <variable citdl="String" doc="the id of the elment to get" ilk="argument" name="id" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the style property for the DOM element (i.e.,&#xA;document.getElById(id).style)" ilk="function" line="1182" lineend="1185" name="getCss" returns="Object" signature="getCss(id)">
              <variable citdl="String" doc="the id of the elment to get" ilk="argument" name="id" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.get()" line="1183" name="el" />
            </scope>
            <scope ilk="class" line="1194" lineend="1210" name="ElementWrapper">
              <scope attributes="__ctor__ deprecated private" doc="DEPRECATED PRIVATE: Inner class for cached elements" ilk="function" line="1194" lineend="1210" name="ElementWrapper" signature="ElementWrapper(el)">
                <variable ilk="argument" name="el" />
                <variable citdl="ElementWrapper" name="this" />
              </scope>
              <variable citdl="el" doc="The element" line="1199" name="el" />
              <variable citdl="this.el" doc="The element id" line="1204" name="id" />
              <variable citdl="this.el" doc="A reference to the style property" line="1209" name="css" />
            </scope>
            <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the X position of an html element" ilk="function" line="1221" lineend="1223" name="getPosX" returns="Number" signature="getPosX(el)">
              <variable doc="the element for which to get the position" ilk="argument" name="el" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the Y position of an html element" ilk="function" line="1233" lineend="1235" name="getPosY" returns="Number" signature="getPosY(el)">
              <variable doc="the element for which to get the position" ilk="argument" name="el" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Swap two nodes.  In IE, we use the native method, for others we&#xA;emulate the IE behavior" ilk="function" line="1245" lineend="1261" name="swapNode" signature="swapNode(n1, n2)">
              <variable doc="the first node to swap" ilk="argument" name="n1" />
              <variable doc="the other node to swap" ilk="argument" name="n2" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="n2.parentNode" line="1249" name="p" />
              <variable attributes="__local__ private" citdl="n2.nextSibling" line="1250" name="s" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Returns the current scroll position" ilk="function" line="1269" lineend="1280" name="getScroll" signature="getScroll()">
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="document.body" line="1270" name="db" />
              <variable attributes="__local__ private" citdl="dde.scrollTop" line="1270" name="t" />
              <variable attributes="__local__ private" citdl="document.documentElement" line="1270" name="dde" />
              <variable attributes="__local__ private" citdl="dde.scrollLeft" line="1270" name="l" />
            </scope>
            <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the specified element style property" ilk="function" line="1291" lineend="1293" name="getStyle" returns="String" signature="getStyle(el, styleProp)">
              <variable citdl="HTMLElement" doc="the element" ilk="argument" name="el" />
              <variable citdl="String" doc="the style property" ilk="argument" name="styleProp" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Gets the scrollTop" ilk="function" line="1301" lineend="1301" name="getScrollTop" returns="Number" signature="getScrollTop()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Gets the scrollLeft" ilk="function" line="1309" lineend="1309" name="getScrollLeft" returns="Number" signature="getScrollLeft()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Sets the x/y position of an element to the location of the&#xA;target element." ilk="function" line="1319" lineend="1322" name="moveToEl" signature="moveToEl(moveEl, targetEl)">
              <variable citdl="HTMLElement" doc="The element to move" ilk="argument" name="moveEl" />
              <variable citdl="HTMLElement" doc="The position reference element" ilk="argument" name="targetEl" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getXY()" line="1320" name="aCoord" />
            </scope>
            <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Gets the client height" ilk="function" line="1331" lineend="1333" name="getClientHeight" returns="Number" signature="getClientHeight()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Gets the client width" ilk="function" line="1342" lineend="1344" name="getClientWidth" returns="Number" signature="getClientWidth()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Numeric array sort function" ilk="function" line="1351" lineend="1351" name="numericSort" signature="numericSort(a, b)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Internal counter" line="1359" name="_timeoutCount" />
            <scope attributes="private __static__" doc="PRIVATE STATIC: Trying to make the load order less important.  Without this we get&#xA;an error if this file is loaded before the Event Utility." ilk="function" line="1368" lineend="1381" name="_addListeners" signature="_addListeners()">
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.DDM" line="1369" name="DDM" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Recursively searches the immediate parent and all child nodes for&#xA;the handle element in order to determine wheter or not it was&#xA;clicked." ilk="function" line="1391" lineend="1408" name="handleWasClicked" returns="Boolean" signature="handleWasClicked(node, id)">
              <variable doc="the html element to inspect" ilk="argument" name="node" />
              <variable ilk="argument" name="id" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="node.parentNode" doc="check to see if this is a text node child of the one we want" line="1396" name="p" />
            </scope>
          </variable>
          <scope ilk="class" line="36" lineend="176" name="DataSource">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The DataSource utility provides a common configurable interface for widgets&#xA;to access a variety of data, from JavaScript arrays to online servers over&#xA;XHR." ilk="function" line="36" lineend="176" name="DataSource" signature="DataSource(oLiveData, oConfigs)">
              <variable citdl="Object" doc="Pointer to live database." ilk="argument" name="oLiveData" />
              <variable citdl="Object" doc="(optional) Object literal of configuration values." ilk="argument" name="oConfigs" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this.maxCacheEntries" doc="Validate and initialize public configs" line="77" name="maxCacheEntries" />
            </scope>
            <variable citdl="oLiveData" line="41" name="liveData" />
            <variable citdl="Object" line="42" lineend="42" name="_oQueue">
              <variable citdl="Array" line="42" name="requests" />
              <variable line="42" name="interval" />
              <variable line="42" name="conn" />
            </variable>
            <variable citdl="YAHOO.util.DataSource.TYPE_XML" line="45" name="dataType" />
            <variable citdl="Array" doc="Initialize interval tracker" line="83" name="_aIntervals" />
            <variable citdl="String" line="85" name="_sName" />
            <variable attributes="constant" citdl="Number" doc="CONSTANT: Type is unknown." line="194" name="TYPE_UNKNOWN" />
            <variable attributes="constant" citdl="Number" doc="CONSTANT: Type is a JavaScript Array." line="204" name="TYPE_JSARRAY" />
            <variable attributes="constant" citdl="Number" doc="CONSTANT: Type is a JavaScript Function." line="214" name="TYPE_JSFUNCTION" />
            <variable attributes="constant" citdl="Number" doc="CONSTANT: Type is hosted on a server via an XHR connection." line="224" name="TYPE_XHR" />
            <variable attributes="constant" citdl="Number" doc="CONSTANT: Type is JSON." line="234" name="TYPE_JSON" />
            <variable attributes="constant" citdl="Number" doc="CONSTANT: Type is XML." line="244" name="TYPE_XML" />
            <variable attributes="constant" citdl="Number" doc="CONSTANT: Type is plain text." line="254" name="TYPE_TEXT" />
            <variable attributes="constant" citdl="Number" doc="CONSTANT: Type is an HTML TABLE element." line="264" name="TYPE_HTMLTABLE" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: Error message for invalid dataresponses." line="274" name="ERROR_DATAINVALID" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: Error message for null data responses." line="284" name="ERROR_DATANULL" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Internal class variable to index multiple DataSource instances." line="302" name="_nIndex" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Internal class variable to assign unique transaction IDs." line="312" name="_nTransactionId" />
            <scope attributes="__static__" doc="STATIC: Converts data to type String." ilk="function" line="495" lineend="511" name="parseString" returns="Number" signature="parseString(oData)">
              <variable citdl="{String" doc="| Number | Boolean | Date | Array | Object} Data to parse.&#xA;The special values null and undefined will return null." ilk="argument" name="oData" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="oData" doc="Convert to string" line="502" name="string" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Converts data to type Number." ilk="function" line="522" lineend="533" name="parseNumber" returns="Number" signature="parseNumber(oData)">
              <variable citdl="{String" doc="| Number | Boolean | Null} Data to convert. Beware, null&#xA;returns as 0." ilk="argument" name="oData" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="oData" doc="Convert to number" line="524" name="number" />
            </scope>
            <scope doc="Backward compatibility" ilk="function" line="535" lineend="537" name="convertNumber" returns="YAHOO.util.DataSource.parseNumber()" signature="convertNumber(oData)">
              <variable ilk="argument" name="oData" />
              <variable citdl="DataSource" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Converts data to type Date." ilk="function" line="547" lineend="565" name="parseDate" returns="Date" signature="parseDate(oData)">
              <variable citdl="{Date" doc="| String | Number} Data to convert." ilk="argument" name="oData" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="Date" line="548" name="date" />
            </scope>
            <scope doc="Backward compatibility" ilk="function" line="567" lineend="569" name="convertDate" returns="YAHOO.util.DataSource.parseDate()" signature="convertDate(oData)">
              <variable ilk="argument" name="oData" />
              <variable citdl="DataSource" name="this" />
            </scope>
            <scope doc="Public accessor to the unique name of the DataSource instance." ilk="function" line="583" lineend="585" name="toString" returns="String" signature="toString()">
              <variable citdl="DataSource" name="this" />
            </scope>
            <scope doc="Overridable method passes request to cache and returns cached response if any,&#xA;refreshing the hit in the cache as the newest item. Returns null if there is&#xA;no cache hit." ilk="function" line="598" lineend="643" name="getCachedResponse" returns="Object" signature="getCachedResponse(oRequest, oCallback, oCaller)">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Function" doc="Handler function to receive the response." ilk="argument" name="oCallback" />
              <variable citdl="Object" doc="The Calling object that is making the request." ilk="argument" name="oCaller" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this._aCache" line="599" name="aCache" />
              <variable attributes="__local__ private" citdl="aCache.length" line="609" name="nCacheLength" />
              <variable attributes="__local__ private" citdl="oCacheElem.response" line="611" name="oResponse" />
              <variable attributes="__local__ private" citdl="aCache[i]" line="616" name="oCacheElem" />
            </scope>
            <variable citdl="Array" line="605" name="_aCache" />
            <scope doc="Default overridable method matches given request to given cached request.&#xA;Returns true if is a hit, returns false otherwise.  Implementers should&#xA;override this method to customize the cache-matching algorithm." ilk="function" line="655" lineend="657" name="isCacheHit" returns="Boolean" signature="isCacheHit(oRequest, oCachedRequest)">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="Cached request object." ilk="argument" name="oCachedRequest" />
              <variable citdl="DataSource" name="this" />
            </scope>
            <scope doc="Adds a new item to the cache. If cache is full, evicts the stalest item&#xA;before adding the new item." ilk="function" line="667" lineend="682" name="addToCache" signature="addToCache(oRequest, oResponse)">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="Response object to cache." ilk="argument" name="oResponse" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this._aCache" line="668" name="aCache" />
              <variable attributes="__local__ private" citdl="Object" doc="Add to cache in the newest position, at the end of the array" line="679" lineend="679" name="oCacheElem">
                <variable citdl="oRequest" line="679" name="request" />
                <variable citdl="oResponse" line="679" name="response" />
              </variable>
            </scope>
            <scope doc="Flushes cache." ilk="function" line="689" lineend="694" name="flushCache" signature="flushCache()">
              <variable citdl="DataSource" name="this" />
            </scope>
            <scope doc="Sets up a polling mechanism to send requests at set intervals and forward&#xA;responses to given callback." ilk="function" line="707" lineend="718" name="setInterval" returns="Number" signature="setInterval(nMsec, oRequest, oCallback, oCaller)">
              <variable citdl="Number" doc="Length of interval in milliseconds." ilk="argument" name="nMsec" />
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Function" doc="Handler function to receive the response." ilk="argument" name="oCallback" />
              <variable citdl="Object" doc="(deprecated) Use oCallback.scope." ilk="argument" name="oCaller" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this" line="709" name="oSelf" />
              <variable attributes="__local__ private" citdl="setInterval()" line="712" name="nId" />
            </scope>
            <scope doc="Disables polling mechanism associated with the given interval ID." ilk="function" line="726" lineend="735" name="clearInterval" signature="clearInterval(nId)">
              <variable citdl="Number" doc="Interval ID." ilk="argument" name="nId" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this._aIntervals" doc="Remove from tracker if there" line="728" name="tracker" />
            </scope>
            <scope doc="Disables all known polling intervals." ilk="function" line="742" lineend="748" name="clearAllIntervals" signature="clearAllIntervals(nId)">
              <variable ilk="argument" name="nId" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this._aIntervals" line="743" name="tracker" />
            </scope>
            <scope doc="Executes a configured callback.  For object literal callbacks, the third&#xA;param determines whether to execute the success handler or failure handler." ilk="function" line="760" lineend="773" name="issueCallback" signature="issueCallback(callback, params, error, scope)">
              <variable citdl="{Function" doc="the callback to execute" ilk="argument" name="callback" />
              <variable citdl="Array" doc="params to be passed to the callback method" ilk="argument" name="params" />
              <variable citdl="Boolean" doc="whether an error occurred" ilk="argument" name="error" />
              <variable citdl="Object" doc="the scope from which to execute the callback&#xA;(deprecated - use an object literal callback)" ilk="argument" name="scope" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="callback.success" line="765" name="callbackFunc" />
            </scope>
            <scope doc="First looks for cached response, then sends request to live data." ilk="function" line="794" lineend="804" name="sendRequest" returns="Number" signature="sendRequest(oRequest, oCallback, oCaller)">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="An object literal with the following properties:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;&lt;code&gt;success&lt;/code&gt;&lt;/dt&gt;&#xA;&lt;dd&gt;The function to call when the data is ready.&lt;/dd&gt;&#xA;&lt;dt&gt;&lt;code&gt;failure&lt;/code&gt;&lt;/dt&gt;&#xA;&lt;dd&gt;The function to call upon a response failure condition.&lt;/dd&gt;&#xA;&lt;dt&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/dt&gt;&#xA;&lt;dd&gt;The object to serve as the scope for the success and failure handlers.&lt;/dd&gt;&#xA;&lt;dt&gt;&lt;code&gt;argument&lt;/code&gt;&lt;/dt&gt;&#xA;&lt;dd&gt;Arbitrary data that will be passed back to the success and failure handlers.&lt;/dd&gt;&#xA;&lt;/dl&gt;" ilk="argument" name="oCallback" />
              <variable citdl="Object" doc="(deprecated) Use oCallback.scope." ilk="argument" name="oCaller" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this.getCachedResponse()" doc="First look in cache" line="796" name="oCachedResponse" />
            </scope>
            <scope doc="Overridable method provides default functionality to make a connection to&#xA;live data in order to send request. The response coming back is then&#xA;forwarded to the handleResponse function. This method should be customized&#xA;to achieve more complex implementations." ilk="function" line="818" lineend="1000" name="makeConnection" returns="Number" signature="makeConnection(oRequest, oCallback, oCaller)">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="Callback object literal." ilk="argument" name="oCallback" />
              <variable citdl="Object" doc="(deprecated) Use oCallback.scope." ilk="argument" name="oCaller" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="this.liveData()" line="820" name="oRawResponse" />
              <variable attributes="__local__ private" citdl="YAHOO.util.DataSource._nTransactionId" line="821" name="tId" />
              <variable attributes="__local__ private" citdl="this" line="837" name="oSelf" />
              <variable attributes="__local__ private" citdl="this.connMgr" line="838" name="oConnMgr" />
              <variable attributes="__local__ private" citdl="this._oQueue" line="839" name="oQueue" />
              <scope attributes="__local__ private" doc="PRIVATE: Define Connection Manager success handler" ilk="function" line="848" lineend="871" name="_xhrSuccess" signature="_xhrSuccess(oResponse)">
                <variable citdl="Object" doc="HTTPXMLRequest object" ilk="argument" name="oResponse" />
              </scope>
              <scope attributes="__local__ private" doc="PRIVATE: Define Connection Manager failure handler" ilk="function" line="880" lineend="896" name="_xhrFailure" signature="_xhrFailure(oResponse)">
                <variable citdl="Object" doc="HTTPXMLRequest object" ilk="argument" name="oResponse" />
              </scope>
              <variable attributes="__local__ private" citdl="Object" doc="PRIVATE: Define Connection Manager callback object" line="905" lineend="909" name="_xhrCallback">
                <variable citdl="_xhrSuccess" line="906" name="success" />
                <variable citdl="_xhrFailure" line="907" name="failure" />
                <variable citdl="this" line="908" name="scope" />
                <variable citdl="this.connTimeout" line="913" name="timeout" />
              </variable>
              <variable attributes="__local__ private" citdl="this.liveData" line="931" name="sLiveData" />
              <variable attributes="__local__ private" citdl="this.connMethodPost" line="932" name="isPost" />
              <variable attributes="__local__ private" line="933" name="sMethod" />
              <variable attributes="__local__ private" line="934" name="sUri" />
              <variable attributes="__local__ private" line="935" name="sRequest" />
            </scope>
            <scope doc="Receives raw data response and type converts to XML, JSON, etc as necessary.&#xA;Forwards oFullResponse to appropriate parsing function to get turned into&#xA;oParsedResponse. Calls doBeforeCallback() and adds oParsedResponse to&#xA;the cache when appropriate before calling issueCallback().&#xA;&#xA;The oParsedResponse object literal has the following properties:&#xA;&lt;dl&gt;&#xA;&lt;dd&gt;&lt;dt&gt;tId {Number}&lt;/dt&gt; Unique transaction ID&lt;/dd&gt;&#xA;&lt;dd&gt;&lt;dt&gt;results {Array}&lt;/dt&gt; Array of parsed data results&lt;/dd&gt;&#xA;&lt;dd&gt;&lt;dt&gt;error {Boolean}&lt;/dt&gt; True if there was an error&lt;/dd&gt;&#xA;&lt;dd&gt;&lt;dt&gt;totalRecords {Number}&lt;/dt&gt; Total number of records (if available)&lt;/dd&gt;&#xA;&lt;/dl&gt;" ilk="function" line="1023" lineend="1133" name="handleResponse" signature="handleResponse(oRequest, oRawResponse, oCallback, oCaller, tId)">
              <variable citdl="Object" doc="Request object" ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The raw response from the live database." ilk="argument" name="oRawResponse" />
              <variable citdl="Object" doc="Callback object literal." ilk="argument" name="oCallback" />
              <variable citdl="Object" doc="(deprecated) Use oCallback.scope." ilk="argument" name="oCaller" />
              <variable citdl="Number" doc="Transaction ID." ilk="argument" name="tId" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" line="1026" name="xhr" />
              <variable attributes="__local__ private" citdl="this.parseArrayData()" line="1027" name="oParsedResponse" />
              <variable attributes="__local__ private" citdl="oRawResponse" line="1028" name="oFullResponse" />
              <variable attributes="__local__ private" citdl="Math.max()" doc="Strip extraneous stuff at the end" line="1068" name="objEnd" />
            </scope>
            <scope doc="Overridable method gives implementers access to the original full response&#xA;before the data gets parsed. Implementers should take care not to return an&#xA;unparsable or otherwise invalid response." ilk="function" line="1145" lineend="1147" name="doBeforeParseData" returns="Object" signature="doBeforeParseData(oRequest, oFullResponse)">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The full response from the live database." ilk="argument" name="oFullResponse" />
              <variable citdl="DataSource" name="this" />
            </scope>
            <scope doc="Overridable method gives implementers access to the original full response and&#xA;the parsed response (parsed against the given schema) before the data&#xA;is added to the cache (if applicable) and then sent back to callback function.&#xA;This is your chance to access the raw response and/or populate the parsed&#xA;response with any custom data." ilk="function" line="1162" lineend="1164" name="doBeforeCallback" returns="Object" signature="doBeforeCallback(oRequest, oFullResponse, oParsedResponse)">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The full response from the live database." ilk="argument" name="oFullResponse" />
              <variable citdl="Object" doc="The parsed response to return to calling object." ilk="argument" name="oParsedResponse" />
              <variable citdl="DataSource" name="this" />
            </scope>
            <scope doc="Overridable method parses Array data into a response object." ilk="function" line="1177" lineend="1226" name="parseArrayData" returns="Object" signature="parseArrayData(oRequest, oFullResponse)">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The full Array from the live database." ilk="argument" name="oFullResponse" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" line="1182" name="i" />
              <variable attributes="__local__ private" citdl="this.responseSchema.fields" line="1182" name="fields" />
              <variable attributes="__local__ private" citdl="Array" line="1182" name="results" />
              <variable attributes="__local__ private" citdl="Object" line="1189" lineend="1189" name="parsers" />
              <variable attributes="__local__ private" citdl="fields[i].parser" line="1191" name="p" />
              <variable attributes="__local__ private" citdl="YAHOO.lang.isArray()" line="1197" name="arrType" />
              <variable attributes="__local__ private" citdl="Object" line="1199" lineend="1199" name="oResult" />
              <variable attributes="__local__ private" citdl="oFullResponse[i]" line="1200" name="rec" />
              <variable attributes="__local__ private" citdl="fields[j]" line="1203" name="field" />
              <variable attributes="__local__ private" citdl="arrType" line="1204" name="data" />
              <variable attributes="__local__ private" citdl="Object" line="1221" lineend="1221" name="oParsedResponse">
                <variable citdl="results" line="1221" name="results" />
              </variable>
            </scope>
            <variable citdl="fields[i]" line="1185" name="key" />
            <scope doc="Overridable method parses plain text data into a response object." ilk="function" line="1239" lineend="1308" name="parseTextData" returns="Object" signature="parseTextData(oRequest, oFullResponse)">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The full text response from the live database." ilk="argument" name="oFullResponse" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="1244" lineend="1244" name="oParsedResponse">
                <variable citdl="Array" line="1244" name="results" />
              </variable>
              <variable attributes="__local__ private" citdl="this.responseSchema.recordDelim" line="1245" name="recDelim" />
              <variable attributes="__local__ private" citdl="this.responseSchema.fieldDelim" line="1246" name="fieldDelim" />
              <variable attributes="__local__ private" citdl="this.responseSchema.fields" line="1247" name="fields" />
              <variable attributes="__local__ private" citdl="oFullResponse.length" doc="Delete the last line delimiter at the end of the data if it&#xA;exists" line="1250" name="newLength" />
              <variable attributes="__local__ private" citdl="oFullResponse.split()" doc="Split along record delimiter to get an array of strings" line="1255" name="recordsarray" />
              <variable attributes="__local__ private" citdl="Object" line="1258" lineend="1258" name="oResult" />
              <variable attributes="__local__ private" citdl="Boolean" line="1259" name="bError" />
              <variable attributes="__local__ private" citdl="recordsarray[i].split()" doc="Split each record along field delimiter to get data array" line="1262" name="fielddataarray" />
              <variable attributes="__local__ private" citdl="fielddataarray[j]" doc="Remove quotation marks from edges, if applicable" line="1266" name="data" />
              <variable attributes="__local__ private" citdl="fields[j]" line="1274" name="field" />
              <variable attributes="__local__ private" line="1275" name="key" />
            </scope>
            <scope doc="Overridable method parses XML data into a response object." ilk="function" line="1321" lineend="1425" name="parseXMLData" returns="Object" signature="parseXMLData(oRequest, oFullResponse)">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The full XML response from the live database." ilk="argument" name="oFullResponse" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="1324" name="bError" />
              <variable attributes="__local__ private" citdl="Object" line="1324" lineend="1324" name="oParsedResponse">
                <variable citdl="Object" line="1324" lineend="1324" name="meta" />
                <variable citdl="Array" line="1378" name="results" />
                <variable citdl="Boolean" line="1420" name="error" />
              </variable>
              <variable attributes="__local__ private" citdl="this.responseSchema" line="1324" name="schema" />
              <variable attributes="__local__ private" line="1325" name="xmlList" />
              <variable attributes="__local__ private" citdl="schema.metaNode" line="1326" name="metaNode" />
              <variable attributes="__local__ private" citdl="schema.metaFields" line="1327" name="metaLocators" />
              <variable attributes="__local__ private" citdl="schema.totalRecords" line="1328" name="totRecLocator" />
              <variable attributes="__local__ private" citdl="metaLocators[k]" line="1329" name="loc" />
              <variable attributes="__local__ private" doc="Back compat" line="1329" name="i" />
              <variable attributes="__local__ private" line="1329" name="k" />
              <variable attributes="__local__ private" citdl="metaNode.getElementsByTagName()[0]" line="1329" name="v" />
              <variable attributes="__local__ private" citdl="xmlList.item()" line="1380" name="result" />
              <variable attributes="__local__ private" citdl="Object" line="1381" lineend="1381" name="oResult" />
              <variable attributes="__local__ private" citdl="schema.fields[m]" line="1384" name="field" />
              <variable attributes="__local__ private" line="1385" name="key" />
              <variable attributes="__local__ private" citdl="xmlAttr.value" line="1386" name="data" />
              <variable attributes="__local__ private" citdl="result.attributes.getNamedItem()" doc="Values may be held in an attribute..." line="1388" name="xmlAttr" />
              <variable attributes="__local__ private" citdl="result.getElementsByTagName()" line="1394" name="xmlNode" />
            </scope>
            <scope doc="Overridable method parses JSON data into a response object." ilk="function" line="1438" lineend="1585" name="parseJSONData" returns="Object" signature="parseJSONData(oRequest, oFullResponse)">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The full JSON from the live database." ilk="argument" name="oFullResponse" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="1439" lineend="1439" name="oParsedResponse">
                <variable citdl="Object" line="1439" lineend="1439" name="meta" />
                <variable citdl="Array" line="1439" name="results" />
                <variable citdl="Boolean" line="1574" name="error" />
              </variable>
              <variable attributes="__local__ private" citdl="this.responseSchema" line="1440" name="schema" />
              <variable attributes="__local__ private" citdl="schema.fields" line="1447" name="fields" />
              <variable attributes="__local__ private" citdl="Array" line="1447" name="results" />
              <variable attributes="__local__ private" citdl="oFullResponse" line="1447" name="resultsList" />
              <variable attributes="__local__ private" citdl="schema.metaFields" line="1447" name="metaFields" />
              <variable attributes="__local__ private" citdl="Array" line="1448" name="fieldParsers" />
              <variable attributes="__local__ private" citdl="Array" line="1449" name="fieldPaths" />
              <variable attributes="__local__ private" citdl="Array" line="1450" name="simpleFields" />
              <variable attributes="__local__ private" citdl="Boolean" line="1451" name="bError" />
              <variable attributes="__local__ private" citdl="fields[i].parser" line="1452" name="parser" />
              <variable attributes="__local__ private" line="1452" name="i" />
              <variable attributes="__local__ private" line="1452" name="j" />
              <variable attributes="__local__ private" line="1452" name="len" />
              <variable attributes="__local__ private" citdl="fields[i].key" line="1452" name="key" />
              <variable attributes="__local__ private" citdl="walkPath()" line="1452" name="v" />
              <variable attributes="__local__ private" citdl="buildPath()" line="1452" name="path" />
              <scope attributes="__local__ private" doc="Function to parse the schema&apos;s locator keys into walk paths" ilk="function" line="1455" lineend="1478" name="buildPath" returns="path" signature="buildPath(needle)">
                <variable ilk="argument" name="needle" />
                <variable attributes="__local__ private" citdl="Array" line="1456" name="keys" />
                <variable attributes="__local__ private" citdl="needle.split()" line="1456" name="path" />
                <variable attributes="__local__ private" citdl="Number" line="1456" name="i" />
              </scope>
              <scope attributes="__local__ private" doc="build function to walk a path and return the pot of gold" ilk="function" line="1481" lineend="1487" name="walkPath" returns="v" signature="walkPath(path, origin)">
                <variable ilk="argument" name="path" />
                <variable ilk="argument" name="origin" />
                <variable attributes="__local__ private" citdl="Number" line="1482" name="i" />
                <variable attributes="__local__ private" citdl="path.length" line="1482" name="len" />
                <variable attributes="__local__ private" citdl="origin" line="1482" name="v" />
              </scope>
              <variable attributes="__local__ private" citdl="Object" line="1536" lineend="1536" name="rec" />
              <variable attributes="__local__ private" citdl="resultsList[i]" line="1536" name="r" />
              <variable attributes="__local__ private" citdl="fieldParsers[j].key" line="1546" name="p" />
            </scope>
            <variable citdl="parser" line="1496" name="parser" />
            <variable citdl="path" line="1501" name="path" />
            <scope doc="Overridable method parses an HTML TABLE element reference into a response object." ilk="function" line="1598" lineend="1641" name="parseHTMLTableData" returns="Object" signature="parseHTMLTableData(oRequest, oFullResponse)">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The full HTML element reference from the live database." ilk="argument" name="oFullResponse" />
              <variable citdl="DataSource" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="1599" name="bError" />
              <variable attributes="__local__ private" citdl="oFullResponse" line="1600" name="elTable" />
              <variable attributes="__local__ private" citdl="this.responseSchema.fields" line="1601" name="fields" />
              <variable attributes="__local__ private" citdl="Object" line="1602" lineend="1602" name="oParsedResponse">
                <variable citdl="Array" line="1602" name="results" />
                <variable citdl="Boolean" line="1636" name="error" />
              </variable>
              <variable attributes="__local__ private" citdl="elTable.tBodies[i]" line="1606" name="elTbody" />
              <variable attributes="__local__ private" citdl="elTbody.rows[j]" line="1610" name="elRow" />
              <variable attributes="__local__ private" citdl="Object" line="1611" lineend="1611" name="oResult" />
              <variable attributes="__local__ private" citdl="fields[k]" line="1614" name="field" />
              <variable attributes="__local__ private" line="1615" name="key" />
              <variable attributes="__local__ private" citdl="elRow.cells[k].innerHTML" line="1616" name="data" />
            </scope>
          </scope>
          <variable citdl="Object" doc="Provides helper methods for DOM elements." line="145" lineend="11" name="Dom">
            <scope ilk="function" line="10" lineend="10" name="getElementsBy" returns="S" signature="getElementsBy(W, Q, R, T)">
              <variable ilk="argument" name="W" />
              <variable ilk="argument" name="Q" />
              <variable ilk="argument" name="R" />
              <variable ilk="argument" name="T" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="10" name="S" />
              <variable attributes="__local__ private" citdl="R.getElementsByTagName()" line="10" name="V" />
            </scope>
            <scope ilk="function" line="10" lineend="10" name="generateId" returns="B.Dom.batch()" signature="generateId(P, R)">
              <variable ilk="argument" name="P" />
              <variable ilk="argument" name="R" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="10" lineend="10" name="Q" returns="T" signature="Q(S)">
                <variable ilk="argument" name="S" />
                <variable attributes="__local__ private" citdl="R" line="10" name="T" />
              </scope>
            </scope>
            <scope ilk="function" line="10" lineend="10" name="getDocumentWidth" returns="P" signature="getDocumentWidth()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" line="10" name="Q" />
              <variable attributes="__local__ private" citdl="Math.max()" line="10" name="P" />
            </scope>
            <scope ilk="function" line="10" lineend="10" name="setStyle" signature="setStyle(P, R, S)">
              <variable ilk="argument" name="P" />
              <variable ilk="argument" name="R" />
              <variable ilk="argument" name="S" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="10" lineend="10" name="Q" signature="Q(T)">
                <variable ilk="argument" name="T" />
              </scope>
            </scope>
            <scope ilk="function" line="10" lineend="10" name="getX" returns="B.Dom.batch()" signature="getX(P)">
              <variable ilk="argument" name="P" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="10" lineend="10" name="Q" returns="B.Dom.getXY()[0]" signature="Q(R)">
                <variable ilk="argument" name="R" />
              </scope>
            </scope>
            <scope ilk="function" line="10" lineend="10" name="getY" returns="B.Dom.batch()" signature="getY(P)">
              <variable ilk="argument" name="P" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="10" lineend="10" name="Q" returns="B.Dom.getXY()[1]" signature="Q(R)">
                <variable ilk="argument" name="R" />
              </scope>
            </scope>
            <scope ilk="function" line="10" lineend="10" name="getElementsByClassName" returns="Q" signature="getElementsByClassName(T, X, U, V)">
              <variable ilk="argument" name="T" />
              <variable ilk="argument" name="X" />
              <variable ilk="argument" name="U" />
              <variable ilk="argument" name="V" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="10" name="Q" />
              <variable attributes="__local__ private" citdl="U.getElementsByTagName()" line="10" name="P" />
              <variable attributes="__local__ private" citdl="O()" line="10" name="W" />
            </scope>
            <scope ilk="function" line="10" lineend="10" name="replaceClass" returns="B.Dom.batch()" signature="replaceClass(S, Q, P)">
              <variable ilk="argument" name="S" />
              <variable ilk="argument" name="Q" />
              <variable ilk="argument" name="P" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="10" lineend="10" name="T" returns="Boolean" signature="T(U)">
                <variable ilk="argument" name="U" />
              </scope>
              <variable attributes="__local__ private" citdl="O()" line="10" name="R" />
            </scope>
            <scope ilk="function" line="10" lineend="10" name="getDocumentHeight" returns="P" signature="getDocumentHeight()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" line="10" name="Q" />
              <variable attributes="__local__ private" citdl="Math.max()" line="10" name="P" />
            </scope>
            <scope ilk="function" line="10" lineend="10" name="getClientHeight" returns="B.Dom.getViewportHeight()" signature="getClientHeight()">
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="10" lineend="10" name="inDocument" returns="this.isAncestor()" signature="inDocument(P)">
              <variable ilk="argument" name="P" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="10" lineend="11" name="getViewportHeight" returns="P" signature="getViewportHeight()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="self.innerHeight" line="10" name="P" />
              <variable attributes="__local__ private" citdl="M.compatMode" line="11" name="Q" />
            </scope>
            <scope ilk="function" line="10" lineend="10" name="addClass" returns="B.Dom.batch()" signature="addClass(Q, P)">
              <variable ilk="argument" name="Q" />
              <variable ilk="argument" name="P" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="10" lineend="10" name="R" returns="Boolean" signature="R(S)">
                <variable ilk="argument" name="S" />
              </scope>
            </scope>
            <scope ilk="function" line="10" lineend="10" name="get" returns="R" signature="get(R)">
              <variable ilk="argument" name="R" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="10" name="S" />
            </scope>
            <scope ilk="function" line="10" lineend="10" name="removeClass" returns="B.Dom.batch()" signature="removeClass(R, Q)">
              <variable ilk="argument" name="R" />
              <variable ilk="argument" name="Q" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="10" lineend="10" name="S" returns="Boolean" signature="S(T)">
                <variable ilk="argument" name="T" />
                <variable attributes="__local__ private" citdl="T.className" line="10" name="U" />
              </scope>
              <variable attributes="__local__ private" citdl="O()" line="10" name="P" />
            </scope>
            <scope ilk="function" line="10" lineend="10" name="getStyle" returns="B.Dom.batch()" signature="getStyle(P, R)">
              <variable ilk="argument" name="P" />
              <variable ilk="argument" name="R" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="10" lineend="10" name="Q" returns="K()" signature="Q(S)">
                <variable ilk="argument" name="S" />
              </scope>
            </scope>
            <scope ilk="function" line="10" lineend="10" name="setXY" signature="setXY(P, S, R)">
              <variable ilk="argument" name="P" />
              <variable ilk="argument" name="S" />
              <variable ilk="argument" name="R" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="10" lineend="10" name="Q" returns="Boolean" signature="Q(V)">
                <variable ilk="argument" name="V" />
                <variable attributes="__local__ private" citdl="this.getXY()" line="10" name="X" />
                <variable attributes="__local__ private" citdl="this.getStyle()" line="10" name="U" />
                <variable attributes="__local__ private" citdl="this.getXY()" line="10" name="T" />
                <variable attributes="__local__ private" citdl="Array" line="10" name="W" />
              </scope>
            </scope>
            <scope ilk="function" line="10" lineend="10" name="setX" signature="setX(Q, P)">
              <variable ilk="argument" name="Q" />
              <variable ilk="argument" name="P" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="10" lineend="10" name="setY" signature="setY(P, Q)">
              <variable ilk="argument" name="P" />
              <variable ilk="argument" name="Q" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="10" lineend="10" name="getXY" returns="B.Dom.batch()" signature="getXY(P)">
              <variable ilk="argument" name="P" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="10" lineend="10" name="Q" returns="H()" signature="Q(R)">
                <variable ilk="argument" name="R" />
              </scope>
            </scope>
            <scope ilk="function" line="10" lineend="10" name="getClientWidth" returns="B.Dom.getViewportWidth()" signature="getClientWidth()">
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="10" lineend="10" name="getRegion" returns="B.Dom.batch()" signature="getRegion(P)">
              <variable ilk="argument" name="P" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="10" lineend="10" name="Q" returns="S" signature="Q(R)">
                <variable ilk="argument" name="R" />
                <variable attributes="__local__ private" citdl="B.Region.getRegion()" line="10" name="S" />
              </scope>
            </scope>
            <scope ilk="function" line="10" lineend="10" name="batch" returns="U" signature="batch(T, W, V, R)">
              <variable ilk="argument" name="T" />
              <variable ilk="argument" name="W" />
              <variable ilk="argument" name="V" />
              <variable ilk="argument" name="R" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" line="10" name="S" />
              <variable attributes="__local__ private" citdl="Array" line="10" name="U" />
            </scope>
            <scope ilk="function" line="10" lineend="10" name="isAncestor" returns="Boolean" signature="isAncestor(P, Q)">
              <variable ilk="argument" name="P" />
              <variable ilk="argument" name="Q" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="10" lineend="10" name="hasClass" returns="B.Dom.batch()" signature="hasClass(R, Q)">
              <variable ilk="argument" name="R" />
              <variable ilk="argument" name="Q" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="10" lineend="10" name="S" returns="P.test()" signature="S(T)">
                <variable ilk="argument" name="T" />
              </scope>
              <variable attributes="__local__ private" citdl="O()" line="10" name="P" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="getChildren" returns="B.Dom.getChildrenBy()" signature="getChildren(P)">
              <variable ilk="argument" name="P" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="getFirstChild" returns="B.Dom.getFirstChildBy()" signature="getFirstChild(P, Q)">
              <variable ilk="argument" name="P" />
              <variable ilk="argument" name="Q" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="getClientRegion" returns="B.Region" signature="getClientRegion()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="B.Dom.getDocumentScrollLeft()" line="11" name="Q" />
              <variable attributes="__local__ private" citdl="B.Dom.getViewportHeight()" line="11" name="P" />
              <variable attributes="__local__ private" citdl="B.Dom.getViewportWidth()" line="11" name="S" />
              <variable attributes="__local__ private" citdl="B.Dom.getDocumentScrollTop()" line="11" name="R" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="getLastChildBy" returns="Q" signature="getLastChildBy(P, R)">
              <variable ilk="argument" name="P" />
              <variable ilk="argument" name="R" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" line="11" name="Q" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="getAncestorBy" signature="getAncestorBy(P, Q)">
              <variable ilk="argument" name="P" />
              <variable ilk="argument" name="Q" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="insertBefore" returns="P.parentNode.insertBefore()" signature="insertBefore(Q, P)">
              <variable ilk="argument" name="Q" />
              <variable ilk="argument" name="P" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="getPreviousSiblingBy" signature="getPreviousSiblingBy(P, Q)">
              <variable ilk="argument" name="P" />
              <variable ilk="argument" name="Q" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="getNextSibling" returns="B.Dom.getNextSiblingBy()" signature="getNextSibling(P)">
              <variable ilk="argument" name="P" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="getLastChild" returns="B.Dom.getLastChildBy()" signature="getLastChild(P)">
              <variable ilk="argument" name="P" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="insertAfter" returns="P.parentNode.appendChild()" signature="insertAfter(Q, P)">
              <variable ilk="argument" name="Q" />
              <variable ilk="argument" name="P" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="getAncestorByClassName" returns="B.Dom.getAncestorBy()" signature="getAncestorByClassName(Q, P)">
              <variable ilk="argument" name="Q" />
              <variable ilk="argument" name="P" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="11" lineend="11" name="R" returns="B.Dom.hasClass()" signature="R(S)">
                <variable ilk="argument" name="S" />
              </scope>
            </scope>
            <scope ilk="function" line="11" lineend="11" name="getViewportWidth" returns="P" signature="getViewportWidth()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="M.compatMode" line="11" name="Q" />
              <variable attributes="__local__ private" citdl="self.innerWidth" line="11" name="P" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="getPreviousSibling" returns="B.Dom.getPreviousSiblingBy()" signature="getPreviousSibling(P)">
              <variable ilk="argument" name="P" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="getDocumentScrollTop" returns="Math.max()" signature="getDocumentScrollTop(P)">
              <variable ilk="argument" name="P" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="getFirstChildBy" returns="Q" signature="getFirstChildBy(P, R)">
              <variable ilk="argument" name="P" />
              <variable ilk="argument" name="R" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" line="11" name="Q" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="getNextSiblingBy" signature="getNextSiblingBy(P, Q)">
              <variable ilk="argument" name="P" />
              <variable ilk="argument" name="Q" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="getChildrenBy" returns="P" signature="getChildrenBy(Q, S)">
              <variable ilk="argument" name="Q" />
              <variable ilk="argument" name="S" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="R" line="11" name="P" />
              <variable attributes="__local__ private" citdl="B.Dom.getFirstChildBy()" line="11" name="R" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="getDocumentScrollLeft" returns="Math.max()" signature="getDocumentScrollLeft(P)">
              <variable ilk="argument" name="P" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="getAncestorByTagName" returns="B.Dom.getAncestorBy()" signature="getAncestorByTagName(Q, P)">
              <variable ilk="argument" name="Q" />
              <variable ilk="argument" name="P" />
              <variable citdl="Dom" name="this" />
              <scope attributes="__local__ private" ilk="function" line="11" lineend="11" name="R" returns="S.tagName" signature="R(S)">
                <variable ilk="argument" name="S" />
              </scope>
            </scope>
          </variable>
          <scope ilk="class" line="213" lineend="455" name="AttributeProvider">
            <scope attributes="__ctor__" doc="Provides and manages YAHOO.util.Attribute instances" ilk="function" line="213" lineend="213" name="AttributeProvider" signature="AttributeProvider()">
              <variable citdl="AttributeProvider" name="this" />
            </scope>
            <variable attributes="private" citdl="Object" doc="PRIVATE: A key-value map of Attribute configurations" line="224" name="_configs" />
            <scope doc="Returns the current value of the attribute." ilk="function" line="230" lineend="239" name="get" returns="config.value" signature="get(key)">
              <variable citdl="String" doc="The attribute whose value will be returned." ilk="argument" name="key" />
              <variable citdl="AttributeProvider" name="this" />
              <variable attributes="__local__ private" citdl="this._configs[key]" line="232" name="config" />
            </scope>
            <scope doc="Sets the value of a config." ilk="function" line="249" lineend="258" name="set" returns="Boolean" signature="set(key, value, silent)">
              <variable citdl="String" doc="The name of the attribute" ilk="argument" name="key" />
              <variable citdl="Any" doc="The value to apply to the attribute" ilk="argument" name="value" />
              <variable citdl="Boolean" doc="Whether or not to suppress change events" ilk="argument" name="silent" />
              <variable citdl="AttributeProvider" name="this" />
              <variable attributes="__local__ private" citdl="this._configs[key]" line="251" name="config" />
            </scope>
            <scope doc="Returns an array of attribute names." ilk="function" line="265" lineend="278" name="getAttributeKeys" returns="Array" signature="getAttributeKeys()">
              <variable citdl="AttributeProvider" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="267" name="keys" />
              <variable attributes="__local__ private" citdl="this._configs[key]" line="268" name="config" />
            </scope>
            <scope doc="Sets multiple attribute values." ilk="function" line="286" lineend="292" name="setAttributes" signature="setAttributes(map, silent)">
              <variable citdl="Object" doc="A key-value map of attributes" ilk="argument" name="map" />
              <variable citdl="Boolean" doc="Whether or not to suppress change events" ilk="argument" name="silent" />
              <variable citdl="AttributeProvider" name="this" />
            </scope>
            <scope doc="Resets the specified attribute&apos;s value to its initial value." ilk="function" line="301" lineend="308" name="resetValue" returns="Boolean" signature="resetValue(key, silent)">
              <variable citdl="String" doc="The name of the attribute" ilk="argument" name="key" />
              <variable citdl="Boolean" doc="Whether or not to suppress change events" ilk="argument" name="silent" />
              <variable citdl="AttributeProvider" name="this" />
            </scope>
            <scope doc="Sets the attribute&apos;s value to its current value." ilk="function" line="316" lineend="330" name="refresh" signature="refresh(key, silent)">
              <variable ilk="argument" name="key" />
              <variable citdl="Boolean" doc="Whether or not to suppress change events" ilk="argument" name="silent" />
              <variable citdl="AttributeProvider" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Adds an Attribute to the AttributeProvider instance." ilk="function" line="340" lineend="342" name="register" signature="register(key, map)">
              <variable citdl="String" doc="The attribute&apos;s name" ilk="argument" name="key" />
              <variable citdl="Object" doc="A key-value map containing the&#xA;attribute&apos;s properties." ilk="argument" name="map" />
              <variable citdl="AttributeProvider" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Returns the attribute&apos;s properties." ilk="function" line="353" lineend="365" name="getAttributeConfig" returns="Object" signature="getAttributeConfig(key)">
              <variable citdl="String" doc="The attribute&apos;s name" ilk="argument" name="key" />
              <variable citdl="AttributeProvider" name="this" />
              <variable attributes="__local__ private" citdl="this._configs[key]" line="355" name="config" />
              <variable attributes="__local__ private" citdl="Object" line="356" lineend="356" name="map" />
            </scope>
            <scope doc="Sets or updates an Attribute instance&apos;s properties." ilk="function" line="374" lineend="383" name="setAttributeConfig" signature="setAttributeConfig(key, map, init)">
              <variable citdl="String" doc="The attribute&apos;s name." ilk="argument" name="key" />
              <variable citdl="Object" doc="A key-value map of attribute properties" ilk="argument" name="map" />
              <variable citdl="Boolean" doc="Whether or not this should become the intial config." ilk="argument" name="init" />
              <variable citdl="AttributeProvider" name="this" />
            </scope>
            <scope attributes="deprecated" doc="DEPRECATED: Sets or updates an Attribute instance&apos;s properties." ilk="function" line="393" lineend="395" name="configureAttribute" signature="configureAttribute(key, map, init)">
              <variable citdl="String" doc="The attribute&apos;s name." ilk="argument" name="key" />
              <variable citdl="Object" doc="A key-value map of attribute properties" ilk="argument" name="map" />
              <variable citdl="Boolean" doc="Whether or not this should become the intial config." ilk="argument" name="init" />
              <variable citdl="AttributeProvider" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Resets an attribute to its intial configuration." ilk="function" line="403" lineend="406" name="resetAttributeConfig" signature="resetAttributeConfig(key)">
              <variable citdl="String" doc="The attribute&apos;s name." ilk="argument" name="key" />
              <variable citdl="AttributeProvider" name="this" />
            </scope>
            <scope doc="to create events on the fly" ilk="function" line="410" lineend="418" name="subscribe" signature="subscribe(type, callback)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="callback" />
              <variable citdl="AttributeProvider" name="this" />
            </scope>
            <variable citdl="this._events" line="411" name="_events" />
            <scope ilk="function" line="420" lineend="422" name="on" signature="on()">
              <variable citdl="AttributeProvider" name="this" />
            </scope>
            <scope ilk="function" line="424" lineend="426" name="addListener" signature="addListener()">
              <variable citdl="AttributeProvider" name="this" />
            </scope>
            <scope doc="Fires the attribute&apos;s beforeChange event." ilk="function" line="434" lineend="439" name="fireBeforeChangeEvent" returns="this.fireEvent()" signature="fireBeforeChangeEvent(e)">
              <variable citdl="Object" doc="The event object to pass to handlers." ilk="argument" name="e" />
              <variable citdl="AttributeProvider" name="this" />
              <variable attributes="__local__ private" citdl="String" line="435" name="type" />
            </scope>
            <scope doc="Fires the attribute&apos;s change event." ilk="function" line="447" lineend="450" name="fireChangeEvent" returns="this.fireEvent()" signature="fireChangeEvent(e)">
              <variable citdl="Object" doc="The event object to pass to the handlers." ilk="argument" name="e" />
              <variable citdl="AttributeProvider" name="this" />
            </scope>
            <scope ilk="function" line="452" lineend="454" name="createAttribute" returns="YAHOO.util.Attribute" signature="createAttribute(map)">
              <variable ilk="argument" name="map" />
              <variable citdl="AttributeProvider" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="336" lineend="364" name="Subscriber">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Stores the subscriber information to be used when the event fires." ilk="function" line="336" lineend="364" name="Subscriber" signature="Subscriber(fn, obj, override)">
              <variable citdl="Function" doc="The function to execute" ilk="argument" name="fn" />
              <variable citdl="Object" doc="An object to be passed along when the event fires" ilk="argument" name="obj" />
              <variable citdl="Boolean" doc="If true, the obj passed in becomes the execution&#xA;scope of the listener" ilk="argument" name="override" />
              <variable citdl="Subscriber" name="this" />
            </scope>
            <variable citdl="Function" doc="The callback that will be execute when the event fires" line="343" name="fn" />
            <variable citdl="Object" doc="An optional custom object that will passed to the callback when&#xA;the event fires" line="351" name="obj" />
            <variable citdl="Boolean" doc="The default execution scope for the event listener is defined when the&#xA;event is created (usually the object which contains the event).&#xA;By setting override to true, the execution scope becomes the custom&#xA;object passed in by the subscriber.  If override is an object, that&#xA;object becomes the scope." line="362" name="override" />
            <scope doc="Returns the execution scope for this listener.  If override was set to true&#xA;the custom obj will be the scope.  If override is an object, that is the&#xA;scope, otherwise the default scope will be used." ilk="function" line="374" lineend="383" name="getScope" returns="defaultScope" signature="getScope(defaultScope)">
              <variable citdl="Object" doc="the scope to use if this listener does not&#xA;override it." ilk="argument" name="defaultScope" />
              <variable citdl="Subscriber" name="this" />
            </scope>
            <scope doc="Returns true if the fn and obj match this objects properties.&#xA;Used by the unsubscribe method to match the right subscriber." ilk="function" line="395" lineend="401" name="contains" returns="Boolean" signature="contains(fn, obj)">
              <variable citdl="Function" doc="the function to execute" ilk="argument" name="fn" />
              <variable citdl="Object" doc="an object to be passed along when the event fires" ilk="argument" name="obj" />
              <variable citdl="Subscriber" name="this" />
            </scope>
            <scope doc="toString */" ilk="function" line="406" lineend="409" name="toString" returns="String" signature="toString()">
              <variable citdl="Subscriber" name="this" />
            </scope>
          </scope>
          <variable citdl="Object" line="435" lineend="1867" name="Event">
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: The number of times we should look for elements that are not&#xA;in the DOM at the time the event is requested after the document&#xA;has been loaded.  The default is 2000@amp;20 ms, so it will poll&#xA;for 40 seconds or until all outstanding handlers are bound&#xA;(whichever comes first)." line="548" name="POLL_RETRYS" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: The poll interval in milliseconds" line="557" name="POLL_INTERVAL" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Element to bind, int constant" line="566" name="EL" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Type of event, int constant" line="575" name="TYPE" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Function to execute, int constant" line="584" name="FN" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Function wrapped for scope correction and cleanup, int constant" line="593" name="WFN" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Object passed in by the user that will be returned as a&#xA;parameter to the callback, int constant.  Specific to&#xA;unload listeners" line="604" name="UNLOAD_OBJ" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: Adjusted scope, either the element we are registering the event&#xA;on or the custom object passed in by the listener, int constant" line="614" name="ADJ_SCOPE" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: The original obj passed into addListener" line="623" name="OBJ" />
            <variable attributes="__static__ constant" citdl="Number" doc="STATIC CONSTANT: The original scope parameter passed into addListener" line="632" name="OVERRIDE" />
            <variable attributes="__static__" citdl="Error" doc="STATIC: addListener/removeListener can throw errors in unexpected scenarios.&#xA;These errors are suppressed, the method returns false, and this property&#xA;is set" line="642" name="lastError" />
            <variable attributes="deprecated private __static__" citdl="YAHOO.env.ua.webkit" doc="DEPRECATED PRIVATE STATIC: Safari detection" line="651" name="isSafari" />
            <variable attributes="deprecated private __static__" citdl="String" doc="DEPRECATED PRIVATE STATIC: webkit version" line="661" name="webkit" />
            <variable attributes="deprecated private __static__" citdl="YAHOO.env.ua.ie" doc="DEPRECATED PRIVATE STATIC: IE detection" line="670" name="isIE" />
            <variable attributes="private __static__" citdl="setInterval()" doc="PRIVATE STATIC: poll handle" line="678" name="_interval" />
            <variable attributes="private __static__" doc="PRIVATE STATIC: document readystate poll handle" line="686" name="_dri" />
            <variable attributes="__static__" citdl="Boolean" doc="STATIC: True when the document is initially usable" line="694" name="DOMReady" />
            <variable citdl="Boolean" doc="Errors thrown by subscribers of custom events are caught&#xA;and the error message is written to the debug console.  If&#xA;this property is set to true, it will also re-throw the&#xA;error." line="705" name="throwErrors" />
            <scope attributes="private __static__" doc="*/" ilk="function" line="712" lineend="718" name="startInterval" signature="startInterval()">
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="this" line="714" name="self" />
              <scope attributes="__local__ private" ilk="function" line="715" lineend="715" name="callback" signature="callback()" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Executes the supplied callback when the item with the supplied&#xA;id is found.  This is meant to be used to execute behavior as&#xA;soon as possible as the page loads.  If you use this after the&#xA;initial page load it will poll for a fixed time for the element.&#xA;The number of times it will poll and the frequency are&#xA;configurable.  By default it will poll for 10 seconds.&#xA;&#xA;&lt;p&gt;The callback is executed with a single parameter:&#xA;the custom object parameter, if provided.&lt;/p&gt;" ilk="function" line="744" lineend="759" name="onAvailable" signature="onAvailable(p_id, p_fn, p_obj, p_override, checkContent)">
              <variable citdl="{string" doc="the id of the element, or an array&#xA;of ids to look for." ilk="argument" name="p_id" />
              <variable citdl="Function" doc="what to execute when the element is found." ilk="argument" name="p_fn" />
              <variable citdl="Object" doc="an optional object to be passed back as&#xA;a parameter to p_fn." ilk="argument" name="p_obj" />
              <variable citdl="{boolean" doc="If set to true, p_fn will execute&#xA;in the scope of p_obj, if set to an object it&#xA;will execute in the scope of that object" ilk="argument" name="p_override" />
              <variable citdl="Boolean" doc="check child node readiness (onContentReady)" ilk="argument" name="checkContent" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" line="746" name="a" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Works the same way as onAvailable, but additionally checks the&#xA;state of sibling elements to determine if the content of the&#xA;available element is safe to modify.&#xA;&#xA;&lt;p&gt;The callback is executed with a single parameter:&#xA;the custom object parameter, if provided.&lt;/p&gt;" ilk="function" line="781" lineend="783" name="onContentReady" signature="onContentReady(p_id, p_fn, p_obj, p_override)">
              <variable citdl="String" doc="the id of the element to look for." ilk="argument" name="p_id" />
              <variable citdl="Function" doc="what to execute when the element is ready." ilk="argument" name="p_fn" />
              <variable citdl="Object" doc="an optional object to be passed back as&#xA;a parameter to p_fn." ilk="argument" name="p_obj" />
              <variable citdl="{boolean" doc="If set to true, p_fn will execute&#xA;in the scope of p_obj.  If an object, p_fn will&#xA;exectute in the scope of that object" ilk="argument" name="p_override" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Executes the supplied callback when the DOM is first usable.  This&#xA;will execute immediately if called after the DOMReady event has&#xA;fired.   @todo the DOMContentReady event does not fire when the&#xA;script is dynamically injected into the page.  This means the&#xA;DOMReady custom event will never fire in FireFox or Opera when the&#xA;library is injected.  It _will_ fire in Safari, and the IE&#xA;implementation would allow for us to fire it if the defered script&#xA;is not available.  We want this to behave the same in all browsers.&#xA;Is there a way to identify when the script has been injected&#xA;instead of included inline?  Is there a way to know whether the&#xA;window onload event has fired without having had a listener attached&#xA;to it when it did so?&#xA;&#xA;&lt;p&gt;The callback is a CustomEvent, so the signature is:&lt;/p&gt;&#xA;&lt;p&gt;type &amp;lt;string&amp;gt;, args &amp;lt;array&amp;gt;, customobject &amp;lt;object&amp;gt;&lt;/p&gt;&#xA;&lt;p&gt;For DOMReady events, there are no fire argments, so the&#xA;signature is:&lt;/p&gt;&#xA;&lt;p&gt;&quot;DOMReady&quot;, [], obj&lt;/p&gt;" ilk="function" line="817" lineend="833" name="onDOMReady" signature="onDOMReady(p_fn, p_obj, p_override)">
              <variable citdl="Function" doc="what to execute when the element is found." ilk="argument" name="p_fn" />
              <variable citdl="Object" doc="an optional object to be passed back as&#xA;a parameter to p_fn." ilk="argument" name="p_obj" />
              <variable ilk="argument" name="p_override" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Appends an event handler" ilk="function" line="857" lineend="980" name="addListener" returns="Boolean" signature="addListener(el, sType, fn, obj, override)">
              <variable citdl="{String" doc="An id, an element&#xA;reference, or a collection of ids and/or elements to assign the&#xA;listener to." ilk="argument" name="el" />
              <variable citdl="String" doc="The type of event to append" ilk="argument" name="sType" />
              <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
              <variable citdl="Object" doc="An arbitrary object that will be&#xA;passed as a parameter to the handler" ilk="argument" name="obj" />
              <variable citdl="{Boolean" doc="If true, the obj passed in becomes&#xA;the execution scope of the listener. If an&#xA;object, this object becomes the execution&#xA;scope." ilk="argument" name="override" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="865" name="ok" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="876" name="oEl" />
              <variable attributes="__local__ private" citdl="el" doc="HTML element that the event is registered on" line="916" name="scope" />
              <scope attributes="__local__ private" doc="the event fires;" ilk="function" line="927" lineend="930" name="wrappedFn" returns="fn.call()" signature="wrappedFn(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <variable attributes="__local__ private" citdl="Array" line="932" name="li" />
              <variable attributes="__local__ private" citdl="listeners.length" line="933" name="index" />
              <variable attributes="__local__ private" citdl="this.getLegacyIndex()" line="938" name="legacyIndex" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: When using legacy events, the handler is routed to this object&#xA;so we can fire our custom listener stack." ilk="function" line="989" lineend="1013" name="fireLegacyEvent" returns="ok" signature="fireLegacyEvent(e, legacyIndex)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="legacyIndex" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="legacyEvents[legacyIndex]" line="990" name="le" />
              <variable attributes="__local__ private" citdl="Boolean" line="990" name="ok" />
              <variable attributes="__local__ private" citdl="li[this.WFN].call()" line="990" name="ret" />
              <variable attributes="__local__ private" citdl="lh[i]" line="990" name="li" />
              <variable attributes="__local__ private" citdl="legacyHandlers[legacyIndex].slice()" line="990" name="lh" />
              <variable attributes="__local__ private" citdl="li[this.ADJ_SCOPE]" line="990" name="scope" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Returns the legacy event index that matches the supplied&#xA;signature" ilk="function" line="1022" lineend="1029" name="getLegacyIndex" returns="legacyMap[key]" signature="getLegacyIndex(el, sType)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="sType" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="this.generateId()" line="1023" name="key" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Logic that determines when we should automatically use legacy&#xA;events instead of DOM2 events.  Currently this is limited to old&#xA;Safari browsers with a broken preventDefault" ilk="function" line="1039" lineend="1047" name="useLegacyEvent" returns="Boolean" signature="useLegacyEvent(el, sType)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="sType" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="parseInt()" line="1041" name="v" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Removes an event listener" ilk="function" line="1065" lineend="1157" name="removeListener" returns="Boolean" signature="removeListener(el, sType, fn)">
              <variable citdl="{String" doc="An id, an element&#xA;reference, or a collection of ids and/or elements to remove&#xA;the listener from." ilk="argument" name="el" />
              <variable citdl="String" doc="the type of event to remove." ilk="argument" name="sType" />
              <variable citdl="Function" doc="the method the event invokes.  If fn is&#xA;undefined, then all event handlers for the type of event are&#xA;removed." ilk="argument" name="fn" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" line="1066" name="i" />
              <variable attributes="__local__ private" line="1066" name="len" />
              <variable attributes="__local__ private" citdl="unloadListeners[i]" line="1066" name="li" />
              <variable attributes="__local__ private" citdl="Boolean" line="1073" name="ok" />
              <variable attributes="__local__ private" citdl="listeners[index]" line="1102" name="cacheItem" />
              <variable attributes="__local__ private" citdl="arguments[3]" doc="try and take advantage of it, which is not possible." line="1107" name="index" />
              <variable attributes="__local__ private" citdl="this.getLegacyIndex()" line="1123" name="legacyIndex" />
              <variable attributes="__local__ private" citdl="legacyHandlers[legacyIndex]" line="1124" name="llist" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the event&apos;s target element.  Safari sometimes provides&#xA;a text node, and this is automatically resolved to the text&#xA;node&apos;s parent so that it behaves like other browsers." ilk="function" line="1172" lineend="1175" name="getTarget" returns="HTMLElement" signature="getTarget(ev, resolveTextNode)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Boolean" doc="when set to true the target&apos;s&#xA;parent will be returned if the target is a&#xA;text node.  @deprecated, the text node is&#xA;now resolved automatically" ilk="argument" name="resolveTextNode" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="ev.target" line="1173" name="t" />
            </scope>
            <scope attributes="__static__" doc="STATIC: In some cases, some browsers will return a text node inside&#xA;the actual element that was targeted.  This normalizes the&#xA;return value for getTarget and getRelatedTarget." ilk="function" line="1186" lineend="1194" name="resolveTextNode" returns="HTMLElement" signature="resolveTextNode(n)">
              <variable ilk="argument" name="n" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the event&apos;s pageX" ilk="function" line="1203" lineend="1214" name="getPageX" returns="Number" signature="getPageX(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="ev.pageX" line="1204" name="x" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the event&apos;s pageY" ilk="function" line="1223" lineend="1235" name="getPageY" returns="Number" signature="getPageY(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="ev.pageY" line="1224" name="y" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the pageX and pageY properties as an indexed array." ilk="function" line="1244" lineend="1246" name="getXY" returns="Array" signature="getXY(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the event&apos;s related target" ilk="function" line="1255" lineend="1266" name="getRelatedTarget" returns="HTMLElement" signature="getRelatedTarget(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="ev.relatedTarget" line="1256" name="t" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the time of the event.  If the time is not included, the&#xA;event is modified using the current time." ilk="function" line="1276" lineend="1288" name="getTime" returns="Date" signature="getTime(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="Date" line="1278" name="t" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Convenience method for stopPropagation + preventDefault" ilk="function" line="1296" lineend="1299" name="stopEvent" signature="stopEvent(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Stops event propagation" ilk="function" line="1307" lineend="1313" name="stopPropagation" signature="stopPropagation(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Prevents the default behavior of the event" ilk="function" line="1321" lineend="1327" name="preventDefault" signature="preventDefault(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Finds the event in the window object, the caller&apos;s arguments, or&#xA;in the arguments of another method in the callstack.  This is&#xA;executed automatically for events registered through the event&#xA;manager, so the implementer should not normally need to execute&#xA;this function at all." ilk="function" line="1341" lineend="1356" name="getEvent" returns="Event" signature="getEvent(e, boundEl)">
              <variable citdl="Event" doc="the event parameter from the handler" ilk="argument" name="e" />
              <variable citdl="HTMLElement" doc="the element the listener is attached to" ilk="argument" name="boundEl" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="e" line="1342" name="ev" />
              <variable attributes="__local__ private" citdl="this.getEvent.caller" line="1345" name="c" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the charcode for an event" ilk="function" line="1365" lineend="1373" name="getCharCode" returns="Number" signature="getCharCode(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="ev.keyCode" line="1366" name="code" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Locating the saved event handler data by function ref" ilk="function" line="1382" lineend="1394" name="_getCacheIndex" returns="Number" signature="_getCacheIndex(el, sType, fn)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="sType" />
              <variable ilk="argument" name="fn" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="listeners[i]" line="1384" name="li" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Generates an unique ID for the element if it does not already&#xA;have one." ilk="function" line="1404" lineend="1414" name="generateId" returns="String" signature="generateId(el)">
              <variable doc="the element to create the id for" ilk="argument" name="el" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="el.id" line="1405" name="id" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: We want to be able to use getElementsByTagName as a collection&#xA;to attach a group of events to.  Unfortunately, different&#xA;browsers return different types of collections.  This function&#xA;tests to determine if the object is array-like.  It will also&#xA;fail if the object is an array, but is empty." ilk="function" line="1429" lineend="1441" name="_isValidCollection" returns="Boolean" signature="_isValidCollection(o)">
              <variable doc="the object to test" ilk="argument" name="o" />
              <variable citdl="Event" name="this" />
            </scope>
            <variable attributes="deprecated private __static__" citdl="Object" doc="DEPRECATED PRIVATE STATIC: DOM element cache" line="1451" lineend="1451" name="elCache" />
            <scope attributes="deprecated private __static__" doc="DEPRECATED PRIVATE STATIC: We cache elements bound by id because when the unload event&#xA;fires, we can no longer use document.getElementById" ilk="function" line="1461" lineend="1463" name="getEl" signature="getEl(id)">
              <variable ilk="argument" name="id" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="deprecated private __static__" doc="DEPRECATED PRIVATE STATIC: Clears the element cache" ilk="function" line="1472" lineend="1472" name="clearCache" signature="clearCache()">
              <variable citdl="Event" name="this" />
            </scope>
            <variable citdl="YAHOO.util.CustomEvent" doc="Custom event the fires when the dom is initially usable" line="1478" name="DOMReadyEvent" />
            <scope attributes="private __static__" doc="PRIVATE STATIC: hook up any deferred listeners" ilk="function" line="1486" lineend="1502" name="_load" signature="_load(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="1490" name="EU" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Fires the DOMReady event listeners the first time the document is&#xA;usable." ilk="function" line="1511" lineend="1522" name="_ready" signature="_ready(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="1512" name="EU" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Polling function that runs before the onload event fires,&#xA;attempting to attach to DOM Nodes as soon as they are&#xA;available" ilk="function" line="1532" lineend="1630" name="_tryPreloadAttach" signature="_tryPreloadAttach()">
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" doc="tested appropriately" line="1562" name="tryAgain" />
              <variable attributes="__local__ private" citdl="Array" doc="onAvailable" line="1568" name="notAvail" />
              <scope attributes="__local__ private" ilk="function" line="1570" lineend="1580" name="executeItem" signature="executeItem(el, item)">
                <variable ilk="argument" name="el" />
                <variable ilk="argument" name="item" />
                <variable attributes="__local__ private" citdl="el" line="1571" name="scope" />
              </scope>
              <variable attributes="__local__ private" citdl="this.getEl()" line="1582" name="el" />
              <variable attributes="__local__ private" line="1582" name="i" />
              <variable attributes="__local__ private" line="1582" name="len" />
              <variable attributes="__local__ private" citdl="onAvailStack[i]" line="1582" name="item" />
              <variable attributes="__local__ private" citdl="Array" line="1582" name="ready" />
            </scope>
            <variable citdl="Boolean" line="1555" name="locked" />
            <scope attributes="__static__" doc="STATIC: Removes all listeners attached to the given element via addListener.&#xA;Optionally, the node&apos;s children can also be purged.&#xA;Optionally, you can specify a specific type of event to remove." ilk="function" line="1644" lineend="1659" name="purgeElement" signature="purgeElement(el, recurse, sType)">
              <variable citdl="HTMLElement" doc="the element to purge" ilk="argument" name="el" />
              <variable citdl="Boolean" doc="recursively purge this element&apos;s children&#xA;as well.  Use with caution." ilk="argument" name="recurse" />
              <variable citdl="String" doc="optional type of listener to purge. If&#xA;left out, all listeners will be removed" ilk="argument" name="sType" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" line="1645" name="oEl" />
              <variable attributes="__local__ private" line="1646" name="i" />
              <variable attributes="__local__ private" citdl="this.getListeners()" line="1646" name="elListeners" />
              <variable attributes="__local__ private" line="1646" name="len" />
              <variable attributes="__local__ private" citdl="elListeners[i]" line="1649" name="l" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns all listeners attached to the given element via addListener.&#xA;Optionally, you can specify a specific type of event to return." ilk="function" line="1677" lineend="1710" name="getListeners" returns="Object" signature="getListeners(el, sType)">
              <variable citdl="{HTMLElement" doc="the element or element id to inspect" ilk="argument" name="el" />
              <variable citdl="String" doc="optional type of listener to return. If&#xA;left out, all listeners will be returned" ilk="argument" name="sType" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="1678" name="searchLists" />
              <variable attributes="__local__ private" citdl="Array" line="1678" name="results" />
              <variable attributes="__local__ private" line="1687" name="oEl" />
              <variable attributes="__local__ private" citdl="searchLists[j]" line="1690" name="searchList" />
              <variable attributes="__local__ private" citdl="searchList[i]" line="1693" name="l" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Removes all listeners registered by pe.event.  Called&#xA;automatically during the unload event." ilk="function" line="1719" lineend="1766" name="_unload" signature="_unload(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" line="1722" name="index" />
              <variable attributes="__local__ private" line="1722" name="i" />
              <variable attributes="__local__ private" line="1722" name="j" />
              <variable attributes="__local__ private" citdl="ul[i]" line="1722" name="l" />
              <variable attributes="__local__ private" line="1722" name="len" />
              <variable attributes="__local__ private" citdl="unloadListeners.slice()" line="1722" name="ul" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="1722" name="EU" />
              <variable attributes="__local__ private" citdl="window" line="1728" name="scope" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Returns scrollLeft" ilk="function" line="1774" lineend="1776" name="_getScrollLeft" returns="this._getScroll()[1]" signature="_getScrollLeft()">
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Returns scrollTop" ilk="function" line="1784" lineend="1786" name="_getScrollTop" returns="this._getScroll()[0]" signature="_getScrollTop()">
              <variable citdl="Event" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Returns the scrollTop and scrollLeft.  Used to calculate the&#xA;pageX and pageY in Internet Explorer" ilk="function" line="1795" lineend="1804" name="_getScroll" returns="Array" signature="_getScroll()">
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="document.documentElement" line="1796" name="dd" />
              <variable attributes="__local__ private" citdl="document.body" line="1796" name="db" />
            </scope>
            <scope attributes="deprecated private __static__" doc="DEPRECATED PRIVATE STATIC: Used by old versions of CustomEvent, restored for backwards&#xA;compatibility" ilk="function" line="1814" lineend="1816" name="regCE" signature="regCE()">
              <variable citdl="Event" name="this" />
            </scope>
            <variable attributes="private __static__" doc="PRIVATE STATIC: Adds a DOM event directly without the caching, cleanup, scope adj, etc" line="1829" name="_simpleAdd" />
            <variable attributes="private __static__" doc="PRIVATE STATIC: Basic remove listener" line="1854" name="_simpleRemove" />
          </variable>
          <scope ilk="class" line="484" lineend="844" name="Element">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Element provides an wrapper object to simplify adding&#xA;event listeners, using dom methods, and managing attributes." ilk="function" line="484" lineend="488" name="Element" signature="Element(el, map)">
              <variable citdl="{HTMLElement" doc="| String} The html element that&#xA;represents the Element." ilk="argument" name="el" />
              <variable citdl="Object" doc="A key-value map of initial config names and values" ilk="argument" name="map" />
              <variable citdl="Element" name="this" />
            </scope>
            <variable citdl="Object" doc="Dom events supported by the Element instance." line="496" name="DOM_EVENTS" />
            <scope doc="Wrapper for HTMLElement method." ilk="function" line="503" lineend="506" name="appendChild" signature="appendChild(child)">
              <variable ilk="argument" name="child" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for HTMLElement method." ilk="function" line="513" lineend="515" name="getElementsByTagName" returns="this.get().getElementsByTagName()" signature="getElementsByTagName(tag)">
              <variable citdl="String" doc="The tagName to collect" ilk="argument" name="tag" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for HTMLElement method." ilk="function" line="522" lineend="524" name="hasChildNodes" returns="Boolean" signature="hasChildNodes()">
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for HTMLElement method." ilk="function" line="533" lineend="538" name="insertBefore" signature="insertBefore(element, before)">
              <variable citdl="HTMLElement" doc="The HTMLElement to insert" ilk="argument" name="element" />
              <variable citdl="HTMLElement" doc="The HTMLElement to insert&#xA;the element before." ilk="argument" name="before" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for HTMLElement method." ilk="function" line="545" lineend="549" name="removeChild" returns="Boolean" signature="removeChild(child)">
              <variable citdl="HTMLElement" doc="The HTMLElement to remove" ilk="argument" name="child" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for HTMLElement method." ilk="function" line="557" lineend="561" name="replaceChild" returns="this.get().replaceChild()" signature="replaceChild(newNode, oldNode)">
              <variable citdl="HTMLElement" doc="The HTMLElement to insert" ilk="argument" name="newNode" />
              <variable citdl="HTMLElement" doc="The HTMLElement to replace" ilk="argument" name="oldNode" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Registers Element specific attributes." ilk="function" line="569" lineend="570" name="initAttributes" signature="initAttributes(map)">
              <variable citdl="Object" doc="A key-value map of initial attribute configs" ilk="argument" name="map" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Adds a listener for the given event.  These may be DOM or&#xA;customEvent listeners.  Any event that is fired via fireEvent&#xA;can be listened for.  All handlers receive an event object." ilk="function" line="582" lineend="602" name="addListener" signature="addListener(type, fn, obj, scope)">
              <variable citdl="String" doc="The name of the event to listen for" ilk="argument" name="type" />
              <variable citdl="Function" doc="The handler to call when the event fires" ilk="argument" name="fn" />
              <variable citdl="Any" doc="A variable to pass to the handler" ilk="argument" name="obj" />
              <variable citdl="Object" doc="The object to use for the scope of the handler" ilk="argument" name="scope" />
              <variable citdl="Element" name="this" />
              <variable attributes="__local__ private" citdl="this.get()" line="583" name="el" />
              <variable attributes="__local__ private" citdl="this" line="587" name="self" />
            </scope>
            <scope doc="Alias for addListener" ilk="function" line="613" lineend="613" name="on" signature="on()">
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Alias for addListener" ilk="function" line="623" lineend="623" name="subscribe" signature="subscribe()">
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Remove an event listener" ilk="function" line="631" lineend="633" name="removeListener" signature="removeListener(type, fn)">
              <variable citdl="String" doc="The name of the event to listen for" ilk="argument" name="type" />
              <variable citdl="Function" doc="The function call when the event fires" ilk="argument" name="fn" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" line="640" lineend="642" name="addClass" signature="addClass(className)">
              <variable citdl="String" doc="The className to add" ilk="argument" name="className" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" line="652" lineend="655" name="getElementsByClassName" returns="Array" signature="getElementsByClassName(className, tag)">
              <variable citdl="String" doc="The className to collect" ilk="argument" name="className" />
              <variable citdl="String" doc="(optional) The tag to use in&#xA;conjunction with class name" ilk="argument" name="tag" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" line="663" lineend="665" name="hasClass" returns="Boolean" signature="hasClass(className)">
              <variable citdl="String" doc="The className to add" ilk="argument" name="className" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" line="672" lineend="674" name="removeClass" returns="Dom.removeClass()" signature="removeClass(className)">
              <variable citdl="String" doc="The className to remove" ilk="argument" name="className" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" line="682" lineend="685" name="replaceClass" returns="Dom.replaceClass()" signature="replaceClass(oldClassName, newClassName)">
              <variable citdl="String" doc="The className to replace" ilk="argument" name="oldClassName" />
              <variable citdl="String" doc="The className to add" ilk="argument" name="newClassName" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" line="693" lineend="700" name="setStyle" returns="Dom.setStyle()" signature="setStyle(property, value)">
              <variable citdl="String" doc="The style property to set" ilk="argument" name="property" />
              <variable citdl="String" doc="The value to apply to the style property" ilk="argument" name="value" />
              <variable citdl="Element" name="this" />
              <variable attributes="__local__ private" citdl="this.get()" line="694" name="el" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" line="708" lineend="710" name="getStyle" returns="String" signature="getStyle(property)">
              <variable citdl="String" doc="The style property to retrieve" ilk="argument" name="property" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope doc="Apply any queued set calls." ilk="function" line="716" lineend="721" name="fireQueue" signature="fireQueue()">
              <variable citdl="Element" name="this" />
              <variable attributes="__local__ private" citdl="this._queue" line="717" name="queue" />
            </scope>
            <scope doc="Appends the HTMLElement into either the supplied parentNode." ilk="function" line="729" lineend="763" name="appendTo" returns="Boolean" signature="appendTo(parent, before)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="before" />
              <variable citdl="Element" name="this" />
              <variable attributes="__local__ private" citdl="this.get()" line="740" name="element" />
            </scope>
            <scope ilk="function" line="765" lineend="773" name="get" returns="AttributeProvider.prototype.get.call()" signature="get(key)">
              <variable ilk="argument" name="key" />
              <variable citdl="Element" name="this" />
              <variable attributes="__local__ private" citdl="this._configs" line="766" name="configs" />
              <variable attributes="__local__ private" citdl="configs.element" line="767" name="el" />
            </scope>
            <scope ilk="function" line="775" lineend="790" name="setAttributes" signature="setAttributes(map, silent)">
              <variable ilk="argument" name="map" />
              <variable ilk="argument" name="silent" />
              <variable citdl="Element" name="this" />
              <variable attributes="__local__ private" citdl="this.get()" line="776" name="el" />
            </scope>
            <scope ilk="function" line="792" lineend="809" name="set" returns="AttributeProvider.prototype.set.apply()" signature="set(key, value, silent)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="silent" />
              <variable citdl="Element" name="this" />
              <variable attributes="__local__ private" citdl="this.get()" line="793" name="el" />
            </scope>
            <scope ilk="function" line="811" lineend="820" name="setAttributeConfig" signature="setAttributeConfig(key, map, init)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="map" />
              <variable ilk="argument" name="init" />
              <variable citdl="Element" name="this" />
              <variable attributes="__local__ private" citdl="this.get()" line="812" name="el" />
            </scope>
            <scope ilk="function" line="822" lineend="834" name="getAttributeKeys" returns="keys" signature="getAttributeKeys()">
              <variable citdl="Element" name="this" />
              <variable attributes="__local__ private" citdl="this.get()" line="823" name="el" />
              <variable attributes="__local__ private" citdl="AttributeProvider.prototype.getAttributeKeys.call()" line="824" name="keys" />
            </scope>
            <scope ilk="function" line="836" lineend="839" name="createEvent" signature="createEvent(type, scope)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="scope" />
              <variable citdl="Element" name="this" />
            </scope>
            <scope ilk="function" line="841" lineend="843" name="init" signature="init(el, attr)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="attr" />
              <variable citdl="Element" name="this" />
            </scope>
          </scope>
          <variable attributes="__ctor__" doc="CONSTRUCTOR: The Browser History Manager provides the ability to use the back/forward&#xA;navigation buttons in a DHTML application. It also allows a DHTML&#xA;application to be bookmarked in a specific state.&#xA;&#xA;This library requires the following static markup:&#xA;&#xA;&amp;lt;iframe id=&quot;yui-history-iframe&quot; src=&quot;path-to-real-asset-in-same-domain&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&#xA;&amp;lt;input id=&quot;yui-history-field&quot; type=&quot;hidden&quot;&amp;gt;" line="787" name="History" />
          <variable citdl="Object" doc="Singleton that determines how an animation proceeds from start to end." line="834" lineend="1147" name="Easing">
            <scope doc="Uniform speed between points." ilk="function" line="845" lineend="847" name="easeNone" returns="Number" signature="easeNone(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Begins slowly and accelerates towards end. (quadratic)" ilk="function" line="858" lineend="860" name="easeIn" returns="Number" signature="easeIn(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Begins quickly and decelerates towards end.  (quadratic)" ilk="function" line="871" lineend="873" name="easeOut" returns="Number" signature="easeOut(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Begins slowly and decelerates towards end. (quadratic)" ilk="function" line="884" lineend="890" name="easeBoth" returns="Number" signature="easeBoth(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Begins slowly and accelerates towards end. (quartic)" ilk="function" line="901" lineend="903" name="easeInStrong" returns="Number" signature="easeInStrong(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Begins quickly and decelerates towards end.  (quartic)" ilk="function" line="914" lineend="916" name="easeOutStrong" returns="Number" signature="easeOutStrong(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Begins slowly and decelerates towards end. (quartic)" ilk="function" line="927" lineend="933" name="easeBothStrong" returns="Number" signature="easeBothStrong(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Snap in elastic effect." ilk="function" line="947" lineend="967" name="elasticIn" returns="Number" signature="elasticIn(t, b, c, d, a, p)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Amplitude (optional)" ilk="argument" name="a" />
              <variable citdl="Number" doc="Period (optional)" ilk="argument" name="p" />
              <variable citdl="Easing" name="this" />
              <variable attributes="__local__ private" citdl="p" line="960" name="s" />
            </scope>
            <scope doc="Snap out elastic effect." ilk="function" line="980" lineend="1000" name="elasticOut" returns="Number" signature="elasticOut(t, b, c, d, a, p)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Amplitude (optional)" ilk="argument" name="a" />
              <variable citdl="Number" doc="Period (optional)" ilk="argument" name="p" />
              <variable citdl="Easing" name="this" />
              <variable attributes="__local__ private" citdl="p" line="993" name="s" />
            </scope>
            <scope doc="Snap both elastic effect." ilk="function" line="1013" lineend="1040" name="elasticBoth" returns="Number" signature="elasticBoth(t, b, c, d, a, p)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Amplitude (optional)" ilk="argument" name="a" />
              <variable citdl="Number" doc="Period (optional)" ilk="argument" name="p" />
              <variable citdl="Easing" name="this" />
              <variable attributes="__local__ private" citdl="p" line="1028" name="s" />
            </scope>
            <scope doc="Backtracks slightly, then reverses direction and moves to end." ilk="function" line="1053" lineend="1058" name="backIn" returns="Number" signature="backIn(t, b, c, d, s)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Overshoot (optional)" ilk="argument" name="s" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Overshoots end, then reverses and comes back to end." ilk="function" line="1070" lineend="1075" name="backOut" returns="Number" signature="backOut(t, b, c, d, s)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Overshoot (optional)" ilk="argument" name="s" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Backtracks slightly, then reverses direction, overshoots end,&#xA;then reverses and comes back to end." ilk="function" line="1088" lineend="1097" name="backBoth" returns="Number" signature="backBoth(t, b, c, d, s)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Overshoot (optional)" ilk="argument" name="s" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Bounce off of start." ilk="function" line="1108" lineend="1110" name="bounceIn" returns="Number" signature="bounceIn(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Bounces off end." ilk="function" line="1121" lineend="1130" name="bounceOut" returns="Number" signature="bounceOut(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope doc="Bounces off start and end." ilk="function" line="1141" lineend="1146" name="bounceBoth" returns="Number" signature="bounceBoth(t, b, c, d)">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
          </variable>
          <variable attributes="__static__" citdl="Object" doc="STATIC: The Assert object provides functions to test JavaScript values against&#xA;known and expected results. Whenever a comparison (assertion) fails,&#xA;an error is thrown." line="889" lineend="1223" name="Assert">
            <scope attributes="__static__" doc="STATIC: Formats a message so that it can contain the original assertion message&#xA;in addition to the custom message.&#xA;*//*:String*/" ilk="function" line="905" lineend="912" name="_formatMessage" returns="String" signature="_formatMessage(customMessage, defaultMessage)">
              <variable citdl="String" doc="The message passed in by the developer." ilk="argument" name="customMessage" />
              <variable citdl="String" doc="The message created by the error by default." ilk="argument" name="defaultMessage" />
              <variable citdl="Assert" name="this" />
              <variable attributes="__local__ private" citdl="customMessage" line="906" name="message" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Forces an assertion error to occur.&#xA;*//*:Void*/" ilk="function" line="924" lineend="926" name="fail" signature="fail(message)">
              <variable citdl="String" doc="(Optional) The message to display with the failure." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is equal to another. This uses the double equals sign&#xA;so type cohersion may occur.&#xA;*//*:Void*/" ilk="function" line="941" lineend="945" name="areEqual" signature="areEqual(expected, actual, message)">
              <variable citdl="Object" doc="The expected value." ilk="argument" name="expected" />
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is not equal to another. This uses the double equals sign&#xA;so type cohersion may occur.&#xA;*//*:Void*/" ilk="function" line="957" lineend="961" name="areNotEqual" signature="areNotEqual(unexpected, actual, message)">
              <variable citdl="Object" doc="The unexpected value." ilk="argument" name="unexpected" />
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is not the same as another. This uses the triple equals sign&#xA;so no type cohersion may occur.&#xA;*//*:Void*/" ilk="function" line="972" lineend="976" name="areNotSame" signature="areNotSame(unexpected, actual, message)">
              <variable citdl="Object" doc="The unexpected value." ilk="argument" name="unexpected" />
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is the same as another. This uses the triple equals sign&#xA;so no type cohersion may occur.&#xA;*//*:Void*/" ilk="function" line="987" lineend="991" name="areSame" signature="areSame(expected, actual, message)">
              <variable citdl="Object" doc="The expected value." ilk="argument" name="expected" />
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is false. This uses the triple equals sign&#xA;so no type cohersion may occur." ilk="function" line="1005" lineend="1009" name="isFalse" signature="isFalse(actual, message)">
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is true. This uses the triple equals sign&#xA;so no type cohersion may occur.&#xA;*//*:Void*/" ilk="function" line="1019" lineend="1024" name="isTrue" signature="isTrue(actual, message)">
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is not a number.&#xA;*//*:Void*/" ilk="function" line="1037" lineend="1041" name="isNaN" signature="isNaN(actual, message)">
              <variable citdl="Object" doc="The value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is not the special NaN value.&#xA;*//*:Void*/" ilk="function" line="1050" lineend="1054" name="isNotNaN" signature="isNotNaN(actual, message)">
              <variable citdl="Object" doc="The value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is not null. This uses the triple equals sign&#xA;so no type cohersion may occur.&#xA;*//*:Void*/" ilk="function" line="1064" lineend="1068" name="isNotNull" signature="isNotNull(actual, message)">
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is not undefined. This uses the triple equals sign&#xA;so no type cohersion may occur.&#xA;*//*:Void*/" ilk="function" line="1078" lineend="1082" name="isNotUndefined" signature="isNotUndefined(actual, message)">
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is null. This uses the triple equals sign&#xA;so no type cohersion may occur.&#xA;*//*:Void*/" ilk="function" line="1092" lineend="1096" name="isNull" signature="isNull(actual, message)">
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is undefined. This uses the triple equals sign&#xA;so no type cohersion may occur.&#xA;*//*:Void*/" ilk="function" line="1106" lineend="1110" name="isUndefined" signature="isUndefined(actual, message)">
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is an array.&#xA;*//*:Void*/" ilk="function" line="1123" lineend="1127" name="isArray" signature="isArray(actual, message)">
              <variable citdl="Object" doc="The value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is a Boolean.&#xA;*//*:Void*/" ilk="function" line="1136" lineend="1140" name="isBoolean" signature="isBoolean(actual, message)">
              <variable citdl="Object" doc="The value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is a function.&#xA;*//*:Void*/" ilk="function" line="1149" lineend="1153" name="isFunction" signature="isFunction(actual, message)">
              <variable citdl="Object" doc="The value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is an instance of a particular object. This may return&#xA;incorrect results when comparing objects from one frame to constructors in&#xA;another frame. For best results, don&apos;t use in a cross-frame manner.&#xA;*//*:Void*/" ilk="function" line="1165" lineend="1169" name="isInstanceOf" signature="isInstanceOf(expected, actual, message)">
              <variable citdl="Function" doc="The function that the object should be an instance of." ilk="argument" name="expected" />
              <variable citdl="Object" doc="The object to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is a number.&#xA;*//*:Void*/" ilk="function" line="1178" lineend="1182" name="isNumber" signature="isNumber(actual, message)">
              <variable citdl="Object" doc="The value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is an object.&#xA;*//*:Void*/" ilk="function" line="1191" lineend="1195" name="isObject" signature="isObject(actual, message)">
              <variable citdl="Object" doc="The value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is a string.&#xA;*//*:Void*/" ilk="function" line="1204" lineend="1208" name="isString" signature="isString(actual, message)">
              <variable citdl="Object" doc="The value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is of a particular type.&#xA;*//*:Void*/" ilk="function" line="1218" lineend="1222" name="isTypeOf" signature="isTypeOf(expectedType, actualValue, message)">
              <variable citdl="String" doc="The expected type of the variable." ilk="argument" name="expectedType" />
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actualValue" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="Assert" name="this" />
            </scope>
          </variable>
          <variable citdl="L" doc="* An alias for &lt;a href=&quot;YAHOO.lang.html&quot;&gt;YAHOO.lang&lt;/a&gt; *&#xA;@class YAHOO.util.Lang */" line="939" name="Lang" />
          <scope ilk="class" line="1057" lineend="1100" name="Region">
            <scope ilk="function" line="11" lineend="11" name="getArea" signature="getArea()">
              <variable citdl="Region" name="this" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="getRegion" returns="YAHOO.util.Region" signature="getRegion(D)">
              <variable ilk="argument" name="D" />
              <variable citdl="Region" name="this" />
              <variable attributes="__local__ private" citdl="F[1]" line="11" name="A" />
              <variable attributes="__local__ private" citdl="F[1]" line="11" name="C" />
              <variable attributes="__local__ private" citdl="F[0]" line="11" name="B" />
              <variable attributes="__local__ private" citdl="F[0]" line="11" name="E" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getXY()" line="11" name="F" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="contains" signature="contains(A)">
              <variable ilk="argument" name="A" />
              <variable citdl="Region" name="this" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="union" returns="YAHOO.util.Region" signature="union(E)">
              <variable ilk="argument" name="E" />
              <variable citdl="Region" name="this" />
              <variable attributes="__local__ private" citdl="Math.max()" line="11" name="A" />
              <variable attributes="__local__ private" citdl="Math.min()" line="11" name="C" />
              <variable attributes="__local__ private" citdl="Math.min()" line="11" name="B" />
              <variable attributes="__local__ private" citdl="Math.max()" line="11" name="D" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="toString" signature="toString()">
              <variable citdl="Region" name="this" />
            </scope>
            <scope ilk="function" line="11" lineend="11" name="intersect" signature="intersect(E)">
              <variable ilk="argument" name="E" />
              <variable citdl="Region" name="this" />
              <variable attributes="__local__ private" citdl="Math.min()" line="11" name="A" />
              <variable attributes="__local__ private" citdl="Math.max()" line="11" name="C" />
              <variable attributes="__local__ private" citdl="Math.max()" line="11" name="B" />
              <variable attributes="__local__ private" citdl="Math.min()" line="11" name="D" />
            </scope>
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A region is a representation of an object on a grid.  It is defined&#xA;by the top, right, bottom, left extents, so is rectangular by default.  If&#xA;other shapes are required, this class could be extended to support it." ilk="function" line="1057" lineend="1100" name="Region" signature="Region(t, r, b, l)">
              <variable citdl="Number" doc="the top extent" ilk="argument" name="t" />
              <variable citdl="Number" doc="the right extent" ilk="argument" name="r" />
              <variable citdl="Number" doc="the bottom extent" ilk="argument" name="b" />
              <variable citdl="Number" doc="the left extent" ilk="argument" name="l" />
              <variable citdl="Region" name="this" />
            </scope>
            <variable citdl="Number" doc="The region&apos;s top extent" line="1064" name="top" />
            <variable citdl="Number" doc="The region&apos;s right extent" line="1078" name="right" />
            <variable citdl="Number" doc="The region&apos;s bottom extent" line="1085" name="bottom" />
            <variable citdl="Number" doc="The region&apos;s left extent" line="1092" name="left" />
          </scope>
          <variable attributes="__static__" citdl="Object" doc="STATIC: Sort static utility to support Column sorting." line="1174" lineend="1219" name="Sort">
            <scope doc="Comparator function for simple case-insensitive string sorting." ilk="function" line="1190" lineend="1218" name="compare" returns="Number" signature="compare(a, b, desc)">
              <variable citdl="Object" doc="First sort argument." ilk="argument" name="a" />
              <variable citdl="Object" doc="Second sort argument." ilk="argument" name="b" />
              <variable citdl="Boolean" doc="True if sort direction is descending, false if&#xA;sort direction is ascending." ilk="argument" name="desc" />
              <variable citdl="Sort" name="this" />
            </scope>
          </variable>
          <scope classrefs="YAHOO.util.Region" ilk="class" line="1206" lineend="1226" name="Point">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A point is a region that is special in that it represents a single point on&#xA;the grid." ilk="function" line="1206" lineend="1226" name="Point" signature="Point(x, y)">
              <variable citdl="Number" doc="The X position of the point" ilk="argument" name="x" />
              <variable citdl="Number" doc="The Y position of the point" ilk="argument" name="y" />
              <variable citdl="Point" name="this" />
            </scope>
            <variable citdl="Number" doc="The X position of the point, which is also the right, left and index zero (for Dom.getXY symmetry)" line="1218" name="right" />
            <variable citdl="Number" doc="The X position of the point, which is also the right, left and index zero (for Dom.getXY symmetry)" line="1218" name="x" />
            <variable citdl="Number" doc="The X position of the point, which is also the right, left and index zero (for Dom.getXY symmetry)" line="1218" name="left" />
            <variable citdl="Number" doc="The Y position of the point, which is also the top, bottom and index one (for Dom.getXY symmetry)" line="1225" name="bottom" />
            <variable citdl="Number" doc="The Y position of the point, which is also the top, bottom and index one (for Dom.getXY symmetry)" line="1225" name="top" />
            <variable citdl="Number" doc="The Y position of the point, which is also the top, bottom and index one (for Dom.getXY symmetry)" line="1225" name="y" />
          </scope>
          <scope classrefs="Error" ilk="class" line="1240" lineend="1258" name="AssertionError">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: AssertionError is thrown whenever an assertion fails. It provides methods&#xA;to more easily get at error information and also provides a base class&#xA;from which more specific assertion errors can be derived." ilk="function" line="1240" lineend="1258" name="AssertionError" signature="AssertionError(message)">
              <variable citdl="String" doc="The message to display when the error occurs." ilk="argument" name="message" />
              <variable citdl="AssertionError" name="this" />
            </scope>
            <variable citdl="message" doc=":String*/" line="1250" name="message" />
            <variable citdl="String" doc="The name of the error that occurred.&#xA;*//*:String*/" line="1257" name="name" />
            <scope doc="Returns a fully formatted error for an assertion failure. This should&#xA;be overridden by all subclasses to provide specific information.&#xA;*//*:String*/" ilk="function" line="1269" lineend="1271" name="getMessage" returns="String" signature="getMessage()" />
            <scope doc="Returns a string representation of the error.&#xA;*//*:String*/" ilk="function" line="1278" lineend="1280" name="toString" returns="String" signature="toString()" />
            <scope doc="Returns a primitive value version of the error. Same as toString().&#xA;*//*:String*/" ilk="function" line="1287" lineend="1289" name="valueOf" returns="String" signature="valueOf()" />
          </scope>
          <scope classrefs="YAHOO.util.AssertionError" ilk="class" line="1306" lineend="1332" name="ComparisonFailure">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: ComparisonFailure is subclass of AssertionError that is thrown whenever&#xA;a comparison between two values fails. It provides mechanisms to retrieve&#xA;both the expected and actual value." ilk="function" line="1306" lineend="1332" name="ComparisonFailure" signature="ComparisonFailure(message, expected, actual)">
              <variable citdl="String" doc="The message to display when the error occurs." ilk="argument" name="message" />
              <variable citdl="Object" doc="The expected value." ilk="argument" name="expected" />
              <variable citdl="Object" doc="The actual value that caused the assertion to fail." ilk="argument" name="actual" />
              <variable citdl="ComparisonFailure" name="this" />
            </scope>
            <variable citdl="Object" doc="The expected value.&#xA;*//*:Object*/" line="1316" name="expected" />
            <variable citdl="Object" doc="The actual value.&#xA;*//*:Object*/" line="1323" name="actual" />
            <variable citdl="String" doc="The name of the error that occurred.&#xA;*//*:String*/" line="1330" name="name" />
            <scope doc="Returns a fully formatted error for an assertion failure. This message&#xA;provides information about the expected and actual values.&#xA;*//*:String*/" ilk="function" line="1343" lineend="1346" name="getMessage" returns="String" signature="getMessage()" />
          </scope>
          <scope classrefs="YAHOO.util.AssertionError" ilk="class" line="1363" lineend="1382" name="UnexpectedValue">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: UnexpectedValue is subclass of AssertionError that is thrown whenever&#xA;a value was unexpected in its scope. This typically means that a test&#xA;was performed to determine that a value was *not* equal to a certain&#xA;value." ilk="function" line="1363" lineend="1382" name="UnexpectedValue" signature="UnexpectedValue(message, unexpected)">
              <variable citdl="String" doc="The message to display when the error occurs." ilk="argument" name="message" />
              <variable citdl="Object" doc="The unexpected value." ilk="argument" name="unexpected" />
              <variable citdl="UnexpectedValue" name="this" />
            </scope>
            <variable citdl="Object" doc="The unexpected value.&#xA;*//*:Object*/" line="1373" name="unexpected" />
            <variable citdl="String" doc="The name of the error that occurred.&#xA;*//*:String*/" line="1380" name="name" />
            <scope doc="Returns a fully formatted error for an assertion failure. The message&#xA;contains information about the unexpected value that was encountered.&#xA;*//*:String*/" ilk="function" line="1393" lineend="1395" name="getMessage" returns="String" signature="getMessage()" />
          </scope>
          <scope classrefs="YAHOO.util.DDProxy" ilk="class" line="1375" lineend="1386" name="ColumnResizer">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: ColumnResizer subclasses DragDrop to support resizeable Columns." ilk="function" line="1375" lineend="1386" name="ColumnResizer" signature="ColumnResizer(oDataTable, oColumn, elTh, sHandleId, elProxy)">
              <variable citdl="YAHOO.widget.DataTable" doc="DataTable instance." ilk="argument" name="oDataTable" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="HTMLElement" doc="TH element reference." ilk="argument" name="elTh" />
              <variable ilk="argument" name="sHandleId" />
              <variable citdl="HTMLElement" doc="Resizer proxy element." ilk="argument" name="elProxy" />
              <variable citdl="ColumnResizer" name="this" />
            </scope>
            <variable citdl="oDataTable" line="1377" name="datatable" />
            <variable citdl="oColumn" line="1378" name="column" />
            <variable citdl="elTh" line="1379" name="headCell" />
            <variable citdl="elTh.firstChild" line="1380" name="headCellLiner" />
            <scope doc="Resets resizer element." ilk="function" line="1400" lineend="1406" name="resetResizerEl" signature="resetResizerEl()">
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.get().style" line="1401" name="resizerStyle" />
            </scope>
            <scope doc="Handles mouseup events on the Column resizer." ilk="function" line="1420" lineend="1429" name="onMouseUp" signature="onMouseUp(e)">
              <variable citdl="String" doc="The mouseup event" ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="this.headCell.firstChild" line="1423" name="el" />
              <variable attributes="__local__ private" citdl="el.offsetWidth" line="1426" name="newWidth" />
            </scope>
            <scope doc="Handles mousedown events on the Column resizer." ilk="function" line="1437" lineend="1442" name="onMouseDown" signature="onMouseDown(e)">
              <variable citdl="String" doc="The mousedown event" ilk="argument" name="e" />
            </scope>
            <variable citdl="this.headCell.firstChild.offsetWidth" line="1438" name="startWidth" />
            <variable citdl="YAHOO.util.Event.getXY()[0]" line="1439" name="startX" />
            <variable line="1441" name="nLinerPadding" />
            <scope attributes="private" doc="PRIVATE: Custom clickValidator to ensure Column is not in hidden state." ilk="function" line="1451" lineend="1458" name="clickValidator" signature="clickValidator(e)">
              <variable citdl="Event" ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="1453" name="target" />
            </scope>
            <scope doc="Handles drag events on the Column resizer." ilk="function" line="1466" lineend="1473" name="onDrag" signature="onDrag(e)">
              <variable citdl="String" doc="The drag event" ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getXY()[0]" line="1467" name="newX" />
              <variable attributes="__local__ private" citdl="newX" line="1469" name="offsetX" />
              <variable attributes="__local__ private" citdl="this.startWidth" line="1470" name="newWidth" />
            </scope>
          </scope>
          <scope ilk="class" line="1409" lineend="1421" name="ShouldFail">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: ShouldFail is subclass of AssertionError that is thrown whenever&#xA;a test was expected to fail but did not." ilk="function" line="1409" lineend="1421" name="ShouldFail" signature="ShouldFail(message)">
              <variable citdl="String" doc="The message to display when the error occurs." ilk="argument" name="message" />
              <variable citdl="ShouldFail" name="this" />
            </scope>
            <variable citdl="String" doc="The name of the error that occurred.&#xA;*//*:String*/" line="1419" name="name" />
          </scope>
          <variable citdl="YAHOO.util.DragDropMgr" doc="shorter alias, save a few bytes" line="1415" name="DDM" />
          <scope ilk="class" line="1436" lineend="1448" name="ShouldError">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: ShouldError is subclass of AssertionError that is thrown whenever&#xA;a test is expected to throw an error but doesn&apos;t." ilk="function" line="1436" lineend="1448" name="ShouldError" signature="ShouldError(message)">
              <variable citdl="String" doc="The message to display when the error occurs." ilk="argument" name="message" />
              <variable citdl="ShouldError" name="this" />
            </scope>
            <variable citdl="String" doc="The name of the error that occurred.&#xA;*//*:String*/" line="1446" name="name" />
          </scope>
          <scope ilk="class" line="1465" lineend="1491" name="UnexpectedError">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: UnexpectedError is subclass of AssertionError that is thrown whenever&#xA;an error occurs within the course of a test and the test was not expected&#xA;to throw an error." ilk="function" line="1465" lineend="1491" name="UnexpectedError" signature="UnexpectedError(cause)">
              <variable citdl="Error" doc="The unexpected error that caused this error to be&#xA;thrown." ilk="argument" name="cause" />
              <variable citdl="UnexpectedError" name="this" />
            </scope>
            <variable citdl="Error" doc="The unexpected error that occurred.&#xA;*//*:Error*/" line="1475" name="cause" />
            <variable citdl="String" doc="The name of the error that occurred.&#xA;*//*:String*/" line="1482" name="name" />
            <variable citdl="String" doc="Stack information for the error (if provided).&#xA;*//*:String*/" line="1489" name="stack" />
          </scope>
          <scope ilk="class" line="1470" lineend="2665" name="DragDrop">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Defines the interface and base operation of items that that can be&#xA;dragged or can be drop targets.  It was designed to be extended, overriding&#xA;the event handlers for startDrag, onDrag, onDragOver, onDragOut.&#xA;Up to three html elements can be associated with a DragDrop instance:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;linked element: the element that is passed into the constructor.&#xA;This is the element which defines the boundaries for interaction with&#xA;other DragDrop objects.&lt;/li&gt;&#xA;&lt;li&gt;handle element(s): The drag operation only occurs if the element that&#xA;was clicked matches a handle element.  By default this is the linked&#xA;element, but there are times that you will want only a portion of the&#xA;linked element to initiate the drag operation, and the setHandleElId()&#xA;method provides a way to define this.&lt;/li&gt;&#xA;&lt;li&gt;drag element: this represents an the element that would be moved along&#xA;with the cursor during a drag operation.  By default, this is the linked&#xA;element itself as in {@link YAHOO.util.DD}.  setDragElId() lets you define&#xA;a separate element that would be moved, as in {@link YAHOO.util.DDProxy}&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;This class should not be instantiated until the onload event to ensure that&#xA;the associated elements are available.&#xA;The following would define a DragDrop obj that would interact with any&#xA;other DragDrop obj in the &quot;group1&quot; group:&#xA;&lt;pre&gt;&#xA;dd = new YAHOO.util.DragDrop(&quot;div1&quot;, &quot;group1&quot;);&#xA;&lt;/pre&gt;&#xA;Since none of the event handlers have been implemented, nothing would&#xA;actually happen if you were to run the code above.  Normally you would&#xA;override this class or one of the default implementations, but you can&#xA;also override the methods you want on an instance of the class...&#xA;&lt;pre&gt;&#xA;dd.onDragDrop = function(e, id) {&#xA;&amp;nbsp;&amp;nbsp;alert(&quot;dd was dropped on &quot; + id);&#xA;}&#xA;&lt;/pre&gt;" ilk="function" line="1470" lineend="1474" name="DragDrop" signature="DragDrop(id, sGroup, config)">
              <variable citdl="String" doc="of the element that is linked to this instance" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DragDrop:&#xA;padding, isTarget, maintainOffset, primaryButtonOnly," ilk="argument" name="config" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="Object" doc="An Object Literal containing the events that we will be using: mouseDown, b4MouseDown, mouseUp, b4StartDrag, startDrag, b4EndDrag, endDrag, mouseUp, drag, b4Drag, invalidDrop, b4DragOut, dragOut, dragEnter, b4DragOver, dragOver, b4DragDrop, dragDrop&#xA;By setting any of these to false, then event will not be fired." line="1483" lineend="2054" name="events">
              <variable citdl="Boolean" line="2037" name="mouseDown" />
              <variable citdl="Boolean" line="2038" name="b4MouseDown" />
              <variable citdl="Boolean" line="2039" name="mouseUp" />
              <variable citdl="Boolean" line="2040" name="b4StartDrag" />
              <variable citdl="Boolean" line="2041" name="startDrag" />
              <variable citdl="Boolean" line="2042" name="b4EndDrag" />
              <variable citdl="Boolean" line="2043" name="endDrag" />
              <variable citdl="Boolean" line="2044" name="drag" />
              <variable citdl="Boolean" line="2045" name="b4Drag" />
              <variable citdl="Boolean" line="2046" name="invalidDrop" />
              <variable citdl="Boolean" line="2047" name="b4DragOut" />
              <variable citdl="Boolean" line="2048" name="dragOut" />
              <variable citdl="Boolean" line="2049" name="dragEnter" />
              <variable citdl="Boolean" line="2050" name="b4DragOver" />
              <variable citdl="Boolean" line="2051" name="dragOver" />
              <variable citdl="Boolean" line="2052" name="b4DragDrop" />
              <variable citdl="Boolean" line="2053" name="dragDrop" />
            </variable>
            <scope doc="Shortcut for EventProvider.subscribe, see &lt;a href=&quot;YAHOO.util.EventProvider.html#subscribe&quot;&gt;YAHOO.util.EventProvider.subscribe&lt;/a&gt;" ilk="function" line="1488" lineend="1490" name="on" signature="on()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="String" doc="The id of the element associated with this object.  This is what we&#xA;refer to as the &quot;linked element&quot; because the size and position of&#xA;this element is used to determine when the drag and drop objects have&#xA;interacted." line="1499" name="id" />
            <variable citdl="Object" doc="Configuration attributes passed into the constructor" line="1506" name="config" />
            <variable attributes="private" citdl="String" doc="PRIVATE: The id of the element that will be dragged.  By default this is same&#xA;as the linked element , but could be changed to another element. Ex:&#xA;YAHOO.util.DDProxy" line="1516" name="dragElId" />
            <variable attributes="private" citdl="String" doc="PRIVATE: the id of the element that initiates the drag operation.  By default&#xA;this is the linked element, but could be changed to be a child of this&#xA;element.  This lets us do things like only starting the drag when the&#xA;header element within the linked html element is clicked." line="1527" name="handleElId" />
            <variable citdl="String" doc="An associative array of HTML tags that will be ignored if clicked." line="1534" lineend="2020" name="invalidHandleTypes">
              <variable citdl="String" line="2020" name="A" />
            </variable>
            <variable citdl="String" doc="An associative array of ids for elements that will be ignored if clicked" line="1541" lineend="2021" name="invalidHandleIds" />
            <variable citdl="Array" doc="An indexted array of css class names for elements that will be ignored&#xA;if clicked." line="1549" name="invalidHandleClasses" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The linked element&apos;s absolute X position at the time the drag was&#xA;started" line="1558" name="startPageX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The linked element&apos;s absolute X position at the time the drag was&#xA;started" line="1567" name="startPageY" />
            <variable citdl="String" doc="The group defines a logical collection of DragDrop objects that are&#xA;related.  Instances only get events when interacting with other&#xA;DragDrop object in the same group.  This lets us define multiple&#xA;groups using a single DragDrop subclass if we want." line="1577" lineend="1993" name="groups" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Individual drag/drop instances can be locked.  This will prevent&#xA;onmousedown start drag." line="1586" name="locked" />
            <scope doc="Lock this instance" ilk="function" line="1592" lineend="1592" name="lock" signature="lock()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Unlock this instace" ilk="function" line="1598" lineend="1598" name="unlock" signature="unlock()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="Boolean" doc="By default, all instances can be a drop target.  This can be disabled by&#xA;setting isTarget to false." line="1606" name="isTarget" />
            <variable citdl="Array" doc="The padding configured for this drag and drop object for calculating&#xA;the drop zone intersection with this object." line="1614" name="padding" />
            <variable citdl="Boolean" doc="If this flag is true, do not fire drop events. The element is a drag only element (for movement not dropping)" line="1620" name="dragOnly" />
            <variable attributes="private" citdl="Dom.get()" doc="PRIVATE: Cached reference to the linked element" line="1627" name="_domRef" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Internal typeof flag" line="1634" name="__ygDragDrop" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Set to true when horizontal contraints are applied" line="1642" name="constrainX" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Set to true when vertical contraints are applied" line="1650" name="constrainY" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The left constraint" line="1658" name="minX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The right constraint" line="1666" name="maxX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The up constraint" line="1675" name="minY" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The down constraint" line="1683" name="maxY" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The difference between the click position and the source element&apos;s location" line="1691" name="deltaX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The difference between the click position and the source element&apos;s location" line="1699" name="deltaY" />
            <variable citdl="Boolean" doc="Maintain offsets when we resetconstraints.  Set to true when you want&#xA;the position of the element relative to its parent to stay the same&#xA;when the page changes" line="1709" name="maintainOffset" />
            <variable citdl="Array" doc="Array of pixel locations the element will snap to if we specified a&#xA;horizontal graduation/interval.  This array is generated automatically&#xA;when you define a tick interval." line="1718" name="xTicks" />
            <variable citdl="Array" doc="Array of pixel locations the element will snap to if we specified a&#xA;vertical graduation/interval.  This array is generated automatically&#xA;when you define a tick interval." line="1727" name="yTicks" />
            <variable citdl="Boolean" doc="By default the drag and drop instance will only respond to the primary&#xA;button click (left button for a right-handed mouse).  Set to true to&#xA;allow drag and drop to start with any mouse click that is propogated&#xA;by the browser" line="1737" name="primaryButtonOnly" />
            <variable citdl="Boolean" doc="The availabe property is false until the linked dom element is accessible." line="1744" name="available" />
            <variable citdl="Boolean" doc="By default, drags can only be initiated if the mousedown occurs in the&#xA;region the linked element is.  This is done in part to work around a&#xA;bug in some browsers that mis-report the mousedown if the previous&#xA;mouseup happened outside of the window.  This property is set to true&#xA;if outer handles are defined." line="1757" name="hasOuterHandles" />
            <variable citdl="Boolean" doc="Property that is assigned to a drag and drop object when testing to&#xA;see if it is being targeted by another dd object.  This property&#xA;can be used in intersect mode to help determine the focus of&#xA;the mouse interaction.  DDM.getBestMatch uses this property first to&#xA;determine the closest match in INTERSECT mode when multiple targets&#xA;are part of the same interaction." line="1769" name="cursorIsOver" />
            <variable citdl="YAHOO.util.Region" doc="Property that is assigned to a drag and drop object when testing to&#xA;see if it is being targeted by another dd object.  This is a region&#xA;that represents the area the draggable element overlaps this target.&#xA;DDM.getBestMatch uses this property to compare the size of the overlap&#xA;to that of other targets in order to determine the closest match in&#xA;INTERSECT mode when multiple targets are part of the same interaction." line="1781" name="overlap" />
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the startDrag event" ilk="function" line="1788" lineend="1788" name="b4StartDrag" signature="b4StartDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called after a drag/drop object is clicked&#xA;and the drag or mousedown time thresholds have beeen met." ilk="function" line="1797" lineend="1797" name="startDrag" signature="startDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDrag event" ilk="function" line="1804" lineend="1804" name="b4Drag" signature="b4Drag(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called during the onMouseMove event while dragging an&#xA;object." ilk="function" line="1812" lineend="1812" name="onDrag" signature="onDrag(e)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this element fist begins hovering over&#xA;another DragDrop obj" ilk="function" line="1823" lineend="1823" name="onDragEnter" signature="onDragEnter(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this is hovering over.  In INTERSECT mode, an array of one or more&#xA;dragdrop items being hovered over." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDragOver event" ilk="function" line="1830" lineend="1830" name="b4DragOver" signature="b4DragOver(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this element is hovering over another&#xA;DragDrop obj" ilk="function" line="1841" lineend="1841" name="onDragOver" signature="onDragOver(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this is hovering over.  In INTERSECT mode, an array of dd items&#xA;being hovered over." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDragOut event" ilk="function" line="1848" lineend="1848" name="b4DragOut" signature="b4DragOut(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when we are no longer hovering over an element" ilk="function" line="1858" lineend="1858" name="onDragOut" signature="onDragOut(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this was hovering over.  In INTERSECT mode, an array of dd items&#xA;that the mouse is no longer over." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDragDrop event" ilk="function" line="1865" lineend="1865" name="b4DragDrop" signature="b4DragDrop(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this item is dropped on another DragDrop&#xA;obj" ilk="function" line="1876" lineend="1876" name="onDragDrop" signature="onDragDrop(e, id)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this was dropped on.  In INTERSECT mode, an array of dd items this&#xA;was dropped on." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this item is dropped on an area with no&#xA;drop target" ilk="function" line="1884" lineend="1884" name="onInvalidDrop" signature="onInvalidDrop(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the endDrag event" ilk="function" line="1891" lineend="1891" name="b4EndDrag" signature="b4EndDrag(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Fired when we are done dragging the object" ilk="function" line="1898" lineend="1898" name="endDrag" signature="endDrag(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code executed immediately before the onMouseDown event" ilk="function" line="1906" lineend="1906" name="b4MouseDown" signature="b4MouseDown(e)">
              <variable citdl="Event" doc="the mousedown event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Event handler that fires when a drag/drop obj gets a mousedown" ilk="function" line="1913" lineend="1913" name="onMouseDown" signature="onMouseDown(e)">
              <variable citdl="Event" doc="the mousedown event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Event handler that fires when a drag/drop obj gets a mouseup" ilk="function" line="1920" lineend="1920" name="onMouseUp" signature="onMouseUp(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Override the onAvailable method to do what is needed after the initial&#xA;position was determined." ilk="function" line="1927" lineend="1928" name="onAvailable" signature="onAvailable()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Returns a reference to the linked element" ilk="function" line="1935" lineend="1941" name="getEl" returns="HTMLElement" signature="getEl()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Returns a reference to the actual element to drag.  By default this is&#xA;the same as the html element, but it can be assigned to another&#xA;element. An example of this can be found in YAHOO.util.DDProxy" ilk="function" line="1950" lineend="1952" name="getDragEl" returns="HTMLElement" signature="getDragEl()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Sets up the DragDrop object.  Must be called in the constructor of any&#xA;YAHOO.util.DragDrop subclass" ilk="function" line="1962" lineend="1972" name="init" signature="init(id, sGroup, config)">
              <variable doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related items" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="configuration attributes" ilk="argument" name="config" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Initializes Targeting functionality only... the object does not&#xA;get a mousedown handler." ilk="function" line="1982" lineend="2025" name="initTarget" signature="initTarget(id, sGroup, config)">
              <variable doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related items" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="configuration attributes" ilk="argument" name="config" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="YAHOO.util.DDM" doc="create a local reference to the drag and drop manager" line="1990" name="DDM" />
            <scope doc="Applies the configuration parameters that were passed into the constructor.&#xA;This is supposed to happen at each level through the inheritance chain.  So&#xA;a DDProxy implentation will execute apply config on DDProxy, DD, and&#xA;DragDrop in order to get all of the parameters that are available in&#xA;each object." ilk="function" line="2035" lineend="2072" name="applyConfig" signature="applyConfig()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Executed when the linked element is available" ilk="function" line="2079" lineend="2083" name="handleOnAvailable" signature="handleOnAvailable()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Configures the padding for the target zone in px.  Effectively expands&#xA;(or reduces) the virtual object size for targeting calculations.&#xA;Supports css-style shorthand; if only one parameter is passed, all sides&#xA;will have that padding, and if only two are passed, the top and bottom&#xA;will have the first param, the left and right the second." ilk="function" line="2097" lineend="2106" name="setPadding" signature="setPadding(iTop, iRight, iBot, iLeft)">
              <variable citdl="Number" doc="Top pad" ilk="argument" name="iTop" />
              <variable citdl="Number" doc="Right pad" ilk="argument" name="iRight" />
              <variable citdl="Number" doc="Bot pad" ilk="argument" name="iBot" />
              <variable citdl="Number" doc="Left pad" ilk="argument" name="iLeft" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Stores the initial placement of the linked element." ilk="function" line="2115" lineend="2139" name="setInitPosition" signature="setInitPosition(diffX, diffY)">
              <variable citdl="Number" doc="the X offset, default 0" ilk="argument" name="diffX" />
              <variable citdl="Number" doc="the Y offset, default 0" ilk="argument" name="diffY" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="2116" name="el" />
              <variable attributes="__local__ private" citdl="diffX" line="2125" name="dx" />
              <variable attributes="__local__ private" citdl="diffY" line="2126" name="dy" />
              <variable attributes="__local__ private" citdl="Dom.getXY()" line="2128" name="p" />
            </scope>
            <variable citdl="p[0]" line="2130" name="initPageX" />
            <variable citdl="p[1]" line="2131" name="initPageY" />
            <variable citdl="p[0]" line="2133" name="lastPageX" />
            <variable citdl="p[1]" line="2134" name="lastPageY" />
            <scope attributes="private" doc="PRIVATE: Sets the start position of the element.  This is set when the obj&#xA;is initialized, the reset when a drag is started." ilk="function" line="2148" lineend="2155" name="setStartPosition" signature="setStartPosition(pos)">
              <variable doc="current position (from previous lookup)" ilk="argument" name="pos" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="pos" line="2149" name="p" />
            </scope>
            <variable line="2151" name="deltaSetXY" />
            <scope doc="Add this instance to a group of related drag/drop objects.  All&#xA;instances belong to at least one group, and can belong to as many&#xA;groups as needed." ilk="function" line="2164" lineend="2167" name="addToGroup" signature="addToGroup(sGroup)">
              <variable citdl="String" doc="the name of the group" ilk="argument" name="sGroup" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Remove&apos;s this instance from the supplied interaction group" ilk="function" line="2174" lineend="2180" name="removeFromGroup" signature="removeFromGroup(sGroup)">
              <variable citdl="String" doc="The group to drop" ilk="argument" name="sGroup" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Allows you to specify that an element other than the linked element&#xA;will be moved with the cursor during a drag" ilk="function" line="2188" lineend="2190" name="setDragElId" signature="setDragElId(id)">
              <variable citdl="String" doc="the id of the element that will be used to initiate the drag" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Allows you to specify a child of the linked element that should be&#xA;used to initiate the drag operation.  An example of this would be if&#xA;you have a content div with text and links.  Clicking anywhere in the&#xA;content area would normally start the drag operation.  Use this method&#xA;to specify that an element inside of the content div is the element&#xA;that starts the drag operation." ilk="function" line="2203" lineend="2209" name="setHandleElId" signature="setHandleElId(id)">
              <variable citdl="String" doc="the id of the element that will be used to&#xA;initiate the drag." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Allows you to set an element outside of the linked element as a drag&#xA;handle" ilk="function" line="2217" lineend="2226" name="setOuterHandleElId" signature="setOuterHandleElId(id)">
              <variable doc="the id of the element that will be used to initiate the drag" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Remove all drag and drop hooks for this element" ilk="function" line="2232" lineend="2237" name="unreg" signature="unreg()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Returns true if this instance is locked, or the drag drop mgr is locked&#xA;(meaning that all drag/drop is disabled on the page.)" ilk="function" line="2246" lineend="2248" name="isLocked" returns="Boolean" signature="isLocked()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Fired when this object is clicked" ilk="function" line="2257" lineend="2315" name="handleMouseDown" signature="handleMouseDown(e, oDD)">
              <variable citdl="Event" ilk="argument" name="e" />
              <variable citdl="YAHOO.util.DragDrop" doc="the clicked dd object (this dd obj)" ilk="argument" name="oDD" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="e.which" line="2259" name="button" />
              <variable attributes="__local__ private" citdl="this.b4MouseDown()" doc="firing the mousedown events prior to calculating positions" line="2272" name="b4Return" />
              <variable attributes="__local__ private" citdl="this.onMouseDown()" line="2276" name="mDownReturn" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Point" doc="regardless of where on the screen it happened." line="2295" name="pt" />
            </scope>
            <scope doc="Method validates that the clicked element&#xA;was indeed the handle or a valid child of the handle" ilk="function" line="2323" lineend="2328" name="clickValidator" signature="clickValidator(e)">
              <variable citdl="Event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="2324" name="target" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Finds the location the element should be placed if we want to move&#xA;it to where the mouse location less the click offset would place us." ilk="function" line="2339" lineend="2360" name="getTargetCoord" signature="getTargetCoord(iPageX, iPageY)">
              <variable citdl="Number" doc="the X coordinate of the click" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="the Y coordinate of the click" ilk="argument" name="iPageY" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="iPageX" line="2342" name="x" />
              <variable attributes="__local__ private" citdl="iPageY" line="2343" name="y" />
            </scope>
            <scope doc="Allows you to specify a tag name that should not start a drag operation&#xA;when clicked.  This is designed to facilitate embedding links within a&#xA;drag handle that do something other than start the drag." ilk="function" line="2369" lineend="2372" name="addInvalidHandleType" signature="addInvalidHandleType(tagName)">
              <variable citdl="String" doc="the type of element to exclude" ilk="argument" name="tagName" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="tagName.toUpperCase()" line="2370" name="type" />
            </scope>
            <scope doc="Lets you to specify an element id for a child of a drag handle&#xA;that should not initiate a drag" ilk="function" line="2380" lineend="2385" name="addInvalidHandleId" signature="addInvalidHandleId(id)">
              <variable citdl="String" doc="the element id of the element you wish to ignore" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Lets you specify a css class of elements that will not initiate a drag" ilk="function" line="2393" lineend="2395" name="addInvalidHandleClass" signature="addInvalidHandleClass(cssClass)">
              <variable citdl="String" doc="the class of the elements you wish to ignore" ilk="argument" name="cssClass" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Unsets an excluded tag name set by addInvalidHandleType" ilk="function" line="2402" lineend="2406" name="removeInvalidHandleType" signature="removeInvalidHandleType(tagName)">
              <variable citdl="String" doc="the type of element to unexclude" ilk="argument" name="tagName" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="tagName.toUpperCase()" line="2403" name="type" />
            </scope>
            <scope doc="Unsets an invalid handle id" ilk="function" line="2413" lineend="2418" name="removeInvalidHandleId" signature="removeInvalidHandleId(id)">
              <variable citdl="String" doc="the id of the element to re-enable" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Unsets an invalid css class" ilk="function" line="2426" lineend="2432" name="removeInvalidHandleClass" signature="removeInvalidHandleClass(cssClass)">
              <variable citdl="String" doc="the class of the element(s) you wish to&#xA;re-enable" ilk="argument" name="cssClass" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Checks the tag exclusion list to see if this click should be ignored" ilk="function" line="2440" lineend="2460" name="isValidHandleChild" returns="Boolean" signature="isValidHandleChild(node)">
              <variable citdl="HTMLElement" doc="the HTMLElement to evaluate" ilk="argument" name="node" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="2442" name="valid" />
              <variable attributes="__local__ private" citdl="node.nodeName.toUpperCase()" doc="var n = (node.nodeName == &quot;#text&quot;) ? node.parentNode : node;" line="2444" name="nodeName" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Create the array of horizontal tick marks if an interval was specified&#xA;in setXConstraint()." ilk="function" line="2468" lineend="2489" name="setXTicks" signature="setXTicks(iStartX, iTickSize)">
              <variable ilk="argument" name="iStartX" />
              <variable ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="2472" lineend="2472" name="tickMap" />
            </scope>
            <variable citdl="iTickSize" line="2470" name="xTickSize" />
            <scope attributes="private" doc="PRIVATE: Create the array of vertical tick marks if an interval was specified in&#xA;setYConstraint()." ilk="function" line="2497" lineend="2518" name="setYTicks" signature="setYTicks(iStartY, iTickSize)">
              <variable ilk="argument" name="iStartY" />
              <variable ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="2501" lineend="2501" name="tickMap" />
            </scope>
            <variable citdl="iTickSize" line="2499" name="yTickSize" />
            <scope doc="By default, the element can be dragged any place on the screen.  Use&#xA;this method to limit the horizontal travel of the element.  Pass in&#xA;0,0 for the parameters if you want to lock the drag to the y axis." ilk="function" line="2532" lineend="2541" name="setXConstraint" signature="setXConstraint(iLeft, iRight, iTickSize)">
              <variable citdl="Number" doc="the number of pixels the element can move to the left" ilk="argument" name="iLeft" />
              <variable citdl="Number" doc="the number of pixels the element can move to the&#xA;right" ilk="argument" name="iRight" />
              <variable citdl="Number" doc="optional parameter for specifying that the&#xA;element&#xA;should move iTickSize pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="parseInt()" line="2533" name="leftConstraint" />
            <variable citdl="parseInt()" line="2534" name="rightConstraint" />
            <scope doc="Clears any constraints applied to this instance.  Also clears ticks&#xA;since they can&apos;t exist independent of a constraint at this time." ilk="function" line="2548" lineend="2552" name="clearConstraints" signature="clearConstraints()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Clears any tick interval defined for this instance" ilk="function" line="2558" lineend="2563" name="clearTicks" signature="clearTicks()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="By default, the element can be dragged any place on the screen.  Set&#xA;this to limit the vertical travel of the element.  Pass in 0,0 for the&#xA;parameters if you want to lock the drag to the x axis." ilk="function" line="2575" lineend="2585" name="setYConstraint" signature="setYConstraint(iUp, iDown, iTickSize)">
              <variable citdl="Number" doc="the number of pixels the element can move up" ilk="argument" name="iUp" />
              <variable citdl="Number" doc="the number of pixels the element can move down" ilk="argument" name="iDown" />
              <variable citdl="Number" doc="optional parameter for specifying that the&#xA;element should move iTickSize pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="parseInt()" line="2576" name="topConstraint" />
            <variable citdl="parseInt()" line="2577" name="bottomConstraint" />
            <scope doc="resetConstraints must be called if you manually reposition a dd element." ilk="function" line="2591" lineend="2618" name="resetConstraints" signature="resetConstraints()">
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" doc="figure out how much this thing has moved" line="2597" name="dx" />
              <variable attributes="__local__ private" line="2598" name="dy" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Normally the drag element is moved pixel by pixel, but we can specify&#xA;that it move a number of pixels at a time.  This method resolves the&#xA;location when we have it set up like this." ilk="function" line="2630" lineend="2654" name="getTick" returns="Number" signature="getTick(val, tickArray)">
              <variable citdl="Number" doc="where we want to place the object" ilk="argument" name="val" />
              <variable citdl="Array" doc="sorted array of valid points" ilk="argument" name="tickArray" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="i" line="2642" name="next" />
              <variable attributes="__local__ private" citdl="val" line="2644" name="diff1" />
              <variable attributes="__local__ private" citdl="tickArray[next]" line="2645" name="diff2" />
            </scope>
            <scope doc="toString method" ilk="function" line="2661" lineend="2663" name="toString" returns="String" signature="toString()">
              <variable citdl="DragDrop" name="this" />
            </scope>
          </scope>
          <variable attributes="__static__" citdl="Object" doc="STATIC: The ArrayAssert object provides functions to test JavaScript array objects&#xA;for a variety of cases." line="1509" lineend="1831" name="ArrayAssert">
            <scope attributes="__static__" doc="STATIC: Asserts that a value is present in an array. This uses the triple equals&#xA;sign so no type cohersion may occur.&#xA;*//*:Void*/" ilk="function" line="1521" lineend="1536" name="contains" signature="contains(needle, haystack, message)">
              <variable citdl="Object" doc="The value that is expected in the array." ilk="argument" name="needle" />
              <variable citdl="Array" doc="An array of values." ilk="argument" name="haystack" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="ArrayAssert" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" doc=":Boolean*/" line="1523" name="found" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Assert" line="1524" name="Assert" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a set of values are present in an array. This uses the triple equals&#xA;sign so no type cohersion may occur. For this assertion to pass, all values must&#xA;be found.&#xA;*//*:Void*/" ilk="function" line="1549" lineend="1555" name="containsItems" signature="containsItems(needles, haystack, message)">
              <variable citdl="Array" doc="An array of values that are expected in the array." ilk="argument" name="needles" />
              <variable citdl="Array" doc="An array of values to check." ilk="argument" name="haystack" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="ArrayAssert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value matching some condition is present in an array. This uses&#xA;a function to determine a match.&#xA;*//*:Void*/" ilk="function" line="1567" lineend="1587" name="containsMatch" signature="containsMatch(matcher, haystack, message)">
              <variable citdl="Function" doc="A function that returns true if the items matches or false if not." ilk="argument" name="matcher" />
              <variable citdl="Array" doc="An array of values." ilk="argument" name="haystack" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="ArrayAssert" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" doc=":Boolean*/" line="1574" name="found" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Assert" line="1575" name="Assert" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a value is not present in an array. This uses the triple equals&#xA;sign so no type cohersion may occur.&#xA;*//*:Void*/" ilk="function" line="1599" lineend="1614" name="doesNotContain" signature="doesNotContain(needle, haystack, message)">
              <variable citdl="Object" doc="The value that is expected in the array." ilk="argument" name="needle" />
              <variable citdl="Array" doc="An array of values." ilk="argument" name="haystack" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="ArrayAssert" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" doc=":Boolean*/" line="1601" name="found" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Assert" line="1602" name="Assert" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a set of values are not present in an array. This uses the triple equals&#xA;sign so no type cohersion may occur. For this assertion to pass, all values must&#xA;not be found.&#xA;*//*:Void*/" ilk="function" line="1627" lineend="1633" name="doesNotContainItems" signature="doesNotContainItems(needles, haystack, message)">
              <variable citdl="Array" doc="An array of values that are not expected in the array." ilk="argument" name="needles" />
              <variable citdl="Array" doc="An array of values to check." ilk="argument" name="haystack" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="ArrayAssert" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that no values matching a condition are present in an array. This uses&#xA;a function to determine a match.&#xA;*//*:Void*/" ilk="function" line="1645" lineend="1665" name="doesNotContainMatch" signature="doesNotContainMatch(matcher, haystack, message)">
              <variable citdl="Function" doc="A function that returns true if the items matches or false if not." ilk="argument" name="matcher" />
              <variable citdl="Array" doc="An array of values." ilk="argument" name="haystack" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="ArrayAssert" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" doc=":Boolean*/" line="1652" name="found" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Assert" line="1653" name="Assert" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that the given value is contained in an array at the specified index.&#xA;This uses the triple equals sign so no type cohersion will occur.&#xA;*//*:Void*/" ilk="function" line="1677" lineend="1691" name="indexOf" signature="indexOf(needle, haystack, index, message)">
              <variable citdl="Object" doc="The value to look for." ilk="argument" name="needle" />
              <variable citdl="Array" doc="The array to search in." ilk="argument" name="haystack" />
              <variable citdl="Number" doc="The index at which the value should exist." ilk="argument" name="index" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="ArrayAssert" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Assert" line="1687" name="Assert" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that the values in an array are equal, and in the same position,&#xA;as values in another array. This uses the double equals sign&#xA;so type cohersion may occur. Note that the array objects themselves&#xA;need not be the same for this test to pass.&#xA;*//*:Void*/" ilk="function" line="1705" lineend="1716" name="itemsAreEqual" signature="itemsAreEqual(expected, actual, message)">
              <variable citdl="Array" doc="An array of the expected values." ilk="argument" name="expected" />
              <variable citdl="Array" doc="Any array of the actual values." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="ArrayAssert" name="this" />
              <variable attributes="__local__ private" citdl="Math.max()" doc=":int*/" line="1708" name="len" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Assert" line="1709" name="Assert" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that the values in an array are equivalent, and in the same position,&#xA;as values in another array. This uses a function to determine if the values&#xA;are equivalent. Note that the array objects themselves&#xA;need not be the same for this test to pass.&#xA;*//*:Void*/" ilk="function" line="1733" lineend="1749" name="itemsAreEquivalent" signature="itemsAreEquivalent(expected, actual, comparator, message)">
              <variable citdl="Array" doc="An array of the expected values." ilk="argument" name="expected" />
              <variable citdl="Array" doc="Any array of the actual values." ilk="argument" name="actual" />
              <variable citdl="Function" doc="A function that returns true if the values are equivalent&#xA;or false if not." ilk="argument" name="comparator" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="ArrayAssert" name="this" />
              <variable attributes="__local__ private" citdl="Math.max()" doc=":int*/" line="1741" name="len" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that an array is empty.&#xA;*//*:Void*/" ilk="function" line="1758" lineend="1763" name="isEmpty" signature="isEmpty(actual, message)">
              <variable citdl="Array" doc="The array to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="ArrayAssert" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Assert" line="1760" name="Assert" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that an array is not empty.&#xA;*//*:Void*/" ilk="function" line="1772" lineend="1777" name="isNotEmpty" signature="isNotEmpty(actual, message)">
              <variable citdl="Array" doc="The array to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="ArrayAssert" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Assert" line="1774" name="Assert" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that the values in an array are the same, and in the same position,&#xA;as values in another array. This uses the triple equals sign&#xA;so no type cohersion will occur. Note that the array objects themselves&#xA;need not be the same for this test to pass.&#xA;*//*:Void*/" ilk="function" line="1791" lineend="1802" name="itemsAreSame" signature="itemsAreSame(expected, actual, message)">
              <variable citdl="Array" doc="An array of the expected values." ilk="argument" name="expected" />
              <variable citdl="Array" doc="Any array of the actual values." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="ArrayAssert" name="this" />
              <variable attributes="__local__ private" citdl="Math.max()" doc=":int*/" line="1794" name="len" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Assert" line="1795" name="Assert" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that the given value is contained in an array at the specified index,&#xA;starting from the back of the array.&#xA;This uses the triple equals sign so no type cohersion will occur.&#xA;*//*:Void*/" ilk="function" line="1815" lineend="1829" name="lastIndexOf" signature="lastIndexOf(needle, haystack, index, message)">
              <variable citdl="Object" doc="The value to look for." ilk="argument" name="needle" />
              <variable citdl="Array" doc="The array to search in." ilk="argument" name="haystack" />
              <variable citdl="Number" doc="The index at which the value should exist." ilk="argument" name="index" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="ArrayAssert" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Assert" line="1817" name="Assert" />
            </scope>
          </variable>
          <variable citdl="Resize" line="1571" name="Resize" />
          <variable attributes="__static__" citdl="Object" doc="STATIC: The static Number class provides helper functions to deal with data of type&#xA;Number." line="1656" lineend="1745" name="Number">
            <scope doc="Takes a native JavaScript Number and formats to string for display to user." ilk="function" line="1678" lineend="1744" name="format" returns="String" signature="format(nData, oConfig)">
              <variable citdl="Number" doc="Number." ilk="argument" name="nData" />
              <variable citdl="Object" doc="(Optional) Optional configuration values:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;prefix {String}&lt;/dd&gt;&#xA;&lt;dd&gt;String prepended before each number, like a currency designator &quot;$&quot;&lt;/dd&gt;&#xA;&lt;dt&gt;decimalPlaces {Number}&lt;/dd&gt;&#xA;&lt;dd&gt;Number of decimal places to round.&lt;/dd&gt;&#xA;&lt;dt&gt;decimalSeparator {String}&lt;/dd&gt;&#xA;&lt;dd&gt;Decimal separator&lt;/dd&gt;&#xA;&lt;dt&gt;thousandsSeparator {String}&lt;/dd&gt;&#xA;&lt;dd&gt;Thousands separator&lt;/dd&gt;&#xA;&lt;dt&gt;suffix {String}&lt;/dd&gt;&#xA;&lt;dd&gt;String appended after each number, like &quot; items&quot; (note the space)&lt;/dd&gt;&#xA;&lt;/dl&gt;" ilk="argument" name="oConfig" />
              <variable citdl="Number" name="this" />
              <variable attributes="__local__ private" citdl="nData" line="1686" name="sOutput" />
              <variable attributes="__local__ private" line="1687" name="sDecimalSeparator" />
              <variable attributes="__local__ private" citdl="sOutput.lastIndexOf()" line="1688" name="nDotIndex" />
              <variable attributes="__local__ private" citdl="oConfig.decimalPlaces" doc="Round to the correct decimal place" line="1693" name="nDecimalPlaces" />
              <variable attributes="__local__ private" citdl="Math.pow()" line="1694" name="nDecimal" />
              <variable attributes="__local__ private" citdl="oConfig.thousandsSeparator" line="1717" name="sThousandsSeparator" />
              <variable attributes="__local__ private" citdl="sOutput.substring()" line="1720" name="sNewOutput" />
              <variable attributes="__local__ private" citdl="Number" line="1721" name="nCount" />
            </scope>
          </variable>
          <variable attributes="__static__" citdl="Object" doc="STATIC: The static Date class provides helper functions to deal with data of type&#xA;Number." line="1762" lineend="1798" name="Date">
            <scope doc="Takes a native JavaScript Date and formats to string for display to user." ilk="function" line="1776" lineend="1797" name="format" returns="String" signature="format(oDate, oConfig)">
              <variable citdl="Date" doc="Date." ilk="argument" name="oDate" />
              <variable citdl="Object" doc="(Optional) Optional configuration values:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;format {String}&lt;/dd&gt;&#xA;&lt;dd&gt;Currently only the following formats are supported:&#xA;&quot;MM/DD/YYYY&quot;, &quot;YYYY/MM/DD&quot;, or &quot;DD/MM/YYYY&quot;&lt;/dd&gt;&#xA;&lt;/dl&gt;" ilk="argument" name="oConfig" />
              <variable citdl="Date" name="this" />
              <variable attributes="__local__ private" citdl="oConfig.format" line="1780" name="format" />
              <variable attributes="__local__ private" citdl="oDate.getMonth()" line="1781" name="mm" />
              <variable attributes="__local__ private" citdl="oDate.getDate()" line="1782" name="dd" />
              <variable attributes="__local__ private" citdl="oDate.getFullYear()" line="1783" name="yyyy" />
            </scope>
          </variable>
          <variable attributes="__static__" citdl="Object" doc="STATIC: The ObjectAssert object provides functions to test JavaScript objects&#xA;for a variety of cases." line="1848" lineend="1906" name="ObjectAssert">
            <scope attributes="__static__" doc="STATIC: Asserts that all properties in the object exist in another object.&#xA;*//*:Void*/" ilk="function" line="1859" lineend="1875" name="propertiesAreEqual" signature="propertiesAreEqual(expected, actual, message)">
              <variable citdl="Object" doc="An object with the expected properties." ilk="argument" name="expected" />
              <variable citdl="Object" doc="An object with the actual properties." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="ObjectAssert" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Assert" line="1861" name="Assert" />
              <variable attributes="__local__ private" citdl="Array" doc=":Array*/" line="1864" name="properties" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that an object has a property with the given name.&#xA;*//*:Void*/" ilk="function" line="1885" lineend="1890" name="hasProperty" signature="hasProperty(propertyName, object, message)">
              <variable citdl="String" doc="The name of the property to test." ilk="argument" name="propertyName" />
              <variable citdl="Object" doc="The object to search." ilk="argument" name="object" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="ObjectAssert" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Assert" line="1887" name="Assert" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a property with the given name exists on an object instance (not on its prototype).&#xA;*//*:Void*/" ilk="function" line="1900" lineend="1905" name="hasOwnProperty" signature="hasOwnProperty(propertyName, object, message)">
              <variable citdl="String" doc="The name of the property to test." ilk="argument" name="propertyName" />
              <variable citdl="Object" doc="The object to search." ilk="argument" name="object" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="ObjectAssert" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Assert" line="1902" name="Assert" />
            </scope>
          </variable>
          <variable attributes="__static__" citdl="Object" doc="STATIC: The DateAssert object provides functions to test JavaScript Date objects&#xA;for a variety of cases." line="1921" lineend="1961" name="DateAssert">
            <scope attributes="__static__" doc="STATIC: Asserts that a date&apos;s month, day, and year are equal to another date&apos;s." ilk="function" line="1931" lineend="1940" name="datesAreEqual" signature="datesAreEqual(expected, actual, message)">
              <variable citdl="Date" doc="The expected date." ilk="argument" name="expected" />
              <variable citdl="Date" doc="The actual date to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="DateAssert" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Assert" line="1933" name="Assert" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Asserts that a date&apos;s hour, minutes, and seconds are equal to another date&apos;s." ilk="function" line="1950" lineend="1959" name="timesAreEqual" signature="timesAreEqual(expected, actual, message)">
              <variable citdl="Date" doc="The expected date." ilk="argument" name="expected" />
              <variable citdl="Date" doc="The actual date to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
              <variable citdl="DateAssert" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Assert" line="1952" name="Assert" />
            </scope>
          </variable>
          <scope doc="EventProvider is designed to be used with YAHOO.augment to wrap&#xA;CustomEvents in an interface that allows events to be subscribed to&#xA;and fired by name.  This makes it possible for implementing code to&#xA;subscribe to an event that either has not been created yet, or will&#xA;not be created at all." ilk="function" line="1949" lineend="1949" name="EventProvider" signature="EventProvider()">
            <variable citdl="util" name="this" />
          </scope>
          <variable attributes="__static__" citdl="Object" doc="STATIC: The UserAction object provides functions that simulate events occurring in&#xA;the browser. Since these are simulated events, they do not behave exactly&#xA;as regular, user-initiated events do, but can be used to test simple&#xA;user interactions safely." line="1975" lineend="2571" name="UserAction">
            <scope attributes="private __static__" doc="PRIVATE STATIC: Simulates a key event using the given event information to populate&#xA;the generated event object. This method does browser-equalizing&#xA;calculations to account for differences in the DOM and IE event models&#xA;as well as different browser quirks. Note: keydown causes Safari 2.x to&#xA;crash.&#xA;*//*:Void*/" ilk="function" line="2021" lineend="2167" name="simulateKeyEvent" signature="simulateKeyEvent(target, type, bubbles, cancelable, view, ctrlKey, altKey, shiftKey, metaKey, keyCode, charCode)">
              <variable citdl="HTMLElement" doc="The target of the given event." ilk="argument" name="target" />
              <variable citdl="String" doc="The type of event to fire. This can be any one of&#xA;the following: keyup, keydown, and keypress." ilk="argument" name="type" />
              <variable citdl="Boolean" doc="(Optional) Indicates if the event can be&#xA;bubbled up. DOM Level 3 specifies that all key events bubble by&#xA;default. The default is true." ilk="argument" name="bubbles" />
              <variable citdl="Boolean" doc="(Optional) Indicates if the event can be&#xA;canceled using preventDefault(). DOM Level 3 specifies that all&#xA;key events can be cancelled. The default&#xA;is true." ilk="argument" name="cancelable" />
              <variable citdl="Window" doc="(Optional) The view containing the target. This is&#xA;typically the window object. The default is window." ilk="argument" name="view" />
              <variable citdl="Boolean" doc="(Optional) Indicates if one of the CTRL keys&#xA;is pressed while the event is firing. The default is false." ilk="argument" name="ctrlKey" />
              <variable citdl="Boolean" doc="(Optional) Indicates if one of the ALT keys&#xA;is pressed while the event is firing. The default is false." ilk="argument" name="altKey" />
              <variable citdl="Boolean" doc="(Optional) Indicates if one of the SHIFT keys&#xA;is pressed while the event is firing. The default is false." ilk="argument" name="shiftKey" />
              <variable citdl="Boolean" doc="(Optional) Indicates if one of the META keys&#xA;is pressed while the event is firing. The default is false." ilk="argument" name="metaKey" />
              <variable citdl="Number" doc="(Optional) The code for the key that is in use.&#xA;The default is 0." ilk="argument" name="keyCode" />
              <variable citdl="Number" doc="(Optional) The Unicode code for the character&#xA;associated with the key being used. The default is 0." ilk="argument" name="charCode" />
              <variable citdl="UserAction" name="this" />
              <variable attributes="__local__ private" citdl="document.createEvent()" doc=":MouseEvent*/" line="2077" name="customEvent" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Simulates a mouse event using the given event information to populate&#xA;the generated event object. This method does browser-equalizing&#xA;calculations to account for differences in the DOM and IE event models&#xA;as well as different browser quirks.&#xA;*//*:Void*/" ilk="function" line="2227" lineend="2395" name="simulateMouseEvent" signature="simulateMouseEvent(target, type, bubbles, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, relatedTarget)">
              <variable citdl="HTMLElement" doc="The target of the given event." ilk="argument" name="target" />
              <variable citdl="String" doc="The type of event to fire. This can be any one of&#xA;the following: click, dblclick, mousedown, mouseup, mouseout,&#xA;mouseover, and mousemove." ilk="argument" name="type" />
              <variable citdl="Boolean" doc="(Optional) Indicates if the event can be&#xA;bubbled up. DOM Level 2 specifies that all mouse events bubble by&#xA;default. The default is true." ilk="argument" name="bubbles" />
              <variable citdl="Boolean" doc="(Optional) Indicates if the event can be&#xA;canceled using preventDefault(). DOM Level 2 specifies that all&#xA;mouse events except mousemove can be cancelled. The default&#xA;is true for all events except mousemove, for which the default&#xA;is false." ilk="argument" name="cancelable" />
              <variable citdl="Window" doc="(Optional) The view containing the target. This is&#xA;typically the window object. The default is window." ilk="argument" name="view" />
              <variable citdl="Number" doc="(Optional) The number of times the mouse button has&#xA;been used. The default value is 1." ilk="argument" name="detail" />
              <variable citdl="Number" doc="(Optional) The x-coordinate on the screen at which&#xA;point the event occured. The default is 0." ilk="argument" name="screenX" />
              <variable citdl="Number" doc="(Optional) The y-coordinate on the screen at which&#xA;point the event occured. The default is 0." ilk="argument" name="screenY" />
              <variable citdl="Number" doc="(Optional) The x-coordinate on the client at which&#xA;point the event occured. The default is 0." ilk="argument" name="clientX" />
              <variable citdl="Number" doc="(Optional) The y-coordinate on the client at which&#xA;point the event occured. The default is 0." ilk="argument" name="clientY" />
              <variable citdl="Boolean" doc="(Optional) Indicates if one of the CTRL keys&#xA;is pressed while the event is firing. The default is false." ilk="argument" name="ctrlKey" />
              <variable citdl="Boolean" doc="(Optional) Indicates if one of the ALT keys&#xA;is pressed while the event is firing. The default is false." ilk="argument" name="altKey" />
              <variable citdl="Boolean" doc="(Optional) Indicates if one of the SHIFT keys&#xA;is pressed while the event is firing. The default is false." ilk="argument" name="shiftKey" />
              <variable citdl="Boolean" doc="(Optional) Indicates if one of the META keys&#xA;is pressed while the event is firing. The default is false." ilk="argument" name="metaKey" />
              <variable citdl="Number" doc="(Optional) The button being pressed while the event&#xA;is executing. The value should be 0 for the primary mouse button&#xA;(typically the left button), 1 for the terciary mouse button&#xA;(typically the middle button), and 2 for the secondary mouse button&#xA;(typically the right button). The default is 0." ilk="argument" name="button" />
              <variable citdl="HTMLElement" doc="(Optional) For mouseout events,&#xA;this is the element that the mouse has moved to. For mouseover&#xA;events, this is the element that the mouse has moved from. This&#xA;argument is ignored for all other events. The default is null." ilk="argument" name="relatedTarget" />
              <variable citdl="UserAction" name="this" />
              <variable attributes="__local__ private" citdl="document.createEvent()" doc=":MouseEvent*/" line="2296" name="customEvent" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Simulates a mouse event on a particular element.&#xA;*//*:Void*/" ilk="function" line="2413" lineend="2420" name="fireMouseEvent" signature="fireMouseEvent(target, type, options)">
              <variable citdl="HTMLElement" doc="The element to click on." ilk="argument" name="target" />
              <variable citdl="String" doc="The type of event to fire. This can be any one of&#xA;the following: click, dblclick, mousedown, mouseup, mouseout,&#xA;mouseover, and mousemove." ilk="argument" name="type" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
              <variable citdl="UserAction" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Simulates a click on a particular element.&#xA;*//*:Void*/" ilk="function" line="2429" lineend="2431" name="click" signature="click(target, options)">
              <variable citdl="HTMLElement" doc="The element to click on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
              <variable citdl="UserAction" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Simulates a double click on a particular element.&#xA;*//*:Void*/" ilk="function" line="2440" lineend="2442" name="dblclick" signature="dblclick(target, options)">
              <variable citdl="HTMLElement" doc="The element to double click on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
              <variable citdl="UserAction" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Simulates a mousedown on a particular element.&#xA;*//*:Void*/" ilk="function" line="2451" lineend="2453" name="mousedown" signature="mousedown(target, options)">
              <variable citdl="HTMLElement" doc="The element to act on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
              <variable citdl="UserAction" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Simulates a mousemove on a particular element.&#xA;*//*:Void*/" ilk="function" line="2462" lineend="2464" name="mousemove" signature="mousemove(target, options)">
              <variable citdl="HTMLElement" doc="The element to act on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
              <variable citdl="UserAction" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Simulates a mouseout event on a particular element. Use &quot;relatedTarget&quot;&#xA;on the options object to specify where the mouse moved to.&#xA;Quirks: Firefox less than 2.0 doesn&apos;t set relatedTarget properly, so&#xA;toElement is assigned in its place. IE doesn&apos;t allow toElement to be&#xA;be assigned, so relatedTarget is assigned in its place. Both of these&#xA;concessions allow YAHOO.util.Event.getRelatedTarget() to work correctly&#xA;in both browsers.&#xA;*//*:Void*/" ilk="function" line="2479" lineend="2481" name="mouseout" signature="mouseout(target, options)">
              <variable citdl="HTMLElement" doc="The element to act on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
              <variable citdl="UserAction" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Simulates a mouseover event on a particular element. Use &quot;relatedTarget&quot;&#xA;on the options object to specify where the mouse moved from.&#xA;Quirks: Firefox less than 2.0 doesn&apos;t set relatedTarget properly, so&#xA;fromElement is assigned in its place. IE doesn&apos;t allow fromElement to be&#xA;be assigned, so relatedTarget is assigned in its place. Both of these&#xA;concessions allow YAHOO.util.Event.getRelatedTarget() to work correctly&#xA;in both browsers.&#xA;*//*:Void*/" ilk="function" line="2496" lineend="2498" name="mouseover" signature="mouseover(target, options)">
              <variable citdl="HTMLElement" doc="The element to act on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
              <variable citdl="UserAction" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Simulates a mouseup on a particular element.&#xA;*//*:Void*/" ilk="function" line="2507" lineend="2509" name="mouseup" signature="mouseup(target, options)">
              <variable citdl="HTMLElement" doc="The element to act on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
              <variable citdl="UserAction" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Fires an event that normally would be fired by the keyboard (keyup,&#xA;keydown, keypress). Make sure to specify either keyCode or charCode as&#xA;an option.&#xA;*//*:Void*/" ilk="function" line="2529" lineend="2535" name="fireKeyEvent" signature="fireKeyEvent(type, target, options)">
              <variable citdl="String" doc="The type of event (&quot;keyup&quot;, &quot;keydown&quot; or &quot;keypress&quot;)." ilk="argument" name="type" />
              <variable citdl="HTMLElement" doc="The target of the event." ilk="argument" name="target" />
              <variable citdl="Object" doc="Options for the event. Either keyCode or charCode&#xA;are required." ilk="argument" name="options" />
              <variable citdl="UserAction" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Simulates a keydown event on a particular element.&#xA;*//*:Void*/" ilk="function" line="2544" lineend="2546" name="keydown" signature="keydown(target, options)">
              <variable citdl="HTMLElement" doc="The element to act on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
              <variable citdl="UserAction" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Simulates a keypress on a particular element.&#xA;*//*:Void*/" ilk="function" line="2555" lineend="2557" name="keypress" signature="keypress(target, options)">
              <variable citdl="HTMLElement" doc="The element to act on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
              <variable citdl="UserAction" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Simulates a keyup event on a particular element.&#xA;*//*:Void*/" ilk="function" line="2566" lineend="2568" name="keyup" signature="keyup(target, options)">
              <variable citdl="HTMLElement" doc="The element to act on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
              <variable citdl="UserAction" name="this" />
            </scope>
          </variable>
          <variable attributes="private" doc="PRIVATE: Internal callback to handle multiple internal insert() calls&#xA;so that css is inserted prior to js" line="2088" name="_internalCallback" />
          <variable attributes="private" citdl="Boolean" doc="PRIVATE: Use the YAHOO environment listener to detect script load.  This&#xA;is only switched on for Safari 2.x and below." line="2096" name="_useYahooListener" />
          <variable citdl="Function" doc="Callback that will be executed when the loader is finished&#xA;with an insert" line="2104" name="onSuccess" />
          <variable citdl="Function" doc="Callback that will be executed if there is a failure" line="2111" name="onFailure" />
          <variable citdl="Function" doc="Callback that will be executed each time a new module is loaded" line="2118" name="onProgress" />
          <variable doc="Data that is passed to all callbacks" line="2131" name="data" />
          <variable citdl="String" doc="Node reference or id where new nodes should be inserted before" line="2138" name="insertBefore" />
          <variable citdl="String" doc="The charset attribute for inserted nodes" line="2146" name="charset" />
          <variable citdl="String" doc="The name of the variable in a sandbox or script node&#xA;(for external script support in Safari 2.x and earlier)&#xA;to reference when the load is complete.  If this variable&#xA;is not available in the specified scripts, the operation will&#xA;fail." line="2157" name="varName" />
          <variable citdl="String" doc="The base directory." line="2165" name="base" />
          <variable citdl="Array" doc="A list of modules that should not be loaded, even if&#xA;they turn up in the dependency tree" line="2173" name="ignore" />
          <variable citdl="Array" doc="A list of modules that should always be loaded, even&#xA;if they have already been inserted into the page." line="2181" name="force" />
          <scope ilk="class" line="2188" lineend="2251" name="KeyListener">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: KeyListener is a utility that provides an easy interface for listening for&#xA;keydown/keyup events fired against DOM elements." ilk="function" line="2188" lineend="2330" name="KeyListener" signature="KeyListener(attachTo, keyData, handler, event)">
              <variable citdl="String" doc="The element or element ID to which the key&#xA;event should be attached" ilk="argument" name="attachTo" />
              <variable citdl="Object" doc="The object literal representing the key(s)&#xA;to detect. Possible attributes are&#xA;shift(boolean), alt(boolean), ctrl(boolean)&#xA;and keys(either an int or an array of ints&#xA;representing keycodes)." ilk="argument" name="keyData" />
              <variable citdl="Object" doc="An object literal representing the handler." ilk="argument" name="handler" />
              <variable citdl="String" doc="Optional. The event (keydown or keyup) to&#xA;listen for. Defaults automatically to keydown." ilk="argument" name="event" />
              <variable citdl="KeyListener" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.CustomEvent" doc="PRIVATE: The CustomEvent fired internally when a key is pressed" line="2207" name="keyEvent" />
              <scope attributes="__local__ private" doc="PRIVATE: Handles the key event when a key is pressed." ilk="function" line="2248" lineend="2287" name="handleKeyPress" signature="handleKeyPress(e, obj)">
                <variable citdl="DOMEvent" doc="The keypress DOM event" ilk="argument" name="e" />
                <variable citdl="Object" doc="The DOM event scope object" ilk="argument" name="obj" />
                <variable citdl="Object" line="2250" name="keyData">
                  <variable citdl="Boolean" line="2250" name="shift" />
                  <variable citdl="Boolean" line="2253" name="alt" />
                  <variable citdl="Boolean" line="2256" name="ctrl" />
                </variable>
                <variable attributes="__local__ private" citdl="keyData.keys[i]" doc="if we pass this, all modifiers match" line="2264" name="dataItem" />
              </scope>
            </scope>
            <variable citdl="YAHOO.util.CustomEvent" doc="The CustomEvent fired when the KeyListener is enabled via the enable()&#xA;function" line="2218" name="enabledEvent" />
            <variable citdl="YAHOO.util.CustomEvent" doc="The CustomEvent fired when the KeyListener is disabled via the&#xA;disable() function" line="2229" name="disabledEvent" />
            <scope doc="Enables the KeyListener by attaching the DOM event listeners to the&#xA;target DOM element" ilk="function" line="2294" lineend="2305" name="enable" signature="enable()">
              <variable citdl="KeyListener" name="this" />
            </scope>
            <variable citdl="Boolean" doc="Boolean indicating the enabled/disabled state of the Tooltip" line="2304" name="enabled" />
            <scope doc="Disables the KeyListener by removing the DOM event listeners from the&#xA;target DOM element" ilk="function" line="2312" lineend="2318" name="disable" signature="disable()">
              <variable citdl="KeyListener" name="this" />
            </scope>
            <scope doc="Returns a String representation of the object." ilk="function" line="2325" lineend="2328" name="toString" returns="String" signature="toString()">
              <variable citdl="KeyListener" name="this" />
            </scope>
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the DOM &quot;keydown&quot; event." line="2339" name="KEYDOWN" />
            <variable attributes="__static__ constant" citdl="String" doc="STATIC CONSTANT: Constant representing the DOM &quot;keyup&quot; event." line="2348" name="KEYUP" />
            <variable attributes="__static__ constant" citdl="Object" doc="STATIC CONSTANT: keycode constants for a subset of the special keys" line="2356" lineend="2380" name="KEY">
              <variable citdl="Number" line="2357" name="ALT" />
              <variable citdl="Number" line="2358" name="BACK_SPACE" />
              <variable citdl="Number" line="2359" name="CAPS_LOCK" />
              <variable citdl="Number" line="2360" name="CONTROL" />
              <variable citdl="Number" line="2361" name="DELETE" />
              <variable citdl="Number" line="2362" name="DOWN" />
              <variable citdl="Number" line="2363" name="END" />
              <variable citdl="Number" line="2364" name="ENTER" />
              <variable citdl="Number" line="2365" name="ESCAPE" />
              <variable citdl="Number" line="2366" name="HOME" />
              <variable citdl="Number" line="2367" name="LEFT" />
              <variable citdl="Number" line="2368" name="META" />
              <variable citdl="Number" line="2369" name="NUM_LOCK" />
              <variable citdl="Number" line="2370" name="PAGE_DOWN" />
              <variable citdl="Number" line="2371" name="PAGE_UP" />
              <variable citdl="Number" line="2372" name="PAUSE" />
              <variable citdl="Number" line="2373" name="PRINTSCREEN" />
              <variable citdl="Number" line="2374" name="RIGHT" />
              <variable citdl="Number" line="2375" name="SCROLL_LOCK" />
              <variable citdl="Number" line="2376" name="SHIFT" />
              <variable citdl="Number" line="2377" name="SPACE" />
              <variable citdl="Number" line="2378" name="TAB" />
              <variable citdl="Number" line="2379" name="UP" />
            </variable>
          </scope>
          <variable citdl="Boolean" doc="Should we allow rollups" line="2189" name="allowRollup" />
          <variable citdl="String" doc="A filter to apply to result urls.  This filter will modify the default&#xA;path for all modules.  The default path for the YUI library is the&#xA;minified version of the files (e.g., event-min.js).  The filter property&#xA;can be a predefined filter or a custom filter.  The valid predefined&#xA;filters are:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;DEBUG&lt;/dt&gt;&#xA;&lt;dd&gt;Selects the debug versions of the library (e.g., event-debug.js).&#xA;This option will automatically include the logger widget&lt;/dd&gt;&#xA;&lt;dt&gt;RAW&lt;/dt&gt;&#xA;&lt;dd&gt;Selects the non-minified version of the library (e.g., event.js).&#xA;&lt;/dl&gt;&#xA;You can also define a custom filter, which must be an object literal&#xA;containing a search expression and a replace string:&#xA;&lt;pre&gt;&#xA;myFilter: &amp;#123;&#xA;&apos;searchExp&apos;: &quot;-min\\.js&quot;,&#xA;&apos;replaceStr&apos;: &quot;-debug.js&quot;&#xA;&amp;#125;&#xA;&lt;/pre&gt;" line="2215" name="filter" />
          <variable citdl="Boolean" doc="The list of requested modules" line="2222" lineend="9" name="required" />
          <variable citdl="lang.merge()" doc="The library metadata" line="2228" name="moduleInfo" />
          <variable doc="List of rollup files found in the library metadata" line="2234" name="rollups" />
          <variable citdl="Boolean" doc="Whether or not to load optional dependencies for&#xA;the requested modules" line="2243" name="loadOptional" />
          <variable citdl="Array" doc="All of the derived dependencies in sorted order, which&#xA;will be populated when either calculate() or insert()&#xA;is called" line="2252" name="sorted" />
          <variable citdl="Boolean" doc="Set when beginning to compute the dependency tree.&#xA;Composed of what YAHOO reports to be loaded combined&#xA;with what has been loaded by the tool" line="2261" lineend="9" name="loaded" />
          <variable citdl="Boolean" doc="Flag to indicate the dependency tree needs to be recomputed&#xA;if insert is called again." line="2270" name="dirty" />
          <variable citdl="Boolean" doc="List of modules inserted by the utility" line="2277" lineend="9" name="inserted" />
          <variable citdl="lang.merge()" line="2327" name="skin" />
          <scope classrefs="YAHOO.util.DragDrop" ilk="class" line="2773" lineend="2777" name="DD">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A DragDrop implementation where the linked element follows the&#xA;mouse cursor during a drag." ilk="function" line="2773" lineend="2777" name="DD" signature="DD(id, sGroup, config)">
              <variable citdl="String" doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop items" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DD:&#xA;scroll" ilk="argument" name="config" />
              <variable citdl="DD" name="this" />
            </scope>
            <variable citdl="Boolean" doc="When set to true, the utility automatically tries to scroll the browser&#xA;window when a drag and drop element is dragged near the viewport boundary.&#xA;Defaults to true." line="2788" name="scroll" />
            <scope doc="Sets the pointer offset to the distance between the linked element&apos;s top&#xA;left corner and the location the element was clicked" ilk="function" line="2797" lineend="2801" name="autoOffset" signature="autoOffset(iPageX, iPageY)">
              <variable citdl="Number" doc="the X coordinate of the click" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="the Y coordinate of the click" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="iPageX" line="2798" name="x" />
              <variable attributes="__local__ private" citdl="iPageY" line="2799" name="y" />
            </scope>
            <scope doc="Sets the pointer offset.  You can call this directly to force the&#xA;offset to be in a particular location (e.g., pass in 0,0 to set it&#xA;to the center of the object, as done in YAHOO.widget.Slider)" ilk="function" line="2811" lineend="2814" name="setDelta" signature="setDelta(iDeltaX, iDeltaY)">
              <variable citdl="Number" doc="the distance from the left" ilk="argument" name="iDeltaX" />
              <variable citdl="Number" doc="the distance from the top" ilk="argument" name="iDeltaY" />
            </scope>
            <variable citdl="iDeltaX" line="2812" name="deltaX" />
            <variable citdl="iDeltaY" line="2813" name="deltaY" />
            <scope doc="Sets the drag element to the location of the mousedown or click event,&#xA;maintaining the cursor location relative to the location on the element&#xA;that was clicked.  Override this if you want to place the element in a&#xA;location other than where the cursor is." ilk="function" line="2825" lineend="2831" name="setDragElPos" signature="setDragElPos(iPageX, iPageY)">
              <variable citdl="Number" doc="the X coordinate of the mousedown or drag event" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="the Y coordinate of the mousedown or drag event" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="this.getDragEl()" doc="the element has css positioning" line="2829" name="el" />
            </scope>
            <scope doc="Sets the element to the location of the mousedown or click event,&#xA;maintaining the cursor location relative to the location on the element&#xA;that was clicked.  Override this if you want to place the element in a&#xA;location other than where the cursor is." ilk="function" line="2843" lineend="2863" name="alignElWithMouse" signature="alignElWithMouse(el, iPageX, iPageY)">
              <variable citdl="HTMLElement" doc="the element to move" ilk="argument" name="el" />
              <variable citdl="Number" doc="the X coordinate of the mousedown or drag event" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="the Y coordinate of the mousedown or drag event" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="this.getTargetCoord()" line="2844" name="oCoord" />
              <variable attributes="__local__ private" citdl="Array" line="2847" name="aCoord" />
              <variable attributes="__local__ private" citdl="parseInt()" line="2849" name="newLeft" />
              <variable attributes="__local__ private" citdl="parseInt()" line="2850" name="newTop" />
              <variable attributes="__local__ private" citdl="this" line="2859" name="self" />
            </scope>
            <variable citdl="Array" line="2852" name="deltaSetXY" />
            <scope doc="Saves the most recent position so that we can reset the constraints and&#xA;tick marks on-demand.  We need to know this so that we can calculate the&#xA;number of pixels the element is offset from its original position." ilk="function" line="2875" lineend="2884" name="cachePosition" signature="cachePosition(iPageX, iPageY)">
              <variable doc="the current x position (optional, this just makes it so we&#xA;don&apos;t have to look it up again)" ilk="argument" name="iPageX" />
              <variable doc="the current y position (optional, this just makes it so we&#xA;don&apos;t have to look it up again)" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getXY()" line="2880" name="aCoord" />
            </scope>
            <variable citdl="iPageX" line="2877" name="lastPageX" />
            <variable citdl="iPageY" line="2878" name="lastPageY" />
            <scope attributes="private" doc="PRIVATE: Auto-scroll the window if the dragged object has been moved beyond the&#xA;visible window boundary." ilk="function" line="2896" lineend="2959" name="autoScroll" signature="autoScroll(x, y, h, w)">
              <variable citdl="Number" doc="the drag element&apos;s x position" ilk="argument" name="x" />
              <variable citdl="Number" doc="the drag element&apos;s y position" ilk="argument" name="y" />
              <variable citdl="Number" doc="the height of the drag element" ilk="argument" name="h" />
              <variable citdl="Number" doc="the width of the drag element" ilk="argument" name="w" />
              <variable attributes="__local__ private" citdl="this.DDM.getClientHeight()" doc="The client height" line="2900" name="clientH" />
              <variable attributes="__local__ private" citdl="this.DDM.getClientWidth()" doc="The client width" line="2903" name="clientW" />
              <variable attributes="__local__ private" citdl="this.DDM.getScrollTop()" doc="The amt scrolled down" line="2906" name="st" />
              <variable attributes="__local__ private" citdl="this.DDM.getScrollLeft()" doc="The amt scrolled right" line="2909" name="sl" />
              <variable attributes="__local__ private" citdl="h" doc="Location of the bottom of the element" line="2912" name="bot" />
              <variable attributes="__local__ private" citdl="w" doc="Location of the right of the element" line="2915" name="right" />
              <variable attributes="__local__ private" doc="element drag constraints" line="2920" name="toBot" />
              <variable attributes="__local__ private" doc="The distance from the cursor to the right of the visible&#xA;area" line="2923" name="toRight" />
              <variable attributes="__local__ private" citdl="Number" doc="var thresh = (document.all) ? 100 : 40;" line="2928" name="thresh" />
              <variable attributes="__local__ private" doc="value to be higher." line="2933" name="scrAmt" />
            </scope>
            <scope doc="* Sets up config options specific to this class." ilk="function" line="2966" lineend="2969" name="applyConfig" signature="applyConfig()" />
            <scope doc="* Event that fires prior to the onMouseDown event." ilk="function" line="2975" lineend="2980" name="b4MouseDown" signature="b4MouseDown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="* Event that fires prior to the onDrag event." ilk="function" line="2986" lineend="2989" name="b4Drag" signature="b4Drag(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="2991" lineend="2993" name="toString" signature="toString()" />
          </scope>
          <scope classrefs="YAHOO.util.DD" ilk="class" line="3134" lineend="3139" name="DDProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A DragDrop implementation that inserts an empty, bordered div into&#xA;the document that follows the cursor during drag operations.  At the time of&#xA;the click, the frame div is resized to the dimensions of the linked html&#xA;element, and moved to the exact location of the linked element.&#xA;&#xA;References to the &quot;frame&quot; element refer to the single proxy element that&#xA;was created to be dragged in place of all DDProxy elements on the&#xA;page." ilk="function" line="3134" lineend="3139" name="DDProxy" signature="DDProxy(id, sGroup, config)">
              <variable citdl="String" doc="the id of the linked html element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DDProxy in addition to those in DragDrop:&#xA;resizeFrame, centerFrame, dragElId" ilk="argument" name="config" />
              <variable citdl="DDProxy" name="this" />
            </scope>
            <variable attributes="__static__" citdl="String" doc="STATIC: The default drag frame div id" line="3147" name="dragElId" />
            <variable citdl="Boolean" doc="By default we resize the drag frame to be the same size as the element&#xA;we want to drag (this is to get the frame effect).  We can turn it off&#xA;if we want a different behavior." line="3158" name="resizeFrame" />
            <variable citdl="Boolean" doc="By default the frame is positioned exactly where the drag element is, so&#xA;we use the cursor offset provided by YAHOO.util.DD.  Another option that works only if&#xA;you do not have constraints on the obj is to have the drag frame centered&#xA;around the cursor.  Set centerFrame to true for this effect." line="3168" name="centerFrame" />
            <scope doc="Creates the proxy element if it does not yet exist" ilk="function" line="3174" lineend="3236" name="createFrame" signature="createFrame()">
              <variable attributes="__local__ private" citdl="document.body" line="3175" name="body" />
              <variable attributes="__local__ private" citdl="this" line="3175" name="self" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="3182" name="Dom" />
              <variable attributes="__local__ private" citdl="this.getDragEl()" line="3182" name="div" />
              <variable attributes="__local__ private" citdl="div.style" line="3187" name="s" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="3197" name="_data" />
              <variable attributes="__local__ private" citdl="document.createElement()" doc="Only needed for Internet Explorer" line="3216" name="ifr" />
            </scope>
            <scope doc="Initialization for the drag frame element.  Must be called in the&#xA;constructor of all subclasses" ilk="function" line="3243" lineend="3245" name="initFrame" signature="initFrame()" />
            <scope ilk="function" line="3247" lineend="3253" name="applyConfig" signature="applyConfig()" />
            <scope attributes="private" doc="PRIVATE: Resizes the drag frame to the dimensions of the clicked object, positions&#xA;it over the object, and finally displays it" ilk="function" line="3263" lineend="3278" name="showFrame" signature="showFrame(iPageX, iPageY)">
              <variable citdl="Number" doc="X click position" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="Y click position" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="3264" name="el" />
              <variable attributes="__local__ private" citdl="this.getDragEl()" line="3265" name="dragEl" />
              <variable attributes="__local__ private" citdl="dragEl.style" line="3266" name="s" />
            </scope>
            <scope attributes="private" doc="PRIVATE: The proxy is automatically resized to the dimensions of the linked&#xA;element when a drag is initiated, unless resizeFrame is set to false" ilk="function" line="3286" lineend="3310" name="_resizeProxy" signature="_resizeProxy()">
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="3288" name="DOM" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="3289" name="el" />
              <variable attributes="__local__ private" citdl="this.getDragEl()" line="3290" name="dragEl" />
              <variable attributes="__local__ private" citdl="parseInt()" line="3292" name="bt" />
              <variable attributes="__local__ private" citdl="parseInt()" line="3293" name="br" />
              <variable attributes="__local__ private" citdl="parseInt()" line="3294" name="bb" />
              <variable attributes="__local__ private" citdl="parseInt()" line="3295" name="bl" />
              <variable attributes="__local__ private" citdl="Math.max()" line="3303" name="newWidth" />
              <variable attributes="__local__ private" citdl="Math.max()" line="3304" name="newHeight" />
            </scope>
            <scope doc="overrides YAHOO.util.DragDrop" ilk="function" line="3313" lineend="3322" name="b4MouseDown" signature="b4MouseDown(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getPageX()" line="3315" name="x" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getPageY()" line="3316" name="y" />
            </scope>
            <scope doc="overrides YAHOO.util.DragDrop" ilk="function" line="3325" lineend="3328" name="b4StartDrag" signature="b4StartDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
            <scope doc="overrides YAHOO.util.DragDrop" ilk="function" line="3331" lineend="3333" name="b4EndDrag" signature="b4EndDrag(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="This is so that the default behavior mirrors that of&#xA;YAHOO.util.DD." ilk="function" line="3338" lineend="3356" name="endDrag" signature="endDrag(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="3339" name="DOM" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="3340" name="lel" />
              <variable attributes="__local__ private" citdl="this.getDragEl()" line="3341" name="del" />
            </scope>
            <scope ilk="function" line="3358" lineend="3360" name="toString" signature="toString()" />
          </scope>
          <scope classrefs="YAHOO.util.DragDrop" ilk="class" line="3470" lineend="3474" name="DDTarget">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A DragDrop implementation that does not move, but can be a drop&#xA;target.  You would get the same result by simply omitting implementation&#xA;for the event callbacks, but this way we reduce the processing cost of the&#xA;event listener and the callbacks." ilk="function" line="3470" lineend="3474" name="DDTarget" signature="DDTarget(id, sGroup, config)">
              <variable citdl="String" doc="the id of the element that is a drop target" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DDTarget in addition to those in&#xA;DragDrop:&#xA;none" ilk="argument" name="config" />
              <variable citdl="DDTarget" name="this" />
            </scope>
            <scope ilk="function" line="3478" lineend="3480" name="toString" signature="toString()" />
          </scope>
        </variable>
        <variable attributes="__static__" citdl="L.augmentProto" doc="STATIC: An alias for &lt;a href=&quot;YAHOO.lang.html#augment&quot;&gt;YAHOO.lang.augment&lt;/a&gt;" line="971" name="augment" />
        <variable attributes="__static__" citdl="L.extend" doc="STATIC: An alias for &lt;a href=&quot;YAHOO.lang.html#extend&quot;&gt;YAHOO.lang.extend&lt;/a&gt;" line="983" name="extend" />
      </variable>
      <scope attributes="__local__ private" doc="&lt;p&gt;The Menu family of components features a collection of&#xA;controls that make it easy to add menus to your website or web application.&#xA;With the Menu Controls you can create website fly-out menus, customized&#xA;context menus, or application-style menu bars with just a small amount of&#xA;scripting.&lt;/p&gt;&lt;p&gt;The Menu family of controls features:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Keyboard and mouse navigation.&lt;/li&gt;&#xA;&lt;li&gt;A rich event model that provides access to all of a menu&apos;s&#xA;interesting moments.&lt;/li&gt;&#xA;&lt;li&gt;Support for&#xA;&lt;a href=&quot;http://en.wikipedia.org/wiki/Progressive_Enhancement&quot;&gt;Progressive&#xA;Enhancement&lt;/a&gt;; Menus can be created from simple,&#xA;semantic markup on the page or purely through JavaScript.&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="function" line="29" lineend="823" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="32" name="Event" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="32" name="Dom" />
      </scope>
      <scope attributes="__local__ private" doc="&lt;p&gt;The Button Control enables the creation of rich, graphical&#xA;buttons that function like traditional HTML form buttons.  &lt;em&gt;Unlike&lt;/em&gt;&#xA;tradition HTML form buttons, buttons created with the Button Control can have&#xA;a label that is different from its value.  With the inclusion of the optional&#xA;&lt;a href=&quot;module_menu.html&quot;&gt;Menu Control&lt;/a&gt;, the Button Control can also be&#xA;used to create menu buttons and split buttons, controls that are not&#xA;available natively in HTML.  The Button Control can also be thought of as a&#xA;way to create more visually engaging implementations of the browser&apos;s&#xA;default radio-button and check-box controls.&lt;/p&gt;&#xA;&lt;p&gt;The Button Control supports the following types:&lt;/p&gt;&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;push&lt;/dt&gt;&#xA;&lt;dd&gt;Basic push button that can execute a user-specified command when&#xA;pressed.&lt;/dd&gt;&#xA;&lt;dt&gt;link&lt;/dt&gt;&#xA;&lt;dd&gt;Navigates to a specified url when pressed.&lt;/dd&gt;&#xA;&lt;dt&gt;submit&lt;/dt&gt;&#xA;&lt;dd&gt;Submits the parent form when pressed.&lt;/dd&gt;&#xA;&lt;dt&gt;reset&lt;/dt&gt;&#xA;&lt;dd&gt;Resets the parent form when pressed.&lt;/dd&gt;&#xA;&lt;dt&gt;checkbox&lt;/dt&gt;&#xA;&lt;dd&gt;Maintains a &quot;checked&quot; state that can be toggled on and off.&lt;/dd&gt;&#xA;&lt;dt&gt;radio&lt;/dt&gt;&#xA;&lt;dd&gt;Maintains a &quot;checked&quot; state that can be toggled on and off.  Use with&#xA;the ButtonGroup class to create a set of controls that are mutually&#xA;exclusive; checking one button in the set will uncheck all others in&#xA;the group.&lt;/dd&gt;&#xA;&lt;dt&gt;menu&lt;/dt&gt;&#xA;&lt;dd&gt;When pressed will show/hide a menu.&lt;/dd&gt;&#xA;&lt;dt&gt;split&lt;/dt&gt;&#xA;&lt;dd&gt;Can execute a user-specified command or display a menu when pressed.&lt;/dd&gt;&#xA;&lt;/dl&gt;" ilk="function" line="48" lineend="3859" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private __ctor__" citdl="YAHOO.lang" doc="CONSTRUCTOR: The Button class creates a rich, graphical button.&#xA;*/// Shorthard for utilities&#xA;// Private member variables" line="90" name="Lang" />
        <variable attributes="__local__ private __ctor__" citdl="YAHOO.widget.Overlay" doc="CONSTRUCTOR: The Button class creates a rich, graphical button.&#xA;*/// Shorthard for utilities&#xA;// Private member variables" line="90" name="Overlay" />
        <variable attributes="__local__ private __ctor__" citdl="Object" doc="CONSTRUCTOR: The Button class creates a rich, graphical button.&#xA;*/// Shorthard for utilities&#xA;// Private member variables" line="90" lineend="90" name="m_oButtons" />
        <variable attributes="__local__ private __ctor__" citdl="YAHOO.widget.Menu" doc="CONSTRUCTOR: The Button class creates a rich, graphical button.&#xA;*/// Shorthard for utilities&#xA;// Private member variables" line="90" name="Menu" />
        <variable attributes="__local__ private __ctor__" citdl="YAHOO.util.Dom" doc="CONSTRUCTOR: The Button class creates a rich, graphical button.&#xA;*/// Shorthard for utilities&#xA;// Private member variables" line="90" name="Dom" />
        <variable attributes="__local__ private __ctor__" citdl="YAHOO.env.ua" doc="CONSTRUCTOR: The Button class creates a rich, graphical button.&#xA;*/// Shorthard for utilities&#xA;// Private member variables" line="90" name="UA" />
        <variable attributes="__local__ private __ctor__" citdl="YAHOO.util.Event" doc="CONSTRUCTOR: The Button class creates a rich, graphical button.&#xA;*/// Shorthard for utilities&#xA;// Private member variables" line="90" name="Event" />
        <variable attributes="__local__ private" doc="Collection of all Button instances" line="91" name="m_oOverlayManager" />
        <variable attributes="__local__ private" doc="YAHOO.widget.OverlayManager instance" line="92" name="m_oSubmitTrigger" />
        <variable attributes="__local__ private" doc="The button that submitted the form" line="93" name="m_oFocusedButton" />
        <scope attributes="__local__ private" doc="PRIVATE: Creates an &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; element of the&#xA;specified type." ilk="function" line="117" lineend="166" name="createInputElement" returns="HTMLInputElement" signature="createInputElement(p_sType, p_sName, p_sValue, p_bChecked)">
          <variable citdl="String" doc="String specifying the type of&#xA;&lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; element to create." ilk="argument" name="p_sType" />
          <variable citdl="String" doc="String specifying the name of&#xA;&lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; element to create." ilk="argument" name="p_sName" />
          <variable citdl="String" doc="String specifying the value of&#xA;&lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; element to create." ilk="argument" name="p_sValue" />
          <variable citdl="String" doc="Boolean specifying if the&#xA;&lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; element is to be checked." ilk="argument" name="p_bChecked" />
          <variable attributes="__local__ private" citdl="String" line="120" name="sInput" />
          <variable attributes="__local__ private" citdl="document.createElement()" line="120" name="oInput" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: Gets the values for all the attributes of the source element&#xA;(either &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt;) that&#xA;map to Button configuration attributes and sets them into a collection&#xA;that is passed to the Button constructor." ilk="class" line="185" lineend="333" name="setAttributesFromSrcElement">
          <scope attributes="__local__ private __ctor__" doc="PRIVATE: Gets the values for all the attributes of the source element&#xA;(either &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt;) that&#xA;map to Button configuration attributes and sets them into a collection&#xA;that is passed to the Button constructor." ilk="function" line="185" lineend="333" name="setAttributesFromSrcElement" signature="setAttributesFromSrcElement(p_oElement, p_oAttributes)">
            <variable ilk="argument" name="p_oElement" />
            <variable citdl="Object" doc="Object reference for the collection of&#xA;configuration attributes used to create the button." ilk="argument" name="p_oAttributes" />
            <variable citdl="setAttributesFromSrcElement" name="this" />
            <variable attributes="__local__ private" citdl="this" line="191" name="me" />
            <variable attributes="__local__ private" citdl="sSrcElementNodeName" line="191" name="sText" />
            <variable attributes="__local__ private" citdl="p_oElement.getAttributeNode()" line="191" name="oAttribute" />
            <variable attributes="__local__ private" citdl="p_oElement.parentNode.parentNode" line="191" name="oRootNode" />
            <variable attributes="__local__ private" citdl="p_oElement.nodeName.toUpperCase()" line="191" name="sSrcElementNodeName" />
            <scope attributes="__local__ private" doc="PRIVATE: Gets the value of the specified DOM attribute and sets it&#xA;into the collection of configuration attributes used to configure&#xA;the button." ilk="function" line="203" lineend="226" name="setAttributeFromDOMAttribute" signature="setAttributeFromDOMAttribute(p_sAttribute)">
              <variable citdl="String" doc="String representing the name of the&#xA;attribute to retrieve from the DOM element." ilk="argument" name="p_sAttribute" />
            </scope>
            <scope attributes="__local__ private" doc="PRIVATE: Gets the value of the attributes from the form element&#xA;and sets them into the collection of configuration attributes used to&#xA;configure the button." ilk="function" line="236" lineend="256" name="setFormElementProperties" signature="setFormElementProperties()">
              <variable citdl="Object" line="242" name="p_oAttributes">
                <variable citdl="String" line="242" name="type" />
                <variable citdl="p_oElement.disabled" line="248" name="disabled" />
              </variable>
            </scope>
          </scope>
          <variable citdl="p_oElement.innerHTML" line="322" name="value" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: Initializes the set of configuration attributes that are&#xA;used to instantiate the button." ilk="function" line="344" lineend="392" name="initConfig" signature="initConfig(p_oConfig)">
          <variable ilk="argument" name="p_oConfig" />
          <variable attributes="__local__ private" citdl="this" line="349" name="me" />
          <variable attributes="__local__ private" citdl="oAttributes.srcelement" line="349" name="oSrcElement" />
          <variable attributes="__local__ private" citdl="oSrcElement.nodeName.toUpperCase()" line="349" name="sSrcElementNodeName" />
          <variable attributes="__local__ private" citdl="p_oConfig.attributes" line="349" name="oAttributes" />
        </scope>
      </scope>
      <variable citdl="Array" doc="Keeps the version info for all YUI modules that have reported themselves" line="186" name="modules" />
      <variable citdl="Array" doc="List of functions that should be executed every time a YUI module&#xA;reports itself." line="194" name="listeners" />
      <scope attributes="__local__ private" ilk="function" line="198" lineend="458" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.util.Lang" line="199" name="Lang" />
      </scope>
      <scope attributes="__local__ private" ilk="function" line="205" lineend="1734" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="Number" line="207" name="_pickercount" />
        <scope attributes="__local__ private" doc="PRIVATE: The colorpicker module provides a widget for selecting colors" ilk="function" line="221" lineend="229" name="_createHostElement" returns="el" signature="_createHostElement()">
          <variable attributes="__local__ private" citdl="document.createElement()" line="222" name="el" />
        </scope>
        <variable attributes="__local__ private" citdl="YAHOO.lang" line="266" name="lang" />
        <variable attributes="__local__ private" citdl="lang.substitute" line="266" name="sub" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="266" name="Dom" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Color" line="266" name="Color" />
        <variable attributes="__local__ private" citdl="YAHOO.widget.ColorPicker.prototype" line="266" name="proto">
          <variable attributes="constant" citdl="Object" doc="CONSTANT: The element ids used by this control" line="276" lineend="470" name="ID">
            <variable attributes="constant" citdl="String" doc="CONSTANT: The id for the &quot;red&quot; form field" line="285" name="R" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: The id for the &quot;red&quot; hex pair output" line="294" name="R_HEX" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: The id for the &quot;green&quot; form field" line="303" name="G" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: The id for the &quot;green&quot; hex pair output" line="312" name="G_HEX" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: The id for the &quot;blue&quot; form field" line="322" name="B" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: The id for the &quot;blue&quot; hex pair output" line="331" name="B_HEX" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: The id for the &quot;hue&quot; form field" line="340" name="H" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: The id for the &quot;saturation&quot; form field" line="349" name="S" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: The id for the &quot;value&quot; form field" line="358" name="V" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: The id for the picker region slider" line="367" name="PICKER_BG" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: The id for the picker region thumb" line="376" name="PICKER_THUMB" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: The id for the hue slider" line="385" name="HUE_BG" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: The id for the hue thumb" line="394" name="HUE_THUMB" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: The id for the hex value form field" line="403" name="HEX" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: The id for the color swatch" line="412" name="SWATCH" />
            <variable attributes="constant" citdl="String" doc="CONSTANT: The id for the websafe color swatch" line="421" name="WEBSAFE_SWATCH" />
            <variable attributes="constant" citdl="b" doc="CONSTANT: The id for the control details" line="429" name="CONTROLS" />
            <variable attributes="constant" citdl="b" doc="CONSTANT: The id for the rgb controls" line="437" name="RGB_CONTROLS" />
            <variable attributes="constant" citdl="b" doc="CONSTANT: The id for the hsv controls" line="445" name="HSV_CONTROLS" />
            <variable attributes="constant" citdl="b" doc="CONSTANT: The id for the hsv controls" line="453" name="HEX_CONTROLS" />
            <variable attributes="constant" citdl="b" doc="CONSTANT: The id for the hex summary" line="461" name="HEX_SUMMARY" />
            <variable attributes="constant" citdl="b" doc="CONSTANT: The id for the controls section header" line="469" name="CONTROLS_LABEL" />
          </variable>
          <variable attributes="constant" citdl="Object" doc="CONSTANT: Constants for any script-generated messages.  The values here&#xA;are the default messages.  They can be updated by providing&#xA;the complete list to the constructor for the &quot;txt&quot; attribute." line="479" lineend="494" name="TXT">
            <variable citdl="String" line="480" name="ILLEGAL_HEX" />
            <variable citdl="String" line="481" name="SHOW_CONTROLS" />
            <variable citdl="String" line="482" name="HIDE_CONTROLS" />
            <variable citdl="String" line="483" name="CURRENT_COLOR" />
            <variable citdl="String" line="484" name="CLOSEST_WEBSAFE" />
            <variable citdl="String" line="485" name="R" />
            <variable citdl="String" line="486" name="G" />
            <variable citdl="String" line="487" name="B" />
            <variable citdl="String" line="488" name="H" />
            <variable citdl="String" line="489" name="S" />
            <variable citdl="String" line="490" name="V" />
            <variable citdl="String" line="491" name="HEX" />
            <variable citdl="String" line="492" name="DEG" />
            <variable citdl="String" line="493" name="PERCENT" />
          </variable>
          <variable attributes="constant" citdl="Object" doc="CONSTANT: Constants for the default image locations for img tags that are&#xA;generated by the control.  They can be modified by passing the&#xA;complete list to the contructor for the &quot;images&quot; attribute" line="503" lineend="506" name="IMAGE">
            <variable citdl="String" line="504" name="PICKER_THUMB" />
            <variable citdl="String" line="505" name="HUE_THUMB" />
          </variable>
          <variable attributes="constant" citdl="Object" doc="CONSTANT: Constants for the control&apos;s default default values" line="525" lineend="527" name="DEFAULT">
            <variable citdl="Number" line="526" name="PICKER_SIZE" />
          </variable>
          <variable attributes="constant" citdl="Object" doc="CONSTANT: Constants for the control&apos;s configuration attributes" line="534" lineend="559" name="OPT">
            <variable citdl="String" line="535" name="HUE" />
            <variable citdl="String" line="536" name="SATURATION" />
            <variable citdl="String" line="537" name="VALUE" />
            <variable citdl="String" line="538" name="RED" />
            <variable citdl="String" line="539" name="GREEN" />
            <variable citdl="String" line="540" name="BLUE" />
            <variable citdl="String" line="541" name="HSV" />
            <variable citdl="String" line="542" name="RGB" />
            <variable citdl="String" line="543" name="WEBSAFE" />
            <variable citdl="String" line="544" name="HEX" />
            <variable citdl="String" line="545" name="PICKER_SIZE" />
            <variable citdl="String" line="546" name="SHOW_CONTROLS" />
            <variable citdl="String" line="547" name="SHOW_RGB_CONTROLS" />
            <variable citdl="String" line="548" name="SHOW_HSV_CONTROLS" />
            <variable citdl="String" line="549" name="SHOW_HEX_CONTROLS" />
            <variable citdl="String" line="550" name="SHOW_HEX_SUMMARY" />
            <variable citdl="String" line="551" name="SHOW_WEBSAFE" />
            <variable citdl="String" doc="SHOW_SUBMIT: &quot;showsubmit&quot;," line="553" name="CONTAINER" />
            <variable citdl="String" line="554" name="IDS" />
            <variable citdl="String" line="555" name="ELEMENTS" />
            <variable citdl="String" line="556" name="TXT" />
            <variable citdl="String" line="557" name="IMAGES" />
            <variable citdl="String" line="558" name="ANIMATE" />
          </variable>
          <scope doc="Sets the control to the specified rgb value and&#xA;moves the sliders to the proper positions" ilk="function" line="620" lineend="624" name="setValue" signature="setValue(rgb, silent)">
            <variable citdl="Array" doc="int, int]} the rgb value" ilk="argument" name="rgb" />
            <variable citdl="Boolean" doc="whether or not to fire the change event" ilk="argument" name="silent" />
            <variable citdl="proto" name="this" />
          </scope>
          <scope doc="Returns the element reference that is saved.  The id can be either&#xA;the element id, or the key for this id in the &quot;id&quot; config attribute.&#xA;For instance, the host element id can be obtained by passing its&#xA;id (default: &quot;yui_picker&quot;) or by its key &quot;YUI_PICKER&quot;." ilk="function" line="946" lineend="948" name="getElement" returns="HTMLElement" signature="getElement(id)">
            <variable citdl="String" doc="the element id, or key" ilk="argument" name="id" />
            <variable citdl="proto" name="this" />
          </scope>
          <scope doc="Sets the initial state of the sliders" ilk="function" line="1233" lineend="1328" name="initPicker" signature="initPicker()">
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="Dom.get()" doc="bind all of our elements" line="1239" name="el" />
            <variable attributes="__local__ private" doc="bind all of our elements" line="1239" name="i" />
            <variable attributes="__local__ private" citdl="this.get()" doc="bind all of our elements" line="1239" name="ids" />
            <variable attributes="__local__ private" citdl="this.OPT" doc="bind all of our elements" line="1239" name="o" />
            <variable attributes="__local__ private" citdl="this.get()" doc="bind all of our elements" line="1239" name="els" />
            <variable attributes="__local__ private" citdl="Dom.generateId()" doc="bind all of our elements" line="1239" name="id" />
            <variable attributes="__local__ private" citdl="this.get()" line="1286" name="s" />
          </scope>
          <variable citdl="Slider.getVertSlider()" line="1289" name="hueSlider" />
          <variable citdl="Slider.getSliderRegion()" line="1293" name="pickerSlider" />
          <scope doc="Sets up the config attributes and the change listeners for this&#xA;properties" ilk="function" line="1392" lineend="1732" name="initAttributes" signature="initAttributes(attr)">
            <variable doc="An object containing default attribute values" ilk="argument" name="attr" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="attr.ids" line="1543" name="ids" />
            <scope attributes="__local__ private" doc="PRIVATE: Returns the cached element reference.  If the id is not a string, it&#xA;is assumed that it is an element and this is returned." ilk="function" line="1607" lineend="1611" name="_hideShowEl" signature="_hideShowEl(id, on)">
              <variable citdl="{string" doc="the element key, id, or ref" ilk="argument" name="id" />
              <variable citdl="Boolean" doc="hide or show.  If true, show" ilk="argument" name="on" />
              <variable attributes="__local__ private" line="1608" name="el" />
            </scope>
          </scope>
        </variable>
        <variable attributes="__local__ private" citdl="YAHOO.widget.Slider" line="266" name="Slider" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="266" name="Event" />
        <variable attributes="__local__ private" citdl="String" line="269" name="b" />
        <scope attributes="__local__ private" doc="PRIVATE: Moves the hue slider into the position dictated by the current state&#xA;of the control" ilk="function" line="567" lineend="582" name="_updateHueSlider" signature="_updateHueSlider()">
          <variable attributes="__local__ private" citdl="this.get()" line="569" name="h" />
          <variable attributes="__local__ private" citdl="this.get()" line="569" name="size" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: Moves the picker slider into the position dictated by the current state&#xA;of the control" ilk="function" line="590" lineend="600" name="_updatePickerSlider" signature="_updatePickerSlider()">
          <variable attributes="__local__ private" citdl="this.get()" line="593" name="s" />
          <variable attributes="__local__ private" citdl="this.get()" line="593" name="v" />
          <variable attributes="__local__ private" citdl="this.get()" line="593" name="size" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: Moves the sliders into the position dictated by the current state&#xA;of the control" ilk="function" line="608" lineend="611" name="_updateSliders" signature="_updateSliders()" />
        <scope attributes="__local__ private" doc="PRIVATE: Translates the slider value into hue, int[0,359]" ilk="function" line="646" lineend="651" name="_getH" returns="Number" signature="_getH()">
          <variable attributes="__local__ private" citdl="Math.round()" line="648" name="h" />
          <variable attributes="__local__ private" citdl="this.get()" line="648" name="size" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: Translates the slider value into saturation, int[0,1], left to right" ilk="function" line="659" lineend="661" name="_getS" returns="Number" signature="_getS()" />
        <scope attributes="__local__ private" doc="PRIVATE: Translates the slider value into value/brightness, int[0,1], top&#xA;to bottom" ilk="function" line="670" lineend="673" name="_getV" returns="Number" signature="_getV()">
          <variable attributes="__local__ private" citdl="this.get()" line="671" name="size" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: Updates the background of the swatch with the current rbg value.&#xA;Also updates the websafe swatch to the closest websafe color" ilk="function" line="681" lineend="702" name="_updateSwatch" signature="_updateSwatch()">
          <variable attributes="__local__ private" citdl="rgb.join()" line="686" name="color" />
          <variable attributes="__local__ private" citdl="this.getElement()" line="686" name="el" />
          <variable attributes="__local__ private" citdl="this.get()" line="686" name="rgb" />
          <variable attributes="__local__ private" citdl="this.get()" line="686" name="txt" />
          <variable attributes="__local__ private" citdl="this.get()" line="686" name="websafe" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: Reads the sliders and converts the values to RGB, updating the&#xA;internal state for all the individual form fields" ilk="function" line="710" lineend="718" name="_getValuesFromSliders" signature="_getValuesFromSliders()">
          <variable attributes="__local__ private" citdl="_getH.call()" line="711" name="h" />
          <variable attributes="__local__ private" citdl="_getS.call()" line="711" name="s" />
          <variable attributes="__local__ private" citdl="_getV.call()" line="711" name="v" />
          <variable attributes="__local__ private" citdl="Color.hsv2rgb()" line="713" name="rgb" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: Updates the form field controls with the state data contained&#xA;in the control." ilk="function" line="726" lineend="737" name="_updateFormFields" signature="_updateFormFields()" />
        <scope attributes="__local__ private" doc="PRIVATE: Event handler for the hue slider." ilk="function" line="745" lineend="762" name="_onHueSliderChange" signature="_onHueSliderChange(newOffset)">
          <variable citdl="Number" doc="pixels from the start position" ilk="argument" name="newOffset" />
          <variable attributes="__local__ private" citdl="_getH.call()" line="747" name="h" />
          <variable attributes="__local__ private" citdl="Color.hsv2rgb()" doc="set picker background to the hue" line="751" name="rgb" />
          <variable attributes="__local__ private" citdl="String" line="752" name="styleDef" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: Event handler for the picker slider, which controls the&#xA;saturation and value/brightness." ilk="function" line="771" lineend="783" name="_onPickerSliderChange" signature="_onPickerSliderChange(newOffset)">
          <variable citdl="{{x:" doc="int, y: int}} x/y pixels from the start position" ilk="argument" name="newOffset" />
          <variable attributes="__local__ private" citdl="_getS.call()" line="773" name="s" />
          <variable attributes="__local__ private" citdl="_getV.call()" line="773" name="v" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: Key map to well-known commands for txt field input" ilk="function" line="802" lineend="828" name="_getCommand" returns="Number" signature="_getCommand(e)">
          <variable citdl="Event" doc="the keypress or keydown event" ilk="argument" name="e" />
          <variable attributes="__local__ private" citdl="Event.getCharCode()" line="803" name="c" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: Use the value of the text field to update the control" ilk="function" line="838" lineend="848" name="_useFieldValue" signature="_useFieldValue(e, el, prop)">
          <variable citdl="Event" doc="an event" ilk="argument" name="e" />
          <variable citdl="HTMLElement" doc="the field" ilk="argument" name="el" />
          <variable citdl="String" doc="the key to the linked property" ilk="argument" name="prop" />
          <variable attributes="__local__ private" citdl="el.value" line="839" name="val" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: Handle keypress on one of the rgb or hsv fields." ilk="function" line="858" lineend="880" name="_rgbFieldKeypress" signature="_rgbFieldKeypress(e, el, prop)">
          <variable citdl="Event" doc="the keypress event" ilk="argument" name="e" />
          <variable citdl="HTMLElement" doc="the field" ilk="argument" name="el" />
          <variable citdl="String" doc="the key to the linked property" ilk="argument" name="prop" />
          <variable attributes="__local__ private" citdl="_getCommand()" line="859" name="command" />
          <variable attributes="__local__ private" line="860" name="inc" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: Handle keydown on the hex field" ilk="function" line="890" lineend="895" name="_hexFieldKeypress" signature="_hexFieldKeypress(e, el, prop)">
          <variable citdl="Event" doc="the keypress event" ilk="argument" name="e" />
          <variable citdl="HTMLElement" doc="the field" ilk="argument" name="el" />
          <variable citdl="String" doc="the key to the linked property" ilk="argument" name="prop" />
          <variable attributes="__local__ private" citdl="_getCommand()" line="891" name="command" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: Allows numbers and special chars, and by default allows a-f.&#xA;Used for the hex field keypress handler." ilk="function" line="906" lineend="924" name="_hexOnly" returns="Boolean" signature="_hexOnly(e, numbersOnly)">
          <variable citdl="Event" doc="the event" ilk="argument" name="e" />
          <variable doc="omits a-f if set to true" ilk="argument" name="numbersOnly" />
          <variable attributes="__local__ private" citdl="_getCommand()" line="907" name="command" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: Allows numbers and special chars only.  Used for the&#xA;rgb and hsv fields keypress handler." ilk="function" line="934" lineend="936" name="_numbersOnly" returns="Boolean" signature="_numbersOnly(e)">
          <variable citdl="Event" doc="the event" ilk="argument" name="e" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="950" lineend="1198" name="_createElements" signature="_createElements()">
          <scope attributes="__local__ private" ilk="function" line="955" lineend="961" name="Elem" returns="n" signature="Elem(type, o)">
            <variable ilk="argument" name="type" />
            <variable ilk="argument" name="o" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="956" name="n" />
          </scope>
          <variable attributes="__local__ private" citdl="Elem" line="955" name="el" />
          <variable attributes="__local__ private" citdl="Elem" line="955" name="img" />
          <variable attributes="__local__ private" line="955" name="i" />
          <variable attributes="__local__ private" citdl="this.get()" line="955" name="ids" />
          <variable attributes="__local__ private" citdl="Elem" line="955" name="child" />
          <variable attributes="__local__ private" citdl="this.get()" line="955" name="images" />
          <variable attributes="__local__ private" citdl="this.get()" line="955" name="txt" />
          <variable attributes="__local__ private" citdl="RGBElem" line="955" name="fld" />
          <scope attributes="__local__ private" ilk="function" line="962" lineend="973" name="RGBElem" returns="Elem" signature="RGBElem(type, obj)">
            <variable ilk="argument" name="type" />
            <variable ilk="argument" name="obj" />
            <variable attributes="__local__ private" citdl="lang.merge()" line="969" name="o" />
          </scope>
          <variable attributes="__local__ private" citdl="this.get()" line="975" name="p" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="1200" lineend="1208" name="_attachRGBHSV" signature="_attachRGBHSV(id, config)">
          <variable ilk="argument" name="id" />
          <variable ilk="argument" name="config" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: Updates the rgb attribute with the current state of the r,g,b&#xA;fields.  This is invoked from change listeners on these&#xA;attributes to facilitate updating these values from the&#xA;individual form fields" ilk="function" line="1219" lineend="1227" name="_updateRGB" signature="_updateRGB()">
          <variable attributes="__local__ private" citdl="Array" line="1222" name="rgb" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: Updates the RGB values from the current state of the HSV&#xA;values.  Executed when the one of the HSV form fields are&#xA;updated&#xA;_updateRGBFromHSV" ilk="function" line="1338" lineend="1348" name="_updateRGBFromHSV" signature="_updateRGBFromHSV()">
          <variable attributes="__local__ private" citdl="Array" line="1341" name="hsv" />
          <variable attributes="__local__ private" citdl="Color.hsv2rgb()" line="1343" name="rgb" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: Parses the hex string to normalize shorthand values, converts&#xA;the hex value to rgb and updates the rgb attribute (which&#xA;updates the state for all of the other values)&#xA;method _updateHex" ilk="function" line="1357" lineend="1382" name="_updateHex" returns="Boolean" signature="_updateHex()">
          <variable attributes="__local__ private" citdl="this.get()" line="1359" name="hex" />
          <variable attributes="__local__ private" citdl="hex.length" line="1359" name="l" />
          <variable attributes="__local__ private" line="1363" name="i" />
          <variable attributes="__local__ private" citdl="hex.split()" line="1363" name="c" />
          <variable attributes="__local__ private" citdl="Color.hex2rgb()" line="1375" name="rgb" />
        </scope>
      </scope>
      <variable citdl="_pickercount" line="244" name="_pickercount" />
      <variable citdl="Y.Dom.get()" line="286" name="el" />
      <variable citdl="Object" line="321" name="document">
        <variable citdl="document.title.slice()" line="137" name="title" />
        <scope ilk="function" line="254" lineend="254" name="getElementById" returns="document.all[id]" signature="getElementById(id)">
          <variable ilk="argument" name="id" />
          <variable citdl="document" name="this" />
        </scope>
        <variable citdl="Object" line="673" name="body">
          <variable line="673" name="clientHeight" />
          <variable line="692" name="clientWidth" />
        </variable>
      </variable>
      <variable citdl="deconcept.util.getRequestParameter" doc="add some aliases for ease of use/backwards compatibility */" line="325" name="getQueryParamValue" />
      <variable citdl="deconcept.SWFObject" line="326" name="FlashObject" />
      <variable citdl="deconcept.SWFObject" doc="for legacy support" line="327" name="SWFObject" />
      <scope attributes="__local__ private" doc="&lt;p&gt;Creates a rich Toolbar widget based on Button. Primarily used with the Rich Text Editor&lt;/p&gt;" ilk="function" line="335" lineend="2098" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.lang" doc="PRIVATE: **/" line="341" name="Lang" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" doc="PRIVATE: **/" line="341" name="Event" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" doc="PRIVATE: **/" line="341" name="Dom" />
        <scope attributes="__local__ private" ilk="function" line="343" lineend="358" name="getButton" returns="Boolean" signature="getButton(id)">
          <variable ilk="argument" name="id" />
          <variable attributes="__local__ private" citdl="id" line="344" name="button" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: This method is called from Menu&apos;s renderEvent to add a few more classes to the menu items" ilk="function" line="432" lineend="442" name="_addMenuClasses" signature="_addMenuClasses(ev, na, o)">
          <variable citdl="String" doc="The event that fired." ilk="argument" name="ev" />
          <variable citdl="Array" doc="Array of event information." ilk="argument" name="na" />
          <variable citdl="Object" doc="Button config object." ilk="argument" name="o" />
          <variable attributes="__local__ private" citdl="this.getItems()" line="437" name="items" />
        </scope>
      </scope>
      <scope attributes="__local__ private" doc="&lt;p&gt;Creates a rich Toolbar widget based on Button. Primarily used with the Rich Text Editor&lt;/p&gt;" ilk="function" line="335" lineend="2098" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.lang" doc="PRIVATE: **/" line="341" name="Lang" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" doc="PRIVATE: **/" line="341" name="Event" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" doc="PRIVATE: **/" line="341" name="Dom" />
        <scope attributes="__local__ private" ilk="function" line="343" lineend="358" name="getButton" returns="Boolean" signature="getButton(id)">
          <variable ilk="argument" name="id" />
          <variable attributes="__local__ private" citdl="id" line="344" name="button" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: This method is called from Menu&apos;s renderEvent to add a few more classes to the menu items" ilk="function" line="432" lineend="442" name="_addMenuClasses" signature="_addMenuClasses(ev, na, o)">
          <variable citdl="String" doc="The event that fired." ilk="argument" name="ev" />
          <variable citdl="Array" doc="Array of event information." ilk="argument" name="na" />
          <variable citdl="Object" doc="Button config object." ilk="argument" name="o" />
          <variable attributes="__local__ private" citdl="this.getItems()" line="437" name="items" />
        </scope>
      </scope>
      <variable citdl="this._container[name]" line="363" name="object" />
      <scope attributes="__local__ private" doc="* Initializes the global by creating the default namespaces&#xA;and applying * any new configuration information that is&#xA;detected." ilk="function" line="380" lineend="399" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" line="383" name="i" />
        <variable attributes="__local__ private" citdl="Boolean" line="383" name="unique" />
        <variable attributes="__local__ private" citdl="YAHOO_config.listener" line="383" name="l" />
        <variable attributes="__local__ private" citdl="YAHOO.env.listeners" line="383" name="ls" />
      </scope>
      <scope attributes="__local__ private" doc="* Initializes the global by creating the default namespaces&#xA;and applying * any new configuration information that is&#xA;detected." ilk="function" line="380" lineend="399" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" line="383" name="i" />
        <variable attributes="__local__ private" citdl="Boolean" line="383" name="unique" />
        <variable attributes="__local__ private" citdl="YAHOO_config.listener" line="383" name="l" />
        <variable attributes="__local__ private" citdl="YAHOO.env.listeners" line="383" name="ls" />
      </scope>
      <variable citdl="YAHOO.widget.Overlay" line="402" name="Overlay" />
      <scope attributes="__local__ private" ilk="function" line="406" lineend="985" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="Array" doc="ADD = [&quot;toString&quot;, &quot;valueOf&quot;, &quot;hasOwnProperty&quot;]," line="413" name="ADD" />
        <variable attributes="__local__ private" citdl="YAHOO.lang" doc="ADD = [&quot;toString&quot;, &quot;valueOf&quot;, &quot;hasOwnProperty&quot;]," line="413" name="L" />
        <variable attributes="__local__ private" citdl="Object" doc="ADD = [&quot;toString&quot;, &quot;valueOf&quot;, &quot;hasOwnProperty&quot;]," line="413" lineend="901" name="OB">
          <scope doc="Determines whether or not the provided object is an array.&#xA;Testing typeof/instanceof/constructor of arrays across frame&#xA;boundaries isn&apos;t possible in Safari unless you have a reference&#xA;to the other frame to test against its Array prototype.  To&#xA;handle this case, we test well-known array properties instead.&#xA;properties." ilk="function" line="426" lineend="431" name="isArray" returns="Boolean" signature="isArray(o)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
            <variable citdl="OB" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is a boolean" ilk="function" line="439" lineend="441" name="isBoolean" returns="Boolean" signature="isBoolean(o)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
            <variable citdl="OB" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is a function" ilk="function" line="449" lineend="451" name="isFunction" returns="Boolean" signature="isFunction(o)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
            <variable citdl="OB" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is null" ilk="function" line="459" lineend="461" name="isNull" returns="Boolean" signature="isNull(o)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
            <variable citdl="OB" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is a legal number" ilk="function" line="469" lineend="471" name="isNumber" returns="Boolean" signature="isNumber(o)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
            <variable citdl="OB" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is of type object&#xA;or function" ilk="function" line="480" lineend="482" name="isObject" returns="Boolean" signature="isObject(o)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
            <variable citdl="OB" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is a string" ilk="function" line="490" lineend="492" name="isString" returns="Boolean" signature="isString(o)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
            <variable citdl="OB" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is undefined" ilk="function" line="500" lineend="502" name="isUndefined" returns="Boolean" signature="isUndefined(o)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
            <variable citdl="OB" name="this" />
          </scope>
          <variable attributes="private __static__" doc="PRIVATE STATIC: IE will not enumerate native functions in a derived object even if the&#xA;function was overridden.  This is a workaround for specific functions&#xA;we care about on the Object prototype." line="515" name="_IEEnumFix" />
          <variable attributes="__local__ private" citdl="ADD[i]" line="517" name="fname" />
          <variable attributes="__local__ private" citdl="s[fname]" line="517" name="f" />
          <scope attributes="__static__" doc="STATIC: Utility to set up the prototype, constructor and superclass properties to&#xA;support an inheritance strategy that can chain constructors and methods.&#xA;Static members will not be inherited." ilk="function" line="538" lineend="561" name="extend" signature="extend(subc, superc, overrides)">
            <variable citdl="Function" doc="the object to modify" ilk="argument" name="subc" />
            <variable citdl="Function" doc="the object to inherit" ilk="argument" name="superc" />
            <variable citdl="Object" doc="additional properties/methods to add to the&#xA;subclass prototype.  These will override the&#xA;matching items obtained from the superclass&#xA;if present." ilk="argument" name="overrides" />
            <variable citdl="OB" name="this" />
            <scope attributes="__local__ private" classrefs="superc.prototype" ilk="class" line="543" name="F">
              <scope attributes="__local__ private __ctor__" ilk="function" line="543" lineend="543" name="F" signature="F()">
                <variable citdl="F" name="this" />
              </scope>
            </scope>
            <scope classrefs="F" ilk="class" line="545" name="subc">
              <variable citdl="superc.prototype" line="547" name="superclass" />
              <scope ilk="class" line="549" lineend="550" name="superc" />
            </scope>
          </scope>
          <scope attributes="__static__" doc="STATIC: Applies all properties in the supplier to the receiver if the&#xA;receiver does not have these properties yet.  Optionally, one or&#xA;more methods/properties can be specified (as additional&#xA;parameters).  This option will overwrite the property if receiver&#xA;has it already.  If true is passed as the third parameter, all&#xA;properties will be applied and _will_ overwrite properties in&#xA;the receiver." ilk="function" line="585" lineend="603" name="augmentObject" signature="augmentObject(r, s)">
            <variable citdl="Function" doc="the object to receive the augmentation" ilk="argument" name="r" />
            <variable citdl="Function" doc="the object that supplies the properties to augment" ilk="argument" name="s" />
            <variable citdl="OB" name="this" />
            <variable attributes="__local__ private" citdl="arguments" line="589" name="a" />
            <variable attributes="__local__ private" line="589" name="i" />
            <variable attributes="__local__ private" citdl="a[2]" line="589" name="override" />
            <variable attributes="__local__ private" line="589" name="p" />
          </scope>
          <scope attributes="__static__" doc="STATIC: Same as YAHOO.lang.augmentObject, except it only applies prototype properties" ilk="function" line="619" lineend="629" name="augmentProto" signature="augmentProto(r, s)">
            <variable citdl="Function" doc="the object to receive the augmentation" ilk="argument" name="r" />
            <variable citdl="Function" doc="the object that supplies the properties to augment" ilk="argument" name="s" />
            <variable citdl="OB" name="this" />
            <variable attributes="__local__ private" citdl="Array" doc="var a=[].concat(arguments);" line="624" name="a" />
          </scope>
          <scope doc="Returns a simple string representation of the object or array.&#xA;Other types of objects will be returned unprocessed.  Arrays&#xA;are expected to be indexed.  Use object notation for&#xA;associative arrays." ilk="function" line="643" lineend="698" name="dump" returns="String" signature="dump(o, d)">
            <variable citdl="Object" doc="The object to dump" ilk="argument" name="o" />
            <variable citdl="Number" doc="How deep to recurse child objects, default 3" ilk="argument" name="d" />
            <variable citdl="OB" name="this" />
            <variable attributes="__local__ private" citdl="String" line="645" name="OBJ" />
            <variable attributes="__local__ private" line="645" name="i" />
            <variable attributes="__local__ private" line="645" name="len" />
            <variable attributes="__local__ private" citdl="Array" line="645" name="s" />
            <variable attributes="__local__ private" citdl="String" line="645" name="COMMA" />
            <variable attributes="__local__ private" citdl="String" line="645" name="ARROW" />
            <variable attributes="__local__ private" citdl="String" line="645" name="FUN" />
          </scope>
          <scope doc="Does variable substitution on a string. It scans through the string&#xA;looking for expressions enclosed in { } braces. If an expression&#xA;is found, it is used a key on the object.  If there is a space in&#xA;the key, the first word is used for the key and the rest is provided&#xA;to an optional function to be used to programatically determine the&#xA;value (the extra information might be used for this decision). If&#xA;the value for the key in the object, or what is returned from the&#xA;function has a string value, number value, or object value, it is&#xA;substituted for the bracket expression and it repeats.  If this&#xA;value is an object, it uses the Object&apos;s toString() if this has&#xA;been overridden, otherwise it does a shallow dump of the key/value&#xA;pairs." ilk="function" line="723" lineend="795" name="substitute" returns="String" signature="substitute(s, o, f)">
            <variable citdl="String" doc="The string that will be modified." ilk="argument" name="s" />
            <variable citdl="Object" doc="An object containing the replacement values" ilk="argument" name="o" />
            <variable citdl="Function" doc="An optional function that can be used to&#xA;process each match.  It receives the key,&#xA;value, and any extra metadata included with&#xA;the key inside of the braces." ilk="argument" name="f" />
            <variable citdl="OB" name="this" />
            <variable attributes="__local__ private" citdl="String" line="725" name="LBRACE" />
            <variable attributes="__local__ private" citdl="String" line="725" name="RBRACE" />
            <variable attributes="__local__ private" citdl="String" line="725" name="DUMP" />
            <variable attributes="__local__ private" citdl="String" line="725" name="SPACE" />
            <variable attributes="__local__ private" citdl="s.lastIndexOf()" line="725" name="i" />
            <variable attributes="__local__ private" citdl="key.indexOf()" line="725" name="k" />
            <variable attributes="__local__ private" citdl="s.indexOf()" line="725" name="j" />
            <variable attributes="__local__ private" citdl="s.substring()" line="725" name="token" />
            <variable attributes="__local__ private" citdl="key.substring()" line="725" name="meta" />
            <variable attributes="__local__ private" citdl="token" line="725" name="key" />
            <variable attributes="__local__ private" citdl="o[key]" line="725" name="v" />
            <variable attributes="__local__ private" citdl="Array" line="725" name="saved" />
            <variable attributes="__local__ private" citdl="meta.indexOf()" doc="look for the keyword &apos;dump&apos;, if found force obj dump" line="763" name="dump" />
          </scope>
          <scope doc="Returns a string without any leading or trailing whitespace.  If&#xA;the input is not a string, the input will be returned untouched." ilk="function" line="806" lineend="812" name="trim" returns="String" signature="trim(s)">
            <variable citdl="String" doc="the string to trim" ilk="argument" name="s" />
            <variable citdl="OB" name="this" />
          </scope>
          <scope doc="Returns a new object containing all of the properties of&#xA;all the supplied objects.  The properties from later objects&#xA;will overwrite those in earlier objects." ilk="function" line="823" lineend="829" name="merge" returns="o" signature="merge()">
            <variable citdl="OB" name="this" />
            <variable attributes="__local__ private" citdl="arguments" line="824" name="a" />
            <variable attributes="__local__ private" citdl="Object" line="824" lineend="824" name="o" />
          </scope>
          <scope doc="Executes the supplied function in the context of the supplied&#xA;object &apos;when&apos; milliseconds later.  Executes the function a&#xA;single time unless periodic is set to true." ilk="function" line="852" lineend="885" name="later" signature="later(when, o, fn, data, periodic)">
            <variable citdl="Number" doc="the number of milliseconds to wait until the fn&#xA;is executed" ilk="argument" name="when" />
            <variable doc="the context object" ilk="argument" name="o" />
            <variable citdl="{Function" doc="the function to execute or the name of&#xA;the method in the &apos;o&apos; object to execute" ilk="argument" name="fn" />
            <variable doc="[Array] data that is provided to the function.  This accepts&#xA;either a single item or an array.  If an array is provided, the&#xA;function is executed with one parameter for each array item.  If&#xA;you need to pass a single array parameter, it needs to be wrapped in&#xA;an array [myarray]" ilk="argument" name="data" />
            <variable citdl="Boolean" doc="if true, executes continuously at supplied&#xA;interval until canceled" ilk="argument" name="periodic" />
            <variable citdl="OB" name="this" />
            <variable attributes="__local__ private" line="855" name="r" />
            <variable attributes="__local__ private" citdl="fn" line="855" name="m" />
            <variable attributes="__local__ private" citdl="data" line="855" name="d" />
            <variable attributes="__local__ private" line="855" name="f" />
            <scope attributes="__local__ private" ilk="function" line="869" lineend="871" name="f" signature="f()" />
          </scope>
          <scope doc="A convenience method for detecting a legitimate non-null value.&#xA;Returns false for null/undefined/NaN, true for other values,&#xA;including 0/false/&apos;&apos;" ilk="function" line="896" lineend="899" name="isValue" returns="Boolean" signature="isValue(o)">
            <variable citdl="any" doc="the item to test" ilk="argument" name="o" />
            <variable citdl="OB" name="this" />
          </scope>
        </variable>
        <scope attributes="__local__ private" ilk="function" line="925" lineend="927" name="(anonymous)" returns="o" signature="(anonymous)(o, prop)">
          <variable ilk="argument" name="o" />
          <variable ilk="argument" name="prop" />
        </scope>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="406" lineend="985" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="Array" doc="ADD = [&quot;toString&quot;, &quot;valueOf&quot;, &quot;hasOwnProperty&quot;]," line="413" name="ADD" />
        <variable attributes="__local__ private" citdl="YAHOO.lang" doc="ADD = [&quot;toString&quot;, &quot;valueOf&quot;, &quot;hasOwnProperty&quot;]," line="413" name="L" />
        <variable attributes="__local__ private" citdl="Object" doc="ADD = [&quot;toString&quot;, &quot;valueOf&quot;, &quot;hasOwnProperty&quot;]," line="413" lineend="901" name="OB">
          <scope doc="Determines whether or not the provided object is an array.&#xA;Testing typeof/instanceof/constructor of arrays across frame&#xA;boundaries isn&apos;t possible in Safari unless you have a reference&#xA;to the other frame to test against its Array prototype.  To&#xA;handle this case, we test well-known array properties instead.&#xA;properties." ilk="function" line="426" lineend="431" name="isArray" returns="Boolean" signature="isArray(o)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
            <variable citdl="OB" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is a boolean" ilk="function" line="439" lineend="441" name="isBoolean" returns="Boolean" signature="isBoolean(o)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
            <variable citdl="OB" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is a function" ilk="function" line="449" lineend="451" name="isFunction" returns="Boolean" signature="isFunction(o)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
            <variable citdl="OB" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is null" ilk="function" line="459" lineend="461" name="isNull" returns="Boolean" signature="isNull(o)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
            <variable citdl="OB" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is a legal number" ilk="function" line="469" lineend="471" name="isNumber" returns="Boolean" signature="isNumber(o)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
            <variable citdl="OB" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is of type object&#xA;or function" ilk="function" line="480" lineend="482" name="isObject" returns="Boolean" signature="isObject(o)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
            <variable citdl="OB" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is a string" ilk="function" line="490" lineend="492" name="isString" returns="Boolean" signature="isString(o)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
            <variable citdl="OB" name="this" />
          </scope>
          <scope doc="Determines whether or not the provided object is undefined" ilk="function" line="500" lineend="502" name="isUndefined" returns="Boolean" signature="isUndefined(o)">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
            <variable citdl="OB" name="this" />
          </scope>
          <variable attributes="private __static__" doc="PRIVATE STATIC: IE will not enumerate native functions in a derived object even if the&#xA;function was overridden.  This is a workaround for specific functions&#xA;we care about on the Object prototype." line="515" name="_IEEnumFix" />
          <variable attributes="__local__ private" citdl="ADD[i]" line="517" name="fname" />
          <variable attributes="__local__ private" citdl="s[fname]" line="517" name="f" />
          <scope attributes="__static__" doc="STATIC: Utility to set up the prototype, constructor and superclass properties to&#xA;support an inheritance strategy that can chain constructors and methods.&#xA;Static members will not be inherited." ilk="function" line="538" lineend="561" name="extend" signature="extend(subc, superc, overrides)">
            <variable citdl="Function" doc="the object to modify" ilk="argument" name="subc" />
            <variable citdl="Function" doc="the object to inherit" ilk="argument" name="superc" />
            <variable citdl="Object" doc="additional properties/methods to add to the&#xA;subclass prototype.  These will override the&#xA;matching items obtained from the superclass&#xA;if present." ilk="argument" name="overrides" />
            <variable citdl="OB" name="this" />
            <scope attributes="__local__ private" classrefs="superc.prototype" ilk="class" line="543" name="F">
              <scope attributes="__local__ private __ctor__" ilk="function" line="543" lineend="543" name="F" signature="F()">
                <variable citdl="F" name="this" />
              </scope>
            </scope>
            <scope classrefs="F" ilk="class" line="545" name="subc">
              <variable citdl="superc.prototype" line="547" name="superclass" />
              <scope ilk="class" line="549" lineend="550" name="superc" />
            </scope>
          </scope>
          <scope attributes="__static__" doc="STATIC: Applies all properties in the supplier to the receiver if the&#xA;receiver does not have these properties yet.  Optionally, one or&#xA;more methods/properties can be specified (as additional&#xA;parameters).  This option will overwrite the property if receiver&#xA;has it already.  If true is passed as the third parameter, all&#xA;properties will be applied and _will_ overwrite properties in&#xA;the receiver." ilk="function" line="585" lineend="603" name="augmentObject" signature="augmentObject(r, s)">
            <variable citdl="Function" doc="the object to receive the augmentation" ilk="argument" name="r" />
            <variable citdl="Function" doc="the object that supplies the properties to augment" ilk="argument" name="s" />
            <variable citdl="OB" name="this" />
            <variable attributes="__local__ private" citdl="arguments" line="589" name="a" />
            <variable attributes="__local__ private" line="589" name="i" />
            <variable attributes="__local__ private" citdl="a[2]" line="589" name="override" />
            <variable attributes="__local__ private" line="589" name="p" />
          </scope>
          <scope attributes="__static__" doc="STATIC: Same as YAHOO.lang.augmentObject, except it only applies prototype properties" ilk="function" line="619" lineend="629" name="augmentProto" signature="augmentProto(r, s)">
            <variable citdl="Function" doc="the object to receive the augmentation" ilk="argument" name="r" />
            <variable citdl="Function" doc="the object that supplies the properties to augment" ilk="argument" name="s" />
            <variable citdl="OB" name="this" />
            <variable attributes="__local__ private" citdl="Array" doc="var a=[].concat(arguments);" line="624" name="a" />
          </scope>
          <scope doc="Returns a simple string representation of the object or array.&#xA;Other types of objects will be returned unprocessed.  Arrays&#xA;are expected to be indexed.  Use object notation for&#xA;associative arrays." ilk="function" line="643" lineend="698" name="dump" returns="String" signature="dump(o, d)">
            <variable citdl="Object" doc="The object to dump" ilk="argument" name="o" />
            <variable citdl="Number" doc="How deep to recurse child objects, default 3" ilk="argument" name="d" />
            <variable citdl="OB" name="this" />
            <variable attributes="__local__ private" citdl="String" line="645" name="OBJ" />
            <variable attributes="__local__ private" line="645" name="i" />
            <variable attributes="__local__ private" line="645" name="len" />
            <variable attributes="__local__ private" citdl="Array" line="645" name="s" />
            <variable attributes="__local__ private" citdl="String" line="645" name="COMMA" />
            <variable attributes="__local__ private" citdl="String" line="645" name="ARROW" />
            <variable attributes="__local__ private" citdl="String" line="645" name="FUN" />
          </scope>
          <scope doc="Does variable substitution on a string. It scans through the string&#xA;looking for expressions enclosed in { } braces. If an expression&#xA;is found, it is used a key on the object.  If there is a space in&#xA;the key, the first word is used for the key and the rest is provided&#xA;to an optional function to be used to programatically determine the&#xA;value (the extra information might be used for this decision). If&#xA;the value for the key in the object, or what is returned from the&#xA;function has a string value, number value, or object value, it is&#xA;substituted for the bracket expression and it repeats.  If this&#xA;value is an object, it uses the Object&apos;s toString() if this has&#xA;been overridden, otherwise it does a shallow dump of the key/value&#xA;pairs." ilk="function" line="723" lineend="795" name="substitute" returns="String" signature="substitute(s, o, f)">
            <variable citdl="String" doc="The string that will be modified." ilk="argument" name="s" />
            <variable citdl="Object" doc="An object containing the replacement values" ilk="argument" name="o" />
            <variable citdl="Function" doc="An optional function that can be used to&#xA;process each match.  It receives the key,&#xA;value, and any extra metadata included with&#xA;the key inside of the braces." ilk="argument" name="f" />
            <variable citdl="OB" name="this" />
            <variable attributes="__local__ private" citdl="String" line="725" name="LBRACE" />
            <variable attributes="__local__ private" citdl="String" line="725" name="RBRACE" />
            <variable attributes="__local__ private" citdl="String" line="725" name="DUMP" />
            <variable attributes="__local__ private" citdl="String" line="725" name="SPACE" />
            <variable attributes="__local__ private" citdl="s.lastIndexOf()" line="725" name="i" />
            <variable attributes="__local__ private" citdl="key.indexOf()" line="725" name="k" />
            <variable attributes="__local__ private" citdl="s.indexOf()" line="725" name="j" />
            <variable attributes="__local__ private" citdl="s.substring()" line="725" name="token" />
            <variable attributes="__local__ private" citdl="key.substring()" line="725" name="meta" />
            <variable attributes="__local__ private" citdl="token" line="725" name="key" />
            <variable attributes="__local__ private" citdl="o[key]" line="725" name="v" />
            <variable attributes="__local__ private" citdl="Array" line="725" name="saved" />
            <variable attributes="__local__ private" citdl="meta.indexOf()" doc="look for the keyword &apos;dump&apos;, if found force obj dump" line="763" name="dump" />
          </scope>
          <scope doc="Returns a string without any leading or trailing whitespace.  If&#xA;the input is not a string, the input will be returned untouched." ilk="function" line="806" lineend="812" name="trim" returns="String" signature="trim(s)">
            <variable citdl="String" doc="the string to trim" ilk="argument" name="s" />
            <variable citdl="OB" name="this" />
          </scope>
          <scope doc="Returns a new object containing all of the properties of&#xA;all the supplied objects.  The properties from later objects&#xA;will overwrite those in earlier objects." ilk="function" line="823" lineend="829" name="merge" returns="o" signature="merge()">
            <variable citdl="OB" name="this" />
            <variable attributes="__local__ private" citdl="arguments" line="824" name="a" />
            <variable attributes="__local__ private" citdl="Object" line="824" lineend="824" name="o" />
          </scope>
          <scope doc="Executes the supplied function in the context of the supplied&#xA;object &apos;when&apos; milliseconds later.  Executes the function a&#xA;single time unless periodic is set to true." ilk="function" line="852" lineend="885" name="later" signature="later(when, o, fn, data, periodic)">
            <variable citdl="Number" doc="the number of milliseconds to wait until the fn&#xA;is executed" ilk="argument" name="when" />
            <variable doc="the context object" ilk="argument" name="o" />
            <variable citdl="{Function" doc="the function to execute or the name of&#xA;the method in the &apos;o&apos; object to execute" ilk="argument" name="fn" />
            <variable doc="[Array] data that is provided to the function.  This accepts&#xA;either a single item or an array.  If an array is provided, the&#xA;function is executed with one parameter for each array item.  If&#xA;you need to pass a single array parameter, it needs to be wrapped in&#xA;an array [myarray]" ilk="argument" name="data" />
            <variable citdl="Boolean" doc="if true, executes continuously at supplied&#xA;interval until canceled" ilk="argument" name="periodic" />
            <variable citdl="OB" name="this" />
            <variable attributes="__local__ private" line="855" name="r" />
            <variable attributes="__local__ private" citdl="fn" line="855" name="m" />
            <variable attributes="__local__ private" citdl="data" line="855" name="d" />
            <variable attributes="__local__ private" line="855" name="f" />
            <scope attributes="__local__ private" ilk="function" line="869" lineend="871" name="f" signature="f()" />
          </scope>
          <scope doc="A convenience method for detecting a legitimate non-null value.&#xA;Returns false for null/undefined/NaN, true for other values,&#xA;including 0/false/&apos;&apos;" ilk="function" line="896" lineend="899" name="isValue" returns="Boolean" signature="isValue(o)">
            <variable citdl="any" doc="the item to test" ilk="argument" name="o" />
            <variable citdl="OB" name="this" />
          </scope>
        </variable>
        <scope attributes="__local__ private" ilk="function" line="925" lineend="927" name="(anonymous)" returns="o" signature="(anonymous)(o, prop)">
          <variable ilk="argument" name="o" />
          <variable ilk="argument" name="prop" />
        </scope>
      </scope>
      <variable citdl="YAHOO.widget.Menu" line="409" name="Menu" />
      <scope attributes="__local__ private" ilk="function" line="460" lineend="990" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.util.AttributeProvider" doc="internal shorthand" line="463" name="AttributeProvider" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" doc="internal shorthand" line="463" name="Dom" />
        <scope attributes="__local__ private" ilk="class" line="846" lineend="885" name="_initElement">
          <scope attributes="__local__ private __ctor__" ilk="function" line="846" lineend="896" name="_initElement" signature="_initElement(el, attr)">
            <variable ilk="argument" name="el" />
            <variable ilk="argument" name="attr" />
            <variable citdl="_initElement" name="this" />
            <variable attributes="__local__ private" citdl="Boolean" line="870" name="isReady" />
          </scope>
          <variable citdl="this._queue" line="847" name="_queue" />
          <variable citdl="this._events" line="848" name="_events" />
          <variable citdl="this._configs" line="849" name="_configs" />
          <variable citdl="Array" line="850" name="_configOrder" />
          <variable citdl="Object" line="854" lineend="868" name="DOM_EVENTS">
            <variable citdl="Boolean" line="855" name="click" />
            <variable citdl="Boolean" line="856" name="dblclick" />
            <variable citdl="Boolean" line="857" name="keydown" />
            <variable citdl="Boolean" line="858" name="keypress" />
            <variable citdl="Boolean" line="859" name="keyup" />
            <variable citdl="Boolean" line="860" name="mousedown" />
            <variable citdl="Boolean" line="861" name="mousemove" />
            <variable citdl="Boolean" line="862" name="mouseout" />
            <variable citdl="Boolean" line="863" name="mouseover" />
            <variable citdl="Boolean" line="864" name="mouseup" />
            <variable citdl="Boolean" line="865" name="focus" />
            <variable citdl="Boolean" line="866" name="blur" />
            <variable citdl="Boolean" line="867" name="submit" />
          </variable>
        </scope>
        <scope attributes="__local__ private" ilk="function" line="898" lineend="908" name="_initHTMLElement" signature="_initHTMLElement(attr)">
          <variable ilk="argument" name="attr" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="910" lineend="915" name="_initContent" signature="_initContent(attr)">
          <variable ilk="argument" name="attr" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: Sets the value of the property and fires beforeChange and change events." ilk="function" line="926" lineend="935" name="_registerHTMLAttr" signature="_registerHTMLAttr(key, map)">
          <variable citdl="String" doc="The name of the config to register" ilk="argument" name="key" />
          <variable citdl="Object" doc="A key-value map of the config&apos;s params" ilk="argument" name="map" />
          <variable attributes="__local__ private" citdl="this.get()" line="927" name="el" />
        </scope>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="468" lineend="887" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="470" name="Event" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="470" name="Dom" />
        <scope attributes="__local__ private" ilk="class" line="482" lineend="496" name="Tab">
          <scope attributes="__local__ private __ctor__" doc="CONSTRUCTOR: A representation of a Tab&apos;s label and content." ilk="function" line="482" lineend="504" name="Tab" signature="Tab(el, attr)">
            <variable ilk="argument" name="el" />
            <variable ilk="argument" name="attr" />
            <variable citdl="Tab" name="this" />
          </scope>
          <variable citdl="Object" line="493" lineend="499" name="loadHandler">
            <scope ilk="function" line="494" lineend="496" name="success" signature="success(o)">
              <variable ilk="argument" name="o" />
              <variable citdl="loadHandler" name="this" />
            </scope>
            <scope ilk="function" line="497" lineend="498" name="failure" signature="failure(o)">
              <variable ilk="argument" name="o" />
              <variable citdl="loadHandler" name="this" />
            </scope>
          </variable>
          <variable citdl="Object" line="503" lineend="503" name="DOM_EVENTS" />
        </scope>
        <variable attributes="__local__ private" citdl="Tab.prototype" line="507" name="proto">
          <scope doc="Provides a readable name for the tab." ilk="function" line="571" lineend="575" name="toString" returns="String" signature="toString()">
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this.get()" line="572" name="el" />
            <variable attributes="__local__ private" citdl="el.id" line="573" name="id" />
          </scope>
          <scope doc="setAttributeConfigs TabView specific properties." ilk="function" line="582" lineend="803" name="initAttributes" signature="initAttributes(attr)">
            <variable citdl="Object" doc="Hash of initial attributes" ilk="argument" name="attr" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this.get()" line="586" name="el" />
            <variable attributes="__local__ private" citdl="Boolean" line="669" name="_dataLoaded" />
          </scope>
        </variable>
        <scope attributes="__local__ private" ilk="function" line="805" lineend="827" name="_createTabElement" returns="el" signature="_createTabElement(attr)">
          <variable ilk="argument" name="attr" />
          <variable attributes="__local__ private" citdl="document.createElement()" line="806" name="el" />
          <variable attributes="__local__ private" citdl="document.createElement()" line="807" name="a" />
          <variable attributes="__local__ private" citdl="attr.label" line="813" name="label" />
          <variable attributes="__local__ private" citdl="attr.labelEl" line="814" name="labelEl" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="829" lineend="831" name="_getlabelEl" returns="this.getElementsByTagName()[0]" signature="_getlabelEl()" />
        <scope attributes="__local__ private" ilk="function" line="833" lineend="836" name="_createlabelEl" returns="el" signature="_createlabelEl()">
          <variable attributes="__local__ private" citdl="document.createElement()" line="834" name="el" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="838" lineend="841" name="_setLabel" signature="_setLabel(label)">
          <variable ilk="argument" name="label" />
          <variable attributes="__local__ private" citdl="this.get()" line="839" name="el" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="843" lineend="852" name="_getLabel" returns="el.innerHTML" signature="_getLabel()">
          <variable attributes="__local__ private" citdl="this.get()" line="845" name="el" />
          <variable attributes="__local__ private" line="845" name="label" />
        </scope>
        <scope attributes="__local__ private" ilk="class" line="854" lineend="872" name="_dataConnect">
          <scope attributes="__local__ private __ctor__" ilk="function" line="854" lineend="884" name="_dataConnect" returns="Boolean" signature="_dataConnect()">
            <variable citdl="_dataConnect" name="this" />
          </scope>
          <variable citdl="Boolean" line="860" name="_loading" />
          <variable citdl="YAHOO.util.Connect.asyncRequest()" line="883" name="dataConnection" />
        </scope>
      </scope>
      <scope doc="Handles animation queueing and threading.&#xA;Used by Anim and subclasses." ilk="class" line="471" lineend="642" name="YAHOO.util.AnimMgr">
        <variable attributes="__local__ private" citdl="Number" doc="PRIVATE: Reference to the animation Interval." line="478" name="thread" />
        <variable attributes="__local__ private" citdl="Array" doc="PRIVATE: The current queue of registered animation objects." line="486" name="queue" />
        <variable attributes="__local__ private" citdl="Number" doc="PRIVATE: The number of active animations." line="494" name="tweenCount" />
        <variable citdl="Number" doc="Base frame rate (frames per second).&#xA;Arbitrarily high for better x-browser calibration (slower browsers drop more frames)." line="503" name="fps" />
        <variable citdl="Number" doc="Interval delay in milliseconds, defaults to fastest possible." line="511" name="delay" />
        <scope doc="Adds an animation instance to the animation queue.&#xA;All animation instances must be registered in order to animate." ilk="function" line="519" lineend="524" name="registerElement" signature="registerElement(tween)">
          <variable citdl="Object" doc="The Anim instance to be be registered" ilk="argument" name="tween" />
          <variable citdl="YAHOO.util.AnimMgr" name="this" />
        </scope>
        <scope attributes="private" doc="PRIVATE: removes an animation instance from the animation queue.&#xA;All animation instances must be registered in order to animate." ilk="function" line="534" lineend="549" name="unRegister" returns="Boolean" signature="unRegister(tween, index)">
          <variable citdl="Object" doc="The Anim instance to be be registered" ilk="argument" name="tween" />
          <variable citdl="Number" doc="The index of the Anim instance" ilk="argument" name="index" />
          <variable citdl="YAHOO.util.AnimMgr" name="this" />
        </scope>
        <scope doc="Starts the animation thread.&#xA;Only one thread can run at a time." ilk="function" line="556" lineend="560" name="start" signature="start()">
          <variable citdl="YAHOO.util.AnimMgr" name="this" />
        </scope>
        <scope doc="Stops the animation thread or a specific animation instance." ilk="function" line="568" lineend="583" name="stop" signature="stop(tween)">
          <variable citdl="Object" doc="A specific Anim instance to stop (optional)&#xA;If no instance given, Manager stops thread and all animations." ilk="argument" name="tween" />
          <variable citdl="YAHOO.util.AnimMgr" name="this" />
        </scope>
        <scope doc="Called per Interval to handle each animation frame." ilk="function" line="589" lineend="605" name="run" signature="run()">
          <variable citdl="YAHOO.util.AnimMgr" name="this" />
          <variable attributes="__local__ private" citdl="queue[i]" line="591" name="tween" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="607" lineend="614" name="getIndex" returns="Number" signature="getIndex(anim)">
          <variable ilk="argument" name="anim" />
          <variable citdl="YAHOO.util.AnimMgr" name="this" />
        </scope>
        <scope attributes="__local__ private" doc="PRIVATE: On the fly frame correction to keep animation on time." ilk="function" line="622" lineend="641" name="correctFrame" signature="correctFrame(tween)">
          <variable citdl="Object" doc="The Anim instance being corrected." ilk="argument" name="tween" />
          <variable citdl="YAHOO.util.AnimMgr" name="this" />
          <variable attributes="__local__ private" citdl="tween.totalFrames" line="623" name="frames" />
          <variable attributes="__local__ private" citdl="tween.currentFrame" line="624" name="frame" />
          <variable attributes="__local__ private" line="625" name="expected" />
          <variable attributes="__local__ private" line="626" name="elapsed" />
          <variable attributes="__local__ private" citdl="Number" line="627" name="tweak" />
        </scope>
      </scope>
      <variable citdl="String" doc="always every other" line="493" name="op" />
      <scope doc="Used to calculate Bezier splines for any number of control points." ilk="class" line="649" lineend="679" name="YAHOO.util.Bezier">
        <scope doc="Get the current position of the animated element based on t.&#xA;Each point is an array of &quot;x&quot; and &quot;y&quot; values (0 = x, 1 = y)&#xA;At least 2 points are required (start and end).&#xA;First point is start. Last point is end.&#xA;Additional control points are optional." ilk="function" line="661" lineend="678" name="getPosition" returns="Array" signature="getPosition(points, t)">
          <variable citdl="Array" doc="An array containing Bezier points" ilk="argument" name="points" />
          <variable citdl="Number" doc="A number between 0 and 1 which is the basis for determining current position" ilk="argument" name="t" />
          <variable citdl="YAHOO.util.Bezier" name="this" />
          <variable attributes="__local__ private" citdl="points.length" line="662" name="n" />
          <variable attributes="__local__ private" citdl="Array" line="663" name="tmp" />
        </scope>
      </scope>
      <scope attributes="__local__ private" doc="&lt;p&gt;Provides a fixed position unit containing a header, body and footer for use with a YAHOO.widget.Layout instance.&lt;/p&gt;" ilk="function" line="659" lineend="2045" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.lang" line="663" name="Lang" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Selector" line="663" name="Sel" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="663" name="Event" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="663" name="Dom" />
        <scope attributes="__local__ private" classrefs="YAHOO.util.Element" ilk="class" line="674" lineend="678" name="LayoutUnit">
          <scope attributes="__local__ private __ctor__" doc="CONSTRUCTOR: &lt;p&gt;Provides a fixed position unit containing a header, body and footer for use with a YAHOO.widget.Layout instance.&lt;/p&gt;" ilk="function" line="674" lineend="682" name="LayoutUnit" signature="LayoutUnit(el, config)">
            <variable citdl="String/HTMLElement" doc="The element to make a unit." ilk="argument" name="el" />
            <variable ilk="argument" name="config" />
            <variable citdl="LayoutUnit" name="this" />
            <variable attributes="__local__ private" citdl="Object" line="676" lineend="679" name="oConfig">
              <variable citdl="el" line="677" name="element" />
              <variable citdl="config" line="678" name="attributes" />
            </variable>
          </scope>
          <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Internal hash table for all layout unit instances" line="691" lineend="691" name="_instances" />
          <scope attributes="__static__" doc="STATIC: Get&apos;s a layout unit object by the HTML id of the element associated with the Layout Unit object." ilk="function" line="698" lineend="703" name="getLayoutUnitById" returns="Object" signature="getLayoutUnitById(id)">
            <variable ilk="argument" name="id" />
            <variable citdl="LayoutUnit" name="this" />
          </scope>
          <variable citdl="String" doc="String used for close button title" line="711" name="STR_CLOSE" />
          <variable citdl="String" doc="String used for collapse button title" line="717" name="STR_COLLAPSE" />
          <variable citdl="String" doc="String used for expand button title" line="723" name="STR_EXPAND" />
          <variable citdl="Object" doc="A modified version of the YAHOO.env.ua object" line="729" name="browser" />
          <variable attributes="private" citdl="Object" doc="PRIVATE: A collection of the current sizes of the contents of this Layout Unit" line="736" lineend="1337" name="_sizes">
            <variable citdl="Object" line="1321" lineend="1324" name="wrap">
              <variable citdl="Number" line="1322" name="h" />
              <variable citdl="Number" line="1323" name="w" />
            </variable>
            <variable citdl="Object" line="1325" lineend="1328" name="header">
              <variable citdl="Number" line="1326" name="h" />
              <variable citdl="Number" line="1327" name="w" />
            </variable>
            <variable citdl="Object" line="1329" lineend="1332" name="body">
              <variable citdl="Number" line="1330" name="h" />
              <variable citdl="Number" line="1331" name="w" />
            </variable>
            <variable citdl="Object" line="1333" lineend="1336" name="footer">
              <variable citdl="Number" line="1334" name="h" />
              <variable citdl="Number" line="1335" name="w" />
            </variable>
          </variable>
          <variable attributes="private" citdl="YAHOO.util.Anim" doc="PRIVATE: A reference to the Animation instance used by this LayouUnit" line="743" name="_anim" />
          <variable attributes="private" citdl="YAHOO.util.Resize" doc="PRIVATE: A reference to the Resize instance used by this LayoutUnit" line="750" name="_resize" />
          <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: A reference to the clip element used when collapsing the unit" line="757" name="_clip" />
          <variable attributes="private" citdl="Object" doc="PRIVATE: A simple hash table used to store the gutter to apply to the Unit" line="764" lineend="1319" name="_gutter">
            <variable citdl="Number" line="1315" name="left" />
            <variable citdl="Number" line="1316" name="right" />
            <variable citdl="Number" line="1317" name="top" />
            <variable citdl="Number" line="1318" name="bottom" />
          </variable>
          <variable citdl="HTMLElement" doc="A reference to the HTML element used for the Header" line="770" name="header" />
          <variable citdl="HTMLElement" doc="A reference to the HTML element used for the body" line="776" name="body" />
          <variable citdl="HTMLElement" doc="A reference to the HTML element used for the footer" line="782" name="footer" />
          <variable attributes="private" citdl="Boolean" doc="PRIVATE: Flag to determine if the unit is collapsed or not." line="789" name="_collapsed" />
          <variable attributes="private" citdl="Boolean" doc="PRIVATE: A flag set while the unit is being collapsed, used so we don&apos;t fire events while animating the size" line="796" name="_collapsing" />
          <variable attributes="private" citdl="Number" doc="PRIVATE: A holder for the last known width of the unit" line="803" name="_lastWidth" />
          <variable attributes="private" citdl="Number" doc="PRIVATE: A holder for the last known height of the unit" line="810" name="_lastHeight" />
          <variable attributes="private" citdl="Number" doc="PRIVATE: A holder for the last known top of the unit" line="817" name="_lastTop" />
          <variable attributes="private" citdl="Number" doc="PRIVATE: A holder for the last known left of the unit" line="824" name="_lastLeft" />
          <variable attributes="private" citdl="Boolean" doc="PRIVATE: A holder for the last known scroll state of the unit" line="831" name="_lastScroll" />
          <variable attributes="private" citdl="Boolean" doc="PRIVATE: A holder for the last known scroll state of the center unit" line="838" name="_lastCenterScroll" />
          <variable attributes="private" citdl="Number" doc="PRIVATE: A holder for the last known scrollTop state of the unit" line="845" name="_lastScrollTop" />
          <scope doc="Resize either the unit or it&apos;s clipped state, also updating the box inside" ilk="function" line="852" lineend="904" name="resize" returns="YAHOO.widget.LayoutUnit" signature="resize(force)">
            <variable citdl="Boolean" doc="This will force full calculations even when the unit is collapsed" ilk="argument" name="force" />
            <variable attributes="__local__ private" citdl="this.fireEvent()" line="853" name="retVal" />
            <variable attributes="__local__ private" citdl="this.get()" line="858" name="scroll" />
            <variable attributes="__local__ private" citdl="Array" line="864" name="box" />
            <variable attributes="__local__ private" citdl="this._getBoxSize()" line="864" name="ft" />
            <variable attributes="__local__ private" citdl="this._getBoxSize()" line="864" name="hd" />
            <variable attributes="__local__ private" line="868" name="nh" />
            <variable attributes="__local__ private" citdl="box[1]" line="868" name="nw" />
            <variable attributes="__local__ private" citdl="nw" line="871" name="wrapW" />
            <variable attributes="__local__ private" citdl="this._setHeight()" line="871" name="wrapH" />
          </scope>
          <variable citdl="wrapH" line="881" name="h" />
          <variable citdl="wrapW" line="882" name="w" />
          <scope attributes="private" doc="PRIVATE: Sets the width of the element based on the border size of the element." ilk="function" line="913" lineend="921" name="_setWidth" returns="Number" signature="_setWidth(el, w)">
            <variable citdl="HTMLElement" doc="The HTMLElement to have it&apos;s width set" ilk="argument" name="el" />
            <variable citdl="Number" doc="The width that you want it the element set to" ilk="argument" name="w" />
            <variable attributes="__local__ private" citdl="this._getBorderSizes()" line="915" name="b" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Sets the height of the element based on the border size of the element." ilk="function" line="930" lineend="938" name="_setHeight" returns="Number" signature="_setHeight(el, h)">
            <variable citdl="HTMLElement" doc="The HTMLElement to have it&apos;s height set" ilk="argument" name="el" />
            <variable citdl="Number" doc="The height that you want it the element set to" ilk="argument" name="h" />
            <variable attributes="__local__ private" citdl="this._getBorderSizes()" line="932" name="b" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Fixes the box calculations for IE in QuirksMode" ilk="function" line="948" lineend="969" name="_fixQuirks" returns="Number" signature="_fixQuirks(el, dim, side)">
            <variable citdl="HTMLElement" doc="The HTMLElement to set the dimension on" ilk="argument" name="el" />
            <variable citdl="Number" doc="The number of the dimension to fix" ilk="argument" name="dim" />
            <variable citdl="String" doc="The dimension (h or w) to fix. Defaults to h" ilk="argument" name="side" />
            <variable attributes="__local__ private" citdl="Number" line="949" name="i1" />
            <variable attributes="__local__ private" citdl="Number" line="949" name="i2" />
            <variable attributes="__local__ private" citdl="this._getBorderSizes()" doc="Internet Explorer - Quirks Mode" line="957" name="bp" />
            <variable attributes="__local__ private" citdl="this._getBorderSizes()" doc="Internet Explorer - Quirks Mode" line="957" name="b" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Get&apos;s the elements clientHeight and clientWidth plus the size of the borders" ilk="function" line="977" lineend="988" name="_getBoxSize" returns="Array" signature="_getBoxSize(el)">
            <variable citdl="HTMLElement" doc="The HTMLElement to get the size of" ilk="argument" name="el" />
            <variable attributes="__local__ private" citdl="Array" line="978" name="size" />
            <variable attributes="__local__ private" citdl="this._getBorderSizes()" line="983" name="b" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Get the CSS border size of the element passed." ilk="function" line="996" lineend="1014" name="_getBorderSizes" returns="Array" signature="_getBorderSizes(el)">
            <variable citdl="HTMLElement" doc="The element to get the border size of" ilk="argument" name="el" />
            <variable attributes="__local__ private" citdl="Array" line="997" name="s" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Create the clip element used when the Unit is collapsed" ilk="function" line="1020" lineend="1030" name="_createClip" signature="_createClip()">
            <variable attributes="__local__ private" citdl="this._clip.firstChild" line="1025" name="c" />
          </scope>
          <variable citdl="String" line="1023" name="className" />
          <variable citdl="String" line="1024" name="innerHTML" />
          <scope attributes="private" doc="PRIVATE: Toggle th current state of the Clip element and set it&apos;s height, width and position" ilk="function" line="1036" lineend="1079" name="_toggleClip" signature="_toggleClip()">
            <variable attributes="__local__ private" citdl="Array" doc="show" line="1041" name="box" />
            <variable attributes="__local__ private" citdl="this._getBoxSize()" doc="show" line="1041" name="ft" />
            <variable attributes="__local__ private" citdl="this._getBoxSize()" doc="show" line="1041" name="hd" />
            <variable attributes="__local__ private" line="1046" name="nh" />
            <variable attributes="__local__ private" line="1046" name="wrapH" />
            <variable attributes="__local__ private" citdl="box[1]" line="1046" name="nw" />
          </scope>
          <scope doc="Get a reference to the internal sizes object for this unit" ilk="function" line="1085" lineend="1087" name="getSizes" returns="Object" signature="getSizes()" />
          <scope doc="Toggles the Unit, replacing it with a clipped version." ilk="function" line="1093" lineend="1100" name="toggle" returns="YAHOO.widget.LayoutUnit" signature="toggle()" />
          <scope doc="Expand the Unit if it is collapsed." ilk="function" line="1106" lineend="1202" name="expand" returns="YAHOO.widget.LayoutUnit" signature="expand()">
            <variable attributes="__local__ private" citdl="this.fireEvent()" line="1110" name="retVal" />
            <variable attributes="__local__ private" citdl="this.get().getSizes()[this.get(&apos;position&apos;)]" line="1121" name="s" />
            <variable attributes="__local__ private" citdl="Object" doc="Animation Fails Here" line="1121" lineend="1154" name="attr">
              <variable citdl="Object" line="1133" lineend="1135" name="left">
                <variable citdl="left" line="1134" name="to" />
                <variable line="1138" name="from" />
              </variable>
              <variable citdl="Object" line="1151" lineend="1153" name="top">
                <variable citdl="top" line="1152" name="to" />
                <variable line="1157" name="from" />
              </variable>
            </variable>
            <variable attributes="__local__ private" citdl="s.l" line="1131" name="left" />
            <variable attributes="__local__ private" citdl="s.t" line="1149" name="top" />
            <scope attributes="__local__ private" ilk="function" line="1163" lineend="1167" name="exStart" signature="exStart()" />
            <scope attributes="__local__ private" ilk="class" line="1168" lineend="1181" name="expand">
              <scope attributes="__local__ private __ctor__" ilk="function" line="1168" lineend="1181" name="expand" signature="expand()">
                <variable citdl="expand" name="this" />
              </scope>
              <variable citdl="Boolean" line="1169" name="_collapsing" />
              <variable citdl="Boolean" line="1173" name="_collapsed" />
              <variable citdl="this._lastScrollTop" line="1177" name="scrollTop" />
            </scope>
          </scope>
          <variable citdl="attr" line="1162" name="attributes" />
          <variable citdl="this._lastScrollTop" line="1197" name="scrollTop" />
          <scope doc="Collapse the Unit if it is not collapsed." ilk="function" line="1208" lineend="1292" name="collapse" returns="YAHOO.widget.LayoutUnit" signature="collapse()">
            <variable attributes="__local__ private" citdl="this.fireEvent()" line="1212" name="retValue" />
            <variable attributes="__local__ private" citdl="this.get()" line="1222" name="h" />
            <variable attributes="__local__ private" citdl="Object" line="1222" lineend="1261" name="attr">
              <variable citdl="Object" line="1246" lineend="1248" name="top">
                <variable line="1247" name="to" />
              </variable>
              <variable citdl="Object" line="1258" lineend="1265" name="left">
                <variable line="1259" name="to" />
              </variable>
            </variable>
            <variable attributes="__local__ private" citdl="this.get()" line="1222" name="w" />
            <variable attributes="__local__ private" citdl="this.get()" line="1239" name="pos" />
            <scope attributes="__local__ private" ilk="class" line="1271" lineend="1279" name="collapse">
              <scope attributes="__local__ private __ctor__" ilk="function" line="1271" lineend="1279" name="collapse" signature="collapse()">
                <variable citdl="collapse" name="this" />
              </scope>
              <variable citdl="Boolean" line="1272" name="_collapsing" />
              <variable citdl="Boolean" line="1275" name="_collapsed" />
            </scope>
          </scope>
          <scope doc="Close the unit, removing it from the parent Layout." ilk="function" line="1298" lineend="1307" name="close" returns="YAHOO.widget.Layout" signature="close()" />
          <scope attributes="private" doc="PRIVATE: The initalization method inherited from Element." ilk="function" line="1313" lineend="1372" name="init" signature="init(p_oElement, p_oAttributes)">
            <variable ilk="argument" name="p_oElement" />
            <variable ilk="argument" name="p_oAttributes" />
            <variable attributes="__local__ private" citdl="p_oElement" line="1343" name="id" />
            <variable attributes="__local__ private" citdl="this.getElementsByClassName()[0]" line="1355" name="header" />
            <variable attributes="__local__ private" citdl="this.getElementsByClassName()[0]" line="1359" name="body" />
            <variable attributes="__local__ private" citdl="this.getElementsByClassName()[0]" line="1363" name="footer" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Processes the config" ilk="function" line="1378" lineend="1919" name="initAttributes" signature="initAttributes(attr)">
            <variable ilk="argument" name="attr" />
          </scope>
          <scope attributes="private" doc="PRIVATE: This method attempts to clean up the first level of the YUI CSS Grids, YAHOO.util.Selector is required for this operation." ilk="function" line="1925" lineend="1936" name="_cleanGrids" signature="_cleanGrids()">
            <variable attributes="__local__ private" citdl="Sel.query()" line="1927" name="b" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Creates the HTMLElement for the header" ilk="function" line="1943" lineend="1953" name="_createHeader" returns="HTMLElement" signature="_createHeader()">
            <variable attributes="__local__ private" citdl="document.createElement()" line="1944" name="header" />
          </scope>
          <scope doc="Removes this unit from the parent and cleans up after itself." ilk="function" line="1959" lineend="1985" name="destroy" returns="YAHOO.widget.Layout" signature="destroy()">
            <variable attributes="__local__ private" citdl="this.get()" line="1963" name="par" />
          </scope>
          <scope doc="Returns a string representing the LayoutUnit." ilk="function" line="1991" lineend="1996" name="toString" returns="String" signature="toString()" />
        </scope>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="680" lineend="813" name="(anonymous)" signature="(anonymous)()">
        <scope attributes="__local__ private" ilk="class" line="703" lineend="705" name="ColorAnim">
          <scope attributes="__local__ private __ctor__" doc="CONSTRUCTOR: Anim subclass for color transitions.&#xA;&lt;p&gt;Usage: &lt;code&gt;var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: &apos;#FF0000&apos;, to: &apos;#FFFFFF&apos; } }, 1, Y.Easing.easeOut);&lt;/code&gt; Color values can be specified with either 112233, #112233,&#xA;[255,255,255], or rgb(255,255,255)&lt;/p&gt;" ilk="function" line="703" lineend="705" name="ColorAnim" signature="ColorAnim(el, attributes, duration, method)">
            <variable ilk="argument" name="el" />
            <variable citdl="Object" doc="The attribute(s) to be animated.&#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.&#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).&#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
            <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
            <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
            <variable citdl="ColorAnim" name="this" />
          </scope>
          <variable citdl="String" line="707" name="NAME" />
        </scope>
        <variable attributes="__local__ private" citdl="YAHOO.util" doc="shorthand" line="710" name="Y" />
        <variable attributes="__local__ private" citdl="ColorAnim.superclass" line="713" name="superclass" />
        <variable attributes="__local__ private" citdl="ColorAnim.prototype" line="714" name="proto">
          <variable citdl="Object" line="716" name="patterns">
            <variable line="716" name="color" />
            <variable line="717" name="rgb" />
            <variable line="718" name="hex" />
            <variable line="719" name="hex3" />
            <variable line="720" name="transparent" />
          </variable>
          <scope doc="Attempts to parse the given string and return a 3-tuple." ilk="function" line="728" lineend="747" name="parseColor" returns="Array" signature="parseColor(s)">
            <variable citdl="String" doc="The string to parse." ilk="argument" name="s" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this.patterns.hex.exec()" line="731" name="c" />
          </scope>
          <scope ilk="function" line="749" lineend="771" name="getAttribute" returns="val" signature="getAttribute(attr)">
            <variable ilk="argument" name="attr" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this.getEl()" line="750" name="el" />
            <variable attributes="__local__ private" citdl="YAHOO.util.Dom.getStyle()" line="752" name="val" />
            <variable attributes="__local__ private" citdl="el.parentNode" doc="bgcolor default" line="755" name="parent" />
          </scope>
          <scope ilk="function" line="773" lineend="789" name="doMethod" returns="val" signature="doMethod(attr, start, end)">
            <variable ilk="argument" name="attr" />
            <variable ilk="argument" name="start" />
            <variable ilk="argument" name="end" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="Array" line="774" name="val" />
          </scope>
          <scope ilk="function" line="791" lineend="810" name="setRuntimeAttribute" signature="setRuntimeAttribute(attr)">
            <variable ilk="argument" name="attr" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this.attributes" line="795" name="attributes" />
            <variable attributes="__local__ private" citdl="this.parseColor()" line="796" name="start" />
            <variable attributes="__local__ private" citdl="this.parseColor()" line="797" name="end" />
          </scope>
        </variable>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="683" lineend="1824" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" name="m_oModuleTemplate" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" name="m_oBodyTemplate" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" name="Dom" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" name="Module" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" name="m_oHeaderTemplate" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" lineend="754" name="EVENT_TYPES">
          <variable citdl="String" line="740" name="BEFORE_INIT" />
          <variable citdl="String" line="741" name="INIT" />
          <variable citdl="String" line="742" name="APPEND" />
          <variable citdl="String" line="743" name="BEFORE_RENDER" />
          <variable citdl="String" line="744" name="RENDER" />
          <variable citdl="String" line="745" name="CHANGE_HEADER" />
          <variable citdl="String" line="746" name="CHANGE_BODY" />
          <variable citdl="String" line="747" name="CHANGE_FOOTER" />
          <variable citdl="String" line="748" name="CHANGE_CONTENT" />
          <variable citdl="String" line="749" name="DESTORY" />
          <variable citdl="String" line="750" name="BEFORE_SHOW" />
          <variable citdl="String" line="751" name="SHOW" />
          <variable citdl="String" line="752" name="BEFORE_HIDE" />
          <variable citdl="String" line="753" name="HIDE" />
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" name="CustomEvent" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" name="m_oFooterTemplate" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" name="Config" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" name="Event" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the Module&apos;s configuration properties" line="763" lineend="786" name="DEFAULT_CONFIG">
          <variable citdl="Object" line="765" lineend="769" name="VISIBLE">
            <variable citdl="String" line="766" name="key" />
            <variable citdl="Boolean" line="767" name="value" />
            <variable citdl="YAHOO.lang.isBoolean" line="768" name="validator" />
          </variable>
          <variable citdl="Object" line="771" lineend="775" name="EFFECT">
            <variable citdl="String" line="772" name="key" />
            <variable citdl="Boolean" line="773" name="suppressEvent" />
            <variable citdl="Array" line="774" name="supercedes" />
          </variable>
          <variable citdl="Object" line="777" lineend="780" name="MONITOR_RESIZE">
            <variable citdl="String" line="778" name="key" />
            <variable citdl="Boolean" line="779" name="value" />
          </variable>
          <variable citdl="Object" line="782" lineend="785" name="APPEND_TO_DOCUMENT_BODY">
            <variable citdl="String" line="783" name="key" />
            <variable citdl="Boolean" line="784" name="value" />
          </variable>
        </variable>
        <scope attributes="__local__ private" ilk="function" line="860" lineend="876" name="createModuleTemplate" returns="m_oModuleTemplate" signature="createModuleTemplate()" />
        <scope attributes="__local__ private" ilk="function" line="878" lineend="883" name="createHeader" signature="createHeader()" />
        <scope attributes="__local__ private" ilk="function" line="885" lineend="890" name="createBody" signature="createBody()" />
        <scope attributes="__local__ private" ilk="function" line="892" lineend="897" name="createFooter" signature="createFooter()" />
      </scope>
      <scope attributes="__local__ private" ilk="function" line="683" lineend="1824" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" name="m_oModuleTemplate" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" name="m_oBodyTemplate" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" name="Dom" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" name="Module" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" name="m_oHeaderTemplate" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" lineend="754" name="EVENT_TYPES">
          <variable citdl="String" line="740" name="BEFORE_INIT" />
          <variable citdl="String" line="741" name="INIT" />
          <variable citdl="String" line="742" name="APPEND" />
          <variable citdl="String" line="743" name="BEFORE_RENDER" />
          <variable citdl="String" line="744" name="RENDER" />
          <variable citdl="String" line="745" name="CHANGE_HEADER" />
          <variable citdl="String" line="746" name="CHANGE_BODY" />
          <variable citdl="String" line="747" name="CHANGE_FOOTER" />
          <variable citdl="String" line="748" name="CHANGE_CONTENT" />
          <variable citdl="String" line="749" name="DESTORY" />
          <variable citdl="String" line="750" name="BEFORE_SHOW" />
          <variable citdl="String" line="751" name="SHOW" />
          <variable citdl="String" line="752" name="BEFORE_HIDE" />
          <variable citdl="String" line="753" name="HIDE" />
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" name="CustomEvent" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" name="m_oFooterTemplate" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" name="Config" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Module&apos;s events" line="739" name="Event" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the Module&apos;s configuration properties" line="763" lineend="786" name="DEFAULT_CONFIG">
          <variable citdl="Object" line="765" lineend="769" name="VISIBLE">
            <variable citdl="String" line="766" name="key" />
            <variable citdl="Boolean" line="767" name="value" />
            <variable citdl="YAHOO.lang.isBoolean" line="768" name="validator" />
          </variable>
          <variable citdl="Object" line="771" lineend="775" name="EFFECT">
            <variable citdl="String" line="772" name="key" />
            <variable citdl="Boolean" line="773" name="suppressEvent" />
            <variable citdl="Array" line="774" name="supercedes" />
          </variable>
          <variable citdl="Object" line="777" lineend="780" name="MONITOR_RESIZE">
            <variable citdl="String" line="778" name="key" />
            <variable citdl="Boolean" line="779" name="value" />
          </variable>
          <variable citdl="Object" line="782" lineend="785" name="APPEND_TO_DOCUMENT_BODY">
            <variable citdl="String" line="783" name="key" />
            <variable citdl="Boolean" line="784" name="value" />
          </variable>
        </variable>
        <scope attributes="__local__ private" ilk="function" line="860" lineend="876" name="createModuleTemplate" returns="m_oModuleTemplate" signature="createModuleTemplate()" />
        <scope attributes="__local__ private" ilk="function" line="878" lineend="883" name="createHeader" signature="createHeader()" />
        <scope attributes="__local__ private" ilk="function" line="885" lineend="890" name="createBody" signature="createBody()" />
        <scope attributes="__local__ private" ilk="function" line="892" lineend="897" name="createFooter" signature="createFooter()" />
      </scope>
      <scope attributes="__local__ private" ilk="function" line="827" lineend="5902" name="(anonymous)" signature="(anonymous)()">
        <scope attributes="__local__ private" doc="PRIVATE: Checks to make sure that the value of the &quot;position&quot; property&#xA;is one of the supported strings. Returns true if the position is supported." ilk="function" line="879" lineend="887" name="checkPosition" returns="Boolean" signature="checkPosition(p_sPosition)">
          <variable citdl="Object" doc="String specifying the position of the menu." ilk="argument" name="p_sPosition" />
        </scope>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Menu&apos;s events" line="909" name="Lang" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Menu&apos;s events" line="909" name="MenuManager" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Menu&apos;s events" line="909" name="Overlay" />
        <variable attributes="__local__ private constant" citdl="Object" classrefs="Overlay" doc="PRIVATE CONSTANT: Constant representing the name of the Menu&apos;s events" line="909" lineend="5902" name="Menu">
          <variable attributes="constant" citdl="String" doc="CONSTANT: String representing the CSS class(es) to be applied to the&#xA;menu&apos;s &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element." line="1058" name="CSS_CLASS_NAME" />
          <variable attributes="constant" citdl="YAHOO.widget.MenuItem" doc="CONSTANT: Object representing the type of menu item to instantiate and&#xA;add when parsing the child nodes (either &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element,&#xA;&lt;code&gt;&amp;#60;optgroup&amp;#62;&lt;/code&gt; element or &lt;code&gt;&amp;#60;option&amp;#62;&lt;/code&gt;)&#xA;of the menu&apos;s source HTML element." line="1071" name="ITEM_TYPE" />
          <variable attributes="constant" citdl="String" doc="CONSTANT: String representing the tagname of the HTML element used to&#xA;title the menu&apos;s item groups." line="1082" name="GROUP_TITLE_TAG_NAME" />
          <variable attributes="constant" citdl="Array" doc="CONSTANT: Array representing the default x and y position that a menu&#xA;should have when it is positioned outside the viewport by the&#xA;&quot;poistionOffScreen&quot; method." line="1094" name="OFF_SCREEN_POSITION" />
          <variable attributes="private" citdl="Number" doc="PRIVATE: Number representing the time-out setting used to cancel the&#xA;hiding of a menu." line="1108" name="_nHideDelayId" />
          <variable attributes="private" citdl="Number" doc="PRIVATE: Number representing the time-out setting used to cancel the&#xA;showing of a menu." line="1119" name="_nShowDelayId" />
          <variable attributes="private" citdl="Number" doc="PRIVATE: Number representing the time-out setting used to cancel the&#xA;hiding of a submenu." line="1130" name="_nSubmenuHideDelayId" />
          <variable attributes="private" citdl="Number" doc="PRIVATE: Number representing the time-out setting used to cancel the&#xA;scrolling of the menu&apos;s body element." line="1141" name="_nBodyScrollId" />
          <variable attributes="private" citdl="Boolean" doc="PRIVATE: Boolean indicating if the &quot;mouseover&quot; and &quot;mouseout&quot; event&#xA;handlers used for hiding the menu via a call to &quot;window.setTimeout&quot; have&#xA;already been assigned." line="1153" name="_bHideDelayEventHandlersAssigned" />
          <variable attributes="private" citdl="Boolean" doc="PRIVATE: Boolean indicating the current state of the menu&apos;s&#xA;&quot;mouseover&quot; event." line="1164" name="_bHandledMouseOverEvent" />
          <variable attributes="private" citdl="Boolean" doc="PRIVATE: Boolean indicating the current state of the menu&apos;s&#xA;&quot;mouseout&quot; event." line="1175" name="_bHandledMouseOutEvent" />
          <variable attributes="private" citdl="Array" doc="PRIVATE: Array of HTML element used to title groups of menu items." line="1185" name="_aGroupTitleElements" />
          <variable attributes="private" citdl="Array" doc="PRIVATE: Multi-dimensional Array representing the menu items as they&#xA;are grouped in the menu." line="1196" name="_aItemGroups" />
          <variable attributes="private" citdl="Array" doc="PRIVATE: Array of &lt;code&gt;&amp;#60;ul&amp;#62;&lt;/code&gt; elements, each of which is&#xA;the parent node for each item&apos;s &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element." line="1207" name="_aListElements" />
          <variable attributes="private" citdl="Number" doc="PRIVATE: The current x coordinate of the mouse inside the area of&#xA;the menu." line="1218" name="_nCurrentMouseX" />
          <variable attributes="private" citdl="Boolean" doc="PRIVATE: Stops &quot;mouseover,&quot; &quot;mouseout,&quot; and &quot;mousemove&quot; event handlers&#xA;from executing." line="1229" name="_bStopMouseEventHandlers" />
          <variable attributes="private" citdl="String" doc="PRIVATE: The current value of the &quot;classname&quot; configuration attribute." line="1239" name="_sClassName" />
          <variable citdl="Boolean" doc="Boolean indicating if the menu&apos;s &quot;lazy load&quot; feature is&#xA;enabled.  If set to &quot;true,&quot; initialization and rendering of the menu&apos;s&#xA;items will be deferred until the first time it is made visible.  This&#xA;property should be set via the constructor using the configuration&#xA;object literal." line="1256" name="lazyLoad" />
          <variable citdl="Array" doc="Array of items to be added to the menu.  The array can contain&#xA;strings representing the text for each item to be created, object literals&#xA;representing the menu item configuration properties, or MenuItem instances.&#xA;This property should be set via the constructor using the configuration&#xA;object literal." line="1269" name="itemData" />
          <variable citdl="YAHOO.widget.MenuItem" doc="Object reference to the item in the menu that has is selected." line="1278" name="activeItem" />
          <variable citdl="YAHOO.widget.MenuItem" doc="Object reference to the menu&apos;s parent menu or menu item.&#xA;This property can be set via the constructor using the configuration&#xA;object literal." line="1289" name="parent" />
          <variable citdl="HTMLSelectElement" doc="Object reference to the HTML element (either&#xA;&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt;) used to&#xA;create the menu." line="1303" name="srcElement" />
          <variable citdl="this.createEvent()" doc="Fires when the mouse has entered the menu.  Passes back&#xA;the DOM Event object as an argument." line="1315" name="mouseOverEvent" />
          <variable citdl="YAHOO.util.CustomEvent" doc="Fires when the mouse has left the menu.  Passes back the DOM&#xA;Event object as an argument." line="1324" name="mouseOutEvent" />
          <variable citdl="YAHOO.util.CustomEvent" doc="Fires when the user mouses down on the menu.  Passes back the&#xA;DOM Event object as an argument." line="1333" name="mouseDownEvent" />
          <variable citdl="YAHOO.util.CustomEvent" doc="Fires when the user releases a mouse button while the mouse is&#xA;over the menu.  Passes back the DOM Event object as an argument." line="1342" name="mouseUpEvent" />
          <variable citdl="YAHOO.util.CustomEvent" doc="Fires when the user clicks the on the menu.  Passes back the&#xA;DOM Event object as an argument." line="1351" name="clickEvent" />
          <variable citdl="YAHOO.util.CustomEvent" doc="Fires when the user presses an alphanumeric key when one of the&#xA;menu&apos;s items has focus.  Passes back the DOM Event object as an argument." line="1360" name="keyPressEvent" />
          <variable citdl="YAHOO.util.CustomEvent" doc="Fires when the user presses a key when one of the menu&apos;s items&#xA;has focus.  Passes back the DOM Event object as an argument." line="1369" name="keyDownEvent" />
          <variable citdl="YAHOO.util.CustomEvent" doc="Fires when the user releases a key when one of the menu&apos;s items&#xA;has focus.  Passes back the DOM Event object as an argument." line="1378" name="keyUpEvent" />
          <variable citdl="YAHOO.util.CustomEvent" doc="Fires when an item is added to the menu." line="1386" name="itemAddedEvent" />
          <variable citdl="YAHOO.util.CustomEvent" doc="Fires when an item is removed to the menu." line="1394" name="itemRemovedEvent" />
          <scope doc="The Menu class&apos;s initialization method. This method is&#xA;automatically called by the constructor, and sets up all DOM references&#xA;for pre-existing markup, and creates required markup if it is not&#xA;already present." ilk="function" line="1419" lineend="1562" name="init" signature="init(p_oElement, p_oConfig)">
            <variable citdl="String" doc="String specifying the id attribute of the&#xA;&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source&#xA;for the menu." ilk="argument" name="p_oElement" />
            <variable citdl="Object" doc="Optional. Object literal specifying the&#xA;configuration for the menu. See configuration class documentation for&#xA;more details." ilk="argument" name="p_oConfig" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="document.getElementById()" line="1432" name="oElement" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Iterates the childNodes of the source element to find nodes&#xA;used to instantiate menu and menu items." ilk="function" line="1575" lineend="1737" name="_initSubTree" signature="_initSubTree()">
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="aListElements.length" line="1584" name="nListElements" />
            <variable attributes="__local__ private" citdl="this.body.firstChild" line="1584" name="oNode" />
            <variable attributes="__local__ private" citdl="this.GROUP_TITLE_TAG_NAME.toUpperCase()" line="1584" name="sGroupTitleTagName" />
            <variable attributes="__local__ private" line="1584" name="sSrcElementTagName" />
            <variable attributes="__local__ private" citdl="nListElements" line="1584" name="i" />
            <variable attributes="__local__ private" citdl="this._aListElements" line="1584" name="aListElements" />
            <variable attributes="__local__ private" citdl="Number" line="1584" name="nGroup" />
            <variable attributes="__local__ private" citdl="this.srcElement" line="1584" name="oSrcElement" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Returns the first enabled item in the menu." ilk="function" line="1746" lineend="1765" name="_getFirstEnabledItem" returns="YAHOO.widget.MenuItem" signature="_getFirstEnabledItem()">
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this.getItems()" line="1750" name="aItems" />
            <variable attributes="__local__ private" citdl="aItems.length" line="1750" name="nItems" />
            <variable attributes="__local__ private" citdl="aItems[i]" line="1750" name="oItem" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Adds a menu item to a group." ilk="function" line="1784" lineend="1954" name="_addItemToGroup" returns="YAHOO.widget.MenuItem" signature="_addItemToGroup(p_nGroupIndex, p_oItem, p_nItemIndex)">
            <variable citdl="Number" doc="Number indicating the group to which the&#xA;item belongs." ilk="argument" name="p_nGroupIndex" />
            <variable citdl="Object" doc="Object literal containing a set of menu item&#xA;configuration properties." ilk="argument" name="p_oItem" />
            <variable citdl="Number" doc="Optional. Number indicating the index at&#xA;which the menu item should be added." ilk="argument" name="p_nItemIndex" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="aGroup.length" line="1792" name="nItemIndex" />
            <variable attributes="__local__ private" citdl="this._getItemGroup()" line="1792" name="aGroup" />
            <variable attributes="__local__ private" line="1792" name="nGroupIndex" />
            <variable attributes="__local__ private" citdl="p_oItem" line="1792" name="oItem" />
            <variable attributes="__local__ private" line="1792" name="bAppend" />
            <variable attributes="__local__ private" citdl="aGroup[p_nItemIndex]" line="1792" name="oGroupItem" />
            <variable attributes="__local__ private" citdl="getNextItemSibling()" line="1792" name="oNextItemSibling" />
            <scope attributes="__local__ private" ilk="function" line="1794" lineend="1799" name="getNextItemSibling" signature="getNextItemSibling(p_aArray, p_nStartIndex)">
              <variable ilk="argument" name="p_aArray" />
              <variable ilk="argument" name="p_nStartIndex" />
            </scope>
          </scope>
          <scope attributes="private" doc="PRIVATE: Removes a menu item from a group by index.  Returns the menu&#xA;item that was removed." ilk="function" line="1968" lineend="2037" name="_removeItemFromGroupByIndex" returns="YAHOO.widget.MenuItem" signature="_removeItemFromGroupByIndex(p_nGroupIndex, p_nItemIndex)">
            <variable citdl="Number" doc="Number indicating the group to which the menu&#xA;item belongs." ilk="argument" name="p_nGroupIndex" />
            <variable citdl="Number" doc="Number indicating the index of the menu item&#xA;to be removed." ilk="argument" name="p_nItemIndex" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this._getItemGroup()" line="1974" name="aGroup" />
            <variable attributes="__local__ private" line="1974" name="nGroupIndex" />
            <variable attributes="__local__ private" citdl="this._aListElements[nGroupIndex]" line="1974" name="oUL" />
            <variable attributes="__local__ private" citdl="aGroup.splice()" line="1974" name="aArray" />
            <variable attributes="__local__ private" citdl="aArray[0]" line="1974" name="oItem" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Removes a menu item from a group by reference.  Returns the&#xA;menu item that was removed." ilk="function" line="2051" lineend="2090" name="_removeItemFromGroupByValue" returns="YAHOO.widget.MenuItem" signature="_removeItemFromGroupByValue(p_nGroupIndex, p_oItem)">
            <variable citdl="Number" doc="Number indicating the group to which the&#xA;menu item belongs." ilk="argument" name="p_nGroupIndex" />
            <variable citdl="YAHOO.widget.MenuItem" doc="Object reference for the MenuItem&#xA;instance to be removed." ilk="argument" name="p_oItem" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this._getItemGroup()" line="2056" name="aGroup" />
            <variable attributes="__local__ private" citdl="nItems" line="2056" name="i" />
            <variable attributes="__local__ private" citdl="aGroup.length" line="2056" name="nItems" />
            <variable attributes="__local__ private" citdl="Number" line="2056" name="nItemIndex" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Updates the &quot;index,&quot; &quot;groupindex,&quot; and &quot;className&quot; properties&#xA;of the menu items in the specified group." ilk="function" line="2100" lineend="2145" name="_updateItemProperties" signature="_updateItemProperties(p_nGroupIndex)">
            <variable citdl="Number" doc="Number indicating the group of items to update." ilk="argument" name="p_nGroupIndex" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this._getItemGroup()" line="2106" name="aGroup" />
            <variable attributes="__local__ private" citdl="oItem.element" line="2106" name="oLI" />
            <variable attributes="__local__ private" citdl="aGroup.length" line="2106" name="nItems" />
            <variable attributes="__local__ private" citdl="nItems" line="2106" name="i" />
            <variable attributes="__local__ private" citdl="aGroup[i]" line="2106" name="oItem" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Creates a new menu item group (array) and its associated&#xA;&lt;code&gt;&amp;#60;ul&amp;#62;&lt;/code&gt; element. Returns an aray of menu item groups." ilk="function" line="2156" lineend="2172" name="_createItemGroup" returns="Array" signature="_createItemGroup(p_nIndex)">
            <variable citdl="Number" doc="Number indicating the group to create." ilk="argument" name="p_nIndex" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="2158" name="oUL" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Returns the menu item group at the specified index." ilk="function" line="2183" lineend="2189" name="_getItemGroup" returns="Array" signature="_getItemGroup(p_nIndex)">
            <variable citdl="Number" doc="Number indicating the index of the menu item group&#xA;to be retrieved." ilk="argument" name="p_nIndex" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" line="2185" name="nIndex" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Subscribes the menu item&apos;s submenu to its parent menu&apos;s events." ilk="function" line="2199" lineend="2219" name="_configureSubmenu" signature="_configureSubmenu(p_oItem)">
            <variable citdl="YAHOO.widget.MenuItem" doc="Object reference for the MenuItem&#xA;instance with the submenu to be configured." ilk="argument" name="p_oItem" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="p_oItem.cfg.getProperty()" line="2201" name="oSubmenu" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Subscribes a menu to a menu item&apos;s event." ilk="function" line="2231" lineend="2242" name="_subscribeToItemEvents" signature="_subscribeToItemEvents(p_oItem)">
            <variable citdl="YAHOO.widget.MenuItem" doc="Object reference for the MenuItem&#xA;instance whose events should be subscribed to." ilk="argument" name="p_oItem" />
            <variable citdl="Menu" name="this" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Change event handler for the the menu&apos;s &quot;visible&quot; configuration&#xA;property." ilk="function" line="2254" lineend="2269" name="_onVisibleChange" signature="_onVisibleChange(p_sType, p_aArgs)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="p_aArgs[0]" line="2256" name="bVisible" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Cancels the call to &quot;hideMenu.&quot;" ilk="function" line="2277" lineend="2287" name="_cancelHideDelay" signature="_cancelHideDelay()">
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this.getRoot()" line="2279" name="oRoot" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Hides the menu after the number of milliseconds specified by&#xA;the &quot;hidedelay&quot; configuration property." ilk="function" line="2296" lineend="2324" name="_execHideDelay" signature="_execHideDelay()">
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this" line="2301" name="me" />
            <variable attributes="__local__ private" citdl="this.getRoot()" line="2301" name="oRoot" />
            <scope attributes="__local__ private" ilk="function" line="2303" lineend="2318" name="hideMenu" signature="hideMenu()" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Cancels the call to the &quot;showMenu.&quot;" ilk="function" line="2332" lineend="2342" name="_cancelShowDelay" signature="_cancelShowDelay()">
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this.getRoot()" line="2334" name="oRoot" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Shows the menu after the number of milliseconds specified by&#xA;the &quot;showdelay&quot; configuration property have ellapsed." ilk="function" line="2353" lineend="2371" name="_execShowDelay" signature="_execShowDelay(p_oMenu)">
            <variable citdl="YAHOO.widget.Menu" doc="Object specifying the menu that should&#xA;be made visible." ilk="argument" name="p_oMenu" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this.getRoot()" line="2355" name="oRoot" />
            <scope attributes="__local__ private" ilk="function" line="2357" lineend="2365" name="showMenu" signature="showMenu()" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Hides a submenu after the number of milliseconds specified by&#xA;the &quot;submenuhidedelay&quot; configuration property have ellapsed." ilk="function" line="2386" lineend="2409" name="_execSubmenuHideDelay" signature="_execSubmenuHideDelay(p_oSubmenu, p_nMouseX, p_nHideDelay)">
            <variable citdl="YAHOO.widget.Menu" doc="Object specifying the submenu that&#xA;should be hidden." ilk="argument" name="p_oSubmenu" />
            <variable citdl="Number" doc="The x coordinate of the mouse when it left&#xA;the specified submenu&apos;s parent menu item." ilk="argument" name="p_nMouseX" />
            <variable citdl="Number" doc="The number of milliseconds that should ellapse&#xA;before the submenu is hidden." ilk="argument" name="p_nHideDelay" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this" line="2388" name="me" />
          </scope>
          <scope doc="Disables the header used for scrolling the body of the menu." ilk="function" line="2421" lineend="2430" name="_disableScrollHeader" signature="_disableScrollHeader()">
            <variable citdl="Menu" name="this" />
          </scope>
          <variable citdl="Boolean" line="2426" name="_bHeaderDisabled" />
          <scope doc="Disables the footer used for scrolling the body of the menu." ilk="function" line="2438" lineend="2447" name="_disableScrollFooter" signature="_disableScrollFooter()">
            <variable citdl="Menu" name="this" />
          </scope>
          <variable citdl="Boolean" line="2443" name="_bFooterDisabled" />
          <scope doc="Enables the header used for scrolling the body of the menu." ilk="function" line="2455" lineend="2464" name="_enableScrollHeader" signature="_enableScrollHeader()">
            <variable citdl="Menu" name="this" />
          </scope>
          <scope doc="Enables the footer used for scrolling the body of the menu." ilk="function" line="2472" lineend="2481" name="_enableScrollFooter" signature="_enableScrollFooter()">
            <variable citdl="Menu" name="this" />
          </scope>
          <scope doc="&quot;mouseover&quot; event handler for the menu." ilk="function" line="2492" lineend="2612" name="_onMouseOver" returns="Boolean" signature="_onMouseOver(p_sType, p_aArgs)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this.parent.parent" line="2509" name="oParentMenu" />
            <variable attributes="__local__ private" citdl="this.activeItem" line="2509" name="oActiveItem" />
            <variable attributes="__local__ private" citdl="p_aArgs[1]" line="2509" name="oItem" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2509" name="nShowDelay" />
            <variable attributes="__local__ private" line="2509" name="bShowDelay" />
            <variable attributes="__local__ private" citdl="Event.getTarget()" line="2509" name="oTarget" />
            <variable attributes="__local__ private" citdl="p_aArgs[0]" line="2509" name="oEvent" />
            <variable attributes="__local__ private" citdl="oItem.cfg" line="2509" name="oItemCfg" />
            <variable attributes="__local__ private" citdl="oItemCfg.getProperty()" line="2509" name="oSubmenu" />
          </scope>
          <scope doc="&quot;mouseout&quot; event handler for the menu." ilk="function" line="2623" lineend="2716" name="_onMouseOut" returns="Boolean" signature="_onMouseOut(p_sType, p_aArgs)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2639" name="nSubmenuHideDelay" />
            <variable attributes="__local__ private" citdl="p_aArgs[1]" line="2639" name="oItem" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2639" name="nShowDelay" />
            <variable attributes="__local__ private" citdl="Boolean" line="2639" name="bMovingToSubmenu" />
            <variable attributes="__local__ private" citdl="p_aArgs[0]" line="2639" name="oEvent" />
            <variable attributes="__local__ private" citdl="oItem.cfg" line="2639" name="oItemCfg" />
            <variable attributes="__local__ private" citdl="Event.getRelatedTarget()" line="2639" name="oRelatedTarget" />
            <variable attributes="__local__ private" citdl="oItemCfg.getProperty()" line="2639" name="oSubmenu" />
          </scope>
          <scope doc="&quot;click&quot; event handler for the menu." ilk="function" line="2728" lineend="2738" name="_onMouseMove" returns="Boolean" signature="_onMouseMove(p_oEvent, p_oMenu)">
            <variable citdl="Event" doc="Object representing the DOM event object passed&#xA;back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            <variable citdl="YAHOO.widget.Menu" doc="Object representing the menu that&#xA;fired the event." ilk="argument" name="p_oMenu" />
            <variable citdl="Menu" name="this" />
          </scope>
          <scope doc="&quot;click&quot; event handler for the menu." ilk="function" line="2749" lineend="2880" name="_onClick" signature="_onClick(p_sType, p_aArgs)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="sURL.indexOf()" line="2759" name="nHashPos" />
            <variable attributes="__local__ private" citdl="Boolean" line="2759" name="bInMenuAnchor" />
            <variable attributes="__local__ private" citdl="oItem.cfg.getProperty()" line="2759" name="sURL" />
            <variable attributes="__local__ private" citdl="p_aArgs[1]" line="2759" name="oItem" />
            <variable attributes="__local__ private" citdl="sURL.length" line="2759" name="nLen" />
            <variable attributes="__local__ private" citdl="sURL.substr()" line="2759" name="sId" />
            <variable attributes="__local__ private" citdl="this.getRoot()" line="2759" name="oRoot" />
            <variable attributes="__local__ private" citdl="p_aArgs[0]" line="2759" name="oEvent" />
            <variable attributes="__local__ private" citdl="oItem.cfg.getProperty()" line="2759" name="oSubmenu" />
          </scope>
          <scope doc="&quot;keydown&quot; event handler for the menu." ilk="function" line="2891" lineend="3186" name="_onKeyDown" signature="_onKeyDown(p_sType, p_aArgs)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this" line="2908" name="me" />
            <variable attributes="__local__ private" citdl="this.getItems()" line="2908" name="aItems" />
            <variable attributes="__local__ private" citdl="oBody.offsetHeight" line="2908" name="nBodyOffsetHeight" />
            <variable attributes="__local__ private" citdl="oBody.scrollTop" line="2908" name="nBodyScrollTop" />
            <variable attributes="__local__ private" citdl="oParentItem.parent" line="2908" name="oParentMenu" />
            <variable attributes="__local__ private" citdl="this.parent" line="2908" name="oParentItem" />
            <variable attributes="__local__ private" citdl="oNextItem.element.offsetTop" line="2908" name="nNextItemOffsetTop" />
            <variable attributes="__local__ private" citdl="oRoot.activeItem.getNextEnabledSibling()" line="2908" name="oNextItem" />
            <variable attributes="__local__ private" citdl="p_aArgs[1]" line="2908" name="oItem" />
            <variable attributes="__local__ private" citdl="aItems.length" line="2908" name="nItems" />
            <variable attributes="__local__ private" citdl="this.getRoot()" line="2908" name="oRoot" />
            <variable attributes="__local__ private" citdl="p_aArgs[0]" line="2908" name="oEvent" />
            <variable attributes="__local__ private" citdl="oItem.cfg" line="2908" name="oItemCfg" />
            <variable attributes="__local__ private" citdl="this.body" line="2908" name="oBody" />
            <variable attributes="__local__ private" citdl="oItemCfg.getProperty()" line="2908" name="oSubmenu" />
            <variable attributes="__local__ private" citdl="oBody.scrollHeight" line="2908" name="nScrollTarget" />
            <scope attributes="__local__ private" doc="This function is called to prevent a bug in Firefox." ilk="function" line="2919" lineend="2929" name="stopMouseEventHandlers" signature="stopMouseEventHandlers()" />
          </scope>
          <scope doc="&quot;keypress&quot; event handler for a Menu instance." ilk="function" line="3197" lineend="3208" name="_onKeyPress" signature="_onKeyPress(p_sType, p_aArgs)">
            <variable citdl="String" doc="The name of the event that was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Collection of arguments sent when the event&#xA;was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="p_aArgs[0]" line="3199" name="oEvent" />
          </scope>
          <scope doc="&quot;y&quot; event handler for a Menu instance." ilk="function" line="3219" lineend="3253" name="_onYChange" signature="_onYChange(p_sType, p_aArgs)">
            <variable citdl="String" doc="The name of the event that was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Collection of arguments sent when the event&#xA;was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this.parent" line="3224" name="oParent" />
            <variable attributes="__local__ private" citdl="this.iframe" line="3224" name="oIFrame" />
            <variable attributes="__local__ private" citdl="oParent.parent.body.scrollTop" line="3224" name="nScrollTop" />
            <variable attributes="__local__ private" line="3224" name="nY" />
          </scope>
          <scope doc="&quot;mouseover&quot; event handler for the menu&apos;s &quot;header&quot; and &quot;footer&quot;&#xA;elements.  Used to scroll the body of the menu up and down when the&#xA;menu&apos;s &quot;maxheight&quot; configuration property is set to a value greater than 0." ilk="function" line="3267" lineend="3345" name="_onScrollTargetMouseOver" signature="_onScrollTargetMouseOver(p_oEvent, p_oMenu)">
            <variable citdl="Event" doc="Object representing the DOM event object passed&#xA;back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            <variable citdl="YAHOO.widget.Menu" doc="Object representing the menu that&#xA;fired the event." ilk="argument" name="p_oMenu" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this" line="3276" name="me" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="3276" name="nScrollIncrement" />
            <variable attributes="__local__ private" citdl="scrollBodyUp" line="3276" name="fnScrollFunction" />
            <variable attributes="__local__ private" citdl="Event.getTarget()" line="3276" name="oTarget" />
            <variable attributes="__local__ private" citdl="this.body" line="3276" name="oBody" />
            <variable attributes="__local__ private" citdl="oBody.scrollHeight" line="3276" name="nScrollTarget" />
            <scope attributes="__local__ private" ilk="function" line="3279" lineend="3301" name="scrollBodyDown" signature="scrollBodyDown()">
              <variable attributes="__local__ private" citdl="oBody.scrollTop" line="3281" name="nScrollTop" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="3304" lineend="3326" name="scrollBodyUp" signature="scrollBodyUp()">
              <variable attributes="__local__ private" citdl="oBody.scrollTop" line="3306" name="nScrollTop" />
            </scope>
          </scope>
          <scope doc="&quot;mouseout&quot; event handler for the menu&apos;s &quot;header&quot; and &quot;footer&quot;&#xA;elements.  Used to stop scrolling the body of the menu up and down when the&#xA;menu&apos;s &quot;maxheight&quot; configuration property is set to a value greater than 0." ilk="function" line="3359" lineend="3365" name="_onScrollTargetMouseOut" signature="_onScrollTargetMouseOut(p_oEvent, p_oMenu)">
            <variable citdl="Event" doc="Object representing the DOM event object passed&#xA;back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            <variable citdl="YAHOO.widget.Menu" doc="Object representing the menu that&#xA;fired the event." ilk="argument" name="p_oMenu" />
            <variable citdl="Menu" name="this" />
          </scope>
          <scope attributes="private" doc="PRIVATE: &quot;init&quot; event handler for the menu." ilk="function" line="3380" lineend="3426" name="_onInit" signature="_onInit(p_sType, p_aArgs)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this.lazyLoad" line="3385" name="bLazyLoad" />
            <variable attributes="__local__ private" line="3385" name="bRootMenu" />
          </scope>
          <scope attributes="private" doc="PRIVATE: &quot;beforerender&quot; event handler for the menu.  Appends all of the&#xA;&lt;code&gt;&amp;#60;ul&amp;#62;&lt;/code&gt;, &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; and their accompanying&#xA;title elements to the body element of the menu." ilk="function" line="3439" lineend="3495" name="_onBeforeRender" signature="_onBeforeRender(p_sType, p_aArgs)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this._aListElements.length" line="3446" name="nListElements" />
            <variable attributes="__local__ private" citdl="this._aListElements[i]" line="3446" name="oUL" />
            <variable attributes="__local__ private" citdl="Number" line="3446" name="i" />
            <variable attributes="__local__ private" citdl="this.element" line="3446" name="oEl" />
            <variable attributes="__local__ private" citdl="this._aGroupTitleElements[i]" line="3446" name="oGroupTitle" />
            <variable attributes="__local__ private" citdl="Boolean" line="3446" name="bFirstList" />
          </scope>
          <scope attributes="private" doc="PRIVATE: &quot;render&quot; event handler for the menu." ilk="function" line="3506" lineend="3518" name="_onRender" signature="_onRender(p_sType, p_aArgs)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Menu" name="this" />
          </scope>
          <scope attributes="private" doc="PRIVATE: &quot;beforeshow&quot; event handler for the menu." ilk="function" line="3532" lineend="3681" name="_onBeforeShow" signature="_onBeforeShow(p_sType, p_aArgs)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="YAHOO.util.Region.getRegion()" line="3538" name="oRegion" />
            <variable attributes="__local__ private" citdl="Dom.getViewportHeight()" line="3538" name="nViewportHeight" />
            <variable attributes="__local__ private" citdl="this.itemData.length" line="3538" name="nOptions" />
            <variable attributes="__local__ private" citdl="this.srcElement" line="3538" name="oSrcElement" />
            <variable attributes="__local__ private" line="3538" name="n" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="3624" name="nMinScrollHeight" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="3624" name="nMaxHeight" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="3624" name="bDynamicPos" />
            <scope attributes="__local__ private" ilk="function" line="3634" lineend="3640" name="clearMaxHeight" signature="clearMaxHeight()" />
          </scope>
          <variable attributes="__local__ private" line="3624" name="getProperty()" />
          <scope attributes="private" doc="PRIVATE: &quot;show&quot; event handler for the menu." ilk="function" line="3692" lineend="3761" name="_onShow" signature="_onShow(p_sType, p_aArgs)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this.parent" line="3697" name="oParent" />
            <variable attributes="__local__ private" citdl="oParentMenu.cfg.getProperty()" line="3697" name="aParentAlignment" />
            <variable attributes="__local__ private" citdl="oParent.parent" line="3697" name="oParentMenu" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="3697" name="aAlignment" />
            <scope attributes="__local__ private" ilk="function" line="3700" lineend="3729" name="disableAutoSubmenuDisplay" signature="disableAutoSubmenuDisplay(p_oEvent)">
              <variable ilk="argument" name="p_oEvent" />
              <variable attributes="__local__ private" citdl="Event.getTarget()" line="3702" name="oTarget" />
            </scope>
          </scope>
          <scope attributes="private" doc="PRIVATE: &quot;beforehide&quot; event handler for the menu." ilk="function" line="3772" lineend="3800" name="_onBeforeHide" signature="_onBeforeHide(p_sType, p_aArgs)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="oActiveItem.cfg" line="3776" name="oConfig" />
            <variable attributes="__local__ private" citdl="this.activeItem" line="3776" name="oActiveItem" />
            <variable attributes="__local__ private" citdl="oConfig.getProperty()" line="3776" name="oSubmenu" />
          </scope>
          <scope attributes="private" doc="PRIVATE: &quot;configchange&quot; event handler for a submenu." ilk="function" line="3813" lineend="3837" name="_onParentMenuConfigChange" signature="_onParentMenuConfigChange(p_sType, p_aArgs, p_oSubmenu)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="YAHOO.widget.Menu" doc="Object representing the submenu that&#xA;subscribed to the event." ilk="argument" name="p_oSubmenu" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="p_aArgs[0][0]" line="3816" name="sPropertyName" />
            <variable attributes="__local__ private" citdl="p_aArgs[0][1]" line="3816" name="oPropertyValue" />
          </scope>
          <scope attributes="private" doc="PRIVATE: &quot;render&quot; event handler for a submenu.  Renders a&#xA;submenu in response to the firing of its parent&apos;s &quot;render&quot; event." ilk="function" line="3851" lineend="3904" name="_onParentMenuRender" signature="_onParentMenuRender(p_sType, p_aArgs, p_oSubmenu)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="YAHOO.widget.Menu" doc="Object representing the submenu that&#xA;subscribed to the event." ilk="argument" name="p_oSubmenu" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="p_oSubmenu.parent.parent.cfg" line="3855" name="oParentCfg" />
            <variable attributes="__local__ private" citdl="Object" line="3855" lineend="3879" name="oConfig">
              <variable citdl="oParentCfg.getProperty()" line="3857" name="constraintoviewport" />
              <variable citdl="Array" line="3859" name="xy" />
              <variable citdl="oParentCfg.getProperty()" line="3861" name="clicktohide" />
              <variable citdl="oParentCfg.getProperty()" line="3863" name="effect" />
              <variable citdl="oParentCfg.getProperty()" line="3865" name="showdelay" />
              <variable citdl="oParentCfg.getProperty()" line="3867" name="hidedelay" />
              <variable citdl="oParentCfg.getProperty()" line="3869" name="submenuhidedelay" />
              <variable citdl="oParentCfg.getProperty()" line="3871" name="classname" />
              <variable citdl="oParentCfg.getProperty()" line="3873" name="scrollincrement" />
              <variable citdl="oParentCfg.getProperty()" line="3875" name="minscrollheight" />
              <variable citdl="oParentCfg.getProperty()" line="3877" name="iframe" />
            </variable>
            <variable attributes="__local__ private" citdl="this.parent.element" line="3881" name="oLI" />
          </scope>
          <scope attributes="private" doc="PRIVATE: &quot;beforeshow&quot; event handler for a submenu." ilk="function" line="3915" lineend="3933" name="_onSubmenuBeforeShow" signature="_onSubmenuBeforeShow(p_sType, p_aArgs)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this.parent" line="3918" name="oParent" />
            <variable attributes="__local__ private" citdl="oParent.parent.cfg.getProperty()" line="3918" name="aAlignment" />
          </scope>
          <scope attributes="private" doc="PRIVATE: &quot;focus&quot; event handler for the menu&apos;s items." ilk="function" line="3944" lineend="3948" name="_onMenuItemFocus" signature="_onMenuItemFocus(p_sType, p_aArgs)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Menu" name="this" />
          </scope>
          <scope attributes="private" doc="PRIVATE: &quot;blur&quot; event handler for the menu&apos;s items." ilk="function" line="3959" lineend="3963" name="_onMenuItemBlur" signature="_onMenuItemBlur(p_sType, p_aArgs)">
            <variable citdl="String" doc="String representing the name of the event&#xA;that was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Menu" name="this" />
          </scope>
          <scope attributes="private" doc="PRIVATE: &quot;destroy&quot; event handler for the menu&apos;s items." ilk="function" line="3976" lineend="3980" name="_onMenuItemDestroy" signature="_onMenuItemDestroy(p_sType, p_aArgs, p_oItem)">
            <variable citdl="String" doc="String representing the name of the event&#xA;that was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
            <variable citdl="Menu" name="this" />
          </scope>
          <scope attributes="private" doc="PRIVATE: &quot;configchange&quot; event handler for the menu&apos;s items." ilk="function" line="3993" lineend="4026" name="_onMenuItemConfigChange" signature="_onMenuItemConfigChange(p_sType, p_aArgs, p_oItem)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="p_aArgs[0][0]" line="3997" name="sPropertyName" />
            <variable attributes="__local__ private" citdl="p_aArgs[0][1]" line="3997" name="oPropertyValue" />
            <variable attributes="__local__ private" citdl="p_aArgs[0][1]" line="3997" name="oSubmenu" />
          </scope>
          <scope doc="The default event handler executed when the moveEvent is fired,&#xA;if the &quot;constraintoviewport&quot; configuration property is set to true." ilk="function" line="4043" lineend="4077" name="enforceConstraints" signature="enforceConstraints(type, args, obj)">
            <variable citdl="String" doc="The name of the event that was fired." ilk="argument" name="type" />
            <variable citdl="Array" doc="Collection of arguments sent when the&#xA;event was fired." ilk="argument" name="args" />
            <variable citdl="Array" doc="Array containing the current Menu instance&#xA;and the item that fired the event." ilk="argument" name="obj" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this.parent" line="4051" name="oParent" />
            <variable attributes="__local__ private" citdl="oParentMenu.cfg.getProperty()" line="4051" name="nParentMenuX" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="4051" name="nX" />
            <variable attributes="__local__ private" citdl="oParent.parent" line="4051" name="oParentMenu" />
            <variable attributes="__local__ private" line="4051" name="nNewX" />
          </scope>
          <scope doc="Event handler for when the &quot;visible&quot; configuration property&#xA;the menu changes." ilk="function" line="4090" lineend="4128" name="configVisible" signature="configVisible(p_sType, p_aArgs, p_oMenu)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="YAHOO.widget.Menu" doc="Object representing the menu that&#xA;fired the event." ilk="argument" name="p_oMenu" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="p_aArgs[0]" line="4093" name="bVisible" />
            <variable attributes="__local__ private" citdl="Dom.getStyle()" line="4093" name="sDisplay" />
          </scope>
          <scope doc="Event handler for when the &quot;position&quot; configuration property&#xA;of the menu changes." ilk="function" line="4141" lineend="4191" name="configPosition" signature="configPosition(p_sType, p_aArgs, p_oMenu)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="YAHOO.widget.Menu" doc="Object representing the menu that&#xA;fired the event." ilk="argument" name="p_oMenu" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="p_aArgs[0]" line="4146" name="sCSSPosition" />
            <variable attributes="__local__ private" citdl="oCfg.getProperty()" line="4146" name="nZIndex" />
            <variable attributes="__local__ private" citdl="this.cfg" line="4146" name="oCfg" />
            <variable attributes="__local__ private" citdl="this.element" line="4146" name="oElement" />
            <variable attributes="__local__ private" line="4146" name="p_aArgs[0]" />
          </scope>
          <scope doc="Event handler for when the &quot;iframe&quot; configuration property of&#xA;the menu changes." ilk="function" line="4204" lineend="4212" name="configIframe" signature="configIframe(p_sType, p_aArgs, p_oMenu)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="YAHOO.widget.Menu" doc="Object representing the menu that&#xA;fired the event." ilk="argument" name="p_oMenu" />
            <variable citdl="Menu" name="this" />
          </scope>
          <scope doc="Event handler for when the &quot;hidedelay&quot; configuration property&#xA;of the menu changes." ilk="function" line="4225" lineend="4260" name="configHideDelay" signature="configHideDelay(p_sType, p_aArgs, p_oMenu)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="YAHOO.widget.Menu" doc="Object representing the menu that&#xA;fired the event." ilk="argument" name="p_oMenu" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this.mouseOverEvent" line="4230" name="oMouseOverEvent" />
            <variable attributes="__local__ private" citdl="p_aArgs[0]" line="4230" name="nHideDelay" />
            <variable attributes="__local__ private" citdl="this.mouseOutEvent" line="4230" name="oMouseOutEvent" />
            <variable attributes="__local__ private" citdl="this.keyDownEvent" line="4230" name="oKeyDownEvent" />
          </scope>
          <scope doc="Event handler for when the &quot;container&quot; configuration property&#xA;of the menu changes." ilk="function" line="4273" lineend="4284" name="configContainer" signature="configContainer(p_sType, p_aArgs, p_oMenu)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="YAHOO.widget.Menu" doc="Object representing the menu that&#xA;fired the event." ilk="argument" name="p_oMenu" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="p_aArgs[0]" line="4275" name="oElement" />
          </scope>
          <scope attributes="private" doc="PRIVATE: &quot;renderEvent&quot; handler used to defer the setting of the&#xA;&quot;maxheight&quot; configuration property until the menu is rendered in lazy&#xA;load scenarios." ilk="function" line="4299" lineend="4304" name="_setMaxHeight" signature="_setMaxHeight(p_sType, p_aArgs, p_nMaxHeight)">
            <variable citdl="String" doc="The name of the event that was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Collection of arguments sent when the event&#xA;was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Number" doc="Number representing the value to set for the&#xA;&quot;maxheight&quot; configuration property." ilk="argument" name="p_nMaxHeight" />
            <variable citdl="Menu" name="this" />
          </scope>
          <scope doc="Event handler for when the &quot;maxheight&quot; configuration property of&#xA;a Menu changes." ilk="function" line="4317" lineend="4460" name="configMaxHeight" signature="configMaxHeight(p_sType, p_aArgs, p_oMenu)">
            <variable citdl="String" doc="The name of the event that was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Collection of arguments sent when the event&#xA;was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="YAHOO.widget.Menu" doc="The Menu instance fired&#xA;the event." ilk="argument" name="p_oMenu" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="4329" name="nMinScrollHeight" />
            <variable attributes="__local__ private" line="4329" name="nHeight" />
            <variable attributes="__local__ private" citdl="this.footer" line="4329" name="oFooter" />
            <variable attributes="__local__ private" citdl="p_aArgs[0]" line="4329" name="nMaxHeight" />
            <variable attributes="__local__ private" citdl="oElement.offsetWidth" line="4329" name="nOffsetWidth" />
            <variable attributes="__local__ private" citdl="this._onScrollTargetMouseOver" line="4329" name="fnMouseOver" />
            <variable attributes="__local__ private" line="4329" name="sWidth" />
            <variable attributes="__local__ private" citdl="this._onScrollTargetMouseOut" line="4329" name="fnMouseOut" />
            <variable attributes="__local__ private" citdl="this.body" line="4329" name="oBody" />
            <variable attributes="__local__ private" citdl="this.element" line="4329" name="oElement">
              <variable citdl="Object" line="4388" name="style">
                <variable citdl="nOffsetWidth" doc="Measuring the difference of the offsetWidth before and after&#xA;setting the &quot;width&quot; style attribute allows us to compute the&#xA;about of padding and borders applied to the element, which&#xA;in turn allows us to set the &quot;width&quot; property correctly." line="4388" name="width" />
              </variable>
            </variable>
            <variable attributes="__local__ private" citdl="this.header" line="4329" name="oHeader" />
            <variable attributes="__local__ private" doc="There is a bug in gecko-based browsers where an element&#xA;whose &quot;position&quot; property is set to &quot;absolute&quot; and&#xA;&quot;overflow&quot; property is set to &quot;hidden&quot; will not render at&#xA;the correct width when its offsetParent&apos;s &quot;position&quot;&#xA;property is also set to &quot;absolute.&quot;  It is possible to work&#xA;around this bug by specifying a value for the width" line="4372" name="bSetWidth" />
          </scope>
          <variable line="4453" name="header" />
          <variable line="4454" name="footer" />
          <scope doc="Event handler for when the &quot;classname&quot; configuration property of&#xA;a menu changes." ilk="function" line="4471" lineend="4484" name="configClassName" signature="configClassName(p_sType, p_aArgs, p_oMenu)">
            <variable citdl="String" doc="The name of the event that was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Collection of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="YAHOO.widget.Menu" doc="The Menu instance fired the event." ilk="argument" name="p_oMenu" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="p_aArgs[0]" line="4473" name="sClassName" />
          </scope>
          <scope attributes="private" doc="PRIVATE: &quot;itemadded&quot; event handler for a Menu instance." ilk="function" line="4495" lineend="4505" name="_onItemAdded" signature="_onItemAdded(p_sType, p_aArgs)">
            <variable citdl="String" doc="The name of the event that was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Collection of arguments sent when the event&#xA;was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="p_aArgs[0]" line="4497" name="oItem" />
          </scope>
          <scope doc="Event handler for when the &quot;disabled&quot; configuration property of&#xA;a menu changes." ilk="function" line="4516" lineend="4560" name="configDisabled" signature="configDisabled(p_sType, p_aArgs, p_oMenu)">
            <variable citdl="String" doc="The name of the event that was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Collection of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="YAHOO.widget.Menu" doc="The Menu instance fired the event." ilk="argument" name="p_oMenu" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="nItems" line="4521" name="i" />
            <variable attributes="__local__ private" citdl="this.getItems()" line="4521" name="aItems" />
            <variable attributes="__local__ private" citdl="p_aArgs[0]" line="4521" name="bDisabled" />
            <variable attributes="__local__ private" citdl="aItems.length" line="4521" name="nItems" />
          </scope>
          <scope doc="&quot;render&quot; event handler for the menu." ilk="function" line="4570" lineend="4707" name="onRender" signature="onRender(p_sType, p_aArgs)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Menu" name="this" />
            <scope attributes="__local__ private" ilk="function" line="4572" lineend="4593" name="sizeShadow" signature="sizeShadow()">
              <variable attributes="__local__ private" citdl="this._shadow" line="4575" name="oShadow">
                <variable citdl="Object" line="4583" name="style">
                  <variable citdl="String" line="4583" name="width" />
                  <variable citdl="String" line="4584" name="height" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="this.element" line="4575" name="oElement" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="4596" lineend="4600" name="replaceShadow" signature="replaceShadow()" />
            <scope attributes="__local__ private" ilk="function" line="4603" lineend="4607" name="addShadowVisibleClass" signature="addShadowVisibleClass()" />
            <scope attributes="__local__ private" ilk="function" line="4610" lineend="4614" name="removeShadowVisibleClass" signature="removeShadowVisibleClass()" />
            <scope attributes="__local__ private" ilk="class" line="4617" lineend="4680" name="createShadow">
              <scope attributes="__local__ private __ctor__" ilk="function" line="4617" lineend="4680" name="createShadow" signature="createShadow()">
                <variable citdl="createShadow" name="this" />
                <variable attributes="__local__ private" citdl="this" line="4621" name="me" />
                <variable attributes="__local__ private" citdl="this._shadow" line="4621" name="oShadow" />
                <variable attributes="__local__ private" citdl="this.element" line="4621" name="oElement" />
              </scope>
              <variable citdl="Object" line="4632" name="m_oShadowTemplate" />
              <variable citdl="oShadow" line="4640" name="_shadow" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="4683" lineend="4689" name="onBeforeShow" signature="onBeforeShow()" />
          </scope>
          <scope doc="Initializes the custom events for the menu." ilk="function" line="4717" lineend="4761" name="initEvents" signature="initEvents()">
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="CustomEvent.LIST" doc="Create custom events" line="4723" name="SIGNATURE" />
          </scope>
          <variable citdl="SIGNATURE" line="4726" name="signature" />
          <variable citdl="this.createEvent()" line="4749" name="focusEvent" />
          <variable citdl="this.createEvent()" line="4752" name="blurEvent" />
          <scope doc="Positions the menu outside of the boundaries of the browser&apos;s&#xA;viewport.  Called automatically when a menu is hidden to ensure that&#xA;it doesn&apos;t force the browser to render uncessary scrollbars." ilk="function" line="4770" lineend="4783" name="positionOffScreen" signature="positionOffScreen()">
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this.iframe" line="4773" name="oIFrame" />
            <variable attributes="__local__ private" citdl="this.OFF_SCREEN_POSITION" line="4773" name="aPos" />
          </scope>
          <scope doc="Finds the menu&apos;s root menu." ilk="function" line="4790" lineend="4808" name="getRoot" returns="this" signature="getRoot()">
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="oItem.parent" line="4793" name="oParentMenu" />
            <variable attributes="__local__ private" citdl="this.parent" line="4793" name="oItem" />
          </scope>
          <scope doc="Returns a string representing the menu." ilk="function" line="4816" lineend="4829" name="toString" returns="String" signature="toString()">
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="String" line="4819" name="sReturnVal" />
            <variable attributes="__local__ private" citdl="this.id" line="4819" name="sId" />
          </scope>
          <scope doc="Sets the title of a group of menu items." ilk="function" line="4839" lineend="4895" name="setItemGroupTitle" signature="setItemGroupTitle(p_sGroupTitle, p_nGroupIndex)">
            <variable citdl="String" doc="String specifying the title of the group." ilk="argument" name="p_sGroupTitle" />
            <variable citdl="Number" doc="Optional. Number specifying the group to which&#xA;the title belongs." ilk="argument" name="p_nGroupIndex" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this._aGroupTitleElements.length" line="4844" name="i" />
            <variable attributes="__local__ private" line="4844" name="nGroupIndex" />
            <variable attributes="__local__ private" citdl="this._aGroupTitleElements[nGroupIndex]" line="4844" name="oTitle" />
            <variable attributes="__local__ private" citdl="i" line="4844" name="nFirstIndex" />
          </scope>
          <scope doc="Appends an item to the menu." ilk="function" line="4912" lineend="4920" name="addItem" returns="YAHOO.widget.MenuItem" signature="addItem(p_oItem, p_nGroupIndex)">
            <variable citdl="Object" doc="Object literal containing a set of menu item&#xA;configuration properties." ilk="argument" name="p_oItem" />
            <variable citdl="Number" doc="Optional. Number indicating the group to&#xA;which the item belongs." ilk="argument" name="p_nGroupIndex" />
            <variable citdl="Menu" name="this" />
          </scope>
          <scope doc="Adds an array of items to the menu." ilk="function" line="4934" lineend="4977" name="addItems" returns="Array" signature="addItems(p_aItems, p_nGroupIndex)">
            <variable citdl="Array" doc="Array of items to be added to the menu.  The array&#xA;can contain strings specifying the text for each item to be created, object&#xA;literals specifying each of the menu item configuration properties,&#xA;or MenuItem instances." ilk="argument" name="p_aItems" />
            <variable citdl="Number" doc="Optional. Number specifying the group to&#xA;which the items belongs." ilk="argument" name="p_nGroupIndex" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" line="4939" name="i" />
            <variable attributes="__local__ private" citdl="Array" line="4939" name="aItems" />
            <variable attributes="__local__ private" citdl="p_aItems.length" line="4939" name="nItems" />
            <variable attributes="__local__ private" citdl="p_aItems[i]" line="4939" name="oItem" />
          </scope>
          <scope doc="Inserts an item into the menu at the specified index." ilk="function" line="4995" lineend="5003" name="insertItem" returns="YAHOO.widget.MenuItem" signature="insertItem(p_oItem, p_nItemIndex, p_nGroupIndex)">
            <variable citdl="Object" doc="Object literal containing a set of menu item&#xA;configuration properties." ilk="argument" name="p_oItem" />
            <variable citdl="Number" doc="Number indicating the ordinal position at which&#xA;the item should be added." ilk="argument" name="p_nItemIndex" />
            <variable citdl="Number" doc="Optional. Number indicating the group to which&#xA;the item belongs." ilk="argument" name="p_nGroupIndex" />
            <variable citdl="Menu" name="this" />
          </scope>
          <scope doc="Removes the specified item from the menu." ilk="function" line="5017" lineend="5045" name="removeItem" returns="YAHOO.widget.MenuItem" signature="removeItem(p_oObject, p_nGroupIndex)">
            <variable citdl="Number" doc="Number specifying the index of the item&#xA;to be removed." ilk="argument" name="p_oObject" />
            <variable citdl="Number" doc="Optional. Number specifying the group to&#xA;which the item belongs." ilk="argument" name="p_nGroupIndex" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this._removeItemFromGroupByValue()" line="5019" name="oItem" />
          </scope>
          <scope doc="Returns an array of all of the items in the menu." ilk="function" line="5053" lineend="5068" name="getItems" returns="Array" signature="getItems()">
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="aGroups.length" line="5057" name="nGroups" />
            <variable attributes="__local__ private" citdl="this._aItemGroups" line="5057" name="aGroups" />
            <variable attributes="__local__ private" citdl="Array" line="5057" name="aItems" />
          </scope>
          <scope doc="Multi-dimensional Array representing the menu items as they&#xA;are grouped in the menu." ilk="function" line="5077" lineend="5081" name="getItemGroups" returns="Array" signature="getItemGroups()">
            <variable citdl="Menu" name="this" />
          </scope>
          <scope doc="Returns the item at the specified index." ilk="function" line="5093" lineend="5109" name="getItem" returns="YAHOO.widget.MenuItem" signature="getItem(p_nItemIndex, p_nGroupIndex)">
            <variable citdl="Number" doc="Number indicating the ordinal position of the&#xA;item to be retrieved." ilk="argument" name="p_nItemIndex" />
            <variable citdl="Number" doc="Optional. Number indicating the group to which&#xA;the item belongs." ilk="argument" name="p_nGroupIndex" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this._getItemGroup()" line="5095" name="aGroup" />
          </scope>
          <scope doc="Returns an array of all of the submenus that are immediate&#xA;children of the menu." ilk="function" line="5118" lineend="5154" name="getSubmenus" returns="Array" signature="getSubmenus()">
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this.getItems()" line="5125" name="aItems" />
            <variable attributes="__local__ private" citdl="Array" line="5125" name="aSubmenus" />
            <variable attributes="__local__ private" citdl="aItems.length" line="5125" name="nItems" />
            <variable attributes="__local__ private" line="5125" name="i" />
            <variable attributes="__local__ private" citdl="aItems[i]" line="5125" name="oItem" />
            <variable attributes="__local__ private" citdl="oItem.cfg.getProperty()" line="5125" name="oSubmenu" />
          </scope>
          <scope doc="Removes all of the content from the menu, including the menu&#xA;items, group titles, header and footer." ilk="function" line="5162" lineend="5238" name="clearContent" signature="clearContent()">
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this.getItems()" line="5172" name="aItems" />
            <variable attributes="__local__ private" citdl="aItems.length" line="5172" name="nItems" />
            <variable attributes="__local__ private" citdl="nItems" line="5172" name="i" />
            <variable attributes="__local__ private" citdl="this.footer" line="5172" name="oFooter" />
            <variable attributes="__local__ private" citdl="aItems[i]" line="5172" name="oItem" />
            <variable attributes="__local__ private" citdl="this.body" line="5172" name="oBody" />
            <variable attributes="__local__ private" citdl="this.element" line="5172" name="oElement" />
            <variable attributes="__local__ private" citdl="oItem.cfg.getProperty()" line="5172" name="oSubmenu" />
            <variable attributes="__local__ private" citdl="this.header" line="5172" name="oHeader" />
          </scope>
          <scope doc="Removes the menu&apos;s &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element&#xA;(and accompanying child nodes) from the document." ilk="function" line="5246" lineend="5262" name="destroy" signature="destroy()">
            <variable citdl="Menu" name="this" />
          </scope>
          <scope doc="Sets focus to the menu&apos;s first enabled item." ilk="function" line="5269" lineend="5279" name="setInitialFocus" signature="setInitialFocus()">
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this._getFirstEnabledItem()" line="5271" name="oItem" />
          </scope>
          <scope doc="Sets the &quot;selected&quot; configuration property of the menu&apos;s first&#xA;enabled item to &quot;true.&quot;" ilk="function" line="5287" lineend="5296" name="setInitialSelection" signature="setInitialSelection()">
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this._getFirstEnabledItem()" line="5289" name="oItem" />
          </scope>
          <scope doc="Sets the &quot;selected&quot; configuration property of the menu&apos;s active&#xA;item to &quot;false&quot; and hides the item&apos;s submenu." ilk="function" line="5306" lineend="5343" name="clearActiveItem" signature="clearActiveItem(p_bBlur)">
            <variable citdl="Boolean" doc="Boolean indicating if the menu&apos;s active item&#xA;should be blurred." ilk="argument" name="p_bBlur" />
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="oActiveItem.cfg" line="5317" name="oConfig" />
            <variable attributes="__local__ private" citdl="this.activeItem" line="5317" name="oActiveItem" />
            <variable attributes="__local__ private" citdl="oConfig.getProperty()" line="5317" name="oSubmenu" />
          </scope>
          <scope doc="Causes the menu to receive focus and fires the &quot;focus&quot; event." ilk="function" line="5350" lineend="5358" name="focus" signature="focus()">
            <variable citdl="Menu" name="this" />
          </scope>
          <scope doc="Causes the menu to lose focus and fires the &quot;blur&quot; event." ilk="function" line="5365" lineend="5381" name="blur" signature="blur()">
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="MenuManager.getFocusedMenuItem()" line="5367" name="oItem" />
          </scope>
          <scope doc="Returns a boolean indicating whether or not the menu has focus." ilk="function" line="5389" lineend="5393" name="hasFocus" returns="Boolean" signature="hasFocus()">
            <variable citdl="Menu" name="this" />
          </scope>
          <scope doc="Adds the specified CustomEvent subscriber to the menu and each of&#xA;its submenus." ilk="function" line="5407" lineend="5479" name="subscribe" signature="subscribe()">
            <variable citdl="Menu" name="this" />
            <scope attributes="__local__ private" ilk="function" line="5409" lineend="5420" name="onItemAdded" signature="onItemAdded(p_sType, p_aArgs, p_oObject)">
              <variable ilk="argument" name="p_sType" />
              <variable ilk="argument" name="p_aArgs" />
              <variable ilk="argument" name="p_oObject" />
              <variable attributes="__local__ private" citdl="oItem.cfg.getProperty()" line="5412" name="oSubmenu" />
              <variable attributes="__local__ private" citdl="p_aArgs[0]" line="5412" name="oItem" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="5423" lineend="5433" name="onSubmenuAdded" signature="onSubmenuAdded(p_sType, p_aArgs, p_oObject)">
              <variable ilk="argument" name="p_sType" />
              <variable ilk="argument" name="p_aArgs" />
              <variable ilk="argument" name="p_oObject" />
              <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="5425" name="oSubmenu" />
            </scope>
            <variable attributes="__local__ private" citdl="nItems" line="5444" name="i" />
            <variable attributes="__local__ private" citdl="this.getItems()" line="5444" name="aItems" />
            <variable attributes="__local__ private" citdl="aItems.length" line="5444" name="nItems" />
            <variable attributes="__local__ private" citdl="oItem.cfg.getProperty()" line="5444" name="oSubmenu" />
            <variable attributes="__local__ private" citdl="aItems[i]" line="5444" name="oItem" />
          </scope>
          <scope doc="Initializes the class&apos;s configurable properties which can be&#xA;changed using the menu&apos;s Config object (&quot;cfg&quot;)." ilk="function" line="5487" lineend="5898" name="initDefaultConfig" signature="initDefaultConfig()">
            <variable citdl="Menu" name="this" />
            <variable attributes="__local__ private" citdl="this.cfg" line="5491" name="oConfig" />
          </scope>
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Menu&apos;s events" line="909" name="Dom" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Menu&apos;s events" line="909" name="m_oShadowTemplate" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Menu&apos;s events" line="909" name="Module" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Menu&apos;s events" line="909" lineend="924" name="EVENT_TYPES">
          <variable citdl="String" line="911" name="MOUSE_OVER" />
          <variable citdl="String" line="912" name="MOUSE_OUT" />
          <variable citdl="String" line="913" name="MOUSE_DOWN" />
          <variable citdl="String" line="914" name="MOUSE_UP" />
          <variable citdl="String" line="915" name="CLICK" />
          <variable citdl="String" line="916" name="KEY_PRESS" />
          <variable citdl="String" line="917" name="KEY_DOWN" />
          <variable citdl="String" line="918" name="KEY_UP" />
          <variable citdl="String" line="919" name="FOCUS" />
          <variable citdl="String" line="920" name="BLUR" />
          <variable citdl="String" line="921" name="ITEM_ADDED" />
          <variable citdl="String" line="922" name="ITEM_REMOVED" />
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Menu&apos;s events" line="909" name="CustomEvent" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Menu&apos;s events" line="909" name="UA" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Menu&apos;s events" line="909" name="Event" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the Menu&apos;s configuration properties" line="934" lineend="1040" name="DEFAULT_CONFIG">
          <variable citdl="Object" line="936" lineend="940" name="VISIBLE">
            <variable citdl="String" line="937" name="key" />
            <variable citdl="Boolean" line="938" name="value" />
            <variable citdl="Lang.isBoolean" line="939" name="validator" />
          </variable>
          <variable citdl="Object" line="942" lineend="947" name="CONSTRAIN_TO_VIEWPORT">
            <variable citdl="String" line="943" name="key" />
            <variable citdl="Boolean" line="944" name="value" />
            <variable citdl="Lang.isBoolean" line="945" name="validator" />
            <variable citdl="Array" line="946" name="supercedes" />
          </variable>
          <variable citdl="Object" line="949" lineend="954" name="POSITION">
            <variable citdl="String" line="950" name="key" />
            <variable citdl="String" line="951" name="value" />
            <variable citdl="checkPosition" line="952" name="validator" />
            <variable citdl="Array" line="953" name="supercedes" />
          </variable>
          <variable citdl="Object" line="956" lineend="960" name="SUBMENU_ALIGNMENT">
            <variable citdl="String" line="957" name="key" />
            <variable citdl="Array" line="958" name="value" />
            <variable citdl="Boolean" line="959" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="962" lineend="967" name="AUTO_SUBMENU_DISPLAY">
            <variable citdl="String" line="963" name="key" />
            <variable citdl="Boolean" line="964" name="value" />
            <variable citdl="Lang.isBoolean" line="965" name="validator" />
            <variable citdl="Boolean" line="966" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="969" lineend="974" name="SHOW_DELAY">
            <variable citdl="String" line="970" name="key" />
            <variable citdl="Number" line="971" name="value" />
            <variable citdl="Lang.isNumber" line="972" name="validator" />
            <variable citdl="Boolean" line="973" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="976" lineend="981" name="HIDE_DELAY">
            <variable citdl="String" line="977" name="key" />
            <variable citdl="Number" line="978" name="value" />
            <variable citdl="Lang.isNumber" line="979" name="validator" />
            <variable citdl="Boolean" line="980" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="983" lineend="988" name="SUBMENU_HIDE_DELAY">
            <variable citdl="String" line="984" name="key" />
            <variable citdl="Number" line="985" name="value" />
            <variable citdl="Lang.isNumber" line="986" name="validator" />
            <variable citdl="Boolean" line="987" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="990" lineend="995" name="CLICK_TO_HIDE">
            <variable citdl="String" line="991" name="key" />
            <variable citdl="Boolean" line="992" name="value" />
            <variable citdl="Lang.isBoolean" line="993" name="validator" />
            <variable citdl="Boolean" line="994" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="997" lineend="1000" name="CONTAINER">
            <variable citdl="String" line="998" name="key" />
            <variable citdl="Boolean" line="999" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="1002" lineend="1008" name="SCROLL_INCREMENT">
            <variable citdl="String" line="1003" name="key" />
            <variable citdl="Number" line="1004" name="value" />
            <variable citdl="Lang.isNumber" line="1005" name="validator" />
            <variable citdl="Array" line="1006" name="supercedes" />
            <variable citdl="Boolean" line="1007" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="1010" lineend="1016" name="MIN_SCROLL_HEIGHT">
            <variable citdl="String" line="1011" name="key" />
            <variable citdl="Number" line="1012" name="value" />
            <variable citdl="Lang.isNumber" line="1013" name="validator" />
            <variable citdl="Array" line="1014" name="supercedes" />
            <variable citdl="Boolean" line="1015" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="1018" lineend="1024" name="MAX_HEIGHT">
            <variable citdl="String" line="1019" name="key" />
            <variable citdl="Number" line="1020" name="value" />
            <variable citdl="Lang.isNumber" line="1021" name="validator" />
            <variable citdl="Array" line="1022" name="supercedes" />
            <variable citdl="Boolean" line="1023" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="1026" lineend="1031" name="CLASS_NAME">
            <variable citdl="String" line="1027" name="key" />
            <variable line="1028" name="value" />
            <variable citdl="Lang.isString" line="1029" name="validator" />
            <variable citdl="Boolean" line="1030" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="1033" lineend="1038" name="DISABLED">
            <variable citdl="String" line="1034" name="key" />
            <variable citdl="Boolean" line="1035" name="value" />
            <variable citdl="Lang.isBoolean" line="1036" name="validator" />
            <variable citdl="Boolean" line="1037" name="suppressEvent" />
          </variable>
        </variable>
      </scope>
      <variable citdl="YAHOO.widget.OverlayManager" line="1131" name="m_oOverlayManager" />
      <scope attributes="__local__ private" ilk="function" line="1149" lineend="1299" name="(anonymous)" signature="(anonymous)()">
        <scope attributes="__local__ private" ilk="class" line="1173" lineend="1177" name="Motion">
          <scope attributes="__local__ private __ctor__" doc="CONSTRUCTOR: Anim subclass for moving elements along a path defined by the &quot;points&quot;&#xA;member of &quot;attributes&quot;.  All &quot;points&quot; are arrays with x, y coordinates.&#xA;&lt;p&gt;Usage: &lt;code&gt;var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);&lt;/code&gt;&lt;/p&gt;" ilk="function" line="1173" lineend="1177" name="Motion" signature="Motion(el, attributes, duration, method)">
            <variable ilk="argument" name="el" />
            <variable citdl="Object" doc="The attribute(s) to be animated.&#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.&#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).&#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
            <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
            <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
            <variable citdl="Motion" name="this" />
          </scope>
          <variable citdl="String" line="1180" name="NAME" />
        </scope>
        <variable attributes="__local__ private" citdl="YAHOO.util" doc="shorthand" line="1183" name="Y" />
        <variable attributes="__local__ private" citdl="Motion.superclass" line="1186" name="superclass" />
        <variable attributes="__local__ private" citdl="Motion.prototype" line="1187" name="proto">
          <variable citdl="Object" line="1189" name="patterns">
            <variable line="1189" name="points" />
          </variable>
          <scope ilk="function" line="1191" lineend="1199" name="setAttribute" signature="setAttribute(attr, val, unit)">
            <variable ilk="argument" name="attr" />
            <variable ilk="argument" name="val" />
            <variable ilk="argument" name="unit" />
            <variable citdl="proto" name="this" />
          </scope>
          <scope ilk="function" line="1201" lineend="1212" name="getAttribute" returns="val" signature="getAttribute(attr)">
            <variable ilk="argument" name="attr" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="Array" line="1205" name="val" />
          </scope>
          <scope ilk="function" line="1214" lineend="1224" name="doMethod" returns="val" signature="doMethod(attr, start, end)">
            <variable ilk="argument" name="attr" />
            <variable ilk="argument" name="start" />
            <variable ilk="argument" name="end" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="Y.Bezier.getPosition()" line="1215" name="val" />
            <variable attributes="__local__ private" citdl="this.method()" line="1218" name="t" />
          </scope>
          <scope ilk="function" line="1226" lineend="1285" name="setRuntimeAttribute" signature="setRuntimeAttribute(attr)">
            <variable ilk="argument" name="attr" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this.getEl()" line="1228" name="el" />
            <variable attributes="__local__ private" citdl="this.attributes" line="1229" name="attributes" />
            <variable attributes="__local__ private" citdl="this.getAttribute()" line="1230" name="start" />
            <variable attributes="__local__ private" citdl="attributes[&apos;points&apos;][&apos;control&apos;]" line="1231" name="control" />
            <variable attributes="__local__ private" citdl="translateValues.call()" line="1232" name="end" />
            <variable attributes="__local__ private" line="1233" name="i" />
            <variable attributes="__local__ private" line="1233" name="len" />
            <variable attributes="__local__ private" citdl="Array" doc="break reference to attributes.points.control" line="1238" name="tmp" />
            <variable attributes="__local__ private" citdl="Y.Dom.getXY()" line="1260" name="pageXY" />
          </scope>
        </variable>
        <scope attributes="__local__ private" ilk="function" line="1287" lineend="1292" name="translateValues" returns="val" signature="translateValues(val, start)">
          <variable ilk="argument" name="val" />
          <variable ilk="argument" name="start" />
          <variable attributes="__local__ private" citdl="Y.Dom.getXY()" line="1288" name="pageXY" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="1294" lineend="1296" name="isset" signature="isset(prop)">
          <variable ilk="argument" name="prop" />
        </scope>
      </scope>
      <variable citdl="Number" doc="The X position of the point, which is also the right, left and index zero (for Dom.getXY symmetry)" line="1218" name="this[0]" />
      <variable citdl="Number" doc="The Y position of the point, which is also the top, bottom and index one (for Dom.getXY symmetry)" line="1225" name="this[1]" />
      <scope attributes="__local__ private" ilk="function" line="1300" lineend="1379" name="(anonymous)" signature="(anonymous)()">
        <scope attributes="__local__ private" ilk="class" line="1324" lineend="1328" name="Scroll">
          <scope attributes="__local__ private __ctor__" doc="CONSTRUCTOR: Anim subclass for scrolling elements to a position defined by the &quot;scroll&quot;&#xA;member of &quot;attributes&quot;.  All &quot;scroll&quot; members are arrays with x, y scroll positions.&#xA;&lt;p&gt;Usage: &lt;code&gt;var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);&lt;/code&gt;&lt;/p&gt;" ilk="function" line="1324" lineend="1328" name="Scroll" signature="Scroll(el, attributes, duration, method)">
            <variable ilk="argument" name="el" />
            <variable citdl="Object" doc="The attribute(s) to be animated.&#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.&#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).&#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
            <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
            <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
            <variable citdl="Scroll" name="this" />
          </scope>
          <variable citdl="String" line="1330" name="NAME" />
        </scope>
        <variable attributes="__local__ private" citdl="YAHOO.util" doc="shorthand" line="1333" name="Y" />
        <variable attributes="__local__ private" citdl="Scroll.superclass" line="1336" name="superclass" />
        <variable attributes="__local__ private" citdl="Scroll.prototype" line="1337" name="proto">
          <scope ilk="function" line="1339" lineend="1352" name="doMethod" returns="val" signature="doMethod(attr, start, end)">
            <variable ilk="argument" name="attr" />
            <variable ilk="argument" name="start" />
            <variable ilk="argument" name="end" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="Array" line="1340" name="val" />
          </scope>
          <scope ilk="function" line="1354" lineend="1365" name="getAttribute" returns="val" signature="getAttribute(attr)">
            <variable ilk="argument" name="attr" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="Array" line="1355" name="val" />
            <variable attributes="__local__ private" citdl="this.getEl()" line="1356" name="el" />
          </scope>
          <scope ilk="function" line="1367" lineend="1376" name="setAttribute" signature="setAttribute(attr, val, unit)">
            <variable ilk="argument" name="attr" />
            <variable ilk="argument" name="val" />
            <variable ilk="argument" name="unit" />
            <variable citdl="proto" name="this" />
            <variable attributes="__local__ private" citdl="this.getEl()" line="1368" name="el" />
          </scope>
        </variable>
      </scope>
      <variable citdl="aKeyCodes.length" line="1378" name="nKeyCodes" />
      <variable citdl="nKeyCodes" line="1379" name="i" />
      <scope attributes="__local__ private" ilk="function" line="1420" lineend="2760" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="1422" name="Event" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="1423" name="Dom" />
      </scope>
      <scope attributes="__local__ private" doc="Provides dynamic loading for the YUI library.  It includes the dependency&#xA;info for the library, and will automatically pull in dependencies for&#xA;the modules requested.  It supports rollup files (such as utilities.js&#xA;and yahoo-dom-event.js), and will automatically use these when&#xA;appropriate in order to minimize the number of http connections&#xA;required to load all of the dependencies." ilk="function" line="1667" lineend="3397" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="Y.lang" line="1671" name="lang" />
        <variable attributes="__local__ private" citdl="String" line="1671" name="AFTER" />
        <variable attributes="__local__ private" citdl="String" line="1671" name="PROV" />
        <variable attributes="__local__ private" citdl="String" line="1671" name="REQ" />
        <variable attributes="__local__ private" citdl="Y.util" line="1671" name="util" />
        <variable attributes="__local__ private" citdl="Y.env" line="1671" name="env" />
        <variable attributes="__local__ private" citdl="YAHOO" line="1671" name="Y">
          <variable citdl="Object" line="2379" name="widget">
            <scope ilk="function" line="2379" lineend="2381" name="LogWriter" returns="Y" signature="LogWriter()">
              <variable citdl="widget" name="this" />
            </scope>
          </variable>
        </variable>
        <variable attributes="__local__ private" citdl="String" line="1671" name="SUPER" />
        <variable attributes="__local__ private" citdl="Object" line="1673" lineend="2078" name="YUI">
          <variable citdl="Object" line="1675" lineend="1675" name="dupsAllowed">
            <variable citdl="Boolean" line="1675" name="yahoo" />
            <variable citdl="Boolean" line="1675" name="get" />
          </variable>
          <variable citdl="Object" doc="* The library metadata for the current release  The is the&#xA;default * value for YAHOO.util.YUILoader.moduleInfo *&#xA;@property YUIInfo * @static */" line="1683" lineend="2015" name="info">
            <variable citdl="String" line="1684" name="base" />
            <variable citdl="Object" line="1686" lineend="1692" name="skin">
              <variable citdl="String" line="1687" name="defaultSkin" />
              <variable citdl="String" line="1688" name="base" />
              <variable citdl="String" line="1689" name="path" />
              <variable citdl="Array" line="1690" name="after" />
              <variable citdl="Number" line="1691" name="rollup" />
            </variable>
            <variable citdl="Array" line="1694" name="dupsAllowed" />
            <variable citdl="Object" line="1696" lineend="2014" name="moduleInfo">
              <variable citdl="Object" line="1698" lineend="1702" name="animation">
                <variable citdl="String" line="1699" name="type" />
                <variable citdl="String" line="1700" name="path" />
                <variable citdl="Array" line="1701" name="requires" />
              </variable>
              <variable citdl="Object" line="1704" lineend="1710" name="autocomplete">
                <variable citdl="String" line="1705" name="type" />
                <variable citdl="String" line="1706" name="path" />
                <variable citdl="Array" line="1707" name="requires" />
                <variable citdl="Array" line="1708" name="optional" />
                <variable citdl="Boolean" line="1709" name="skinnable" />
              </variable>
              <variable citdl="Object" line="1712" lineend="1716" name="base">
                <variable citdl="String" line="1713" name="type" />
                <variable citdl="String" line="1714" name="path" />
                <variable citdl="Array" line="1715" name="after" />
              </variable>
              <variable citdl="Object" line="1718" lineend="1724" name="button">
                <variable citdl="String" line="1719" name="type" />
                <variable citdl="String" line="1720" name="path" />
                <variable citdl="Array" line="1721" name="requires" />
                <variable citdl="Array" line="1722" name="optional" />
                <variable citdl="Boolean" line="1723" name="skinnable" />
              </variable>
              <variable citdl="Object" line="1726" lineend="1731" name="calendar">
                <variable citdl="String" line="1727" name="type" />
                <variable citdl="String" line="1728" name="path" />
                <variable citdl="Array" line="1729" name="requires" />
                <variable citdl="Boolean" line="1730" name="skinnable" />
              </variable>
              <variable citdl="Object" line="1733" lineend="1737" name="charts">
                <variable citdl="String" line="1734" name="type" />
                <variable citdl="String" line="1735" name="path" />
                <variable citdl="Array" line="1736" name="requires" />
              </variable>
              <variable citdl="Object" line="1739" lineend="1745" name="colorpicker">
                <variable citdl="String" line="1740" name="type" />
                <variable citdl="String" line="1741" name="path" />
                <variable citdl="Array" line="1742" name="requires" />
                <variable citdl="Array" line="1743" name="optional" />
                <variable citdl="Boolean" line="1744" name="skinnable" />
              </variable>
              <variable citdl="Object" line="1747" lineend="1751" name="connection">
                <variable citdl="String" line="1748" name="type" />
                <variable citdl="String" line="1749" name="path" />
                <variable citdl="Array" line="1750" name="requires" />
              </variable>
              <variable citdl="Object" line="1753" lineend="1763" name="container">
                <variable citdl="String" line="1754" name="type" />
                <variable citdl="String" line="1755" name="path" />
                <variable citdl="Array" line="1756" name="requires" />
                <variable citdl="Array" doc="optionally includes menu, menu requires container." line="1760" name="optional" />
                <variable citdl="Array" line="1761" name="supersedes" />
                <variable citdl="Boolean" line="1762" name="skinnable" />
              </variable>
              <variable citdl="Object" line="1765" lineend="1770" name="containercore">
                <variable citdl="String" line="1766" name="type" />
                <variable citdl="String" line="1767" name="path" />
                <variable citdl="Array" line="1768" name="requires" />
                <variable citdl="String" line="1769" name="pkg" />
              </variable>
              <variable citdl="Object" line="1772" lineend="1776" name="cookie">
                <variable citdl="String" line="1773" name="type" />
                <variable citdl="String" line="1774" name="path" />
                <variable citdl="Array" line="1775" name="requires" />
              </variable>
              <variable citdl="Object" line="1778" lineend="1783" name="datasource">
                <variable citdl="String" line="1779" name="type" />
                <variable citdl="String" line="1780" name="path" />
                <variable citdl="Array" line="1781" name="requires" />
                <variable citdl="Array" line="1782" name="optional" />
              </variable>
              <variable citdl="Object" line="1785" lineend="1791" name="datatable">
                <variable citdl="String" line="1786" name="type" />
                <variable citdl="String" line="1787" name="path" />
                <variable citdl="Array" line="1788" name="requires" />
                <variable citdl="Array" line="1789" name="optional" />
                <variable citdl="Boolean" line="1790" name="skinnable" />
              </variable>
              <variable citdl="Object" line="1793" lineend="1797" name="dom">
                <variable citdl="String" line="1794" name="type" />
                <variable citdl="String" line="1795" name="path" />
                <variable citdl="Array" line="1796" name="requires" />
              </variable>
              <variable citdl="Object" line="1799" lineend="1803" name="dragdrop">
                <variable citdl="String" line="1800" name="type" />
                <variable citdl="String" line="1801" name="path" />
                <variable citdl="Array" line="1802" name="requires" />
              </variable>
              <variable citdl="Object" line="1805" lineend="1812" name="editor">
                <variable citdl="String" line="1806" name="type" />
                <variable citdl="String" line="1807" name="path" />
                <variable citdl="Array" line="1808" name="requires" />
                <variable citdl="Array" line="1809" name="optional" />
                <variable citdl="Array" line="1810" name="supersedes" />
                <variable citdl="Boolean" line="1811" name="skinnable" />
              </variable>
              <variable citdl="Object" line="1814" lineend="1818" name="element">
                <variable citdl="String" line="1815" name="type" />
                <variable citdl="String" line="1816" name="path" />
                <variable citdl="Array" line="1817" name="requires" />
              </variable>
              <variable citdl="Object" line="1820" lineend="1824" name="event">
                <variable citdl="String" line="1821" name="type" />
                <variable citdl="String" line="1822" name="path" />
                <variable citdl="Array" line="1823" name="requires" />
              </variable>
              <variable citdl="Object" line="1826" lineend="1829" name="fonts">
                <variable citdl="String" line="1827" name="type" />
                <variable citdl="String" line="1828" name="path" />
              </variable>
              <variable citdl="Object" line="1831" lineend="1835" name="get">
                <variable citdl="String" line="1832" name="type" />
                <variable citdl="String" line="1833" name="path" />
                <variable citdl="Array" line="1834" name="requires" />
              </variable>
              <variable citdl="Object" line="1837" lineend="1842" name="grids">
                <variable citdl="String" line="1838" name="type" />
                <variable citdl="String" line="1839" name="path" />
                <variable citdl="Array" line="1840" name="requires" />
                <variable citdl="Array" line="1841" name="optional" />
              </variable>
              <variable citdl="Object" line="1844" lineend="1848" name="history">
                <variable citdl="String" line="1845" name="type" />
                <variable citdl="String" line="1846" name="path" />
                <variable citdl="Array" line="1847" name="requires" />
              </variable>
              <variable citdl="Object" line="1850" lineend="1855" name="imagecropper">
                <variable citdl="String" line="1851" name="type" />
                <variable citdl="String" line="1852" name="path" />
                <variable citdl="Array" line="1853" name="requires" />
                <variable citdl="Boolean" line="1854" name="skinnable" />
              </variable>
              <variable citdl="Object" line="1857" lineend="1861" name="imageloader">
                <variable citdl="String" line="1858" name="type" />
                <variable citdl="String" line="1859" name="path" />
                <variable citdl="Array" line="1860" name="requires" />
              </variable>
              <variable citdl="Object" line="1863" lineend="1867" name="json">
                <variable citdl="String" line="1864" name="type" />
                <variable citdl="String" line="1865" name="path" />
                <variable citdl="Array" line="1866" name="requires" />
              </variable>
              <variable citdl="Object" line="1869" lineend="1875" name="layout">
                <variable citdl="String" line="1870" name="type" />
                <variable citdl="String" line="1871" name="path" />
                <variable citdl="Array" line="1872" name="requires" />
                <variable citdl="Array" line="1873" name="optional" />
                <variable citdl="Boolean" line="1874" name="skinnable" />
              </variable>
              <variable citdl="Object" line="1877" lineend="1883" name="logger">
                <variable citdl="String" line="1878" name="type" />
                <variable citdl="String" line="1879" name="path" />
                <variable citdl="Array" line="1880" name="requires" />
                <variable citdl="Array" line="1881" name="optional" />
                <variable citdl="Boolean" line="1882" name="skinnable" />
              </variable>
              <variable citdl="Object" line="1885" lineend="1890" name="menu">
                <variable citdl="String" line="1886" name="type" />
                <variable citdl="String" line="1887" name="path" />
                <variable citdl="Array" line="1888" name="requires" />
                <variable citdl="Boolean" line="1889" name="skinnable" />
              </variable>
              <variable citdl="Object" line="1892" lineend="1896" name="profiler">
                <variable citdl="String" line="1893" name="type" />
                <variable citdl="String" line="1894" name="path" />
                <variable citdl="Array" line="1895" name="requires" />
              </variable>
              <variable citdl="Object" line="1899" lineend="1904" name="profilerviewer">
                <variable citdl="String" line="1900" name="type" />
                <variable citdl="String" line="1901" name="path" />
                <variable citdl="Array" line="1902" name="requires" />
                <variable citdl="Boolean" line="1903" name="skinnable" />
              </variable>
              <variable citdl="Object" line="1906" lineend="1909" name="reset">
                <variable citdl="String" line="1907" name="type" />
                <variable citdl="String" line="1908" name="path" />
              </variable>
              <variable citdl="Object" line="1911" lineend="1916" name="reset-fonts-grids">
                <variable citdl="String" line="1912" name="type" />
                <variable citdl="String" line="1913" name="path" />
                <variable citdl="Array" line="1914" name="supersedes" />
                <variable citdl="Number" line="1915" name="rollup" />
              </variable>
              <variable citdl="Object" line="1918" lineend="1923" name="reset-fonts">
                <variable citdl="String" line="1919" name="type" />
                <variable citdl="String" line="1920" name="path" />
                <variable citdl="Array" line="1921" name="supersedes" />
                <variable citdl="Number" line="1922" name="rollup" />
              </variable>
              <variable citdl="Object" line="1925" lineend="1931" name="resize">
                <variable citdl="String" line="1926" name="type" />
                <variable citdl="String" line="1927" name="path" />
                <variable citdl="Array" line="1928" name="requires" />
                <variable citdl="Array" line="1929" name="optional" />
                <variable citdl="Boolean" line="1930" name="skinnable" />
              </variable>
              <variable citdl="Object" line="1933" lineend="1937" name="selector">
                <variable citdl="String" line="1934" name="type" />
                <variable citdl="String" line="1935" name="path" />
                <variable citdl="Array" line="1936" name="requires" />
              </variable>
              <variable citdl="Object" line="1939" lineend="1946" name="simpleeditor">
                <variable citdl="String" line="1940" name="type" />
                <variable citdl="String" line="1941" name="path" />
                <variable citdl="Array" line="1942" name="requires" />
                <variable citdl="Array" line="1943" name="optional" />
                <variable citdl="Boolean" line="1944" name="skinnable" />
                <variable citdl="String" line="1945" name="pkg" />
              </variable>
              <variable citdl="Object" line="1948" lineend="1953" name="slider">
                <variable citdl="String" line="1949" name="type" />
                <variable citdl="String" line="1950" name="path" />
                <variable citdl="Array" line="1951" name="requires" />
                <variable citdl="Array" line="1952" name="optional" />
              </variable>
              <variable citdl="Object" line="1955" lineend="1961" name="tabview">
                <variable citdl="String" line="1956" name="type" />
                <variable citdl="String" line="1957" name="path" />
                <variable citdl="Array" line="1958" name="requires" />
                <variable citdl="Array" line="1959" name="optional" />
                <variable citdl="Boolean" line="1960" name="skinnable" />
              </variable>
              <variable citdl="Object" line="1963" lineend="1968" name="treeview">
                <variable citdl="String" line="1964" name="type" />
                <variable citdl="String" line="1965" name="path" />
                <variable citdl="Array" line="1966" name="requires" />
                <variable citdl="Boolean" line="1967" name="skinnable" />
              </variable>
              <variable citdl="Object" line="1970" lineend="1974" name="uploader">
                <variable citdl="String" line="1971" name="type" />
                <variable citdl="String" line="1972" name="path" />
                <variable citdl="Array" line="1973" name="requires" />
              </variable>
              <variable citdl="Object" line="1976" lineend="1981" name="utilities">
                <variable citdl="String" line="1977" name="type" />
                <variable citdl="String" line="1978" name="path" />
                <variable citdl="Array" line="1979" name="supersedes" />
                <variable citdl="Number" line="1980" name="rollup" />
              </variable>
              <variable citdl="Object" line="1983" lineend="1986" name="yahoo">
                <variable citdl="String" line="1984" name="type" />
                <variable citdl="String" line="1985" name="path" />
              </variable>
              <variable citdl="Object" line="1988" lineend="1993" name="yahoo-dom-event">
                <variable citdl="String" line="1989" name="type" />
                <variable citdl="String" line="1990" name="path" />
                <variable citdl="Array" line="1991" name="supersedes" />
                <variable citdl="Number" line="1992" name="rollup" />
              </variable>
              <variable citdl="Object" line="1995" lineend="1999" name="yuiloader">
                <variable citdl="String" line="1996" name="type" />
                <variable citdl="String" line="1997" name="path" />
                <variable citdl="Array" line="1998" name="supersedes" />
              </variable>
              <variable citdl="Object" line="2001" lineend="2006" name="yuiloader-dom-event">
                <variable citdl="String" line="2002" name="type" />
                <variable citdl="String" line="2003" name="path" />
                <variable citdl="Array" line="2004" name="supersedes" />
                <variable citdl="Number" line="2005" name="rollup" />
              </variable>
              <variable citdl="Object" line="2008" lineend="2013" name="yuitest">
                <variable citdl="String" line="2009" name="type" />
                <variable citdl="String" line="2010" name="path" />
                <variable citdl="Array" line="2011" name="requires" />
                <variable citdl="Boolean" line="2012" name="skinnable" />
              </variable>
            </variable>
          </variable>
          <variable citdl="Object" line="2018" lineend="2037" name="ObjectUtil">
            <scope ilk="function" line="2019" lineend="2025" name="appendArray" signature="appendArray(o, a)">
              <variable ilk="argument" name="o" />
              <variable ilk="argument" name="a" />
              <variable citdl="ObjectUtil" name="this" />
            </scope>
            <scope ilk="function" line="2027" lineend="2036" name="keys" returns="a" signature="keys(o, ordered)">
              <variable ilk="argument" name="o" />
              <variable ilk="argument" name="ordered" />
              <variable citdl="ObjectUtil" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="2028" name="a" />
              <variable attributes="__local__ private" line="2028" name="i" />
            </scope>
          </variable>
          <variable citdl="Object" line="2039" lineend="2077" name="ArrayUtil">
            <scope ilk="function" line="2041" lineend="2048" name="appendArray" signature="appendArray(a1, a2)">
              <variable ilk="argument" name="a1" />
              <variable ilk="argument" name="a2" />
              <variable citdl="ArrayUtil" name="this" />
            </scope>
            <scope ilk="function" line="2050" lineend="2058" name="indexOf" returns="Number" signature="indexOf(a, val)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="val" />
              <variable citdl="ArrayUtil" name="this" />
            </scope>
            <scope ilk="function" line="2060" lineend="2067" name="toObject" returns="o" signature="toObject(a)">
              <variable ilk="argument" name="a" />
              <variable citdl="ArrayUtil" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="2061" lineend="2061" name="o" />
            </scope>
            <scope doc="* Returns a unique array." ilk="function" line="2074" lineend="2076" name="uniq" returns="YUI.ObjectUtil.keys()" signature="uniq(a)">
              <variable ilk="argument" name="a" />
              <variable citdl="ArrayUtil" name="this" />
            </scope>
          </variable>
        </variable>
        <variable citdl="Object" line="2335" lineend="2344" name="FILTERS">
          <variable citdl="Object" line="2336" lineend="2339" name="RAW">
            <variable citdl="String" line="2337" name="searchExp" />
            <variable citdl="String" line="2338" name="replaceStr" />
          </variable>
          <variable citdl="Object" line="2340" lineend="2343" name="DEBUG">
            <variable citdl="String" line="2341" name="searchExp" />
            <variable citdl="String" line="2342" name="replaceStr" />
          </variable>
        </variable>
        <variable citdl="String" line="2346" name="SKIN_PREFIX" />
        <scope ilk="class" line="2348" lineend="2387" name="_config">
          <scope attributes="__ctor__" ilk="function" line="2348" lineend="2387" name="_config" signature="_config(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="_config" name="this" />
            <variable attributes="__local__ private" citdl="this.filter" doc="fix filter" line="2364" name="f" />
          </scope>
          <variable citdl="this.FILTERS[f]" line="2384" name="filter" />
        </scope>
        <scope doc="{boolean} true if the module was added, false if * the&#xA;object passed in did not provide all required attributes */" ilk="class" line="2407" lineend="2420" name="addModule">
          <scope attributes="__ctor__" doc="{boolean} true if the module was added, false if * the&#xA;object passed in did not provide all required attributes */" ilk="function" line="2407" lineend="2420" name="addModule" returns="Boolean" signature="addModule(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="addModule" name="this" />
          </scope>
          <variable citdl="Boolean" line="2417" name="dirty" />
        </scope>
        <scope doc="Add a requirement for one or more module" ilk="class" line="2427" lineend="2431" name="require">
          <scope attributes="__ctor__" doc="Add a requirement for one or more module" ilk="function" line="2427" lineend="2431" name="require" signature="require(what)">
            <variable citdl="Array" doc="| string*} the modules to load" ilk="argument" name="what" />
            <variable citdl="require" name="this" />
            <variable attributes="__local__ private" line="2428" name="a" />
          </scope>
          <variable citdl="Boolean" line="2429" name="dirty" />
        </scope>
        <scope attributes="private" doc="PRIVATE: Adds the skin def to the module info" ilk="function" line="2441" lineend="2478" name="_addSkin" returns="String" signature="_addSkin(skin, mod)">
          <variable citdl="String" doc="the name of the skin" ilk="argument" name="skin" />
          <variable citdl="String" doc="the name of the module" ilk="argument" name="mod" />
          <variable attributes="__local__ private" citdl="this.moduleInfo" doc="Add a module definition for the skin rollup css" line="2445" name="info" />
          <variable attributes="__local__ private" citdl="this.formatSkin()" doc="Add a module definition for the skin rollup css" line="2445" name="name" />
          <variable attributes="__local__ private" citdl="info[mod]" doc="Add a module definition for the skin rollup css" line="2445" name="ext" />
          <variable attributes="__local__ private" citdl="this.skin" doc="Add a module definition for the skin rollup css" line="2445" name="sinf" />
          <variable attributes="__local__ private" citdl="info[mod]" line="2465" name="mdef" />
          <variable attributes="__local__ private" citdl="mdef.pkg" line="2465" name="pkg" />
        </scope>
        <scope doc="Returns an object containing properties for all modules required&#xA;in order to load the requested module" ilk="function" line="2486" lineend="2528" name="getRequires" returns="mod.expanded" signature="getRequires(mod)">
          <variable doc="The module definition from moduleInfo" ilk="argument" name="mod" />
          <variable attributes="__local__ private" citdl="this.moduleInfo" line="2496" name="info" />
          <variable attributes="__local__ private" citdl="Array" line="2496" name="d" />
          <variable attributes="__local__ private" line="2496" name="i" />
          <variable attributes="__local__ private" citdl="info[r[i]]" line="2496" name="m" />
          <variable attributes="__local__ private" citdl="mod.optional" line="2496" name="o" />
          <variable attributes="__local__ private" citdl="mod.requires" line="2496" name="r" />
        </scope>
        <scope doc="Returns an object literal of the modules the supplied module satisfies" ilk="function" line="2538" lineend="2585" name="getProvides" returns="m[ckey]" signature="getProvides(name, notMe)">
          <variable ilk="argument" name="name" />
          <variable citdl="String" doc="don&apos;t add this module name, only include superseded modules" ilk="argument" name="notMe" />
          <variable attributes="__local__ private" citdl="this.moduleInfo[name]" line="2540" name="m" />
          <variable attributes="__local__ private" citdl="Object" line="2540" lineend="2540" name="o" />
          <variable attributes="__local__ private" line="2540" name="ckey" />
          <variable attributes="__local__ private" line="2540" name="addMe" />
          <variable attributes="__local__ private" citdl="this" line="2551" name="me" />
          <variable attributes="__local__ private" citdl="m.supersedes" line="2551" name="s" />
          <variable attributes="__local__ private" citdl="Object" line="2551" lineend="2551" name="done" />
          <scope attributes="__local__ private" doc="use worker to break cycles" ilk="function" line="2554" lineend="2566" name="add" signature="add(mm)">
            <variable ilk="argument" name="mm" />
          </scope>
        </scope>
        <scope doc="Calculates the dependency tree, the result is stored in the sorted&#xA;property" ilk="class" line="2594" lineend="2610" name="calculate">
          <scope attributes="__ctor__" doc="Calculates the dependency tree, the result is stored in the sorted&#xA;property" ilk="function" line="2594" lineend="2610" name="calculate" signature="calculate(o)">
            <variable doc="optional options object" ilk="argument" name="o" />
            <variable citdl="calculate" name="this" />
          </scope>
          <variable citdl="Boolean" doc="Y.log(&quot;after calculate: &quot; + lang.dump(this.required));" line="2608" name="dirty" />
        </scope>
        <scope attributes="private" doc="PRIVATE: Investigates the current YUI configuration on the page.  By default,&#xA;modules already detected will not be loaded again unless a force&#xA;option is encountered.  Called by calculate()" ilk="class" line="2619" lineend="2676" name="_setup">
          <scope attributes="__ctor__ private" doc="PRIVATE: Investigates the current YUI configuration on the page.  By default,&#xA;modules already detected will not be loaded again unless a force&#xA;option is encountered.  Called by calculate()" ilk="function" line="2619" lineend="2676" name="_setup" signature="_setup()">
            <variable citdl="_setup" name="this" />
            <variable attributes="__local__ private" citdl="this.moduleInfo" line="2621" name="info" />
            <variable attributes="__local__ private" line="2621" name="name" />
            <variable attributes="__local__ private" line="2621" name="i" />
            <variable attributes="__local__ private" line="2621" name="j" />
            <variable attributes="__local__ private" citdl="info[name]" line="2625" name="m" />
            <variable attributes="__local__ private" citdl="this.skin.overrides" doc="Y.log(&quot;skinning: &quot; + name);" line="2628" name="o" />
            <variable attributes="__local__ private" citdl="this._addSkin()" doc="Y.log(&quot;skinning: &quot; + name);" line="2628" name="smod" />
            <variable attributes="__local__ private" citdl="lang.merge()" line="2642" name="l" />
          </scope>
          <variable citdl="l" doc="Y.log(&quot;loaded expanded: &quot; + lang.dump(l, 0));" line="2674" name="loaded" />
        </scope>
        <scope attributes="private" doc="PRIVATE: Inspects the required modules list looking for additional&#xA;dependencies.  Expands the required list to include all&#xA;required modules.  Called by calculate()" ilk="function" line="2686" lineend="2701" name="_explode" signature="_explode()">
          <variable attributes="__local__ private" line="2688" name="i" />
          <variable attributes="__local__ private" citdl="this.required" line="2688" name="r" />
          <variable attributes="__local__ private" citdl="this.moduleInfo[i]" line="2688" name="mod" />
          <variable attributes="__local__ private" citdl="this.getRequires()" line="2694" name="req" />
        </scope>
        <scope attributes="deprecated private" doc="DEPRECATED PRIVATE: Sets up the requirements for the skin assets if any of the&#xA;requested modules are skinnable" ilk="function" line="2712" lineend="2714" name="_skin" signature="_skin()" />
        <scope doc="Returns the skin module name for the specified skin name.  If a&#xA;module name is supplied, the returned skin module name is&#xA;specific to the module passed in." ilk="function" line="2725" lineend="2732" name="formatSkin" returns="String" signature="formatSkin(skin, mod)">
          <variable citdl="String" doc="the name of the skin" ilk="argument" name="skin" />
          <variable citdl="String" doc="optional: the name of a module to skin" ilk="argument" name="mod" />
          <variable attributes="__local__ private" citdl="this.SKIN_PREFIX" line="2726" name="s" />
        </scope>
        <scope doc="Reverses &lt;code&gt;formatSkin&lt;/code&gt;, providing the skin name and&#xA;module name if the string matches the pattern for skins." ilk="function" line="2743" lineend="2751" name="parseSkin" returns="skin: string, module: string" signature="parseSkin(mod)">
          <variable citdl="String" doc="the module name to parse" ilk="argument" name="mod" />
          <variable attributes="__local__ private" citdl="mod.split()" line="2746" name="a" />
        </scope>
        <scope attributes="private" doc="PRIVATE: Look for rollup packages to determine if all of the modules a&#xA;rollup supersedes are required.  If so, include the rollup to&#xA;help reduce the total number of connections required.  Called&#xA;by calculate()" ilk="class" line="2761" lineend="2846" name="_rollup">
          <scope attributes="__ctor__ private" doc="PRIVATE: Look for rollup packages to determine if all of the modules a&#xA;rollup supersedes are required.  If so, include the rollup to&#xA;help reduce the total number of connections required.  Called&#xA;by calculate()" ilk="function" line="2761" lineend="2846" name="_rollup" signature="_rollup()">
            <variable citdl="_rollup" name="this" />
            <variable attributes="__local__ private" line="2762" name="i" />
            <variable attributes="__local__ private" citdl="Object" line="2762" lineend="2762" name="rollups" />
            <variable attributes="__local__ private" line="2762" name="j" />
            <variable attributes="__local__ private" citdl="this.moduleInfo[i]" line="2762" name="m" />
            <variable attributes="__local__ private" citdl="m.supersedes" line="2762" name="s" />
            <variable attributes="__local__ private" citdl="this.required" line="2762" name="r" />
            <variable attributes="__local__ private" citdl="Boolean" line="2762" name="roll" />
            <variable attributes="__local__ private" citdl="Boolean" line="2779" name="rolled" />
            <variable attributes="__local__ private" citdl="Number" line="2792" name="c" />
            <variable attributes="__local__ private" line="2792" name="skin" />
          </scope>
          <variable citdl="rollups" line="2774" name="rollups" />
        </scope>
        <scope attributes="private" doc="PRIVATE: Remove superceded modules and loaded modules.  Called by&#xA;calculate() after we have the mega list of all dependencies" ilk="function" line="2854" lineend="2897" name="_reduce" signature="_reduce()">
          <variable attributes="__local__ private" line="2856" name="i" />
          <variable attributes="__local__ private" line="2856" name="j" />
          <variable attributes="__local__ private" citdl="this.moduleInfo[j]" line="2856" name="m" />
          <variable attributes="__local__ private" citdl="m" line="2856" name="s" />
          <variable attributes="__local__ private" citdl="this.required" line="2856" name="r" />
          <variable attributes="__local__ private" citdl="this.parseSkin()" line="2866" name="skinDef" />
          <variable attributes="__local__ private" citdl="this.SKIN_PREFIX" line="2872" name="skin_pre" />
          <variable attributes="__local__ private" citdl="m" line="2876" name="ext" />
        </scope>
        <scope attributes="private" doc="PRIVATE: Sorts the dependency tree.  The last step of calculate()" ilk="class" line="2904" lineend="3019" name="_sort">
          <scope attributes="__ctor__ private" doc="PRIVATE: Sorts the dependency tree.  The last step of calculate()" ilk="function" line="2904" lineend="3019" name="_sort" signature="_sort()">
            <variable citdl="_sort" name="this" />
            <variable attributes="__local__ private" citdl="this.moduleInfo" doc="create an indexed list" line="2907" name="info" />
            <variable attributes="__local__ private" citdl="this" doc="create an indexed list" line="2907" name="me" />
            <variable attributes="__local__ private" doc="create an indexed list" line="2907" name="checkOptional" />
            <variable attributes="__local__ private" citdl="Array" doc="create an indexed list" line="2907" name="s" />
            <variable attributes="__local__ private" citdl="this.loaded" doc="create an indexed list" line="2907" name="loaded" />
            <scope attributes="__local__ private" doc="directly or by means of modules it supersedes." ilk="function" line="2911" lineend="2961" name="requires" returns="Boolean" signature="requires(aa, bb)">
              <variable ilk="argument" name="aa" />
              <variable ilk="argument" name="bb" />
              <variable attributes="__local__ private" citdl="mm" line="2918" name="rr" />
              <variable attributes="__local__ private" citdl="info[aa]" line="2918" name="mm" />
              <variable attributes="__local__ private" citdl="mm" line="2918" name="after" />
              <variable attributes="__local__ private" line="2918" name="ii" />
              <variable attributes="__local__ private" citdl="info[bb]" line="2918" name="other" />
              <variable attributes="__local__ private" citdl="mm" line="2918" name="optional" />
              <variable attributes="__local__ private" citdl="info[bb]" doc="check if this module requires one the other supersedes" line="2937" name="ss" />
            </scope>
            <variable attributes="__local__ private" citdl="Number" doc="pointer to the first unsorted item" line="2970" name="p" />
            <variable attributes="__local__ private" citdl="s.splice()" line="2975" name="b" />
            <variable attributes="__local__ private" line="2975" name="k" />
            <variable attributes="__local__ private" line="2975" name="j" />
            <variable attributes="__local__ private" citdl="Boolean" line="2975" name="moved" />
            <variable attributes="__local__ private" citdl="s.length" line="2975" name="l" />
            <variable attributes="__local__ private" citdl="s[j]" line="2975" name="a" />
          </scope>
          <variable citdl="s" line="3018" name="sorted" />
        </scope>
        <scope ilk="function" line="3021" lineend="3032" name="toString" signature="toString()">
          <variable attributes="__local__ private" citdl="Object" line="3022" lineend="3029" name="o">
            <variable citdl="String" line="3023" name="type" />
            <variable citdl="this.base" line="3024" name="base" />
            <variable citdl="this.filter" line="3025" name="filter" />
            <variable citdl="this.required" line="3026" name="required" />
            <variable citdl="this.loaded" line="3027" name="loaded" />
            <variable citdl="this.inserted" line="3028" name="inserted" />
          </variable>
        </scope>
        <scope doc="inserts the requested modules and their dependencies.&#xA;&lt;code&gt;type&lt;/code&gt; can be &quot;js&quot; or &quot;css&quot;.  Both script and&#xA;css are inserted if type is not provided." ilk="class" line="3042" lineend="3072" name="insert">
          <scope attributes="__ctor__" doc="inserts the requested modules and their dependencies.&#xA;&lt;code&gt;type&lt;/code&gt; can be &quot;js&quot; or &quot;css&quot;.  Both script and&#xA;css are inserted if type is not provided." ilk="function" line="3042" lineend="3072" name="insert" signature="insert(o, type)">
            <variable doc="optional options object" ilk="argument" name="o" />
            <variable citdl="String" doc="the type of dependency to insert" ilk="argument" name="type" />
            <variable citdl="insert" name="this" />
            <variable attributes="__local__ private" citdl="this" doc="Y.log(&quot;trying to load css first&quot;);" line="3054" name="self" />
          </scope>
          <scope ilk="function" line="3055" lineend="3058" name="_internalCallback" signature="_internalCallback()">
            <variable citdl="insert" name="this" />
            <variable citdl="Object" line="3056" name="self">
              <variable line="3056" name="_internalCallback" />
            </variable>
          </scope>
          <variable citdl="Boolean" doc="set a flag to indicate the load has started" line="3064" name="_loading" />
          <variable citdl="type" doc="keep the loadType (js, css or undefined) cached" line="3067" name="loadType" />
        </scope>
        <scope doc="* Interns the script for the requested modules." ilk="class" line="3083" lineend="3179" name="sandbox">
          <scope attributes="__ctor__" doc="* Interns the script for the requested modules." ilk="function" line="3083" lineend="3231" name="sandbox" signature="sandbox(o, type)">
            <variable ilk="argument" name="o" />
            <variable ilk="argument" name="type" />
            <variable citdl="sandbox" name="this" />
            <variable attributes="__local__ private" citdl="this" line="3098" name="self" />
            <variable attributes="__local__ private" citdl="YAHOO.util.YUILoader" doc="get a new loader instance to load connection." line="3113" name="ld" />
            <variable attributes="__local__ private" line="3135" name="i" />
            <variable attributes="__local__ private" citdl="this.moduleInfo[s[i]]" line="3135" name="m" />
            <variable attributes="__local__ private" citdl="s.length" line="3135" name="l" />
            <variable attributes="__local__ private" citdl="m.fullpath" line="3135" name="url" />
            <variable attributes="__local__ private" citdl="this.sorted" line="3135" name="s" />
            <variable attributes="__local__ private" citdl="Object" doc="YAHOO.log(&quot;xhr request: &quot; + url + &quot;, &quot; + i);" line="3162" lineend="3227" name="xhrData">
              <scope ilk="function" line="3164" lineend="3212" name="success" signature="success(o)">
                <variable ilk="argument" name="o" />
                <variable citdl="xhrData" name="this" />
                <variable attributes="__local__ private" citdl="o.argument[2]" line="3166" name="name" />
                <variable attributes="__local__ private" citdl="o.argument[0]" line="3166" name="idx" />
                <variable attributes="__local__ private" citdl="this.varName" doc="the variable to find" line="3188" name="v" />
                <variable attributes="__local__ private" citdl="String" doc="wrap the contents of the requested modules in an anonymous&#xA;function" line="3191" name="t" />
                <variable attributes="__local__ private" citdl="String" doc="return the locally scoped reference." line="3194" name="b" />
                <variable attributes="__local__ private" citdl="eval()" line="3196" name="ref" />
              </scope>
              <scope ilk="function" line="3214" lineend="3220" name="failure" signature="failure(o)">
                <variable ilk="argument" name="o" />
                <variable citdl="xhrData" name="this" />
              </scope>
              <variable citdl="this" line="3222" name="scope" />
              <variable citdl="Array" doc="module index, module name, sandbox name" line="3225" name="argument" />
            </variable>
          </scope>
          <variable citdl="Boolean" line="3096" name="_sandbox" />
          <scope ilk="function" line="3102" lineend="3105" name="_internalCallback" signature="_internalCallback()">
            <variable citdl="sandbox" name="this" />
            <variable citdl="Object" line="3103" name="self">
              <variable line="3103" name="_internalCallback" />
            </variable>
          </scope>
          <variable citdl="Array" line="3128" name="_scriptText" />
          <variable citdl="Number" line="3129" name="_loadCount" />
          <variable citdl="this.sorted.length" line="3130" name="_stopCount" />
          <variable citdl="Array" line="3131" name="_xhr" />
        </scope>
        <scope doc="Executed every time a module is loaded, and if we are in a load&#xA;cycle, we attempt to load the next script.  Public so that it&#xA;is possible to call this if using a method other than&#xA;YAHOO.register to determine when scripts are fully loaded" ilk="class" line="3243" lineend="3356" name="loadNext">
          <scope attributes="__ctor__" doc="Executed every time a module is loaded, and if we are in a load&#xA;cycle, we attempt to load the next script.  Public so that it&#xA;is possible to call this if using a method other than&#xA;YAHOO.register to determine when scripts are fully loaded" ilk="function" line="3243" lineend="3356" name="loadNext" signature="loadNext(mname)">
            <variable citdl="String" doc="optional the name of the module that has&#xA;been loaded (which is usually why it is time to load the next&#xA;one)" ilk="argument" name="mname" />
            <variable citdl="loadNext" name="this" />
            <variable attributes="__local__ private" line="3277" name="i" />
            <variable attributes="__local__ private" citdl="this.moduleInfo[s[i]]" line="3277" name="m" />
            <variable attributes="__local__ private" citdl="s.length" line="3277" name="len" />
            <variable attributes="__local__ private" citdl="this.sorted" line="3277" name="s" />
            <scope attributes="__local__ private" doc="YAHOO.log(&quot;attempting to load &quot; + s[i] + &quot;, &quot; + this.base);" ilk="function" line="3315" lineend="3317" name="c" signature="c(o)">
              <variable ilk="argument" name="o" />
            </scope>
            <variable attributes="__local__ private" citdl="this" doc="YAHOO.log(&quot;attempting to load &quot; + s[i] + &quot;, &quot; + this.base);" line="3315" name="self" />
            <variable attributes="__local__ private" citdl="m.fullpath" doc="YAHOO.log(&quot;attempting to load &quot; + s[i] + &quot;, &quot; + this.base);" line="3315" name="url" />
            <variable attributes="__local__ private" doc="YAHOO.log(&quot;attempting to load &quot; + s[i] + &quot;, &quot; + this.base);" line="3315" name="fn" />
            <variable doc="YAHOO.log(&quot;using YAHOO env &quot; + s[i] + &quot;, &quot; + m.varName);" line="3324" name="c" />
            <variable attributes="__local__ private" citdl="this._internalCallback" line="3346" name="f" />
          </scope>
          <variable citdl="s[i]" line="3310" name="_loading" />
          <variable citdl="Boolean" line="3325" name="_useYahooListener" />
          <variable line="3347" name="_internalCallback" />
        </scope>
        <scope attributes="private" doc="PRIVATE: In IE, the onAvailable/onDOMReady events need help when Event is&#xA;loaded dynamically" ilk="function" line="3365" lineend="3370" name="_pushEvents" signature="_pushEvents(ref)">
          <variable ilk="argument" name="ref" />
          <variable attributes="__local__ private" citdl="ref" line="3366" name="r" />
        </scope>
        <scope attributes="private" doc="PRIVATE: Generates the full url for a module&#xA;method _url" ilk="function" line="3379" lineend="3393" name="_url" returns="String" signature="_url(path)">
          <variable citdl="String" doc="the path fragment" ilk="argument" name="path" />
          <variable attributes="__local__ private" citdl="this.base" line="3381" name="u" />
          <variable attributes="__local__ private" citdl="this.filter" line="3381" name="f" />
        </scope>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="1826" lineend="3349" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Overlay&apos;s events" line="1866" name="Lang" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Overlay&apos;s events" line="1866" name="Dom" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Overlay&apos;s events" line="1866" name="m_oIFrameTemplate" />
        <variable attributes="__local__ private constant" citdl="Object" classrefs="Module" doc="PRIVATE CONSTANT: Constant representing the name of the Overlay&apos;s events" line="1866" lineend="3349" name="Overlay">
          <scope attributes="__static__" doc="STATIC: The DOM event handler used to fire the CustomEvent for window scroll" ilk="function" line="2045" lineend="2062" name="windowScrollHandler" signature="windowScrollHandler(e)">
            <variable citdl="DOMEvent" doc="The DOM scroll event" ilk="argument" name="e" />
            <variable citdl="Overlay" name="this" />
            <variable citdl="Object" line="2050" name="window">
              <variable citdl="Number" line="2050" name="scrollEnd" />
            </variable>
          </scope>
          <scope attributes="__static__" doc="STATIC: The DOM event handler used to fire the CustomEvent for window resize" ilk="function" line="2070" lineend="2085" name="windowResizeHandler" signature="windowResizeHandler(e)">
            <variable citdl="DOMEvent" doc="The DOM resize event" ilk="argument" name="e" />
            <variable citdl="Overlay" name="this" />
            <variable citdl="Object" line="2074" name="window">
              <variable citdl="Number" line="2074" name="resizeEnd" />
            </variable>
          </scope>
          <scope doc="The Overlay initialization method, which is executed for Overlay and&#xA;all of its subclasses. This method is automatically called by the&#xA;constructor, and  sets up all DOM references for pre-existing markup,&#xA;and creates required markup if it is not already present." ilk="function" line="2117" lineend="2154" name="init" signature="init(el, userConfig)">
            <variable citdl="HTMLElement" doc="The element representing the Overlay" ilk="argument" name="el" />
            <variable citdl="Object" doc="The configuration object literal&#xA;containing the configuration that should be set for this Overlay.&#xA;See configuration documentation for more details." ilk="argument" name="userConfig" />
            <variable citdl="Overlay" name="this" />
          </scope>
          <scope doc="Initializes the custom events for Overlay which are fired&#xA;automatically at appropriate times by the Overlay class." ilk="function" line="2161" lineend="2185" name="initEvents" signature="initEvents()">
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="CustomEvent.LIST" line="2165" name="SIGNATURE" />
          </scope>
          <variable citdl="this.createEvent()" doc="CustomEvent fired before the Overlay is moved." line="2173" name="beforeMoveEvent" />
          <variable citdl="SIGNATURE" line="2174" name="signature" />
          <variable citdl="this.createEvent()" doc="CustomEvent fired after the Overlay is moved." line="2182" name="moveEvent" />
          <scope doc="Initializes the class&apos;s configurable properties which can be changed&#xA;using the Overlay&apos;s Config object (cfg)." ilk="function" line="2192" lineend="2352" name="initDefaultConfig" signature="initDefaultConfig()">
            <variable citdl="Overlay" name="this" />
          </scope>
          <scope doc="Moves the Overlay to the specified position. This function is&#xA;identical to calling this.cfg.setProperty(&quot;xy&quot;, [x,y]);" ilk="function" line="2361" lineend="2363" name="moveTo" signature="moveTo(x, y)">
            <variable citdl="Number" doc="The Overlay&apos;s new x position" ilk="argument" name="x" />
            <variable citdl="Number" doc="The Overlay&apos;s new y position" ilk="argument" name="y" />
            <variable citdl="Overlay" name="this" />
          </scope>
          <scope doc="Adds a CSS class (&quot;hide-scrollbars&quot;) and removes a CSS class&#xA;(&quot;show-scrollbars&quot;) to the Overlay to fix a bug in Gecko on Mac OS X&#xA;(https://bugzilla.mozilla.org/show_bug.cgi?id=187435)" ilk="function" line="2371" lineend="2376" name="hideMacGeckoScrollbars" signature="hideMacGeckoScrollbars()">
            <variable citdl="Overlay" name="this" />
          </scope>
          <scope doc="Adds a CSS class (&quot;show-scrollbars&quot;) and removes a CSS class&#xA;(&quot;hide-scrollbars&quot;) to the Overlay to fix a bug in Gecko on Mac OS X&#xA;(https://bugzilla.mozilla.org/show_bug.cgi?id=187435)" ilk="function" line="2384" lineend="2389" name="showMacGeckoScrollbars" signature="showMacGeckoScrollbars()">
            <variable citdl="Overlay" name="this" />
          </scope>
          <scope doc="The default event handler fired when the &quot;visible&quot; property is&#xA;changed.  This method is responsible for firing showEvent&#xA;and hideEvent." ilk="function" line="2403" lineend="2532" name="configVisible" signature="configVisible(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" line="2413" name="isMacGecko" />
            <variable attributes="__local__ private" citdl="effectInstances[j]" line="2413" name="ei" />
            <variable attributes="__local__ private" citdl="effectInstances.length" line="2413" name="nEffectInstances" />
            <variable attributes="__local__ private" line="2413" name="i" />
            <variable attributes="__local__ private" citdl="Dom.getStyle()" line="2413" name="currentVis" />
            <variable attributes="__local__ private" line="2413" name="k" />
            <variable attributes="__local__ private" line="2413" name="j" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2413" name="effect" />
            <variable attributes="__local__ private" citdl="args[0]" line="2413" name="visible" />
            <variable attributes="__local__ private" citdl="Array" line="2413" name="effectInstances" />
            <variable attributes="__local__ private" citdl="effectInstances[k]" line="2413" name="h" />
            <variable attributes="__local__ private" citdl="Config.alreadySubscribed" line="2413" name="alreadySubscribed" />
            <variable attributes="__local__ private" citdl="effect.length" line="2413" name="nEffects" />
            <variable attributes="__local__ private" citdl="this.element.parentNode" line="2413" name="e" />
            <variable attributes="__local__ private" citdl="effect[i]" line="2413" name="eff" />
          </scope>
          <scope doc="Center event handler used for centering on scroll/resize, but only if&#xA;the Overlay is visible" ilk="function" line="2539" lineend="2543" name="doCenterOnDOMEvent" signature="doCenterOnDOMEvent()">
            <variable citdl="Overlay" name="this" />
          </scope>
          <scope doc="The default event handler fired when the &quot;fixedcenter&quot; property&#xA;is changed." ilk="function" line="2555" lineend="2583" name="configFixedCenter" signature="configFixedCenter(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="Config.alreadySubscribed" line="2560" name="alreadySubscribed" />
            <variable attributes="__local__ private" citdl="Overlay.windowScrollEvent" line="2560" name="windowScrollEvent" />
            <variable attributes="__local__ private" citdl="Overlay.windowResizeEvent" line="2560" name="windowResizeEvent" />
            <variable attributes="__local__ private" citdl="args[0]" line="2560" name="val" />
          </scope>
          <scope doc="The default event handler fired when the &quot;height&quot; property is changed." ilk="function" line="2594" lineend="2601" name="configHeight" signature="configHeight(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="this.element" line="2597" name="el" />
            <variable attributes="__local__ private" citdl="args[0]" line="2597" name="height" />
          </scope>
          <scope doc="The default event handler fired when the &quot;width&quot; property is changed." ilk="function" line="2612" lineend="2619" name="configWidth" signature="configWidth(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="2615" name="width" />
            <variable attributes="__local__ private" citdl="this.element" line="2615" name="el" />
          </scope>
          <scope doc="The default event handler fired when the &quot;zIndex&quot; property is changed." ilk="function" line="2630" lineend="2654" name="configzIndex" signature="configzIndex(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="2633" name="zIndex" />
            <variable attributes="__local__ private" citdl="this.element" line="2633" name="el" />
          </scope>
          <scope doc="The default event handler fired when the &quot;xy&quot; property is changed." ilk="function" line="2665" lineend="2682" name="configXY" signature="configXY(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="pos[1]" line="2669" name="y" />
            <variable attributes="__local__ private" citdl="pos[0]" line="2669" name="x" />
            <variable attributes="__local__ private" citdl="args[0]" line="2669" name="pos" />
          </scope>
          <scope doc="The default event handler fired when the &quot;x&quot; property is changed." ilk="function" line="2693" lineend="2712" name="configX" signature="configX(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2696" name="y" />
            <variable attributes="__local__ private" citdl="args[0]" line="2696" name="x" />
          </scope>
          <scope doc="The default event handler fired when the &quot;y&quot; property is changed." ilk="function" line="2723" lineend="2742" name="configY" signature="configY(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="2726" name="y" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2726" name="x" />
          </scope>
          <scope doc="Shows the iframe shim, if it has been enabled." ilk="function" line="2748" lineend="2761" name="showIframe" signature="showIframe()">
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="this.element.parentNode" line="2751" name="oParentNode" />
            <variable attributes="__local__ private" citdl="this.iframe" line="2751" name="oIFrame">
              <variable citdl="Object" line="2759" name="style">
                <variable citdl="String" line="2759" name="display" />
              </variable>
            </variable>
          </scope>
          <scope doc="Hides the iframe shim, if it has been enabled." ilk="function" line="2767" lineend="2771" name="hideIframe" signature="hideIframe()">
            <variable citdl="Overlay" name="this" />
          </scope>
          <variable citdl="String" line="2769" name="display" />
          <scope doc="Syncronizes the size and position of iframe shim to that of its&#xA;corresponding Overlay instance." ilk="function" line="2778" lineend="2800" name="syncIframe" signature="syncIframe()">
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="Overlay.IFRAME_OFFSET" line="2784" name="nOffset" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2784" name="aXY" />
            <variable attributes="__local__ private" citdl="this.iframe" line="2784" name="oIFrame">
              <variable citdl="Object" line="2788" name="style">
                <variable doc="Size &lt;iframe&gt;" line="2788" name="width" />
                <variable line="2789" name="height" />
              </variable>
            </variable>
            <variable attributes="__local__ private" citdl="this.element" line="2784" name="oElement" />
            <variable attributes="__local__ private" line="2784" name="nDimensionOffset" />
          </scope>
          <scope doc="Sets the zindex of the iframe shim, if it exists, based on the zindex of&#xA;the Overlay element. The zindex of the iframe is set to be one less&#xA;than the Overlay element&apos;s zindex.&#xA;&#xA;&lt;p&gt;NOTE: This method will not bump up the zindex of the Overlay element&#xA;to ensure that the iframe shim has a non-negative zindex.&#xA;If you require the iframe zindex to be 0 or higher, the zindex of&#xA;the Overlay element should be set to a value greater than 0, before&#xA;this method is called.&#xA;&lt;/p&gt;" ilk="function" line="2815" lineend="2822" name="stackIframe" signature="stackIframe()">
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="Dom.getStyle()" line="2817" name="overlayZ" />
          </scope>
          <scope doc="The default event handler fired when the &quot;iframe&quot; property is changed." ilk="function" line="2833" lineend="2939" name="configIframe" signature="configIframe(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="2835" name="bIFrame" />
            <scope attributes="__local__ private" ilk="class" line="2837" lineend="2909" name="createIFrame">
              <scope attributes="__local__ private __ctor__" ilk="function" line="2837" lineend="2909" name="createIFrame" signature="createIFrame()">
                <variable citdl="createIFrame" name="this" />
                <variable attributes="__local__ private" citdl="oElement.parentNode" line="2841" name="oParent" />
                <variable attributes="__local__ private" citdl="this.iframe" line="2841" name="oIFrame" />
                <variable attributes="__local__ private" citdl="this.element" line="2841" name="oElement" />
                <variable attributes="__local__ private" citdl="oParent" line="2881" name="parentNode" />
              </scope>
              <variable citdl="Object" line="2848" name="m_oIFrameTemplate" />
              <variable citdl="oIFrame" line="2884" name="iframe" />
              <variable citdl="Boolean" line="2907" name="_hasIframeEventListeners" />
            </scope>
            <scope attributes="__local__ private" ilk="class" line="2911" lineend="2915" name="onBeforeShow">
              <scope attributes="__local__ private __ctor__" ilk="function" line="2911" lineend="2915" name="onBeforeShow" signature="onBeforeShow()">
                <variable citdl="onBeforeShow" name="this" />
              </scope>
              <variable citdl="Boolean" line="2914" name="_iframeDeferred" />
            </scope>
          </scope>
          <variable citdl="Boolean" line="2924" name="_iframeDeferred" />
          <variable citdl="Boolean" line="2936" name="_hasIframeEventListeners" />
          <scope doc="Set&apos;s the container&apos;s XY value from DOM if not already set.&#xA;&#xA;Differs from syncPosition, in that the XY value is only sync&apos;d with DOM if&#xA;not already set. The method also refire&apos;s the XY config property event, so any&#xA;beforeMove, Move event listeners are invoked." ilk="function" line="2951" lineend="2959" name="_primeXYFromDOM" signature="_primeXYFromDOM()">
            <variable citdl="Overlay" name="this" />
          </scope>
          <scope doc="The default event handler fired when the &quot;constraintoviewport&quot;&#xA;property is changed." ilk="function" line="2972" lineend="2986" name="configConstrainToViewport" signature="configConstrainToViewport(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for&#xA;the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="2973" name="val" />
          </scope>
          <scope doc="The default event handler fired when the &quot;context&quot; property&#xA;is changed." ilk="function" line="2998" lineend="3023" name="configContext" signature="configContext(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="3003" name="contextArgs" />
            <variable attributes="__local__ private" citdl="contextArgs[1]" line="3003" name="elementMagnetCorner" />
            <variable attributes="__local__ private" citdl="contextArgs[2]" line="3003" name="contextMagnetCorner" />
            <variable attributes="__local__ private" citdl="contextArgs[0]" line="3003" name="contextEl" />
          </scope>
          <scope doc="Aligns the Overlay to its context element using the specified corner&#xA;points (represented by the constants TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT,&#xA;and BOTTOM_RIGHT." ilk="function" line="3036" lineend="3108" name="align" signature="align(elementAlign, contextAlign)">
            <variable citdl="String" doc="The String representing the corner of&#xA;the Overlay that should be aligned to the context element" ilk="argument" name="elementAlign" />
            <variable citdl="String" doc="The corner of the context element&#xA;that the elementAlign corner should stick to." ilk="argument" name="contextAlign" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="this" line="3042" name="me" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="3042" name="contextArgs" />
            <variable attributes="__local__ private" citdl="Dom.getRegion()" line="3042" name="contextRegion" />
            <variable attributes="__local__ private" citdl="contextArgs[0]" line="3042" name="context" />
            <variable attributes="__local__ private" citdl="this.element" line="3042" name="element" />
            <scope attributes="__local__ private" ilk="function" line="3044" lineend="3065" name="doAlign" signature="doAlign(v, h)">
              <variable ilk="argument" name="v" />
              <variable ilk="argument" name="h" />
            </scope>
          </scope>
          <scope doc="The default event handler executed when the moveEvent is fired, if the&#xA;&quot;constraintoviewport&quot; is set to true." ilk="function" line="3120" lineend="3126" name="enforceConstraints" signature="enforceConstraints(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="3121" name="pos" />
            <variable attributes="__local__ private" citdl="this.getConstrainedXY()" line="3122" name="cXY" />
          </scope>
          <scope doc="Given x, y coordinate values, returns the calculated coordinates required to&#xA;position the Overlay if it is to be constrained to the viewport, based on the&#xA;current element size, viewport dimensions and scroll values." ilk="function" line="3137" lineend="3179" name="getConstrainedXY" returns="Array" signature="getConstrainedXY(x, y)">
            <variable citdl="Number" doc="The X coordinate value to be constrained" ilk="argument" name="x" />
            <variable citdl="Number" doc="The Y coordinate value to be constrained" ilk="argument" name="y" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="Overlay.VIEWPORT_OFFSET" line="3145" name="nViewportOffset" />
            <variable attributes="__local__ private" citdl="Dom.getDocumentScrollLeft()" line="3145" name="scrollX" />
            <variable attributes="__local__ private" citdl="Dom.getDocumentScrollTop()" line="3145" name="scrollY" />
            <variable attributes="__local__ private" citdl="Dom.getViewportHeight()" line="3145" name="viewPortHeight" />
            <variable attributes="__local__ private" citdl="Dom.getViewportWidth()" line="3145" name="viewPortWidth" />
            <variable attributes="__local__ private" citdl="this.element.offsetHeight" line="3145" name="offsetHeight" />
            <variable attributes="__local__ private" citdl="this.element.offsetWidth" line="3145" name="offsetWidth" />
            <variable attributes="__local__ private" citdl="x" line="3147" name="xNew" />
            <variable attributes="__local__ private" citdl="y" line="3148" name="yNew" />
            <variable attributes="__local__ private" citdl="scrollX" line="3152" name="leftConstraint" />
            <variable attributes="__local__ private" citdl="scrollX" line="3153" name="rightConstraint" />
            <variable attributes="__local__ private" citdl="scrollY" line="3166" name="topConstraint" />
            <variable attributes="__local__ private" citdl="scrollY" line="3167" name="bottomConstraint" />
          </scope>
          <scope doc="Centers the container in the viewport." ilk="function" line="3185" lineend="3209" name="center" signature="center()">
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="this.element.offsetWidth" line="3193" name="elementWidth" />
            <variable attributes="__local__ private" citdl="Overlay.VIEWPORT_OFFSET" line="3193" name="nViewportOffset" />
            <variable attributes="__local__ private" citdl="this.element.offsetHeight" line="3193" name="elementHeight" />
            <variable attributes="__local__ private" citdl="Dom.getViewportHeight()" line="3193" name="viewPortHeight" />
            <variable attributes="__local__ private" citdl="Dom.getViewportWidth()" line="3193" name="viewPortWidth" />
            <variable attributes="__local__ private" citdl="nViewportOffset" line="3193" name="y" />
            <variable attributes="__local__ private" citdl="nViewportOffset" line="3193" name="x" />
          </scope>
          <scope doc="Synchronizes the Panel&apos;s &quot;xy&quot;, &quot;x&quot;, and &quot;y&quot; properties with the&#xA;Panel&apos;s position in the DOM. This is primarily used to update&#xA;position information during drag &amp; drop." ilk="function" line="3217" lineend="3225" name="syncPosition" signature="syncPosition()">
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="Dom.getXY()" line="3219" name="pos" />
          </scope>
          <scope doc="Event handler fired when the resize monitor element is resized." ilk="function" line="3233" lineend="3245" name="onDomResize" signature="onDomResize(e, obj)">
            <variable citdl="DOMEvent" doc="The resize DOM event" ilk="argument" name="e" />
            <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="this" line="3235" name="me" />
          </scope>
          <scope doc="Places the Overlay on top of all other instances of&#xA;YAHOO.widget.Overlay." ilk="function" line="3252" lineend="3315" name="bringToTop" signature="bringToTop()">
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="Array" line="3255" name="aOverlays" />
            <variable attributes="__local__ private" citdl="this.element" line="3255" name="oElement" />
            <scope attributes="__local__ private" ilk="function" line="3257" lineend="3272" name="compareZIndexDesc" returns="Number" signature="compareZIndexDesc(p_oOverlay1, p_oOverlay2)">
              <variable ilk="argument" name="p_oOverlay1" />
              <variable ilk="argument" name="p_oOverlay2" />
              <variable attributes="__local__ private" line="3263" name="nZIndex2" />
              <variable attributes="__local__ private" citdl="Dom.getStyle()" line="3263" name="sZIndex2" />
              <variable attributes="__local__ private" citdl="Dom.getStyle()" line="3263" name="sZIndex1" />
              <variable attributes="__local__ private" line="3263" name="nZIndex1" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="3274" lineend="3286" name="isOverlayElement" signature="isOverlayElement(p_oElement)">
              <variable ilk="argument" name="p_oElement" />
              <variable attributes="__local__ private" citdl="Dom.hasClass()" line="3277" name="oOverlay" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Panel" line="3277" name="Panel" />
            </scope>
            <variable attributes="__local__ private" citdl="aOverlays[0]" line="3293" name="oTopOverlay" />
            <variable attributes="__local__ private" citdl="Dom.getStyle()" line="3293" name="nTopZIndex" />
            <variable attributes="__local__ private" citdl="Boolean" line="3299" name="bRequiresBump" />
            <variable attributes="__local__ private" citdl="Dom.getStyle()" line="3304" name="nNextZIndex" />
          </scope>
          <scope doc="Removes the Overlay element from the DOM and sets all child&#xA;elements to null." ilk="function" line="3322" lineend="3337" name="destroy" signature="destroy()">
            <variable citdl="Overlay" name="this" />
          </scope>
          <variable line="3328" name="iframe" />
          <scope doc="Returns a String representation of the object." ilk="function" line="3344" lineend="3346" name="toString" returns="String" signature="toString()">
            <variable citdl="Overlay" name="this" />
          </scope>
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Overlay&apos;s events" line="1866" name="Module" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Overlay&apos;s events" line="1866" lineend="1869" name="EVENT_TYPES">
          <variable citdl="String" line="1867" name="BEFORE_MOVE" />
          <variable citdl="String" line="1868" name="MOVE" />
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Overlay&apos;s events" line="1866" name="CustomEvent" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Overlay&apos;s events" line="1866" name="Config" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Overlay&apos;s events" line="1866" name="Event" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the Overlay&apos;s configuration properties" line="1878" lineend="1943" name="DEFAULT_CONFIG">
          <variable citdl="Object" line="1880" lineend="1885" name="X">
            <variable citdl="String" line="1881" name="key" />
            <variable citdl="Lang.isNumber" line="1882" name="validator" />
            <variable citdl="Boolean" line="1883" name="suppressEvent" />
            <variable citdl="Array" line="1884" name="supercedes" />
          </variable>
          <variable citdl="Object" line="1887" lineend="1892" name="Y">
            <variable citdl="String" line="1888" name="key" />
            <variable citdl="Lang.isNumber" line="1889" name="validator" />
            <variable citdl="Boolean" line="1890" name="suppressEvent" />
            <variable citdl="Array" line="1891" name="supercedes" />
          </variable>
          <variable citdl="Object" line="1894" lineend="1898" name="XY">
            <variable citdl="String" line="1895" name="key" />
            <variable citdl="Boolean" line="1896" name="suppressEvent" />
            <variable citdl="Array" line="1897" name="supercedes" />
          </variable>
          <variable citdl="Object" line="1900" lineend="1904" name="CONTEXT">
            <variable citdl="String" line="1901" name="key" />
            <variable citdl="Boolean" line="1902" name="suppressEvent" />
            <variable citdl="Array" line="1903" name="supercedes" />
          </variable>
          <variable citdl="Object" line="1906" lineend="1911" name="FIXED_CENTER">
            <variable citdl="String" line="1907" name="key" />
            <variable citdl="Boolean" line="1908" name="value" />
            <variable citdl="Lang.isBoolean" line="1909" name="validator" />
            <variable citdl="Array" line="1910" name="supercedes" />
          </variable>
          <variable citdl="Object" line="1913" lineend="1917" name="WIDTH">
            <variable citdl="String" line="1914" name="key" />
            <variable citdl="Boolean" line="1915" name="suppressEvent" />
            <variable citdl="Array" line="1916" name="supercedes" />
          </variable>
          <variable citdl="Object" line="1919" lineend="1923" name="HEIGHT">
            <variable citdl="String" line="1920" name="key" />
            <variable citdl="Boolean" line="1921" name="suppressEvent" />
            <variable citdl="Array" line="1922" name="supercedes" />
          </variable>
          <variable citdl="Object" line="1925" lineend="1928" name="ZINDEX">
            <variable citdl="String" line="1926" name="key" />
            <variable line="1927" name="value" />
          </variable>
          <variable citdl="Object" line="1930" lineend="1935" name="CONSTRAIN_TO_VIEWPORT">
            <variable citdl="String" line="1931" name="key" />
            <variable citdl="Boolean" line="1932" name="value" />
            <variable citdl="Lang.isBoolean" line="1933" name="validator" />
            <variable citdl="Array" line="1934" name="supercedes" />
          </variable>
          <variable citdl="Object" line="1937" lineend="1942" name="IFRAME">
            <variable citdl="String" line="1938" name="key" />
            <variable line="1939" name="value" />
            <variable citdl="Lang.isBoolean" line="1940" name="validator" />
            <variable citdl="Array" line="1941" name="supercedes" />
          </variable>
        </variable>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="1826" lineend="3349" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Overlay&apos;s events" line="1866" name="Lang" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Overlay&apos;s events" line="1866" name="Dom" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Overlay&apos;s events" line="1866" name="m_oIFrameTemplate" />
        <variable attributes="__local__ private constant" citdl="Object" classrefs="Module" doc="PRIVATE CONSTANT: Constant representing the name of the Overlay&apos;s events" line="1866" lineend="3349" name="Overlay">
          <scope attributes="__static__" doc="STATIC: The DOM event handler used to fire the CustomEvent for window scroll" ilk="function" line="2045" lineend="2062" name="windowScrollHandler" signature="windowScrollHandler(e)">
            <variable citdl="DOMEvent" doc="The DOM scroll event" ilk="argument" name="e" />
            <variable citdl="Overlay" name="this" />
            <variable citdl="Object" line="2050" name="window">
              <variable citdl="Number" line="2050" name="scrollEnd" />
            </variable>
          </scope>
          <scope attributes="__static__" doc="STATIC: The DOM event handler used to fire the CustomEvent for window resize" ilk="function" line="2070" lineend="2085" name="windowResizeHandler" signature="windowResizeHandler(e)">
            <variable citdl="DOMEvent" doc="The DOM resize event" ilk="argument" name="e" />
            <variable citdl="Overlay" name="this" />
            <variable citdl="Object" line="2074" name="window">
              <variable citdl="Number" line="2074" name="resizeEnd" />
            </variable>
          </scope>
          <scope doc="The Overlay initialization method, which is executed for Overlay and&#xA;all of its subclasses. This method is automatically called by the&#xA;constructor, and  sets up all DOM references for pre-existing markup,&#xA;and creates required markup if it is not already present." ilk="function" line="2117" lineend="2154" name="init" signature="init(el, userConfig)">
            <variable citdl="HTMLElement" doc="The element representing the Overlay" ilk="argument" name="el" />
            <variable citdl="Object" doc="The configuration object literal&#xA;containing the configuration that should be set for this Overlay.&#xA;See configuration documentation for more details." ilk="argument" name="userConfig" />
            <variable citdl="Overlay" name="this" />
          </scope>
          <scope doc="Initializes the custom events for Overlay which are fired&#xA;automatically at appropriate times by the Overlay class." ilk="function" line="2161" lineend="2185" name="initEvents" signature="initEvents()">
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="CustomEvent.LIST" line="2165" name="SIGNATURE" />
          </scope>
          <variable citdl="this.createEvent()" doc="CustomEvent fired before the Overlay is moved." line="2173" name="beforeMoveEvent" />
          <variable citdl="SIGNATURE" line="2174" name="signature" />
          <variable citdl="this.createEvent()" doc="CustomEvent fired after the Overlay is moved." line="2182" name="moveEvent" />
          <scope doc="Initializes the class&apos;s configurable properties which can be changed&#xA;using the Overlay&apos;s Config object (cfg)." ilk="function" line="2192" lineend="2352" name="initDefaultConfig" signature="initDefaultConfig()">
            <variable citdl="Overlay" name="this" />
          </scope>
          <scope doc="Moves the Overlay to the specified position. This function is&#xA;identical to calling this.cfg.setProperty(&quot;xy&quot;, [x,y]);" ilk="function" line="2361" lineend="2363" name="moveTo" signature="moveTo(x, y)">
            <variable citdl="Number" doc="The Overlay&apos;s new x position" ilk="argument" name="x" />
            <variable citdl="Number" doc="The Overlay&apos;s new y position" ilk="argument" name="y" />
            <variable citdl="Overlay" name="this" />
          </scope>
          <scope doc="Adds a CSS class (&quot;hide-scrollbars&quot;) and removes a CSS class&#xA;(&quot;show-scrollbars&quot;) to the Overlay to fix a bug in Gecko on Mac OS X&#xA;(https://bugzilla.mozilla.org/show_bug.cgi?id=187435)" ilk="function" line="2371" lineend="2376" name="hideMacGeckoScrollbars" signature="hideMacGeckoScrollbars()">
            <variable citdl="Overlay" name="this" />
          </scope>
          <scope doc="Adds a CSS class (&quot;show-scrollbars&quot;) and removes a CSS class&#xA;(&quot;hide-scrollbars&quot;) to the Overlay to fix a bug in Gecko on Mac OS X&#xA;(https://bugzilla.mozilla.org/show_bug.cgi?id=187435)" ilk="function" line="2384" lineend="2389" name="showMacGeckoScrollbars" signature="showMacGeckoScrollbars()">
            <variable citdl="Overlay" name="this" />
          </scope>
          <scope doc="The default event handler fired when the &quot;visible&quot; property is&#xA;changed.  This method is responsible for firing showEvent&#xA;and hideEvent." ilk="function" line="2403" lineend="2532" name="configVisible" signature="configVisible(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" line="2413" name="isMacGecko" />
            <variable attributes="__local__ private" citdl="effectInstances[j]" line="2413" name="ei" />
            <variable attributes="__local__ private" citdl="effectInstances.length" line="2413" name="nEffectInstances" />
            <variable attributes="__local__ private" line="2413" name="i" />
            <variable attributes="__local__ private" citdl="Dom.getStyle()" line="2413" name="currentVis" />
            <variable attributes="__local__ private" line="2413" name="k" />
            <variable attributes="__local__ private" line="2413" name="j" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2413" name="effect" />
            <variable attributes="__local__ private" citdl="args[0]" line="2413" name="visible" />
            <variable attributes="__local__ private" citdl="Array" line="2413" name="effectInstances" />
            <variable attributes="__local__ private" citdl="effectInstances[k]" line="2413" name="h" />
            <variable attributes="__local__ private" citdl="Config.alreadySubscribed" line="2413" name="alreadySubscribed" />
            <variable attributes="__local__ private" citdl="effect.length" line="2413" name="nEffects" />
            <variable attributes="__local__ private" citdl="this.element.parentNode" line="2413" name="e" />
            <variable attributes="__local__ private" citdl="effect[i]" line="2413" name="eff" />
          </scope>
          <scope doc="Center event handler used for centering on scroll/resize, but only if&#xA;the Overlay is visible" ilk="function" line="2539" lineend="2543" name="doCenterOnDOMEvent" signature="doCenterOnDOMEvent()">
            <variable citdl="Overlay" name="this" />
          </scope>
          <scope doc="The default event handler fired when the &quot;fixedcenter&quot; property&#xA;is changed." ilk="function" line="2555" lineend="2583" name="configFixedCenter" signature="configFixedCenter(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="Config.alreadySubscribed" line="2560" name="alreadySubscribed" />
            <variable attributes="__local__ private" citdl="Overlay.windowScrollEvent" line="2560" name="windowScrollEvent" />
            <variable attributes="__local__ private" citdl="Overlay.windowResizeEvent" line="2560" name="windowResizeEvent" />
            <variable attributes="__local__ private" citdl="args[0]" line="2560" name="val" />
          </scope>
          <scope doc="The default event handler fired when the &quot;height&quot; property is changed." ilk="function" line="2594" lineend="2601" name="configHeight" signature="configHeight(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="this.element" line="2597" name="el" />
            <variable attributes="__local__ private" citdl="args[0]" line="2597" name="height" />
          </scope>
          <scope doc="The default event handler fired when the &quot;width&quot; property is changed." ilk="function" line="2612" lineend="2619" name="configWidth" signature="configWidth(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="2615" name="width" />
            <variable attributes="__local__ private" citdl="this.element" line="2615" name="el" />
          </scope>
          <scope doc="The default event handler fired when the &quot;zIndex&quot; property is changed." ilk="function" line="2630" lineend="2654" name="configzIndex" signature="configzIndex(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="2633" name="zIndex" />
            <variable attributes="__local__ private" citdl="this.element" line="2633" name="el" />
          </scope>
          <scope doc="The default event handler fired when the &quot;xy&quot; property is changed." ilk="function" line="2665" lineend="2682" name="configXY" signature="configXY(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="pos[1]" line="2669" name="y" />
            <variable attributes="__local__ private" citdl="pos[0]" line="2669" name="x" />
            <variable attributes="__local__ private" citdl="args[0]" line="2669" name="pos" />
          </scope>
          <scope doc="The default event handler fired when the &quot;x&quot; property is changed." ilk="function" line="2693" lineend="2712" name="configX" signature="configX(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2696" name="y" />
            <variable attributes="__local__ private" citdl="args[0]" line="2696" name="x" />
          </scope>
          <scope doc="The default event handler fired when the &quot;y&quot; property is changed." ilk="function" line="2723" lineend="2742" name="configY" signature="configY(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="2726" name="y" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2726" name="x" />
          </scope>
          <scope doc="Shows the iframe shim, if it has been enabled." ilk="function" line="2748" lineend="2761" name="showIframe" signature="showIframe()">
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="this.element.parentNode" line="2751" name="oParentNode" />
            <variable attributes="__local__ private" citdl="this.iframe" line="2751" name="oIFrame">
              <variable citdl="Object" line="2759" name="style">
                <variable citdl="String" line="2759" name="display" />
              </variable>
            </variable>
          </scope>
          <scope doc="Hides the iframe shim, if it has been enabled." ilk="function" line="2767" lineend="2771" name="hideIframe" signature="hideIframe()">
            <variable citdl="Overlay" name="this" />
          </scope>
          <variable citdl="String" line="2769" name="display" />
          <scope doc="Syncronizes the size and position of iframe shim to that of its&#xA;corresponding Overlay instance." ilk="function" line="2778" lineend="2800" name="syncIframe" signature="syncIframe()">
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="Overlay.IFRAME_OFFSET" line="2784" name="nOffset" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="2784" name="aXY" />
            <variable attributes="__local__ private" citdl="this.iframe" line="2784" name="oIFrame">
              <variable citdl="Object" line="2788" name="style">
                <variable doc="Size &lt;iframe&gt;" line="2788" name="width" />
                <variable line="2789" name="height" />
              </variable>
            </variable>
            <variable attributes="__local__ private" citdl="this.element" line="2784" name="oElement" />
            <variable attributes="__local__ private" line="2784" name="nDimensionOffset" />
          </scope>
          <scope doc="Sets the zindex of the iframe shim, if it exists, based on the zindex of&#xA;the Overlay element. The zindex of the iframe is set to be one less&#xA;than the Overlay element&apos;s zindex.&#xA;&#xA;&lt;p&gt;NOTE: This method will not bump up the zindex of the Overlay element&#xA;to ensure that the iframe shim has a non-negative zindex.&#xA;If you require the iframe zindex to be 0 or higher, the zindex of&#xA;the Overlay element should be set to a value greater than 0, before&#xA;this method is called.&#xA;&lt;/p&gt;" ilk="function" line="2815" lineend="2822" name="stackIframe" signature="stackIframe()">
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="Dom.getStyle()" line="2817" name="overlayZ" />
          </scope>
          <scope doc="The default event handler fired when the &quot;iframe&quot; property is changed." ilk="function" line="2833" lineend="2939" name="configIframe" signature="configIframe(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="2835" name="bIFrame" />
            <scope attributes="__local__ private" ilk="class" line="2837" lineend="2909" name="createIFrame">
              <scope attributes="__local__ private __ctor__" ilk="function" line="2837" lineend="2909" name="createIFrame" signature="createIFrame()">
                <variable citdl="createIFrame" name="this" />
                <variable attributes="__local__ private" citdl="oElement.parentNode" line="2841" name="oParent" />
                <variable attributes="__local__ private" citdl="this.iframe" line="2841" name="oIFrame" />
                <variable attributes="__local__ private" citdl="this.element" line="2841" name="oElement" />
                <variable attributes="__local__ private" citdl="oParent" line="2881" name="parentNode" />
              </scope>
              <variable citdl="Object" line="2848" name="m_oIFrameTemplate" />
              <variable citdl="oIFrame" line="2884" name="iframe" />
              <variable citdl="Boolean" line="2907" name="_hasIframeEventListeners" />
            </scope>
            <scope attributes="__local__ private" ilk="class" line="2911" lineend="2915" name="onBeforeShow">
              <scope attributes="__local__ private __ctor__" ilk="function" line="2911" lineend="2915" name="onBeforeShow" signature="onBeforeShow()">
                <variable citdl="onBeforeShow" name="this" />
              </scope>
              <variable citdl="Boolean" line="2914" name="_iframeDeferred" />
            </scope>
          </scope>
          <variable citdl="Boolean" line="2924" name="_iframeDeferred" />
          <variable citdl="Boolean" line="2936" name="_hasIframeEventListeners" />
          <scope doc="Set&apos;s the container&apos;s XY value from DOM if not already set.&#xA;&#xA;Differs from syncPosition, in that the XY value is only sync&apos;d with DOM if&#xA;not already set. The method also refire&apos;s the XY config property event, so any&#xA;beforeMove, Move event listeners are invoked." ilk="function" line="2951" lineend="2959" name="_primeXYFromDOM" signature="_primeXYFromDOM()">
            <variable citdl="Overlay" name="this" />
          </scope>
          <scope doc="The default event handler fired when the &quot;constraintoviewport&quot;&#xA;property is changed." ilk="function" line="2972" lineend="2986" name="configConstrainToViewport" signature="configConstrainToViewport(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for&#xA;the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="2973" name="val" />
          </scope>
          <scope doc="The default event handler fired when the &quot;context&quot; property&#xA;is changed." ilk="function" line="2998" lineend="3023" name="configContext" signature="configContext(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="3003" name="contextArgs" />
            <variable attributes="__local__ private" citdl="contextArgs[1]" line="3003" name="elementMagnetCorner" />
            <variable attributes="__local__ private" citdl="contextArgs[2]" line="3003" name="contextMagnetCorner" />
            <variable attributes="__local__ private" citdl="contextArgs[0]" line="3003" name="contextEl" />
          </scope>
          <scope doc="Aligns the Overlay to its context element using the specified corner&#xA;points (represented by the constants TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT,&#xA;and BOTTOM_RIGHT." ilk="function" line="3036" lineend="3108" name="align" signature="align(elementAlign, contextAlign)">
            <variable citdl="String" doc="The String representing the corner of&#xA;the Overlay that should be aligned to the context element" ilk="argument" name="elementAlign" />
            <variable citdl="String" doc="The corner of the context element&#xA;that the elementAlign corner should stick to." ilk="argument" name="contextAlign" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="this" line="3042" name="me" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="3042" name="contextArgs" />
            <variable attributes="__local__ private" citdl="Dom.getRegion()" line="3042" name="contextRegion" />
            <variable attributes="__local__ private" citdl="contextArgs[0]" line="3042" name="context" />
            <variable attributes="__local__ private" citdl="this.element" line="3042" name="element" />
            <scope attributes="__local__ private" ilk="function" line="3044" lineend="3065" name="doAlign" signature="doAlign(v, h)">
              <variable ilk="argument" name="v" />
              <variable ilk="argument" name="h" />
            </scope>
          </scope>
          <scope doc="The default event handler executed when the moveEvent is fired, if the&#xA;&quot;constraintoviewport&quot; is set to true." ilk="function" line="3120" lineend="3126" name="enforceConstraints" signature="enforceConstraints(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="3121" name="pos" />
            <variable attributes="__local__ private" citdl="this.getConstrainedXY()" line="3122" name="cXY" />
          </scope>
          <scope doc="Given x, y coordinate values, returns the calculated coordinates required to&#xA;position the Overlay if it is to be constrained to the viewport, based on the&#xA;current element size, viewport dimensions and scroll values." ilk="function" line="3137" lineend="3179" name="getConstrainedXY" returns="Array" signature="getConstrainedXY(x, y)">
            <variable citdl="Number" doc="The X coordinate value to be constrained" ilk="argument" name="x" />
            <variable citdl="Number" doc="The Y coordinate value to be constrained" ilk="argument" name="y" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="Overlay.VIEWPORT_OFFSET" line="3145" name="nViewportOffset" />
            <variable attributes="__local__ private" citdl="Dom.getDocumentScrollLeft()" line="3145" name="scrollX" />
            <variable attributes="__local__ private" citdl="Dom.getDocumentScrollTop()" line="3145" name="scrollY" />
            <variable attributes="__local__ private" citdl="Dom.getViewportHeight()" line="3145" name="viewPortHeight" />
            <variable attributes="__local__ private" citdl="Dom.getViewportWidth()" line="3145" name="viewPortWidth" />
            <variable attributes="__local__ private" citdl="this.element.offsetHeight" line="3145" name="offsetHeight" />
            <variable attributes="__local__ private" citdl="this.element.offsetWidth" line="3145" name="offsetWidth" />
            <variable attributes="__local__ private" citdl="x" line="3147" name="xNew" />
            <variable attributes="__local__ private" citdl="y" line="3148" name="yNew" />
            <variable attributes="__local__ private" citdl="scrollX" line="3152" name="leftConstraint" />
            <variable attributes="__local__ private" citdl="scrollX" line="3153" name="rightConstraint" />
            <variable attributes="__local__ private" citdl="scrollY" line="3166" name="topConstraint" />
            <variable attributes="__local__ private" citdl="scrollY" line="3167" name="bottomConstraint" />
          </scope>
          <scope doc="Centers the container in the viewport." ilk="function" line="3185" lineend="3209" name="center" signature="center()">
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="this.element.offsetWidth" line="3193" name="elementWidth" />
            <variable attributes="__local__ private" citdl="Overlay.VIEWPORT_OFFSET" line="3193" name="nViewportOffset" />
            <variable attributes="__local__ private" citdl="this.element.offsetHeight" line="3193" name="elementHeight" />
            <variable attributes="__local__ private" citdl="Dom.getViewportHeight()" line="3193" name="viewPortHeight" />
            <variable attributes="__local__ private" citdl="Dom.getViewportWidth()" line="3193" name="viewPortWidth" />
            <variable attributes="__local__ private" citdl="nViewportOffset" line="3193" name="y" />
            <variable attributes="__local__ private" citdl="nViewportOffset" line="3193" name="x" />
          </scope>
          <scope doc="Synchronizes the Panel&apos;s &quot;xy&quot;, &quot;x&quot;, and &quot;y&quot; properties with the&#xA;Panel&apos;s position in the DOM. This is primarily used to update&#xA;position information during drag &amp; drop." ilk="function" line="3217" lineend="3225" name="syncPosition" signature="syncPosition()">
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="Dom.getXY()" line="3219" name="pos" />
          </scope>
          <scope doc="Event handler fired when the resize monitor element is resized." ilk="function" line="3233" lineend="3245" name="onDomResize" signature="onDomResize(e, obj)">
            <variable citdl="DOMEvent" doc="The resize DOM event" ilk="argument" name="e" />
            <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="this" line="3235" name="me" />
          </scope>
          <scope doc="Places the Overlay on top of all other instances of&#xA;YAHOO.widget.Overlay." ilk="function" line="3252" lineend="3315" name="bringToTop" signature="bringToTop()">
            <variable citdl="Overlay" name="this" />
            <variable attributes="__local__ private" citdl="Array" line="3255" name="aOverlays" />
            <variable attributes="__local__ private" citdl="this.element" line="3255" name="oElement" />
            <scope attributes="__local__ private" ilk="function" line="3257" lineend="3272" name="compareZIndexDesc" returns="Number" signature="compareZIndexDesc(p_oOverlay1, p_oOverlay2)">
              <variable ilk="argument" name="p_oOverlay1" />
              <variable ilk="argument" name="p_oOverlay2" />
              <variable attributes="__local__ private" line="3263" name="nZIndex2" />
              <variable attributes="__local__ private" citdl="Dom.getStyle()" line="3263" name="sZIndex2" />
              <variable attributes="__local__ private" citdl="Dom.getStyle()" line="3263" name="sZIndex1" />
              <variable attributes="__local__ private" line="3263" name="nZIndex1" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="3274" lineend="3286" name="isOverlayElement" signature="isOverlayElement(p_oElement)">
              <variable ilk="argument" name="p_oElement" />
              <variable attributes="__local__ private" citdl="Dom.hasClass()" line="3277" name="oOverlay" />
              <variable attributes="__local__ private" citdl="YAHOO.widget.Panel" line="3277" name="Panel" />
            </scope>
            <variable attributes="__local__ private" citdl="aOverlays[0]" line="3293" name="oTopOverlay" />
            <variable attributes="__local__ private" citdl="Dom.getStyle()" line="3293" name="nTopZIndex" />
            <variable attributes="__local__ private" citdl="Boolean" line="3299" name="bRequiresBump" />
            <variable attributes="__local__ private" citdl="Dom.getStyle()" line="3304" name="nNextZIndex" />
          </scope>
          <scope doc="Removes the Overlay element from the DOM and sets all child&#xA;elements to null." ilk="function" line="3322" lineend="3337" name="destroy" signature="destroy()">
            <variable citdl="Overlay" name="this" />
          </scope>
          <variable line="3328" name="iframe" />
          <scope doc="Returns a String representation of the object." ilk="function" line="3344" lineend="3346" name="toString" returns="String" signature="toString()">
            <variable citdl="Overlay" name="this" />
          </scope>
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Overlay&apos;s events" line="1866" name="Module" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Overlay&apos;s events" line="1866" lineend="1869" name="EVENT_TYPES">
          <variable citdl="String" line="1867" name="BEFORE_MOVE" />
          <variable citdl="String" line="1868" name="MOVE" />
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Overlay&apos;s events" line="1866" name="CustomEvent" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Overlay&apos;s events" line="1866" name="Config" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Overlay&apos;s events" line="1866" name="Event" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the Overlay&apos;s configuration properties" line="1878" lineend="1943" name="DEFAULT_CONFIG">
          <variable citdl="Object" line="1880" lineend="1885" name="X">
            <variable citdl="String" line="1881" name="key" />
            <variable citdl="Lang.isNumber" line="1882" name="validator" />
            <variable citdl="Boolean" line="1883" name="suppressEvent" />
            <variable citdl="Array" line="1884" name="supercedes" />
          </variable>
          <variable citdl="Object" line="1887" lineend="1892" name="Y">
            <variable citdl="String" line="1888" name="key" />
            <variable citdl="Lang.isNumber" line="1889" name="validator" />
            <variable citdl="Boolean" line="1890" name="suppressEvent" />
            <variable citdl="Array" line="1891" name="supercedes" />
          </variable>
          <variable citdl="Object" line="1894" lineend="1898" name="XY">
            <variable citdl="String" line="1895" name="key" />
            <variable citdl="Boolean" line="1896" name="suppressEvent" />
            <variable citdl="Array" line="1897" name="supercedes" />
          </variable>
          <variable citdl="Object" line="1900" lineend="1904" name="CONTEXT">
            <variable citdl="String" line="1901" name="key" />
            <variable citdl="Boolean" line="1902" name="suppressEvent" />
            <variable citdl="Array" line="1903" name="supercedes" />
          </variable>
          <variable citdl="Object" line="1906" lineend="1911" name="FIXED_CENTER">
            <variable citdl="String" line="1907" name="key" />
            <variable citdl="Boolean" line="1908" name="value" />
            <variable citdl="Lang.isBoolean" line="1909" name="validator" />
            <variable citdl="Array" line="1910" name="supercedes" />
          </variable>
          <variable citdl="Object" line="1913" lineend="1917" name="WIDTH">
            <variable citdl="String" line="1914" name="key" />
            <variable citdl="Boolean" line="1915" name="suppressEvent" />
            <variable citdl="Array" line="1916" name="supercedes" />
          </variable>
          <variable citdl="Object" line="1919" lineend="1923" name="HEIGHT">
            <variable citdl="String" line="1920" name="key" />
            <variable citdl="Boolean" line="1921" name="suppressEvent" />
            <variable citdl="Array" line="1922" name="supercedes" />
          </variable>
          <variable citdl="Object" line="1925" lineend="1928" name="ZINDEX">
            <variable citdl="String" line="1926" name="key" />
            <variable line="1927" name="value" />
          </variable>
          <variable citdl="Object" line="1930" lineend="1935" name="CONSTRAIN_TO_VIEWPORT">
            <variable citdl="String" line="1931" name="key" />
            <variable citdl="Boolean" line="1932" name="value" />
            <variable citdl="Lang.isBoolean" line="1933" name="validator" />
            <variable citdl="Array" line="1934" name="supercedes" />
          </variable>
          <variable citdl="Object" line="1937" lineend="1942" name="IFRAME">
            <variable citdl="String" line="1938" name="key" />
            <variable line="1939" name="value" />
            <variable citdl="Lang.isBoolean" line="1940" name="validator" />
            <variable citdl="Array" line="1941" name="supercedes" />
          </variable>
        </variable>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="1871" lineend="1937" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="1872" name="EU" />
        <variable attributes="__local__ private" citdl="document.createElement()" line="1896" name="n" />
      </scope>
      <variable citdl="this" line="2013" name="m_oFocusedButton" />
      <scope attributes="__local__ private" doc="&lt;p&gt;The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor&apos;s toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.&lt;/p&gt;" ilk="function" line="2107" lineend="6316" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.lang" line="2111" name="Lang" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="2111" name="Event" />
        <variable attributes="__local__ private" citdl="YAHOO.widget.Toolbar" line="2111" name="Toolbar" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="2111" name="Dom" />
        <scope attributes="__local__ private" doc="PRIVATE: Makes a useable classname from dynamic data, by dropping it to lowercase and replacing spaces with -&apos;s." ilk="function" line="2184" lineend="2186" name="_cleanClassName" returns="String" signature="_cleanClassName(str)">
          <variable citdl="String" doc="The classname to clean up" ilk="argument" name="str" />
        </scope>
      </scope>
      <scope attributes="__local__ private" doc="&lt;p&gt;The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor&apos;s toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.&lt;/p&gt;" ilk="function" line="2107" lineend="6316" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.lang" line="2111" name="Lang" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="2111" name="Event" />
        <variable attributes="__local__ private" citdl="YAHOO.widget.Toolbar" line="2111" name="Toolbar" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="2111" name="Dom" />
        <scope attributes="__local__ private" doc="PRIVATE: Makes a useable classname from dynamic data, by dropping it to lowercase and replacing spaces with -&apos;s." ilk="function" line="2184" lineend="2186" name="_cleanClassName" returns="String" signature="_cleanClassName(str)">
          <variable citdl="String" doc="The classname to clean up" ilk="argument" name="str" />
        </scope>
      </scope>
      <variable citdl="document.createElement()" line="2845" name="m_oIFrameTemplate" />
      <scope attributes="__local__ private" doc="UI Components" ilk="function" line="3046" lineend="4285" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.widget.Paginator" line="3053" name="Paginator" />
        <variable attributes="__local__ private" citdl="Paginator.ui" line="3053" name="ui">
          <scope ilk="class" line="3065" lineend="3208" name="FirstPageLink">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: ui Component to generate the link to jump to the first page." ilk="function" line="3065" lineend="3077" name="FirstPageLink" signature="FirstPageLink(p)">
              <variable citdl="Pagintor" doc="Paginator instance to attach to" ilk="argument" name="p" />
              <variable citdl="FirstPageLink" name="this" />
            </scope>
            <variable citdl="p" line="3066" name="paginator" />
            <scope attributes="__static__" doc="STATIC: Decorates Paginator instances with new attributes. Called during&#xA;Paginator instantiation." ilk="function" line="3086" lineend="3107" name="init" signature="init(p)">
              <variable citdl="Paginator" doc="Paginator instance to decorate" ilk="argument" name="p" />
              <variable citdl="FirstPageLink" name="this" />
            </scope>
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: The currently placed HTMLElement node" line="3118" name="current" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: Link node" line="3126" name="link" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: Span node (inactive link)" line="3134" name="span" />
            <scope doc="Generate the nodes and return the appropriate node given the current&#xA;pagination state." ilk="function" line="3143" lineend="3163" name="render" returns="HTMLElement" signature="render(id_base)">
              <variable citdl="String" doc="used to create unique ids for generated nodes" ilk="argument" name="id_base" />
              <variable citdl="FirstPageLink" name="this" />
              <variable attributes="__local__ private" citdl="this.paginator" line="3146" name="p" />
              <variable attributes="__local__ private" citdl="p.get()" line="3146" name="c" />
              <variable attributes="__local__ private" citdl="p.get()" line="3146" name="label" />
            </scope>
            <variable citdl="id_base" line="3151" name="id" />
            <variable citdl="String" line="3152" name="href" />
            <variable citdl="c" line="3153" name="className" />
            <variable citdl="label" line="3154" name="innerHTML" />
            <scope doc="Swap the link and span nodes if appropriate." ilk="function" line="3170" lineend="3187" name="update" signature="update(e)">
              <variable citdl="CustomEvent" doc="The calling change event" ilk="argument" name="e" />
              <variable citdl="FirstPageLink" name="this" />
              <variable attributes="__local__ private" citdl="this.current" line="3175" name="par" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Removes the onClick listener from the link in preparation for content&#xA;removal." ilk="function" line="3195" lineend="3197" name="destroy" signature="destroy()">
              <variable citdl="FirstPageLink" name="this" />
            </scope>
            <scope doc="Listener for the link&apos;s onclick event.  Pass new value to setPage method." ilk="function" line="3204" lineend="3207" name="onClick" signature="onClick(e)">
              <variable citdl="DOMEvent" doc="The click event" ilk="argument" name="e" />
              <variable citdl="FirstPageLink" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="3222" lineend="3392" name="LastPageLink">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: ui Component to generate the link to jump to the last page." ilk="function" line="3222" lineend="3236" name="LastPageLink" signature="LastPageLink(p)">
              <variable citdl="Pagintor" doc="Paginator instance to attach to" ilk="argument" name="p" />
              <variable citdl="LastPageLink" name="this" />
            </scope>
            <variable citdl="p" line="3223" name="paginator" />
            <scope attributes="__static__" doc="STATIC: Decorates Paginator instances with new attributes. Called during&#xA;Paginator instantiation." ilk="function" line="3245" lineend="3266" name="init" signature="init(p)">
              <variable ilk="argument" name="p" />
              <variable citdl="LastPageLink" name="this" />
            </scope>
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: Currently placed HTMLElement node" line="3276" name="current" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: Link HTMLElement node" line="3284" name="link" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: Span node (inactive link)" line="3292" name="span" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: Empty place holder node for when the last page link is inappropriate to&#xA;display in any form (unlimited paging)." line="3301" name="na" />
            <scope doc="Generate the nodes and return the appropriate node given the current&#xA;pagination state." ilk="function" line="3311" lineend="3343" name="render" returns="HTMLElement" signature="render(id_base)">
              <variable citdl="String" doc="used to create unique ids for generated nodes" ilk="argument" name="id_base" />
              <variable citdl="LastPageLink" name="this" />
              <variable attributes="__local__ private" citdl="this.paginator" line="3315" name="p" />
              <variable attributes="__local__ private" citdl="p.get()" line="3315" name="c" />
              <variable attributes="__local__ private" citdl="p.getTotalPages()" line="3315" name="last" />
              <variable attributes="__local__ private" citdl="p.get()" line="3315" name="label" />
            </scope>
            <variable citdl="id_base" line="3321" name="id" />
            <variable citdl="String" line="3322" name="href" />
            <variable citdl="c" line="3323" name="className" />
            <variable citdl="label" line="3324" name="innerHTML" />
            <scope doc="Swap the link, span, and na nodes if appropriate." ilk="function" line="3350" lineend="3371" name="update" signature="update(e)">
              <variable citdl="CustomEvent" doc="The calling change event (ignored)" ilk="argument" name="e" />
              <variable citdl="LastPageLink" name="this" />
              <variable attributes="__local__ private" citdl="this.current" line="3356" name="par" />
              <variable attributes="__local__ private" citdl="this.link" line="3356" name="after" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Removes the onClick listener from the link in preparation for content&#xA;removal." ilk="function" line="3379" lineend="3381" name="destroy" signature="destroy()">
              <variable citdl="LastPageLink" name="this" />
            </scope>
            <scope doc="Listener for the link&apos;s onclick event.  Passes to setPage method." ilk="function" line="3388" lineend="3391" name="onClick" signature="onClick(e)">
              <variable citdl="DOMEvent" doc="The click event" ilk="argument" name="e" />
              <variable citdl="LastPageLink" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="3405" lineend="3548" name="PreviousPageLink">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: ui Component to generate the link to jump to the previous page." ilk="function" line="3405" lineend="3417" name="PreviousPageLink" signature="PreviousPageLink(p)">
              <variable citdl="Pagintor" doc="Paginator instance to attach to" ilk="argument" name="p" />
              <variable citdl="PreviousPageLink" name="this" />
            </scope>
            <variable citdl="p" line="3406" name="paginator" />
            <scope attributes="__static__" doc="STATIC: Decorates Paginator instances with new attributes. Called during&#xA;Paginator instantiation." ilk="function" line="3426" lineend="3447" name="init" signature="init(p)">
              <variable citdl="Paginator" doc="Paginator instance to decorate" ilk="argument" name="p" />
              <variable citdl="PreviousPageLink" name="this" />
            </scope>
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: Currently placed HTMLElement node" line="3457" name="current" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: Link node" line="3465" name="link" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: Span node (inactive link)" line="3473" name="span" />
            <scope doc="Generate the nodes and return the appropriate node given the current&#xA;pagination state." ilk="function" line="3483" lineend="3503" name="render" returns="HTMLElement" signature="render(id_base)">
              <variable citdl="String" doc="used to create unique ids for generated nodes" ilk="argument" name="id_base" />
              <variable citdl="PreviousPageLink" name="this" />
              <variable attributes="__local__ private" citdl="this.paginator" line="3486" name="p" />
              <variable attributes="__local__ private" citdl="p.get()" line="3486" name="c" />
              <variable attributes="__local__ private" citdl="p.get()" line="3486" name="label" />
            </scope>
            <variable citdl="id_base" line="3491" name="id" />
            <variable citdl="String" line="3492" name="href" />
            <variable citdl="c" line="3493" name="className" />
            <variable citdl="label" line="3494" name="innerHTML" />
            <scope doc="Swap the link and span nodes if appropriate." ilk="function" line="3510" lineend="3527" name="update" signature="update(e)">
              <variable citdl="CustomEvent" doc="The calling change event" ilk="argument" name="e" />
              <variable citdl="PreviousPageLink" name="this" />
              <variable attributes="__local__ private" citdl="this.current" line="3515" name="par" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Removes the onClick listener from the link in preparation for content&#xA;removal." ilk="function" line="3535" lineend="3537" name="destroy" signature="destroy()">
              <variable citdl="PreviousPageLink" name="this" />
            </scope>
            <scope doc="Listener for the link&apos;s onclick event.  Passes to setPage method." ilk="function" line="3544" lineend="3547" name="onClick" signature="onClick(e)">
              <variable citdl="DOMEvent" doc="The click event" ilk="argument" name="e" />
              <variable citdl="PreviousPageLink" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="3562" lineend="3711" name="NextPageLink">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: ui Component to generate the link to jump to the next page." ilk="function" line="3562" lineend="3576" name="NextPageLink" signature="NextPageLink(p)">
              <variable citdl="Pagintor" doc="Paginator instance to attach to" ilk="argument" name="p" />
              <variable citdl="NextPageLink" name="this" />
            </scope>
            <variable citdl="p" line="3563" name="paginator" />
            <scope attributes="__static__" doc="STATIC: Decorates Paginator instances with new attributes. Called during&#xA;Paginator instantiation." ilk="function" line="3585" lineend="3606" name="init" signature="init(p)">
              <variable citdl="Paginator" doc="Paginator instance to decorate" ilk="argument" name="p" />
              <variable citdl="NextPageLink" name="this" />
            </scope>
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: Currently placed HTMLElement node" line="3616" name="current" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: Link node" line="3624" name="link" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: Span node (inactive link)" line="3632" name="span" />
            <scope doc="Generate the nodes and return the appropriate node given the current&#xA;pagination state." ilk="function" line="3642" lineend="3664" name="render" returns="HTMLElement" signature="render(id_base)">
              <variable citdl="String" doc="used to create unique ids for generated nodes" ilk="argument" name="id_base" />
              <variable citdl="NextPageLink" name="this" />
              <variable attributes="__local__ private" citdl="this.paginator" line="3646" name="p" />
              <variable attributes="__local__ private" citdl="p.get()" line="3646" name="c" />
              <variable attributes="__local__ private" citdl="p.getTotalPages()" line="3646" name="last" />
              <variable attributes="__local__ private" citdl="p.get()" line="3646" name="label" />
            </scope>
            <variable citdl="id_base" line="3651" name="id" />
            <variable citdl="String" line="3652" name="href" />
            <variable citdl="c" line="3653" name="className" />
            <variable citdl="label" line="3654" name="innerHTML" />
            <scope doc="Swap the link and span nodes if appropriate." ilk="function" line="3671" lineend="3690" name="update" signature="update(e)">
              <variable citdl="CustomEvent" doc="The calling change event" ilk="argument" name="e" />
              <variable citdl="NextPageLink" name="this" />
              <variable attributes="__local__ private" citdl="this.current" line="3677" name="par" />
              <variable attributes="__local__ private" citdl="this.paginator.getTotalPages()" line="3677" name="last" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Removes the onClick listener from the link in preparation for content&#xA;removal." ilk="function" line="3698" lineend="3700" name="destroy" signature="destroy()">
              <variable citdl="NextPageLink" name="this" />
            </scope>
            <scope doc="Listener for the link&apos;s onclick event.  Passes to setPage method." ilk="function" line="3707" lineend="3710" name="onClick" signature="onClick(e)">
              <variable citdl="DOMEvent" doc="The click event" ilk="argument" name="e" />
              <variable citdl="NextPageLink" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="3724" lineend="3971" name="PageLinks">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: ui Component to generate the page links" ilk="function" line="3724" lineend="3742" name="PageLinks" signature="PageLinks(p)">
              <variable citdl="Pagintor" doc="Paginator instance to attach to" ilk="argument" name="p" />
              <variable citdl="PageLinks" name="this" />
            </scope>
            <variable citdl="p" line="3725" name="paginator" />
            <scope attributes="__static__" doc="STATIC: Decorates Paginator instances with new attributes. Called during&#xA;Paginator instantiation." ilk="function" line="3751" lineend="3804" name="init" signature="init(p)">
              <variable citdl="Paginator" doc="Paginator instance to decorate" ilk="argument" name="p" />
              <variable citdl="PageLinks" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Calculates start and end page numbers given a current page, attempting&#xA;to keep the current page in the middle" ilk="function" line="3816" lineend="3846" name="calculateRange" returns="Array" signature="calculateRange(currentPage, totalPages, numPages)">
              <variable citdl="Number" doc="The current page" ilk="argument" name="currentPage" />
              <variable citdl="Number" doc="(optional) Maximum number of pages" ilk="argument" name="totalPages" />
              <variable citdl="Number" doc="(optional) Preferred number of pages in range" ilk="argument" name="numPages" />
              <variable citdl="PageLinks" name="this" />
              <variable attributes="__local__ private" citdl="Math.max()" line="3818" name="start" />
              <variable attributes="__local__ private" citdl="start" line="3818" name="end" />
              <variable attributes="__local__ private" citdl="Paginator.VALUE_UNLIMITED" line="3818" name="UNLIMITED" />
              <variable attributes="__local__ private" citdl="numPages" line="3818" name="delta" />
            </scope>
            <variable attributes="private" citdl="Number" doc="PRIVATE: Current page" line="3857" name="current" />
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: Span node containing the page links" line="3865" name="container" />
            <scope doc="Generate the nodes and return the container node containing page links&#xA;appropriate to the current pagination state." ilk="function" line="3875" lineend="3888" name="render" returns="HTMLElement" signature="render(id_base)">
              <variable citdl="String" doc="used to create unique ids for generated nodes" ilk="argument" name="id_base" />
              <variable citdl="PageLinks" name="this" />
              <variable attributes="__local__ private" citdl="this.paginator" line="3876" name="p" />
            </scope>
            <variable citdl="id_base" line="3880" name="id" />
            <variable citdl="p.get()" line="3881" name="className" />
            <scope doc="Update the links if appropriate" ilk="function" line="3895" lineend="3931" name="update" signature="update(e)">
              <variable citdl="CustomEvent" doc="The calling change event" ilk="argument" name="e" />
              <variable citdl="PageLinks" name="this" />
              <variable attributes="__local__ private" citdl="this.paginator" line="3901" name="p" />
              <variable attributes="__local__ private" citdl="p.getCurrentPage()" line="3901" name="currentPage" />
              <variable attributes="__local__ private" citdl="String" line="3913" name="linkTemplate" />
              <variable attributes="__local__ private" citdl="range[1]" line="3913" name="end" />
              <variable attributes="__local__ private" citdl="p.get()" line="3913" name="labelBuilder" />
              <variable attributes="__local__ private" line="3913" name="i" />
              <variable attributes="__local__ private" citdl="String" line="3913" name="content" />
              <variable attributes="__local__ private" citdl="ui.PageLinks.calculateRange()" line="3913" name="range" />
              <variable attributes="__local__ private" citdl="range[0]" line="3913" name="start" />
            </scope>
            <variable citdl="content" line="3929" name="innerHTML" />
            <scope doc="Force a rebuild of the page links." ilk="function" line="3938" lineend="3941" name="rebuild" signature="rebuild(e)">
              <variable citdl="CustomEvent" doc="The calling change event" ilk="argument" name="e" />
              <variable citdl="PageLinks" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Removes the onClick listener from the container in preparation for&#xA;content removal." ilk="function" line="3949" lineend="3951" name="destroy" signature="destroy()">
              <variable citdl="PageLinks" name="this" />
            </scope>
            <scope doc="Listener for the container&apos;s onclick event.  Looks for qualifying link&#xA;clicks, and pulls the page number from the link&apos;s page attribute.&#xA;Sends link&apos;s page attribute to the Paginator&apos;s setPage method." ilk="function" line="3960" lineend="3969" name="onClick" signature="onClick(e)">
              <variable citdl="DOMEvent" doc="The click event" ilk="argument" name="e" />
              <variable citdl="PageLinks" name="this" />
              <variable attributes="__local__ private" citdl="YAHOO.util.Event.getTarget()" line="3961" name="t" />
            </scope>
          </scope>
          <scope ilk="class" line="3984" lineend="4127" name="RowsPerPageDropdown">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: ui Component to generate the rows-per-page dropdown" ilk="function" line="3984" lineend="3996" name="RowsPerPageDropdown" signature="RowsPerPageDropdown(p)">
              <variable citdl="Pagintor" doc="Paginator instance to attach to" ilk="argument" name="p" />
              <variable citdl="RowsPerPageDropdown" name="this" />
            </scope>
            <variable citdl="p" line="3985" name="paginator" />
            <scope attributes="__static__" doc="STATIC: Decorates Paginator instances with new attributes. Called during&#xA;Paginator instantiation." ilk="function" line="4005" lineend="4028" name="init" signature="init(p)">
              <variable citdl="Paginator" doc="Paginator instance to decorate" ilk="argument" name="p" />
              <variable citdl="RowsPerPageDropdown" name="this" />
            </scope>
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: select node" line="4038" name="select" />
            <scope doc="Generate the select and option nodes and returns the select node." ilk="function" line="4047" lineend="4058" name="render" returns="HTMLElement" signature="render(id_base)">
              <variable citdl="String" doc="used to create unique ids for generated nodes" ilk="argument" name="id_base" />
              <variable citdl="RowsPerPageDropdown" name="this" />
            </scope>
            <variable citdl="id_base" line="4049" name="id" />
            <variable citdl="this.paginator.get()" line="4050" name="className" />
            <variable citdl="String" line="4051" name="title" />
            <scope doc="Select the appropriate option if changed." ilk="function" line="4065" lineend="4079" name="update" signature="update(e)">
              <variable citdl="CustomEvent" doc="The calling change event" ilk="argument" name="e" />
              <variable citdl="RowsPerPageDropdown" name="this" />
              <variable attributes="__local__ private" line="4072" name="i" />
              <variable attributes="__local__ private" citdl="this.paginator.get()" line="4072" name="rpp" />
              <variable attributes="__local__ private" citdl="this.select.options" line="4072" name="options" />
              <variable attributes="__local__ private" line="4072" name="len" />
            </scope>
            <scope doc="(Re)generate the select options." ilk="function" line="4086" lineend="4106" name="rebuild" signature="rebuild(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="RowsPerPageDropdown" name="this" />
              <variable attributes="__local__ private" line="4091" name="i" />
              <variable attributes="__local__ private" line="4091" name="len" />
              <variable attributes="__local__ private" citdl="this.paginator" line="4091" name="p" />
              <variable attributes="__local__ private" citdl="this.select" line="4091" name="sel" />
              <variable attributes="__local__ private" citdl="p.get()" line="4091" name="options" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="4091" name="opt_tem" />
              <variable attributes="__local__ private" citdl="opt_tem.cloneNode()" line="4099" name="node" />
              <variable attributes="__local__ private" citdl="options[i]" line="4099" name="opt" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Removes the onChange listener from the select in preparation for content&#xA;removal." ilk="function" line="4114" lineend="4116" name="destroy" signature="destroy()">
              <variable citdl="RowsPerPageDropdown" name="this" />
            </scope>
            <scope doc="Listener for the select&apos;s onchange event.  Sent to setRowsPerPage method." ilk="function" line="4123" lineend="4126" name="onChange" signature="onChange(e)">
              <variable citdl="DOMEvent" doc="The change event" ilk="argument" name="e" />
              <variable citdl="RowsPerPageDropdown" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="4142" lineend="4283" name="CurrentPageReport">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: ui Component to generate the textual report of current pagination status.&#xA;E.g. &quot;Now viewing page 1 of 13&quot;." ilk="function" line="4142" lineend="4155" name="CurrentPageReport" signature="CurrentPageReport(p)">
              <variable citdl="Pagintor" doc="Paginator instance to attach to" ilk="argument" name="p" />
              <variable citdl="CurrentPageReport" name="this" />
            </scope>
            <variable citdl="p" line="4143" name="paginator" />
            <scope attributes="__static__" doc="STATIC: Decorates Paginator instances with new attributes. Called during&#xA;Paginator instantiation." ilk="function" line="4164" lineend="4221" name="init" signature="init(p)">
              <variable citdl="Paginator" doc="Paginator instance to decorate" ilk="argument" name="p" />
              <variable citdl="CurrentPageReport" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Replace place holders in a string with the named values found in an&#xA;object literal." ilk="function" line="4232" lineend="4236" name="sprintf" returns="String" signature="sprintf(template, values)">
              <variable citdl="String" doc="The content string containing place holders" ilk="argument" name="template" />
              <variable citdl="Object" doc="The key:value pairs used to replace the place holders" ilk="argument" name="values" />
              <variable citdl="CurrentPageReport" name="this" />
            </scope>
            <variable attributes="private" citdl="HTMLElement" doc="PRIVATE: Span node containing the formatted info" line="4246" name="span" />
            <scope doc="Generate the span containing info formatted per the pageReportTemplate&#xA;attribute." ilk="function" line="4256" lineend="4263" name="render" returns="HTMLElement" signature="render(id_base)">
              <variable citdl="String" doc="used to create unique ids for generated nodes" ilk="argument" name="id_base" />
              <variable citdl="CurrentPageReport" name="this" />
            </scope>
            <variable citdl="id_base" line="4258" name="id" />
            <variable citdl="this.paginator.get()" line="4259" name="className" />
            <scope doc="Regenerate the content of the span if appropriate. Calls&#xA;CurrentPageReport.sprintf with the value of the pageReportTemplate&#xA;attribute and the value map returned from pageReportValueGenerator&#xA;function." ilk="function" line="4273" lineend="4282" name="update" signature="update(e)">
              <variable citdl="CustomEvent" doc="The calling change event" ilk="argument" name="e" />
              <variable citdl="CurrentPageReport" name="this" />
            </scope>
            <variable citdl="ui.CurrentPageReport.sprintf()" line="4281" name="innerHTML" />
          </scope>
        </variable>
        <variable attributes="__local__ private" citdl="YAHOO.lang" line="3053" name="l" />
      </scope>
      <variable citdl="document.createElement()" line="3289" name="input" />
      <scope attributes="__local__ private" ilk="function" line="3351" lineend="3854" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="3374" name="Dom" />
        <variable attributes="__local__ private" citdl="YAHOO.widget.Overlay" line="3374" name="Overlay" />
        <variable attributes="__local__ private" citdl="YAHOO.util.CustomEvent" line="3374" name="CustomEvent" />
        <variable attributes="__local__ private" citdl="YAHOO.widget.OverlayManager" line="3374" name="OverlayManager" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Config" line="3374" name="Config" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="3374" name="Event" />
      </scope>
      <scope attributes="__local__ private" ilk="function" line="3351" lineend="3854" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="3374" name="Dom" />
        <variable attributes="__local__ private" citdl="YAHOO.widget.Overlay" line="3374" name="Overlay" />
        <variable attributes="__local__ private" citdl="YAHOO.util.CustomEvent" line="3374" name="CustomEvent" />
        <variable attributes="__local__ private" citdl="YAHOO.widget.OverlayManager" line="3374" name="OverlayManager" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Config" line="3374" name="Config" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="3374" name="Event" />
      </scope>
      <variable citdl="o" line="3483" name="activeOverlay" />
      <scope attributes="__local__ private" ilk="function" line="3856" lineend="4669" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the Tooltip&apos;s configuration properties" line="3891" name="Lang" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the Tooltip&apos;s configuration properties" line="3891" name="Dom" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the Tooltip&apos;s configuration properties" line="3891" name="m_oShadowTemplate" />
        <variable attributes="__local__ private constant" citdl="Object" classrefs="YAHOO.widget.Overlay" doc="PRIVATE CONSTANT: Constant representing the Tooltip&apos;s configuration properties" line="3891" lineend="4669" name="Tooltip">
          <scope doc="The Tooltip initialization method. This method is automatically&#xA;called by the constructor. A Tooltip is automatically rendered by&#xA;the init method, and it also is set to be invisible by default,&#xA;and constrained to viewport by default as well." ilk="function" line="4039" lineend="4062" name="init" signature="init(el, userConfig)">
            <variable citdl="HTMLElement" doc="The element representing the Tooltip" ilk="argument" name="el" />
            <variable citdl="Object" doc="The configuration object literal&#xA;containing the configuration that should be set for this Tooltip.&#xA;See configuration documentation for more details." ilk="argument" name="userConfig" />
            <variable citdl="Tooltip" name="this" />
          </scope>
          <scope doc="Initializes the custom events for Tooltip" ilk="function" line="4068" lineend="4126" name="initEvents" signature="initEvents()">
            <variable citdl="Tooltip" name="this" />
            <variable attributes="__local__ private" citdl="CustomEvent.LIST" line="4071" name="SIGNATURE" />
          </scope>
          <variable citdl="this.createEvent()" doc="CustomEvent fired when user mouses over a context element. Returning false from&#xA;a subscriber to this event will prevent the tooltip from being displayed for&#xA;the current context element." line="4082" name="contextMouseOverEvent" />
          <variable citdl="SIGNATURE" line="4083" name="signature" />
          <variable citdl="this.createEvent()" doc="CustomEvent fired when the user mouses out of a context element." line="4092" name="contextMouseOutEvent" />
          <variable citdl="this.createEvent()" doc="CustomEvent fired just before the tooltip is displayed for the current context.&#xA;&lt;p&gt;&#xA;You can subscribe to this event if you need to set up the text for the&#xA;tooltip based on the context element for which it is about to be displayed.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;This event differs from the beforeShow event in following respects:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;When moving from one context element to another, if the tooltip is not&#xA;hidden (the &lt;code&gt;hidedelay&lt;/code&gt; is not reached), the beforeShow and Show events will not&#xA;be fired when the tooltip is displayed for the new context since it is already visible.&#xA;However the contextTrigger event is always fired before displaying the tooltip for&#xA;a new context.&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;The trigger event provides access to the context element, allowing you to&#xA;set the text of the tooltip based on context element for which the tooltip is&#xA;triggered.&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;It is not possible to prevent the tooltip from being displayed&#xA;using this event. You can use the contextMouseOverEvent if you need to prevent&#xA;the tooltip from being displayed.&#xA;&lt;/p&gt;" line="4124" name="contextTriggerEvent" />
          <scope doc="Initializes the class&apos;s configurable properties which can be&#xA;changed using the Overlay&apos;s Config object (cfg)." ilk="function" line="4133" lineend="4255" name="initDefaultConfig" signature="initDefaultConfig()">
            <variable citdl="Tooltip" name="this" />
          </scope>
          <scope doc="The default event handler fired when the &quot;text&quot; property is changed." ilk="function" line="4268" lineend="4273" name="configText" signature="configText(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Tooltip" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="4269" name="text" />
          </scope>
          <scope doc="The default event handler fired when the &quot;container&quot; property&#xA;is changed." ilk="function" line="4286" lineend="4292" name="configContainer" signature="configContainer(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For&#xA;configuration handlers, args[0] will equal the newly applied value&#xA;for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Tooltip" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="4287" name="container" />
          </scope>
          <scope doc="Removes all of the DOM event handlers from the HTML&#xA;element(s) that trigger the display of the tooltip." ilk="function" line="4300" lineend="4320" name="_removeEventListeners" signature="_removeEventListeners()">
            <variable citdl="Tooltip" name="this" />
            <variable attributes="__local__ private" citdl="aElements.length" line="4305" name="nElements" />
            <variable attributes="__local__ private" citdl="nElements" line="4305" name="i" />
            <variable attributes="__local__ private" citdl="aElements[i]" line="4305" name="oElement" />
            <variable attributes="__local__ private" citdl="this._context" line="4305" name="aElements" />
          </scope>
          <scope doc="The default event handler fired when the &quot;context&quot; property&#xA;is changed." ilk="function" line="4332" lineend="4374" name="configContext" signature="configContext(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Tooltip" name="this" />
            <variable attributes="__local__ private" citdl="aElements.length" line="4338" name="nElements" />
            <variable attributes="__local__ private" citdl="nElements" line="4338" name="i" />
            <variable attributes="__local__ private" citdl="aElements[i]" line="4338" name="oElement" />
            <variable attributes="__local__ private" citdl="args[0]" line="4338" name="context" />
            <variable attributes="__local__ private" citdl="this._context" line="4338" name="aElements" />
          </scope>
          <variable citdl="context" doc="Add mouseover/mouseout listeners to context elements" line="4356" name="_context" />
          <scope doc="The default event handler fired when the user moves the mouse while&#xA;over the context element." ilk="function" line="4387" lineend="4390" name="onContextMouseMove" signature="onContextMouseMove(e, obj)">
            <variable citdl="DOMEvent" doc="The current DOM event" ilk="argument" name="e" />
            <variable citdl="Object" doc="The object argument" ilk="argument" name="obj" />
            <variable citdl="Tooltip" name="this" />
          </scope>
          <scope doc="The default event handler fired when the user mouses over the&#xA;context element." ilk="function" line="4399" lineend="4426" name="onContextMouseOver" signature="onContextMouseOver(e, obj)">
            <variable citdl="DOMEvent" doc="The current DOM event" ilk="argument" name="e" />
            <variable citdl="Object" doc="The object argument" ilk="argument" name="obj" />
            <variable citdl="Tooltip" name="this" />
            <variable attributes="__local__ private" citdl="this" line="4400" name="context" />
          </scope>
          <scope doc="The default event handler fired when the user mouses out of&#xA;the context element." ilk="function" line="4435" lineend="4458" name="onContextMouseOut" signature="onContextMouseOut(e, obj)">
            <variable citdl="DOMEvent" doc="The current DOM event" ilk="argument" name="e" />
            <variable citdl="Object" doc="The object argument" ilk="argument" name="obj" />
            <variable citdl="Tooltip" name="this" />
            <variable attributes="__local__ private" citdl="this" line="4436" name="el" />
          </scope>
          <scope doc="Processes the showing of the Tooltip by setting the timeout delay&#xA;and offset of the Tooltip." ilk="function" line="4470" lineend="4506" name="doShow" returns="Number" signature="doShow(e, context)">
            <variable citdl="DOMEvent" doc="The current DOM event" ilk="argument" name="e" />
            <variable ilk="argument" name="context" />
            <variable citdl="Tooltip" name="this" />
            <variable attributes="__local__ private" citdl="this" line="4473" name="me" />
            <variable attributes="__local__ private" citdl="Number" line="4473" name="yOffset" />
          </scope>
          <scope doc="Sets the timeout for the auto-dismiss delay, which by default is 5&#xA;seconds, meaning that a tooltip will automatically dismiss itself&#xA;after 5 seconds of being displayed." ilk="function" line="4514" lineend="4525" name="doHide" returns="setTimeout()" signature="doHide()">
            <variable citdl="Tooltip" name="this" />
            <variable attributes="__local__ private" citdl="this" line="4516" name="me" />
          </scope>
          <scope doc="Fired when the Tooltip is moved, this event handler is used to&#xA;prevent the Tooltip from overlapping with its context element." ilk="function" line="4534" lineend="4549" name="preventOverlap" signature="preventOverlap(pageX, pageY)">
            <variable citdl="Number" doc="The x coordinate position of the mouse pointer" ilk="argument" name="pageX" />
            <variable citdl="Number" doc="The y coordinate position of the mouse pointer" ilk="argument" name="pageY" />
            <variable citdl="Tooltip" name="this" />
            <variable attributes="__local__ private" citdl="Dom.getRegion()" line="4538" name="elementRegion" />
            <variable attributes="__local__ private" citdl="YAHOO.util.Point" line="4538" name="mousePoint" />
            <variable attributes="__local__ private" citdl="this.element.offsetHeight" line="4538" name="height" />
          </scope>
          <scope doc="&quot;render&quot; event handler for the Tooltip." ilk="function" line="4560" lineend="4642" name="onRender" signature="onRender(p_sType, p_aArgs)">
            <variable citdl="String" doc="String representing the name of the event&#xA;that was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event&#xA;was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="Tooltip" name="this" />
            <scope attributes="__local__ private" ilk="function" line="4562" lineend="4572" name="sizeShadow" signature="sizeShadow()">
              <variable attributes="__local__ private" citdl="this._shadow" line="4565" name="oShadow">
                <variable citdl="Object" line="4568" name="style">
                  <variable line="4568" name="width" />
                  <variable line="4569" name="height" />
                </variable>
              </variable>
              <variable attributes="__local__ private" citdl="this.element" line="4565" name="oElement" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="4574" lineend="4576" name="addShadowVisibleClass" signature="addShadowVisibleClass()" />
            <scope attributes="__local__ private" ilk="function" line="4579" lineend="4581" name="removeShadowVisibleClass" signature="removeShadowVisibleClass()" />
            <scope attributes="__local__ private" ilk="class" line="4583" lineend="4629" name="createShadow">
              <scope attributes="__local__ private __ctor__" ilk="function" line="4583" lineend="4629" name="createShadow" signature="createShadow()">
                <variable citdl="createShadow" name="this" />
                <variable attributes="__local__ private" citdl="this" line="4589" name="me" />
                <variable attributes="__local__ private" citdl="YAHOO.widget.Module" line="4589" name="Module" />
                <variable attributes="__local__ private" citdl="YAHOO.env.ua.ie" line="4589" name="nIE" />
                <variable attributes="__local__ private" citdl="this._shadow" line="4589" name="oShadow" />
                <variable attributes="__local__ private" citdl="this.element" line="4589" name="oElement" />
              </scope>
              <variable citdl="Object" line="4600" name="m_oShadowTemplate" />
              <variable citdl="oShadow" line="4607" name="_shadow" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="4631" lineend="4634" name="onBeforeShow" signature="onBeforeShow()" />
          </scope>
          <scope doc="Removes the Tooltip element from the DOM and sets all child&#xA;elements to null." ilk="function" line="4649" lineend="4656" name="destroy" signature="destroy()">
            <variable citdl="Tooltip" name="this" />
          </scope>
          <scope doc="Returns a string representation of the object." ilk="function" line="4663" lineend="4665" name="toString" returns="String" signature="toString()">
            <variable citdl="Tooltip" name="this" />
          </scope>
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the Tooltip&apos;s configuration properties" line="3891" name="CustomEvent" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the Tooltip&apos;s configuration properties" line="3891" name="Event" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the Tooltip&apos;s configuration properties" line="3891" lineend="3932" name="DEFAULT_CONFIG">
          <variable citdl="Object" line="3893" lineend="3898" name="PREVENT_OVERLAP">
            <variable citdl="String" line="3894" name="key" />
            <variable citdl="Boolean" line="3895" name="value" />
            <variable citdl="Lang.isBoolean" line="3896" name="validator" />
            <variable citdl="Array" line="3897" name="supercedes" />
          </variable>
          <variable citdl="Object" line="3900" lineend="3904" name="SHOW_DELAY">
            <variable citdl="String" line="3901" name="key" />
            <variable citdl="Number" line="3902" name="value" />
            <variable citdl="Lang.isNumber" line="3903" name="validator" />
          </variable>
          <variable citdl="Object" line="3906" lineend="3910" name="AUTO_DISMISS_DELAY">
            <variable citdl="String" line="3907" name="key" />
            <variable citdl="Number" line="3908" name="value" />
            <variable citdl="Lang.isNumber" line="3909" name="validator" />
          </variable>
          <variable citdl="Object" line="3912" lineend="3916" name="HIDE_DELAY">
            <variable citdl="String" line="3913" name="key" />
            <variable citdl="Number" line="3914" name="value" />
            <variable citdl="Lang.isNumber" line="3915" name="validator" />
          </variable>
          <variable citdl="Object" line="3918" lineend="3921" name="TEXT">
            <variable citdl="String" line="3919" name="key" />
            <variable citdl="Boolean" line="3920" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="3923" lineend="3925" name="CONTAINER">
            <variable citdl="String" line="3924" name="key" />
          </variable>
          <variable citdl="Object" line="3927" lineend="3931" name="DISABLED">
            <variable citdl="String" line="3928" name="key" />
            <variable citdl="Boolean" line="3929" name="value" />
            <variable citdl="Boolean" line="3930" name="suppressEvent" />
          </variable>
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Tooltip&apos;s events" line="3941" lineend="3945" name="EVENT_TYPES">
          <variable citdl="String" line="3942" name="CONTEXT_MOUSE_OVER" />
          <variable citdl="String" line="3943" name="CONTEXT_MOUSE_OUT" />
          <variable citdl="String" line="3944" name="CONTEXT_TRIGGER" />
        </variable>
        <scope attributes="__local__ private" doc="&quot;hide&quot; event handler that sets a Tooltip instance&apos;s &quot;width&quot;&#xA;configuration property back to its original value before&#xA;&quot;setWidthToOffsetWidth&quot; was called." ilk="function" line="3961" lineend="3973" name="restoreOriginalWidth" signature="restoreOriginalWidth(p_sType, p_aArgs, p_oObject)">
          <variable ilk="argument" name="p_sType" />
          <variable ilk="argument" name="p_aArgs" />
          <variable ilk="argument" name="p_oObject" />
          <variable attributes="__local__ private" citdl="p_oObject[0]" line="3966" name="sOriginalWidth" />
          <variable attributes="__local__ private" citdl="this.cfg" line="3966" name="oConfig" />
          <variable attributes="__local__ private" citdl="oConfig.getProperty()" line="3966" name="sCurrentWidth" />
          <variable attributes="__local__ private" citdl="p_oObject[1]" line="3966" name="sNewWidth" />
        </scope>
        <scope attributes="__local__ private" doc="&quot;beforeShow&quot; event handler that sets a Tooltip instance&apos;s&#xA;&quot;width&quot; configuration property to the value of its root HTML&#xA;elements&apos;s offsetWidth */" ilk="function" line="3981" lineend="4011" name="setWidthToOffsetWidth" signature="setWidthToOffsetWidth(p_sType, p_aArgs)">
          <variable ilk="argument" name="p_sType" />
          <variable ilk="argument" name="p_aArgs" />
          <variable attributes="__local__ private" citdl="oConfig.getProperty()" line="3987" name="sOriginalWidth" />
          <variable attributes="__local__ private" citdl="this.element.cloneNode()" line="3987" name="oClone">
            <variable citdl="Object" line="3995" name="style">
              <variable citdl="String" line="3995" name="visibility" />
              <variable citdl="String" line="3996" name="top" />
              <variable citdl="String" line="3997" name="left" />
            </variable>
          </variable>
          <variable attributes="__local__ private" citdl="document.body" line="3987" name="oBody" />
          <variable attributes="__local__ private" line="3987" name="sNewWidth" />
          <variable attributes="__local__ private" citdl="this.cfg" line="3987" name="oConfig" />
        </scope>
        <scope attributes="__local__ private" doc="&quot;onDOMReady&quot; that renders the ToolTip" ilk="function" line="4015" lineend="4017" name="onDOMReady" signature="onDOMReady(p_sType, p_aArgs, p_oObject)">
          <variable ilk="argument" name="p_sType" />
          <variable ilk="argument" name="p_aArgs" />
          <variable ilk="argument" name="p_oObject" />
        </scope>
        <scope attributes="__local__ private" doc="&quot;init&quot; event handler that automatically renders the Tooltip" ilk="function" line="4021" lineend="4023" name="onInit" signature="onInit()" />
      </scope>
      <scope attributes="__local__ private" ilk="function" line="3856" lineend="4246" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.util.CustomEvent" line="3928" name="CustomEvent" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Easing" line="3928" name="Easing" />
        <variable attributes="__local__ private" citdl="YAHOO.widget.ContainerEffect" line="3928" name="ContainerEffect">
          <scope attributes="__static__" doc="STATIC: A pre-configured ContainerEffect instance that can be used for fading&#xA;an overlay in and out." ilk="function" line="3940" lineend="4020" name="FADE" returns="YAHOO.widget.ContainerEffect" signature="FADE(overlay, dur)">
            <variable citdl="YAHOO.widget.Overlay" doc="The Overlay object to animate" ilk="argument" name="overlay" />
            <variable citdl="Number" doc="The duration of the animation" ilk="argument" name="dur" />
            <variable citdl="ContainerEffect" name="this" />
            <variable attributes="__local__ private" citdl="Object" line="3942" lineend="3946" name="fin">
              <variable citdl="Object" line="3943" lineend="3943" name="attributes">
                <variable citdl="Object" line="3943" lineend="3943" name="opacity">
                  <variable citdl="Number" line="3943" name="to" />
                  <variable citdl="Number" line="3943" name="from" />
                </variable>
              </variable>
              <variable citdl="dur" line="3944" name="duration" />
              <variable citdl="Easing.easeIn" line="3945" name="method" />
            </variable>
            <variable attributes="__local__ private" citdl="Object" line="3948" lineend="3952" name="fout">
              <variable citdl="Object" line="3949" lineend="3949" name="attributes">
                <variable citdl="Object" line="3949" lineend="3949" name="opacity">
                  <variable citdl="Number" line="3949" name="to" />
                </variable>
              </variable>
              <variable citdl="dur" line="3950" name="duration" />
              <variable citdl="Easing.easeOut" line="3951" name="method" />
            </variable>
            <variable attributes="__local__ private" citdl="ContainerEffect" line="3954" name="fade">
              <scope ilk="function" line="3956" lineend="3964" name="handleUnderlayStart" signature="handleUnderlayStart()">
                <variable citdl="fade" name="this" />
                <variable attributes="__local__ private" citdl="this.overlay.underlay" line="3957" name="underlay" />
                <variable attributes="__local__ private" line="3959" name="hasFilters" />
              </scope>
              <scope ilk="function" line="3966" lineend="3971" name="handleUnderlayComplete" signature="handleUnderlayComplete()">
                <variable citdl="fade" name="this" />
                <variable attributes="__local__ private" citdl="this.overlay.underlay" line="3967" name="underlay" />
              </scope>
              <scope ilk="function" line="3973" lineend="3984" name="handleStartAnimateIn" signature="handleStartAnimateIn(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="fade" name="this" />
              </scope>
              <scope ilk="function" line="3986" lineend="3997" name="handleCompleteAnimateIn" signature="handleCompleteAnimateIn(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="fade" name="this" />
              </scope>
              <scope ilk="function" line="3999" lineend="4002" name="handleStartAnimateOut" signature="handleStartAnimateOut(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="fade" name="this" />
              </scope>
              <scope ilk="function" line="4004" lineend="4016" name="handleCompleteAnimateOut" signature="handleCompleteAnimateOut(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="fade" name="this" />
              </scope>
            </variable>
          </scope>
          <scope attributes="__static__" doc="STATIC: A pre-configured ContainerEffect instance that can be used for sliding an&#xA;overlay in and out." ilk="function" line="4032" lineend="4113" name="SLIDE" returns="YAHOO.widget.ContainerEffect" signature="SLIDE(overlay, dur)">
            <variable citdl="YAHOO.widget.Overlay" doc="The Overlay object to animate" ilk="argument" name="overlay" />
            <variable citdl="Number" doc="The duration of the animation" ilk="argument" name="dur" />
            <variable citdl="ContainerEffect" name="this" />
            <variable attributes="__local__ private" citdl="overlay.cfg.getProperty()" line="4052" name="y" />
            <variable attributes="__local__ private" citdl="overlay.cfg.getProperty()" line="4052" name="x" />
            <variable attributes="__local__ private" citdl="ContainerEffect" line="4052" name="slide">
              <scope ilk="function" line="4055" lineend="4058" name="handleStartAnimateIn" signature="handleStartAnimateIn(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="slide" name="this" />
              </scope>
              <scope ilk="function" line="4060" lineend="4075" name="handleTweenAnimateIn" signature="handleTweenAnimateIn(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="slide" name="this" />
                <variable attributes="__local__ private" citdl="pos[1]" line="4064" name="currentY" />
                <variable attributes="__local__ private" citdl="Dom.getXY()" line="4064" name="pos" />
                <variable attributes="__local__ private" citdl="pos[0]" line="4064" name="currentX" />
              </scope>
              <scope ilk="function" line="4077" lineend="4083" name="handleCompleteAnimateIn" signature="handleCompleteAnimateIn(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="slide" name="this" />
              </scope>
              <scope ilk="function" line="4085" lineend="4092" name="handleStartAnimateOut" signature="handleStartAnimateOut(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="slide" name="this" />
                <variable attributes="__local__ private" citdl="pos[1]" line="4089" name="yso" />
                <variable attributes="__local__ private" citdl="Dom.getXY()" line="4089" name="pos" />
                <variable attributes="__local__ private" citdl="Dom.getViewportWidth()" line="4089" name="vw" />
              </scope>
              <scope ilk="function" line="4094" lineend="4102" name="handleTweenAnimateOut" signature="handleTweenAnimateOut(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="slide" name="this" />
                <variable attributes="__local__ private" citdl="pos[0]" line="4098" name="xto" />
                <variable attributes="__local__ private" citdl="pos[1]" line="4098" name="yto" />
                <variable attributes="__local__ private" citdl="Dom.getXY()" line="4098" name="pos" />
              </scope>
              <scope ilk="function" line="4104" lineend="4109" name="handleCompleteAnimateOut" signature="handleCompleteAnimateOut(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="slide" name="this" />
              </scope>
            </variable>
            <variable attributes="__local__ private" citdl="overlay.element.offsetWidth" line="4052" name="offsetWidth" />
            <variable attributes="__local__ private" citdl="Dom.getClientWidth()" line="4052" name="clientWidth" />
          </scope>
        </variable>
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="3928" name="Dom" />
      </scope>
      <scope attributes="__local__ private" ilk="function" line="3860" lineend="4695" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.lang" doc="Private collection of radio buttons" line="3871" name="Lang" />
        <variable attributes="__local__ private" citdl="Object" doc="Private collection of radio buttons" line="3871" lineend="3871" name="m_oButtons" />
        <variable attributes="__local__ private" citdl="YAHOO.widget.Button" doc="Private collection of radio buttons" line="3871" name="Button" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" doc="Private collection of radio buttons" line="3871" name="Event" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" doc="Private collection of radio buttons" line="3871" name="Dom" />
      </scope>
      <scope attributes="__local__ private" doc="////////////////////////////////////////////////////////////&#xA;///////////////" ilk="function" line="4431" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.lang" line="4442" name="lang" />
        <variable attributes="__local__ private" citdl="YAHOO.widget" line="4442" name="widget" />
        <variable attributes="__local__ private" citdl="util.Dom" line="4442" name="Dom" />
        <variable attributes="__local__ private" citdl="YAHOO.util" line="4442" name="util" />
        <variable attributes="__local__ private" citdl="widget.Paginator" line="4442" name="Pag" />
        <variable attributes="__local__ private" citdl="widget.DataTable" line="4442" lineend="15328" name="DT">
          <variable attributes="__static__" citdl="Object" doc="STATIC: Cell formatting functions." line="5752" lineend="5765" name="Formatter">
            <variable citdl="DT.formatButton" line="5753" name="button" />
            <variable citdl="DT.formatCheckbox" line="5754" name="checkbox" />
            <variable citdl="DT.formatCurrency" line="5755" name="currency" />
            <variable citdl="DT.formatDate" line="5756" name="date" />
            <variable citdl="DT.formatDropdown" line="5757" name="dropdown" />
            <variable citdl="DT.formatEmail" line="5758" name="email" />
            <variable citdl="DT.formatLink" line="5759" name="link" />
            <variable citdl="DT.formatNumber" line="5760" name="number" />
            <variable citdl="DT.formatRadio" line="5761" name="radio" />
            <variable citdl="DT.formatText" line="5762" name="text" />
            <variable citdl="DT.formatTextarea" line="5763" name="textarea" />
            <variable citdl="DT.formatTextbox" line="5764" name="textbox" />
          </variable>
        </variable>
        <variable attributes="__local__ private" citdl="util.Event" line="4442" name="Ev" />
        <variable attributes="__local__ private" citdl="YAHOO.env.ua" line="4442" name="ua" />
        <variable attributes="__local__ private" citdl="util.DataSource" line="4442" name="DS" />
      </scope>
      <variable citdl="document.createElement()" line="4630" name="m_oShadowTemplate" />
      <scope attributes="__local__ private" ilk="function" line="4671" lineend="5850" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Panel&apos;s events" line="4710" name="Lang" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Panel&apos;s events" line="4710" name="Overlay" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Panel&apos;s events" line="4710" name="m_oCloseIconTemplate" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Panel&apos;s events" line="4710" name="DD" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Panel&apos;s events" line="4710" name="Dom" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Panel&apos;s events" line="4710" name="m_oUnderlayTemplate" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Panel&apos;s events" line="4710" lineend="4714" name="EVENT_TYPES">
          <variable citdl="String" line="4711" name="SHOW_MASK" />
          <variable citdl="String" line="4712" name="HIDE_MASK" />
          <variable citdl="String" line="4713" name="DRAG" />
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Panel&apos;s events" line="4710" name="CustomEvent" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Panel&apos;s events" line="4710" name="m_oMaskTemplate" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Panel&apos;s events" line="4710" name="Config" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Panel&apos;s events" line="4710" name="Event" />
        <variable attributes="__local__ private constant" citdl="Object" classrefs="Overlay" doc="PRIVATE CONSTANT: Constant representing the name of the Panel&apos;s events" line="4710" lineend="5850" name="Panel">
          <scope doc="The Overlay initialization method, which is executed for Overlay and&#xA;all of its subclasses. This method is automatically called by the&#xA;constructor, and  sets up all DOM references for pre-existing markup,&#xA;and creates required markup if it is not already present." ilk="function" line="4881" lineend="4905" name="init" signature="init(el, userConfig)">
            <variable citdl="HTMLElement" doc="The element representing the Overlay" ilk="argument" name="el" />
            <variable citdl="Object" doc="The configuration object literal&#xA;containing the configuration that should be set for this Overlay.&#xA;See configuration documentation for more details." ilk="argument" name="userConfig" />
            <variable citdl="Panel" name="this" />
          </scope>
          <scope attributes="private" doc="{Event} e The DOM event object */" ilk="function" line="4917" lineend="4919" name="_onElementFocus" signature="_onElementFocus(e)">
            <variable citdl="Event" doc="The DOM event object" ilk="argument" name="e" />
            <variable citdl="Panel" name="this" />
          </scope>
          <scope doc="p_aArgs {Array} Custom event arguments */" ilk="function" line="4932" lineend="4956" name="_addFocusHandlers" signature="_addFocusHandlers(p_sType, p_aArgs)">
            <variable citdl="String" doc="Custom event type" ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Custom event arguments" ilk="argument" name="p_aArgs" />
            <variable citdl="Panel" name="this" />
            <variable attributes="__local__ private" citdl="this" line="4935" name="me" />
            <variable attributes="__local__ private" citdl="String" line="4935" name="focus" />
            <variable attributes="__local__ private" citdl="String" line="4935" name="hidden" />
            <scope attributes="__local__ private" ilk="function" line="4937" lineend="4945" name="isFocusable" returns="Boolean" signature="isFocusable(el)">
              <variable ilk="argument" name="el" />
            </scope>
            <variable attributes="__local__ private" citdl="Array" line="4949" name="arr" />
            <variable attributes="__local__ private" citdl="Panel.FOCUSABLE" line="4949" name="focusable" />
            <variable attributes="__local__ private" citdl="focusable.length" line="4949" name="l" />
          </scope>
          <variable citdl="arr" line="4955" name="focusableElements" />
          <scope doc="p_aArgs {Array} Event Arguments */" ilk="function" line="4968" lineend="4978" name="_removeFocusHandlers" signature="_removeFocusHandlers(p_sType, p_aArgs)">
            <variable citdl="String" doc="Event type" ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Event Arguments" ilk="argument" name="p_aArgs" />
            <variable citdl="Panel" name="this" />
            <variable attributes="__local__ private" citdl="aElements.length" line="4971" name="nElements" />
            <variable attributes="__local__ private" citdl="String" line="4971" name="focus" />
            <variable attributes="__local__ private" citdl="this.focusableElements" line="4971" name="aElements" />
          </scope>
          <scope doc="Initializes the custom events for Module which are fired&#xA;automatically at appropriate times by the Module class." ilk="function" line="4984" lineend="5010" name="initEvents" signature="initEvents()">
            <variable citdl="Panel" name="this" />
            <variable attributes="__local__ private" citdl="CustomEvent.LIST" line="4987" name="SIGNATURE" />
          </scope>
          <variable citdl="this.createEvent()" doc="CustomEvent fired after the modality mask is shown" line="4993" name="showMaskEvent" />
          <variable citdl="SIGNATURE" line="4994" name="signature" />
          <variable citdl="this.createEvent()" doc="CustomEvent fired after the modality mask is hidden" line="5000" name="hideMaskEvent" />
          <variable citdl="this.createEvent()" doc="CustomEvent when the Panel is dragged" line="5007" name="dragEvent" />
          <scope doc="Initializes the class&apos;s configurable properties which can be changed&#xA;using the Panel&apos;s Config object (cfg)." ilk="function" line="5017" lineend="5137" name="initDefaultConfig" signature="initDefaultConfig()">
            <variable citdl="Panel" name="this" />
          </scope>
          <scope doc="The default event handler fired when the &quot;close&quot; property is changed.&#xA;The method controls the appending or hiding of the close icon at the&#xA;top right of the Panel." ilk="function" line="5152" lineend="5185" name="configClose" signature="configClose(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Panel" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="5155" name="val" />
            <variable attributes="__local__ private" citdl="this.close" line="5155" name="oClose">
              <variable citdl="Object" line="5176" name="style">
                <variable citdl="String" line="5176" name="display" />
              </variable>
            </variable>
            <scope attributes="__local__ private" ilk="function" line="5157" lineend="5159" name="doHide" signature="doHide(e, obj)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="obj" />
            </scope>
            <variable citdl="Object" line="5165" name="m_oCloseIconTemplate">
              <variable citdl="String" line="5165" name="innerHTML" />
              <variable citdl="String" line="5166" name="className" />
            </variable>
          </scope>
          <variable citdl="oClose" line="5173" name="close" />
          <scope doc="The default event handler fired when the &quot;draggable&quot; property&#xA;is changed." ilk="function" line="5197" lineend="5225" name="configDraggable" signature="configDraggable(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Panel" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="5198" name="val" />
          </scope>
          <scope doc="The default event handler fired when the &quot;underlay&quot; property&#xA;is changed." ilk="function" line="5237" lineend="5350" name="configUnderlay" signature="configUnderlay(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Panel" name="this" />
            <variable attributes="__local__ private" line="5244" name="bMacGecko" />
            <variable attributes="__local__ private" citdl="args[0].toLowerCase()" line="5244" name="sUnderlay" />
            <variable attributes="__local__ private" citdl="this.underlay" line="5244" name="oUnderlay" />
            <variable attributes="__local__ private" line="5244" name="bIEQuirks" />
            <variable attributes="__local__ private" citdl="YAHOO.env.ua" line="5244" name="UA" />
            <variable attributes="__local__ private" citdl="this.element" line="5244" name="oElement" />
            <scope attributes="__local__ private" ilk="function" line="5246" lineend="5257" name="fixWebkitUnderlay" signature="fixWebkitUnderlay()">
              <variable attributes="__local__ private" citdl="this.underlay" doc="need the fix" line="5254" name="u" />
            </scope>
            <scope attributes="__local__ private" ilk="class" line="5259" lineend="5286" name="createUnderlay">
              <scope attributes="__local__ private __ctor__" ilk="function" line="5259" lineend="5286" name="createUnderlay" signature="createUnderlay()">
                <variable citdl="createUnderlay" name="this" />
                <variable attributes="__local__ private" citdl="Boolean" line="5260" name="bNew" />
              </scope>
              <variable citdl="Object" line="5265" name="m_oUnderlayTemplate" />
              <variable citdl="oUnderlay" line="5271" name="underlay" />
            </scope>
            <scope attributes="__local__ private" ilk="class" line="5288" lineend="5295" name="onBeforeShow">
              <scope attributes="__local__ private __ctor__" ilk="function" line="5288" lineend="5295" name="onBeforeShow" signature="onBeforeShow()">
                <variable citdl="onBeforeShow" name="this" />
                <variable attributes="__local__ private" citdl="createUnderlay.call()" line="5289" name="bNew" />
              </scope>
              <variable citdl="Boolean" line="5293" name="_underlayDeferred" />
            </scope>
            <scope attributes="__local__ private" ilk="class" line="5297" lineend="5314" name="destroyUnderlay">
              <scope attributes="__local__ private __ctor__" ilk="function" line="5297" lineend="5314" name="destroyUnderlay" signature="destroyUnderlay()">
                <variable citdl="destroyUnderlay" name="this" />
              </scope>
              <variable citdl="Boolean" line="5300" name="_underlayDeferred" />
              <variable line="5312" name="underlay" />
            </scope>
            <variable attributes="__local__ private" citdl="createUnderlay.call()" line="5339" name="bNew" />
          </scope>
          <variable citdl="Boolean" line="5346" name="_underlayDeferred" />
          <scope doc="The default event handler fired when the &quot;modal&quot; property is&#xA;changed. This handler subscribes or unsubscribes to the show and hide&#xA;events to handle the display or hide of the modality mask." ilk="function" line="5363" lineend="5397" name="configModal" signature="configModal(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Panel" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="5365" name="modal" />
          </scope>
          <variable citdl="Boolean" line="5377" name="_hasModalityEventListeners" />
          <scope doc="Removes the modality mask." ilk="function" line="5403" lineend="5422" name="removeMask" signature="removeMask()">
            <variable citdl="Panel" name="this" />
            <variable attributes="__local__ private" citdl="oMask.parentNode" line="5406" name="oParentNode" />
            <variable attributes="__local__ private" citdl="this.mask" line="5406" name="oMask" />
          </scope>
          <variable citdl="oMask" line="5420" name="mask" />
          <scope doc="The default event handler fired when the &quot;keylisteners&quot; property&#xA;is changed." ilk="function" line="5434" lineend="5495" name="configKeyListeners" signature="configKeyListeners(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Panel" name="this" />
            <variable attributes="__local__ private" citdl="listeners[i]" line="5439" name="listener" />
            <variable attributes="__local__ private" line="5439" name="i" />
            <variable attributes="__local__ private" citdl="args[0]" line="5439" name="listeners" />
            <variable attributes="__local__ private" citdl="listeners.length" line="5439" name="nListeners" />
          </scope>
          <scope doc="The default event handler fired when the &quot;height&quot; property is changed." ilk="function" line="5506" lineend="5514" name="configHeight" signature="configHeight(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Panel" name="this" />
            <variable attributes="__local__ private" citdl="this.innerElement" line="5509" name="el" />
            <variable attributes="__local__ private" citdl="args[0]" line="5509" name="height" />
          </scope>
          <scope doc="The default event handler fired when the &quot;width&quot; property is changed." ilk="function" line="5525" lineend="5533" name="configWidth" signature="configWidth(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Panel" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="5528" name="width" />
            <variable attributes="__local__ private" citdl="this.innerElement" line="5528" name="el" />
          </scope>
          <scope doc="The default event handler fired when the &quot;zIndex&quot; property is changed." ilk="function" line="5544" lineend="5561" name="configzIndex" signature="configzIndex(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Panel" name="this" />
            <variable attributes="__local__ private" citdl="Dom.getStyle()" line="5548" name="panelZ" />
          </scope>
          <scope doc="Builds the wrapping container around the Panel that is used for&#xA;positioning the shadow and matte underlays. The container element is&#xA;assigned to a  local instance variable called container, and the&#xA;element is reinserted inside of it." ilk="function" line="5571" lineend="5590" name="buildWrapper" signature="buildWrapper()">
            <variable citdl="Panel" name="this" />
            <variable attributes="__local__ private" citdl="this.element" line="5575" name="originalElement" />
            <variable attributes="__local__ private" citdl="this.element.parentNode" line="5575" name="elementParent" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="5575" name="wrapper" />
          </scope>
          <variable citdl="wrapper" line="5586" name="element" />
          <variable citdl="originalElement" line="5587" name="innerElement" />
          <scope doc="Adjusts the size of the shadow based on the size of the element." ilk="function" line="5596" lineend="5605" name="sizeUnderlay" signature="sizeUnderlay()">
            <variable citdl="Panel" name="this" />
            <variable attributes="__local__ private" citdl="this.element" line="5598" name="oElement" />
            <variable attributes="__local__ private" citdl="this.underlay" line="5598" name="oUnderlay">
              <variable citdl="Object" line="5602" name="style">
                <variable citdl="oElement.offsetWidth" line="5602" name="width" />
                <variable citdl="oElement.offsetHeight" line="5603" name="height" />
              </variable>
            </variable>
          </scope>
          <scope doc="Registers the Panel&apos;s header for drag &amp; drop capability." ilk="class" line="5612" lineend="5640" name="registerDragDrop">
            <scope attributes="__ctor__" doc="Registers the Panel&apos;s header for drag &amp; drop capability." ilk="function" line="5612" lineend="5707" name="registerDragDrop" signature="registerDragDrop()">
              <variable citdl="registerDragDrop" name="this" />
              <variable attributes="__local__ private" citdl="this" line="5614" name="me" />
              <variable attributes="__local__ private" line="5622" name="bDragOnly" />
              <variable citdl="Object" line="5629" name="dd">
                <scope ilk="function" line="5629" lineend="5679" name="startDrag" signature="startDrag()">
                  <variable citdl="dd" name="this" />
                  <variable attributes="__local__ private" citdl="Dom.getDocumentScrollLeft()" line="5636" name="scrollX" />
                  <variable attributes="__local__ private" citdl="Dom.getDocumentScrollTop()" line="5636" name="scrollY" />
                  <variable attributes="__local__ private" citdl="Dom.getViewportHeight()" line="5636" name="viewPortHeight" />
                  <variable attributes="__local__ private" citdl="Dom.getViewportWidth()" line="5636" name="viewPortWidth" />
                  <variable attributes="__local__ private" citdl="me.element.offsetHeight" line="5636" name="offsetHeight" />
                  <variable attributes="__local__ private" citdl="me.element.offsetWidth" line="5636" name="offsetWidth" />
                  <variable attributes="__local__ private" citdl="Overlay.VIEWPORT_OFFSET" line="5644" name="nViewportOffset" />
                </scope>
                <variable citdl="scrollY" line="5656" name="minY" />
                <variable citdl="scrollY" line="5657" name="maxY" />
                <variable citdl="scrollX" line="5664" name="minX" />
                <variable citdl="scrollX" line="5665" name="maxX" />
                <variable citdl="Boolean" line="5671" name="constrainX" />
                <variable citdl="Boolean" line="5672" name="constrainY" />
                <scope ilk="function" line="5681" lineend="5689" name="onDrag" signature="onDrag()">
                  <variable citdl="dd" name="this" />
                </scope>
                <scope ilk="function" line="5691" lineend="5700" name="endDrag" signature="endDrag()">
                  <variable citdl="dd" name="this" />
                </scope>
              </variable>
            </scope>
            <variable citdl="DD" line="5623" name="dd" />
            <variable citdl="this.id" line="5626" name="id" />
          </scope>
          <scope doc="Builds the mask that is laid over the document when the Panel is&#xA;configured to be modal." ilk="function" line="5714" lineend="5736" name="buildMask" signature="buildMask()">
            <variable citdl="Panel" name="this" />
            <variable attributes="__local__ private" citdl="this.mask" line="5715" name="oMask" />
            <variable citdl="Object" line="5719" name="m_oMaskTemplate">
              <variable citdl="String" line="5719" name="className" />
              <variable citdl="String" line="5720" name="innerHTML" />
            </variable>
          </scope>
          <scope doc="Hides the modality mask." ilk="function" line="5742" lineend="5748" name="hideMask" signature="hideMask()">
            <variable citdl="Panel" name="this" />
          </scope>
          <variable citdl="String" line="5744" name="display" />
          <scope doc="Shows the modality mask." ilk="function" line="5754" lineend="5761" name="showMask" signature="showMask()">
            <variable citdl="Panel" name="this" />
          </scope>
          <scope doc="Sets the size of the modality mask to cover the entire scrollable&#xA;area of the document" ilk="function" line="5768" lineend="5773" name="sizeMask" signature="sizeMask()">
            <variable citdl="Panel" name="this" />
          </scope>
          <variable citdl="Dom.getDocumentHeight()" line="5770" name="height" />
          <variable citdl="Dom.getDocumentWidth()" line="5771" name="width" />
          <scope doc="Sets the zindex of the mask, if it exists, based on the zindex of&#xA;the Panel element. The zindex of the mask is set to be one less&#xA;than the Panel element&apos;s zindex.&#xA;&#xA;&lt;p&gt;NOTE: This method will not bump up the zindex of the Panel&#xA;to ensure that the mask has a non-negative zindex. If you require the&#xA;mask zindex to be 0 or higher, the zindex of the Panel&#xA;should be set to a value higher than 0, before this method is called.&#xA;&lt;/p&gt;" ilk="function" line="5787" lineend="5794" name="stackMask" signature="stackMask()">
            <variable citdl="Panel" name="this" />
            <variable attributes="__local__ private" citdl="Dom.getStyle()" line="5789" name="panelZ" />
          </scope>
          <scope doc="Renders the Panel by inserting the elements that are not already in&#xA;the main Panel into their correct places. Optionally appends the&#xA;Panel to the specified node prior to the render&apos;s execution. NOTE:&#xA;For Panels without existing markup, the appendToNode argument is&#xA;REQUIRED. If this argument is ommitted and the current element is&#xA;not present in the document, the function will return false,&#xA;indicating that the render was a failure." ilk="function" line="5811" lineend="5816" name="render" returns="Boolean" signature="render(appendToNode)">
            <variable citdl="HTMLElement" doc="The element to which the Module&#xA;should be appended to prior to rendering" ilk="argument" name="appendToNode" />
            <variable citdl="Panel" name="this" />
          </scope>
          <scope doc="Removes the Panel element from the DOM and sets all child elements&#xA;to null." ilk="function" line="5823" lineend="5837" name="destroy" signature="destroy()">
            <variable citdl="Panel" name="this" />
          </scope>
          <scope doc="Returns a String representation of the object." ilk="function" line="5844" lineend="5846" name="toString" returns="String" signature="toString()">
            <variable citdl="Panel" name="this" />
          </scope>
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the Panel&apos;s configuration properties" line="4723" lineend="4764" name="DEFAULT_CONFIG">
          <variable citdl="Object" line="4725" lineend="4730" name="CLOSE">
            <variable citdl="String" line="4726" name="key" />
            <variable citdl="Boolean" line="4727" name="value" />
            <variable citdl="Lang.isBoolean" line="4728" name="validator" />
            <variable citdl="Array" line="4729" name="supercedes" />
          </variable>
          <variable citdl="Object" line="4732" lineend="4737" name="DRAGGABLE">
            <variable citdl="String" line="4733" name="key" />
            <variable line="4734" name="value" />
            <variable citdl="Lang.isBoolean" line="4735" name="validator" />
            <variable citdl="Array" line="4736" name="supercedes" />
          </variable>
          <variable citdl="Object" line="4739" lineend="4744" name="DRAG_ONLY">
            <variable citdl="String" line="4740" name="key" />
            <variable citdl="Boolean" line="4741" name="value" />
            <variable citdl="Lang.isBoolean" line="4742" name="validator" />
            <variable citdl="Array" line="4743" name="supercedes" />
          </variable>
          <variable citdl="Object" line="4746" lineend="4750" name="UNDERLAY">
            <variable citdl="String" line="4747" name="key" />
            <variable citdl="String" line="4748" name="value" />
            <variable citdl="Array" line="4749" name="supercedes" />
          </variable>
          <variable citdl="Object" line="4752" lineend="4757" name="MODAL">
            <variable citdl="String" line="4753" name="key" />
            <variable citdl="Boolean" line="4754" name="value" />
            <variable citdl="Lang.isBoolean" line="4755" name="validator" />
            <variable citdl="Array" line="4756" name="supercedes" />
          </variable>
          <variable citdl="Object" line="4759" lineend="4763" name="KEY_LISTENERS">
            <variable citdl="String" line="4760" name="key" />
            <variable citdl="Boolean" line="4761" name="suppressEvent" />
            <variable citdl="Array" line="4762" name="supercedes" />
          </variable>
        </variable>
        <scope attributes="__local__ private" doc="&quot;beforeRender&quot; event handler that creates an empty header&#xA;for a Panel instance if its &quot;draggable&quot; configuration&#xA;property is set to &quot;true&quot; and no header has been created." ilk="function" line="4810" lineend="4814" name="createHeader" signature="createHeader(p_sType, p_aArgs)">
          <variable ilk="argument" name="p_sType" />
          <variable ilk="argument" name="p_aArgs" />
        </scope>
        <scope attributes="__local__ private" doc="&quot;hide&quot; event handler that sets a Panel instance&apos;s &quot;width&quot;&#xA;configuration property back to its original value before&#xA;&quot;setWidthToOffsetWidth&quot; was called." ilk="function" line="4822" lineend="4834" name="restoreOriginalWidth" signature="restoreOriginalWidth(p_sType, p_aArgs, p_oObject)">
          <variable ilk="argument" name="p_sType" />
          <variable ilk="argument" name="p_aArgs" />
          <variable ilk="argument" name="p_oObject" />
          <variable attributes="__local__ private" citdl="p_oObject[0]" line="4827" name="sOriginalWidth" />
          <variable attributes="__local__ private" citdl="this.cfg" line="4827" name="oConfig" />
          <variable attributes="__local__ private" citdl="oConfig.getProperty()" line="4827" name="sCurrentWidth" />
          <variable attributes="__local__ private" citdl="p_oObject[1]" line="4827" name="sNewWidth" />
        </scope>
        <scope attributes="__local__ private" doc="&quot;beforeShow&quot; event handler that sets a Panel instance&apos;s&#xA;&quot;width&quot; configuration property to the value of its root HTML&#xA;elements&apos;s offsetWidth */" ilk="function" line="4842" lineend="4865" name="setWidthToOffsetWidth" signature="setWidthToOffsetWidth(p_sType, p_aArgs)">
          <variable ilk="argument" name="p_sType" />
          <variable ilk="argument" name="p_aArgs" />
          <variable attributes="__local__ private" citdl="oConfig.getProperty()" line="4847" name="sOriginalWidth" />
          <variable attributes="__local__ private" citdl="this.cfg" line="4847" name="oConfig" />
          <variable attributes="__local__ private" line="4847" name="sNewWidth" />
          <variable attributes="__local__ private" citdl="YAHOO.env.ua.ie" line="4847" name="nIE" />
        </scope>
      </scope>
      <variable citdl="document.createElement()" line="5164" name="m_oCloseIconTemplate" />
      <variable citdl="document.createElement()" line="5264" name="m_oUnderlayTemplate" />
      <scope attributes="__local__ private" ilk="function" line="5627" lineend="5868" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.widget.CalendarNavigator" doc="Setup static properties (inside anon fn, so that we can use&#xA;shortcuts)" line="5629" name="CN">
          <variable attributes="__static__" citdl="Object" doc="STATIC: YAHOO.widget.CalendarNavigator.CLASSES contains constants&#xA;for the class values applied to the CalendarNaviatgator&apos;s&#xA;DOM elements" line="5639" lineend="5725" name="CLASSES">
            <variable attributes="__static__" citdl="String" doc="STATIC: Class applied to the Calendar Navigator&apos;s bounding box" line="5646" name="NAV" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Class applied to the Calendar/CalendarGroup&apos;s bounding box to indicate&#xA;the Navigator is currently visible" line="5654" name="NAV_VISIBLE" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Class applied to the Navigator mask&apos;s bounding box" line="5661" name="MASK" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Class applied to the year label/control bounding box" line="5668" name="YEAR" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Class applied to the month label/control bounding box" line="5675" name="MONTH" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Class applied to the submit/cancel button&apos;s bounding box" line="5682" name="BUTTONS" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Class applied to buttons wrapping element" line="5689" name="BUTTON" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Class applied to the validation error area&apos;s bounding box" line="5696" name="ERROR" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Class applied to the year input control" line="5703" name="YEAR_CTRL" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Class applied to the month input control" line="5710" name="MONTH_CTRL" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Class applied to controls with invalid data (e.g. a year input field with invalid an year)" line="5717" name="INVALID" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Class applied to default controls" line="5724" name="DEFAULT" />
          </variable>
          <variable attributes="__static__" citdl="Object" doc="STATIC: Object literal containing the default configuration values for the CalendarNavigator&#xA;The configuration object is expected to follow the format below, with the properties being&#xA;case sensitive.&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;strings&lt;/dt&gt;&#xA;&lt;dd&gt;&lt;em&gt;Object&lt;/em&gt; :  An object with the properties shown below, defining the string labels to use in the Navigator&apos;s UI&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;month&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : The string to use for the month label. Defaults to &quot;Month&quot;.&lt;/dd&gt;&#xA;&lt;dt&gt;year&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : The string to use for the year label. Defaults to &quot;Year&quot;.&lt;/dd&gt;&#xA;&lt;dt&gt;submit&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : The string to use for the submit button label. Defaults to &quot;Okay&quot;.&lt;/dd&gt;&#xA;&lt;dt&gt;cancel&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : The string to use for the cancel button label. Defaults to &quot;Cancel&quot;.&lt;/dd&gt;&#xA;&lt;dt&gt;invalidYear&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : The string to use for invalid year values. Defaults to &quot;Year needs to be a number&quot;.&lt;/dd&gt;&#xA;&lt;/dl&gt;&#xA;&lt;/dd&gt;&#xA;&lt;dt&gt;monthFormat&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : The month format to use. Either YAHOO.widget.Calendar.LONG, or YAHOO.widget.Calendar.SHORT. Defaults to YAHOO.widget.Calendar.LONG&lt;/dd&gt;&#xA;&lt;dt&gt;initialFocus&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : Either &quot;year&quot; or &quot;month&quot; specifying which input control should get initial focus. Defaults to &quot;year&quot;&lt;/dd&gt;&#xA;&lt;/dl&gt;" line="5750" lineend="5760" name="_DEFAULT_CFG">
            <variable citdl="Object" line="5751" lineend="5757" name="strings">
              <variable citdl="String" line="5752" name="month" />
              <variable citdl="String" line="5753" name="year" />
              <variable citdl="String" line="5754" name="submit" />
              <variable citdl="String" line="5755" name="cancel" />
              <variable citdl="String" line="5756" name="invalidYear" />
            </variable>
            <variable citdl="YAHOO.widget.Calendar.LONG" line="5758" name="monthFormat" />
            <variable citdl="String" line="5759" name="initialFocus" />
          </variable>
        </variable>
      </scope>
      <variable citdl="document.createElement()" line="5718" name="m_oMaskTemplate" />
      <scope attributes="__local__ private" ilk="function" line="5852" lineend="7116" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Dialog&apos;s events" line="5900" name="Lang" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Dialog&apos;s events" line="5900" name="Dom" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Dialog&apos;s events" line="5900" name="Connect" />
        <variable attributes="__local__ private constant" citdl="Object" classrefs="YAHOO.widget.Panel" doc="PRIVATE CONSTANT: Constant representing the name of the Dialog&apos;s events" line="5900" lineend="7116" name="Dialog">
          <scope doc="Initializes the class&apos;s configurable properties which can be changed&#xA;using the Dialog&apos;s Config object (cfg)." ilk="function" line="5990" lineend="6127" name="initDefaultConfig" signature="initDefaultConfig()">
            <variable citdl="Dialog" name="this" />
          </scope>
          <variable citdl="Object" doc="The internally maintained callback object for use with the&#xA;Connection utility. The format of the callback object is&#xA;similar to Connection Manager&apos;s callback object and is&#xA;simply passed through to Connection Manager when the async&#xA;request is made." line="6002" lineend="6050" name="callback">
            <variable citdl="Function" doc="The function to execute upon success of the&#xA;Connection submission (when the form does not&#xA;contain a file input element)." line="6012" name="success" />
            <variable citdl="Function" doc="The function to execute upon failure of the&#xA;Connection submission" line="6020" name="failure" />
            <variable citdl="Object" doc="*&lt;p&gt;&#xA;The function to execute upon success of the&#xA;Connection submission, when the form contains&#xA;a file input element.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;em&gt;NOTE:&lt;/em&gt; Connection manager will not&#xA;invoke the success or failure handlers for the file&#xA;upload use case. This will be the only callback&#xA;handler invoked.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;For more information, see the &lt;a href=&quot;http://developer.yahoo.com/yui/connection/#file&quot;&gt;&#xA;Connection Manager documenation on file uploads&lt;/a&gt;.&#xA;&lt;/p&gt;" line="6048" name="argument" />
          </variable>
          <scope doc="Initializes the custom events for Dialog which are fired&#xA;automatically at appropriate times by the Dialog class." ilk="function" line="6134" lineend="6183" name="initEvents" signature="initEvents()">
            <variable citdl="Dialog" name="this" />
            <variable attributes="__local__ private" citdl="CustomEvent.LIST" line="6137" name="SIGNATURE" />
          </scope>
          <variable citdl="this.createEvent()" doc="CustomEvent fired prior to submission" line="6144" name="beforeSubmitEvent" />
          <variable citdl="SIGNATURE" line="6145" name="signature" />
          <variable citdl="this.createEvent()" doc="CustomEvent fired after submission" line="6151" name="submitEvent" />
          <variable citdl="this.createEvent()" doc="CustomEvent fired prior to manual submission" line="6159" name="manualSubmitEvent" />
          <variable citdl="this.createEvent()" doc="CustomEvent fired prior to asynchronous submission" line="6166" name="asyncSubmitEvent" />
          <variable citdl="this.createEvent()" doc="CustomEvent fired prior to form-based submission" line="6173" name="formSubmitEvent" />
          <variable citdl="this.createEvent()" doc="CustomEvent fired after cancel" line="6180" name="cancelEvent" />
          <scope doc="The Dialog initialization method, which is executed for Dialog and&#xA;all of its subclasses. This method is automatically called by the&#xA;constructor, and  sets up all DOM references for pre-existing markup,&#xA;and creates required markup if it is not already present." ilk="function" line="6197" lineend="6222" name="init" signature="init(el, userConfig)">
            <variable citdl="HTMLElement" doc="The element representing the Dialog" ilk="argument" name="el" />
            <variable citdl="Object" doc="The configuration object literal&#xA;containing the configuration that should be set for this Dialog.&#xA;See configuration documentation for more details." ilk="argument" name="userConfig" />
            <variable citdl="Dialog" name="this" />
          </scope>
          <scope doc="Submits the Dialog&apos;s form depending on the value of the&#xA;&quot;postmethod&quot; configuration property.  &lt;strong&gt;Please note:&#xA;&lt;/strong&gt; As of version 2.3 this method will automatically handle&#xA;asyncronous file uploads should the Dialog instance&apos;s form contain&#xA;&lt;code&gt;&amp;#60;input type=&quot;file&quot;&amp;#62;&lt;/code&gt; elements.  If a Dialog&#xA;instance will be handling asyncronous file uploads, its&#xA;&lt;code&gt;callback&lt;/code&gt; property will need to be setup with a&#xA;&lt;code&gt;upload&lt;/code&gt; handler rather than the standard&#xA;&lt;code&gt;success&lt;/code&gt; and, or &lt;code&gt;failure&lt;/code&gt; handlers.  For more&#xA;information, see the &lt;a href=&quot;http://developer.yahoo.com/yui/&#xA;connection/#file&quot;&gt;Connection Manager documenation on file uploads&lt;/a&gt;." ilk="function" line="6238" lineend="6295" name="doSubmit" signature="doSubmit()">
            <variable citdl="Dialog" name="this" />
            <variable attributes="__local__ private" citdl="this.form" line="6246" name="oForm" />
            <variable attributes="__local__ private" citdl="Boolean" line="6246" name="bUseFileUpload" />
            <variable attributes="__local__ private" citdl="aElements.length" line="6246" name="nElements" />
            <variable attributes="__local__ private" citdl="oForm.elements" line="6246" name="aElements" />
            <variable attributes="__local__ private" citdl="nElements" line="6246" name="i" />
            <variable attributes="__local__ private" line="6246" name="sMethod" />
            <variable attributes="__local__ private" citdl="Boolean" line="6246" name="bUseSecureFileUpload" />
          </scope>
          <scope doc="Prepares the Dialog&apos;s internal FORM object, creating one if one is&#xA;not currently present." ilk="class" line="6303" lineend="6393" name="registerForm">
            <variable citdl="HTMLFormElement" doc="Object reference to the Dialog&apos;s&#xA;&lt;code&gt;&amp;#60;form&amp;#62;&lt;/code&gt; element." line="5983" name="form" />
            <scope attributes="__ctor__" doc="Prepares the Dialog&apos;s internal FORM object, creating one if one is&#xA;not currently present." ilk="function" line="6303" lineend="6393" name="registerForm" signature="registerForm()">
              <variable citdl="registerForm" name="this" />
              <variable attributes="__local__ private" citdl="this" line="6308" name="me" />
              <variable attributes="__local__ private" citdl="this.lastButton" line="6308" name="lastElement" />
              <variable attributes="__local__ private" citdl="this.firstFormElement" line="6308" name="firstElement" />
              <variable attributes="__local__ private" citdl="this.element.getElementsByTagName()[0]" line="6308" name="form" />
            </scope>
            <variable citdl="form.elements[f]" line="6338" name="firstFormElement" />
            <variable citdl="form.elements[f]" line="6350" name="lastFormElement" />
            <variable citdl="KeyListener" line="6368" name="preventBackTab" />
            <variable citdl="KeyListener" line="6383" name="preventTabOut" />
          </scope>
          <scope doc="The default event handler fired when the &quot;close&quot; property is&#xA;changed. The method controls the appending or hiding of the close&#xA;icon at the top right of the Dialog." ilk="function" line="6409" lineend="6432" name="configClose" signature="configClose(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For&#xA;configuration handlers, args[0] will equal the newly applied value&#xA;for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Dialog" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="6410" name="val" />
            <scope attributes="__local__ private" ilk="function" line="6412" lineend="6414" name="doCancel" signature="doCancel(e, obj)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="obj" />
            </scope>
          </scope>
          <variable citdl="document.createElement()" line="6418" name="close" />
          <variable citdl="String" line="6421" name="innerHTML" />
          <variable citdl="String" line="6425" name="display" />
          <scope doc="The default event handler for the &quot;buttons&quot; configuration property" ilk="function" line="6443" lineend="6586" name="configButtons" signature="configButtons(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Dialog" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="6454" name="aButtons" />
            <variable attributes="__local__ private" citdl="oYUIButton.get()" line="6454" name="oButtonEl" />
            <variable attributes="__local__ private" citdl="aButtons[i]" line="6454" name="oButton" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="6454" name="oSpan" />
            <variable attributes="__local__ private" citdl="Button" line="6454" name="oYUIButton" />
            <variable attributes="__local__ private" citdl="this.footer" line="6454" name="oFooter" />
            <variable attributes="__local__ private" citdl="YAHOO.widget.Button" line="6454" name="Button" />
            <variable attributes="__local__ private" line="6454" name="i" />
            <variable attributes="__local__ private" citdl="this.innerElement" line="6454" name="oInnerElement" />
            <variable attributes="__local__ private" citdl="aButtons.length" line="6454" name="nButtons" />
          </scope>
          <variable citdl="Array" line="6458" name="_aButtons" />
          <variable citdl="oButtonEl" line="6484" name="defaultHtmlButton" />
          <variable citdl="oButtonEl" line="6544" name="firstButton" />
          <variable citdl="oButtonEl" line="6548" name="lastButton" />
          <variable citdl="oSpan" line="6564" name="buttonSpan" />
          <scope doc="Returns an array containing each of the Dialog&apos;s&#xA;buttons, by default an array of HTML &lt;code&gt;&amp;#60;BUTTON&amp;#62;&lt;/code&gt;&#xA;elements.  If the Dialog&apos;s buttons were created using the&#xA;YAHOO.widget.Button class (via the inclusion of the optional Button&#xA;dependancy on the page), an array of YAHOO.widget.Button instances&#xA;is returned." ilk="function" line="6598" lineend="6603" name="getButtons" returns="Array" signature="getButtons()">
            <variable citdl="Dialog" name="this" />
            <variable attributes="__local__ private" citdl="this._aButtons" line="6599" name="aButtons" />
          </scope>
          <scope doc="Sets focus to the first element in the Dialog&apos;s form or the first&#xA;button defined via the &quot;buttons&quot; configuration property. Called&#xA;when the Dialog is made visible." ilk="function" line="6611" lineend="6638" name="focusFirst" signature="focusFirst(type, args, obj)">
            <variable ilk="argument" name="type" />
            <variable ilk="argument" name="args" />
            <variable ilk="argument" name="obj" />
            <variable citdl="Dialog" name="this" />
            <variable attributes="__local__ private" citdl="args[1]" line="6614" name="oEvent" />
            <variable attributes="__local__ private" citdl="this.firstFormElement" line="6614" name="oElement" />
          </scope>
          <scope doc="Sets focus to the last element in the Dialog&apos;s form or the last&#xA;button defined via the &quot;buttons&quot; configuration property." ilk="function" line="6645" lineend="6674" name="focusLast" signature="focusLast(type, args, obj)">
            <variable ilk="argument" name="type" />
            <variable ilk="argument" name="args" />
            <variable ilk="argument" name="obj" />
            <variable citdl="Dialog" name="this" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="6649" name="aButtons" />
            <variable attributes="__local__ private" citdl="args[1]" line="6649" name="oEvent" />
            <variable attributes="__local__ private" citdl="this.lastFormElement" line="6649" name="oElement" />
          </scope>
          <scope doc="Sets the focus to the button that is designated as the default via&#xA;the &quot;buttons&quot; configuration property. By default, this method is&#xA;called when the Dialog is made visible." ilk="function" line="6682" lineend="6699" name="focusDefaultButton" signature="focusDefaultButton()">
            <variable citdl="Dialog" name="this" />
            <variable attributes="__local__ private" citdl="this.defaultHtmlButton" line="6684" name="oElement" />
          </scope>
          <scope doc="Blurs all the buttons defined via the &quot;buttons&quot;&#xA;configuration property." ilk="function" line="6706" lineend="6746" name="blurButtons" signature="blurButtons()">
            <variable citdl="Dialog" name="this" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="6712" name="aButtons" />
            <variable attributes="__local__ private" citdl="aButtons.length" line="6712" name="nButtons" />
            <variable attributes="__local__ private" line="6712" name="i" />
            <variable attributes="__local__ private" citdl="aButtons[i]" line="6712" name="oButton" />
            <variable attributes="__local__ private" citdl="oButton.htmlButton" line="6712" name="oElement" />
          </scope>
          <scope doc="Sets the focus to the first button created via the &quot;buttons&quot;&#xA;configuration property." ilk="function" line="6753" lineend="6784" name="focusFirstButton" signature="focusFirstButton()">
            <variable citdl="Dialog" name="this" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="6757" name="aButtons" />
            <variable attributes="__local__ private" citdl="aButtons[0]" line="6757" name="oButton" />
            <variable attributes="__local__ private" citdl="oButton.htmlButton" line="6757" name="oElement" />
          </scope>
          <scope doc="Sets the focus to the last button created via the &quot;buttons&quot;&#xA;configuration property." ilk="function" line="6791" lineend="6823" name="focusLastButton" signature="focusLastButton()">
            <variable citdl="Dialog" name="this" />
            <variable attributes="__local__ private" citdl="this.cfg.getProperty()" line="6796" name="aButtons" />
            <variable attributes="__local__ private" citdl="aButtons.length" line="6796" name="nButtons" />
            <variable attributes="__local__ private" citdl="aButtons[(nButtons-1)]" line="6796" name="oButton" />
            <variable attributes="__local__ private" citdl="oButton.htmlButton" line="6796" name="oElement" />
          </scope>
          <scope doc="The default event handler for the &quot;postmethod&quot; configuration property" ilk="function" line="6835" lineend="6837" name="configPostMethod" signature="configPostMethod(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For&#xA;configuration handlers, args[0] will equal the newly applied value&#xA;for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="Dialog" name="this" />
          </scope>
          <scope doc="Built-in function hook for writing a validation function that will&#xA;be checked for a &quot;true&quot; value prior to a submit. This function, as&#xA;implemented by default, always returns true, so it should be&#xA;overridden if validation is necessary." ilk="function" line="6848" lineend="6850" name="validate" returns="Boolean" signature="validate()">
            <variable citdl="Dialog" name="this" />
          </scope>
          <scope doc="Executes a submit of the Dialog if validation&#xA;is successful. By default the Dialog is hidden&#xA;after submission, but you can set the &quot;hideaftersubmit&quot;&#xA;configuration property to false, to prevent the Dialog&#xA;from being hidden." ilk="function" line="6861" lineend="6875" name="submit" returns="Boolean" signature="submit()">
            <variable citdl="Dialog" name="this" />
          </scope>
          <scope doc="Executes the cancel of the Dialog followed by a hide." ilk="function" line="6881" lineend="6884" name="cancel" signature="cancel()">
            <variable citdl="Dialog" name="this" />
          </scope>
          <scope doc="Returns a JSON-compatible data structure representing the data&#xA;currently contained in the form." ilk="function" line="6893" lineend="7072" name="getData" returns="Object" signature="getData()">
            <variable citdl="Dialog" name="this" />
            <variable attributes="__local__ private" citdl="this.form" line="6912" name="oForm" />
            <variable attributes="__local__ private" citdl="aElements.length" line="6912" name="nTotalElements" />
            <variable attributes="__local__ private" citdl="oElement[n]" line="6912" name="oRadio" />
            <variable attributes="__local__ private" citdl="aElements[i].name" line="6912" name="sName" />
            <variable attributes="__local__ private" citdl="oOption.value" line="6912" name="sValue" />
            <variable attributes="__local__ private" citdl="oElement.length" line="6912" name="nElements" />
            <variable attributes="__local__ private" line="6912" lineend="6928" name="oData" />
            <variable attributes="__local__ private" citdl="oForm.elements" line="6912" name="aElements" />
            <variable attributes="__local__ private" line="6912" name="i" />
            <variable attributes="__local__ private" citdl="aOptions[n]" line="6912" name="oOption" />
            <variable attributes="__local__ private" citdl="aOptions.length" line="6912" name="nOptions" />
            <variable attributes="__local__ private" citdl="oElement.options" line="6912" name="aOptions" />
            <variable attributes="__local__ private" citdl="oElement[n]" line="6912" name="oCheckbox" />
            <variable attributes="__local__ private" citdl="Array" line="6912" name="aValues" />
            <variable attributes="__local__ private" line="6912" name="n" />
            <variable attributes="__local__ private" citdl="oElement.tagName.toUpperCase()" line="6912" name="sTagName" />
            <variable attributes="__local__ private" citdl="Dom.getElementsBy()" line="6912" name="oElement" />
            <variable attributes="__local__ private" citdl="oElement.type" line="6912" name="sType" />
            <scope attributes="__local__ private" ilk="function" line="6914" lineend="6921" name="isFormElement" signature="isFormElement(p_oElement)">
              <variable ilk="argument" name="p_oElement" />
              <variable attributes="__local__ private" citdl="p_oElement.tagName.toUpperCase()" line="6916" name="sTag" />
            </scope>
          </scope>
          <scope doc="Removes the Panel element from the DOM and sets all child elements&#xA;to null." ilk="function" line="7079" lineend="7103" name="destroy" signature="destroy()">
            <variable citdl="Dialog" name="this" />
            <variable attributes="__local__ private" citdl="aForms[0]" line="7086" name="oForm" />
            <variable attributes="__local__ private" citdl="this.element.getElementsByTagName()" line="7086" name="aForms" />
          </scope>
          <variable line="7097" name="form" />
          <scope doc="Returns a string representation of the object." ilk="function" line="7110" lineend="7112" name="toString" returns="String" signature="toString()">
            <variable citdl="Dialog" name="this" />
          </scope>
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Dialog&apos;s events" line="5900" name="CustomEvent" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Dialog&apos;s events" line="5900" name="Event" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Dialog&apos;s events" line="5900" name="KeyListener" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the Dialog&apos;s events" line="5900" lineend="5909" name="EVENT_TYPES">
          <variable citdl="String" line="5902" name="BEFORE_SUBMIT" />
          <variable citdl="String" line="5903" name="SUBMIT" />
          <variable citdl="String" line="5904" name="MANUAL_SUBMIT" />
          <variable citdl="String" line="5905" name="ASYNC_SUBMIT" />
          <variable citdl="String" line="5906" name="FORM_SUBMIT" />
          <variable citdl="String" line="5907" name="CANCEL" />
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the Dialog&apos;s configuration properties" line="5918" lineend="5934" name="DEFAULT_CONFIG">
          <variable citdl="Object" line="5920" lineend="5923" name="POST_METHOD">
            <variable citdl="String" line="5921" name="key" />
            <variable citdl="String" line="5922" name="value" />
          </variable>
          <variable citdl="Object" line="5925" lineend="5928" name="BUTTONS">
            <variable citdl="String" line="5926" name="key" />
            <variable citdl="String" line="5927" name="value" />
          </variable>
          <variable citdl="Object" line="5930" lineend="5933" name="HIDEAFTERSUBMIT">
            <variable citdl="String" line="5931" name="key" />
            <variable citdl="Boolean" line="5932" name="value" />
          </variable>
        </variable>
        <scope attributes="__local__ private" ilk="function" line="5945" lineend="5971" name="removeButtonEventHandlers" signature="removeButtonEventHandlers()">
          <variable attributes="__local__ private" citdl="this._aButtons" line="5950" name="aButtons" />
          <variable attributes="__local__ private" citdl="aButtons.length" line="5950" name="nButtons" />
          <variable attributes="__local__ private" citdl="aButtons[i]" line="5950" name="oButton" />
          <variable attributes="__local__ private" citdl="nButtons" line="5950" name="i" />
        </scope>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="5906" lineend="7893" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the MenuItem&apos;s events" line="5963" name="Lang" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the MenuItem&apos;s events" line="5963" name="Dom" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the MenuItem&apos;s events" line="5963" name="Menu" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the MenuItem&apos;s events" line="5963" name="Module" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the MenuItem&apos;s events" line="5963" name="CustomEvent" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the MenuItem&apos;s events" line="5963" lineend="5979" name="EVENT_TYPES">
          <variable citdl="String" line="5965" name="MOUSE_OVER" />
          <variable citdl="String" line="5966" name="MOUSE_OUT" />
          <variable citdl="String" line="5967" name="MOUSE_DOWN" />
          <variable citdl="String" line="5968" name="MOUSE_UP" />
          <variable citdl="String" line="5969" name="CLICK" />
          <variable citdl="String" line="5970" name="KEY_PRESS" />
          <variable citdl="String" line="5971" name="KEY_DOWN" />
          <variable citdl="String" line="5972" name="KEY_UP" />
          <variable citdl="String" line="5973" name="ITEM_ADDED" />
          <variable citdl="String" line="5974" name="ITEM_REMOVED" />
          <variable citdl="String" line="5975" name="FOCUS" />
          <variable citdl="String" line="5976" name="BLUR" />
          <variable citdl="String" line="5977" name="DESTROY" />
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the MenuItem&apos;s events" line="5963" name="MenuItem" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the MenuItem&apos;s events" line="5963" name="m_oMenuItemTemplate" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the MenuItem&apos;s configuration properties" line="5988" lineend="6071" name="DEFAULT_CONFIG">
          <variable citdl="Object" line="5990" lineend="5995" name="TEXT">
            <variable citdl="String" line="5991" name="key" />
            <variable citdl="String" line="5992" name="value" />
            <variable citdl="Lang.isString" line="5993" name="validator" />
            <variable citdl="Boolean" line="5994" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="5997" lineend="6001" name="HELP_TEXT">
            <variable citdl="String" line="5998" name="key" />
            <variable citdl="Array" line="5999" name="supercedes" />
            <variable citdl="Boolean" line="6000" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="6003" lineend="6007" name="URL">
            <variable citdl="String" line="6004" name="key" />
            <variable citdl="String" line="6005" name="value" />
            <variable citdl="Boolean" line="6006" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="6009" lineend="6012" name="TARGET">
            <variable citdl="String" line="6010" name="key" />
            <variable citdl="Boolean" line="6011" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="6014" lineend="6020" name="EMPHASIS">
            <variable citdl="String" line="6015" name="key" />
            <variable citdl="Boolean" line="6016" name="value" />
            <variable citdl="Lang.isBoolean" line="6017" name="validator" />
            <variable citdl="Boolean" line="6018" name="suppressEvent" />
            <variable citdl="Array" line="6019" name="supercedes" />
          </variable>
          <variable citdl="Object" line="6022" lineend="6028" name="STRONG_EMPHASIS">
            <variable citdl="String" line="6023" name="key" />
            <variable citdl="Boolean" line="6024" name="value" />
            <variable citdl="Lang.isBoolean" line="6025" name="validator" />
            <variable citdl="Boolean" line="6026" name="suppressEvent" />
            <variable citdl="Array" line="6027" name="supercedes" />
          </variable>
          <variable citdl="Object" line="6030" lineend="6036" name="CHECKED">
            <variable citdl="String" line="6031" name="key" />
            <variable citdl="Boolean" line="6032" name="value" />
            <variable citdl="Lang.isBoolean" line="6033" name="validator" />
            <variable citdl="Boolean" line="6034" name="suppressEvent" />
            <variable citdl="Array" line="6035" name="supercedes" />
          </variable>
          <variable citdl="Object" line="6038" lineend="6042" name="SUBMENU">
            <variable citdl="String" line="6039" name="key" />
            <variable citdl="Boolean" line="6040" name="suppressEvent" />
            <variable citdl="Array" line="6041" name="supercedes" />
          </variable>
          <variable citdl="Object" line="6044" lineend="6050" name="DISABLED">
            <variable citdl="String" line="6045" name="key" />
            <variable citdl="Boolean" line="6046" name="value" />
            <variable citdl="Lang.isBoolean" line="6047" name="validator" />
            <variable citdl="Boolean" line="6048" name="suppressEvent" />
            <variable citdl="Array" line="6049" name="supercedes" />
          </variable>
          <variable citdl="Object" line="6052" lineend="6057" name="SELECTED">
            <variable citdl="String" line="6053" name="key" />
            <variable citdl="Boolean" line="6054" name="value" />
            <variable citdl="Lang.isBoolean" line="6055" name="validator" />
            <variable citdl="Boolean" line="6056" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="6059" lineend="6062" name="ONCLICK">
            <variable citdl="String" line="6060" name="key" />
            <variable citdl="Boolean" line="6061" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="6064" lineend="6069" name="CLASS_NAME">
            <variable citdl="String" line="6065" name="key" />
            <variable line="6066" name="value" />
            <variable citdl="Lang.isString" line="6067" name="validator" />
            <variable citdl="Boolean" line="6068" name="suppressEvent" />
          </variable>
        </variable>
      </scope>
      <scope attributes="__local__ private" doc="&lt;p&gt;The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor&apos;s toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.&lt;/p&gt;" ilk="function" line="6326" lineend="7924" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.lang" line="6330" name="Lang" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Event" line="6330" name="Event" />
        <variable attributes="__local__ private" citdl="YAHOO.widget.Toolbar" line="6330" name="Toolbar" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="6330" name="Dom" />
        <scope attributes="__local__ private" doc="PRIVATE: Makes a useable classname from dynamic data, by dropping it to lowercase and replacing spaces with -&apos;s." ilk="function" line="6352" lineend="6354" name="_cleanClassName" returns="String" signature="_cleanClassName(str)">
          <variable citdl="String" doc="The classname to clean up" ilk="argument" name="str" />
        </scope>
      </scope>
      <variable citdl="document.createElement()" line="6577" name="m_oMenuItemTemplate" />
      <scope attributes="__local__ private" ilk="function" line="7118" lineend="7435" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private constant" citdl="Object" classrefs="YAHOO.widget.Dialog" doc="PRIVATE CONSTANT: Constant representing the SimpleDialog&apos;s configuration properties" line="7153" lineend="7435" name="SimpleDialog">
          <scope doc="Initializes the class&apos;s configurable properties which can be changed&#xA;using the SimpleDialog&apos;s Config object (cfg)." ilk="function" line="7251" lineend="7282" name="initDefaultConfig" signature="initDefaultConfig()">
            <variable citdl="SimpleDialog" name="this" />
          </scope>
          <scope doc="The SimpleDialog initialization method, which is executed for&#xA;SimpleDialog and all of its subclasses. This method is automatically&#xA;called by the constructor, and  sets up all DOM references for&#xA;pre-existing markup, and creates required markup if it is not&#xA;already present." ilk="function" line="7299" lineend="7326" name="init" signature="init(el, userConfig)">
            <variable citdl="HTMLElement" doc="The element representing the SimpleDialog" ilk="argument" name="el" />
            <variable citdl="Object" doc="The configuration object literal&#xA;containing the configuration that should be set for this&#xA;SimpleDialog. See configuration documentation for more details." ilk="argument" name="userConfig" />
            <variable citdl="SimpleDialog" name="this" />
          </scope>
          <scope doc="Prepares the SimpleDialog&apos;s internal FORM object, creating one if one&#xA;is not currently present, and adding the value hidden field." ilk="function" line="7333" lineend="7340" name="registerForm" signature="registerForm()">
            <variable citdl="SimpleDialog" name="this" />
          </scope>
          <scope doc="Fired when the &quot;icon&quot; property is set." ilk="function" line="7353" lineend="7403" name="configIcon" signature="configIcon(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="SimpleDialog" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="7359" name="sIcon" />
            <variable attributes="__local__ private" citdl="this.body" line="7359" name="oBody" />
            <variable attributes="__local__ private" citdl="oIcon.parentNode" line="7359" name="oIconParent" />
            <variable attributes="__local__ private" citdl="SimpleDialog.ICON_CSS_CLASSNAME" line="7359" name="sCSSClass" />
            <variable attributes="__local__ private" citdl="Dom.getElementsByClassName()" line="7359" name="oIcon" />
          </scope>
          <scope doc="Fired when the &quot;text&quot; property is set." ilk="function" line="7414" lineend="7420" name="configText" signature="configText(type, args, obj)">
            <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
            <variable citdl="Array" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
            <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            <variable citdl="SimpleDialog" name="this" />
            <variable attributes="__local__ private" citdl="args[0]" line="7415" name="text" />
          </scope>
          <scope doc="Returns a string representation of the object." ilk="function" line="7429" lineend="7431" name="toString" returns="String" signature="toString()">
            <variable citdl="SimpleDialog" name="this" />
          </scope>
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the SimpleDialog&apos;s configuration properties" line="7153" lineend="7168" name="DEFAULT_CONFIG">
          <variable citdl="Object" line="7155" lineend="7159" name="ICON">
            <variable citdl="String" line="7156" name="key" />
            <variable citdl="String" line="7157" name="value" />
            <variable citdl="Boolean" line="7158" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="7161" lineend="7166" name="TEXT">
            <variable citdl="String" line="7162" name="key" />
            <variable citdl="String" line="7163" name="value" />
            <variable citdl="Boolean" line="7164" name="suppressEvent" />
            <variable citdl="Array" line="7165" name="supercedes" />
          </variable>
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the SimpleDialog&apos;s configuration properties" line="7153" name="Dom" />
      </scope>
      <variable citdl="document.createElement()" line="7330" name="body" />
      <variable citdl="document.createElement()" line="7344" name="form" />
      <scope attributes="__local__ private" ilk="function" line="7437" lineend="7827" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="YAHOO.util.CustomEvent" line="7509" name="CustomEvent" />
        <variable attributes="__local__ private" citdl="YAHOO.util.Easing" line="7509" name="Easing" />
        <variable attributes="__local__ private" citdl="YAHOO.widget.ContainerEffect" line="7509" name="ContainerEffect">
          <scope attributes="__static__" doc="STATIC: A pre-configured ContainerEffect instance that can be used for fading&#xA;an overlay in and out." ilk="function" line="7521" lineend="7601" name="FADE" returns="YAHOO.widget.ContainerEffect" signature="FADE(overlay, dur)">
            <variable citdl="YAHOO.widget.Overlay" doc="The Overlay object to animate" ilk="argument" name="overlay" />
            <variable citdl="Number" doc="The duration of the animation" ilk="argument" name="dur" />
            <variable citdl="ContainerEffect" name="this" />
            <variable attributes="__local__ private" citdl="Object" line="7523" lineend="7527" name="fin">
              <variable citdl="Object" line="7524" lineend="7524" name="attributes">
                <variable citdl="Object" line="7524" lineend="7524" name="opacity">
                  <variable citdl="Number" line="7524" name="to" />
                  <variable citdl="Number" line="7524" name="from" />
                </variable>
              </variable>
              <variable citdl="dur" line="7525" name="duration" />
              <variable citdl="Easing.easeIn" line="7526" name="method" />
            </variable>
            <variable attributes="__local__ private" citdl="Object" line="7529" lineend="7533" name="fout">
              <variable citdl="Object" line="7530" lineend="7530" name="attributes">
                <variable citdl="Object" line="7530" lineend="7530" name="opacity">
                  <variable citdl="Number" line="7530" name="to" />
                </variable>
              </variable>
              <variable citdl="dur" line="7531" name="duration" />
              <variable citdl="Easing.easeOut" line="7532" name="method" />
            </variable>
            <variable attributes="__local__ private" citdl="ContainerEffect" line="7535" name="fade">
              <scope ilk="function" line="7537" lineend="7545" name="handleUnderlayStart" signature="handleUnderlayStart()">
                <variable citdl="fade" name="this" />
                <variable attributes="__local__ private" citdl="this.overlay.underlay" line="7538" name="underlay" />
                <variable attributes="__local__ private" line="7540" name="hasFilters" />
              </scope>
              <scope ilk="function" line="7547" lineend="7552" name="handleUnderlayComplete" signature="handleUnderlayComplete()">
                <variable citdl="fade" name="this" />
                <variable attributes="__local__ private" citdl="this.overlay.underlay" line="7548" name="underlay" />
              </scope>
              <scope ilk="function" line="7554" lineend="7565" name="handleStartAnimateIn" signature="handleStartAnimateIn(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="fade" name="this" />
              </scope>
              <scope ilk="function" line="7567" lineend="7578" name="handleCompleteAnimateIn" signature="handleCompleteAnimateIn(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="fade" name="this" />
              </scope>
              <scope ilk="function" line="7580" lineend="7583" name="handleStartAnimateOut" signature="handleStartAnimateOut(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="fade" name="this" />
              </scope>
              <scope ilk="function" line="7585" lineend="7597" name="handleCompleteAnimateOut" signature="handleCompleteAnimateOut(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="fade" name="this" />
              </scope>
            </variable>
          </scope>
          <scope attributes="__static__" doc="STATIC: A pre-configured ContainerEffect instance that can be used for sliding an&#xA;overlay in and out." ilk="function" line="7613" lineend="7694" name="SLIDE" returns="YAHOO.widget.ContainerEffect" signature="SLIDE(overlay, dur)">
            <variable citdl="YAHOO.widget.Overlay" doc="The Overlay object to animate" ilk="argument" name="overlay" />
            <variable citdl="Number" doc="The duration of the animation" ilk="argument" name="dur" />
            <variable citdl="ContainerEffect" name="this" />
            <variable attributes="__local__ private" citdl="overlay.cfg.getProperty()" line="7633" name="y" />
            <variable attributes="__local__ private" citdl="overlay.cfg.getProperty()" line="7633" name="x" />
            <variable attributes="__local__ private" citdl="ContainerEffect" line="7633" name="slide">
              <scope ilk="function" line="7636" lineend="7639" name="handleStartAnimateIn" signature="handleStartAnimateIn(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="slide" name="this" />
              </scope>
              <scope ilk="function" line="7641" lineend="7656" name="handleTweenAnimateIn" signature="handleTweenAnimateIn(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="slide" name="this" />
                <variable attributes="__local__ private" citdl="pos[1]" line="7645" name="currentY" />
                <variable attributes="__local__ private" citdl="Dom.getXY()" line="7645" name="pos" />
                <variable attributes="__local__ private" citdl="pos[0]" line="7645" name="currentX" />
              </scope>
              <scope ilk="function" line="7658" lineend="7664" name="handleCompleteAnimateIn" signature="handleCompleteAnimateIn(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="slide" name="this" />
              </scope>
              <scope ilk="function" line="7666" lineend="7673" name="handleStartAnimateOut" signature="handleStartAnimateOut(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="slide" name="this" />
                <variable attributes="__local__ private" citdl="pos[1]" line="7670" name="yso" />
                <variable attributes="__local__ private" citdl="Dom.getXY()" line="7670" name="pos" />
                <variable attributes="__local__ private" citdl="Dom.getViewportWidth()" line="7670" name="vw" />
              </scope>
              <scope ilk="function" line="7675" lineend="7683" name="handleTweenAnimateOut" signature="handleTweenAnimateOut(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="slide" name="this" />
                <variable attributes="__local__ private" citdl="pos[0]" line="7679" name="xto" />
                <variable attributes="__local__ private" citdl="pos[1]" line="7679" name="yto" />
                <variable attributes="__local__ private" citdl="Dom.getXY()" line="7679" name="pos" />
              </scope>
              <scope ilk="function" line="7685" lineend="7690" name="handleCompleteAnimateOut" signature="handleCompleteAnimateOut(type, args, obj)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="obj" />
                <variable citdl="slide" name="this" />
              </scope>
            </variable>
            <variable attributes="__local__ private" citdl="overlay.element.offsetWidth" line="7633" name="offsetWidth" />
            <variable attributes="__local__ private" citdl="Dom.getClientWidth()" line="7633" name="clientWidth" />
          </scope>
        </variable>
        <variable attributes="__local__ private" citdl="YAHOO.util.Dom" line="7509" name="Dom" />
      </scope>
      <variable citdl="String" line="7461" name="align" />
      <variable line="7470" name="xDiff" />
      <variable line="7471" name="yDiff" />
      <variable citdl="YAHOO.util.Anim" line="7518" name="anim" />
      <scope attributes="__local__ private" ilk="function" line="7894" lineend="8388" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the ContextMenu&apos;s events" line="7941" lineend="7947" name="EVENT_TYPES">
          <variable citdl="String" line="7943" name="TRIGGER_CONTEXT_MENU" />
          <variable line="7944" name="CONTEXT_MENU" />
          <variable citdl="String" line="7945" name="CLICK" />
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the name of the ContextMenu&apos;s events" line="7941" name="Event" />
        <variable attributes="__local__ private constant" citdl="Object" classrefs="YAHOO.widget.Menu" doc="PRIVATE CONSTANT: Constant representing the name of the ContextMenu&apos;s events" line="7941" lineend="8388" name="ContextMenu">
          <variable attributes="private" citdl="String" doc="PRIVATE: Object reference to the current value of the &quot;trigger&quot;&#xA;configuration property." line="8001" name="_oTrigger" />
          <variable attributes="private" citdl="Boolean" doc="PRIVATE: Boolean indicating if the display of the context menu should&#xA;be cancelled." line="8012" name="_bCancelled" />
          <variable citdl="HTMLElement" doc="Object reference for the HTML element that was the target of the&#xA;&quot;contextmenu&quot; DOM event (&quot;mousedown&quot; for Opera) that triggered the display of&#xA;the context menu." line="8028" name="contextEventTarget" />
          <variable citdl="this.createEvent()" doc="Custom Event wrapper for the &quot;contextmenu&quot; DOM event&#xA;(&quot;mousedown&quot; for Opera) fired by the element(s) that trigger the display of&#xA;the context menu." line="8041" name="triggerContextMenuEvent" />
          <scope doc="The ContextMenu class&apos;s initialization method. This method is&#xA;automatically called by the constructor, and sets up all DOM references for&#xA;pre-existing markup, and creates required markup if it is not already present." ilk="function" line="8066" lineend="8086" name="init" signature="init(p_oElement, p_oConfig)">
            <variable citdl="String" doc="String specifying the id attribute of the&#xA;&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for&#xA;the context menu." ilk="argument" name="p_oElement" />
            <variable citdl="Object" doc="Optional. Object literal specifying the&#xA;configuration for the context menu. See configuration class documentation&#xA;for more details." ilk="argument" name="p_oConfig" />
            <variable citdl="ContextMenu" name="this" />
          </scope>
          <scope doc="Initializes the custom events for the context menu." ilk="function" line="8093" lineend="8104" name="initEvents" signature="initEvents()">
            <variable citdl="ContextMenu" name="this" />
          </scope>
          <variable citdl="YAHOO.util.CustomEvent.LIST" line="8102" name="signature" />
          <scope doc="Cancels the display of the context menu." ilk="function" line="8111" lineend="8115" name="cancel" signature="cancel()">
            <variable citdl="ContextMenu" name="this" />
          </scope>
          <scope attributes="private" doc="PRIVATE: Removes all of the DOM event handlers from the HTML element(s)&#xA;whose &quot;context menu&quot; event (&quot;click&quot; for Opera) trigger the display of&#xA;the context menu." ilk="function" line="8129" lineend="8150" name="_removeEventHandlers" signature="_removeEventHandlers()">
            <variable citdl="ContextMenu" name="this" />
            <variable attributes="__local__ private" citdl="this._oTrigger" line="8131" name="oTrigger" />
          </scope>
          <scope attributes="private" doc="PRIVATE: &quot;click&quot; event handler for the HTML element(s) identified as the&#xA;&quot;trigger&quot; for the context menu.  Used to cancel default behaviors in Opera." ilk="function" line="8168" lineend="8176" name="_onTriggerClick" signature="_onTriggerClick(p_oEvent, p_oMenu)">
            <variable citdl="Event" doc="Object representing the DOM event object passed back&#xA;by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            <variable citdl="YAHOO.widget.ContextMenu" doc="Object representing the context&#xA;menu that is handling the event." ilk="argument" name="p_oMenu" />
            <variable citdl="ContextMenu" name="this" />
          </scope>
          <scope attributes="private" doc="PRIVATE: &quot;contextmenu&quot; event handler (&quot;mousedown&quot; for Opera) for the HTML&#xA;element(s) that trigger the display of the context menu." ilk="function" line="8189" lineend="8246" name="_onTriggerContextMenu" signature="_onTriggerContextMenu(p_oEvent, p_oMenu)">
            <variable citdl="Event" doc="Object representing the DOM event object passed back&#xA;by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            <variable citdl="YAHOO.widget.ContextMenu" doc="Object representing the context&#xA;menu that is handling the event." ilk="argument" name="p_oMenu" />
            <variable citdl="ContextMenu" name="this" />
            <variable attributes="__local__ private" citdl="Event.getXY()" line="8198" name="aXY" />
          </scope>
          <scope doc="Returns a string representing the context menu." ilk="function" line="8258" lineend="8271" name="toString" returns="String" signature="toString()">
            <variable citdl="ContextMenu" name="this" />
            <variable attributes="__local__ private" citdl="String" line="8261" name="sReturnVal" />
            <variable attributes="__local__ private" citdl="this.id" line="8261" name="sId" />
          </scope>
          <scope doc="Initializes the class&apos;s configurable properties which can be&#xA;changed using the context menu&apos;s Config object (&quot;cfg&quot;)." ilk="function" line="8279" lineend="8300" name="initDefaultConfig" signature="initDefaultConfig()">
            <variable citdl="ContextMenu" name="this" />
          </scope>
          <scope doc="Removes the context menu&apos;s &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element&#xA;(and accompanying child nodes) from the document." ilk="function" line="8308" lineend="8319" name="destroy" signature="destroy()">
            <variable citdl="ContextMenu" name="this" />
          </scope>
          <scope doc="Event handler for when the value of the &quot;trigger&quot; configuration&#xA;property changes." ilk="function" line="8336" lineend="8384" name="configTrigger" signature="configTrigger(p_sType, p_aArgs, p_oMenu)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="YAHOO.widget.ContextMenu" doc="Object representing the context&#xA;menu that fired the event." ilk="argument" name="p_oMenu" />
            <variable citdl="ContextMenu" name="this" />
            <variable attributes="__local__ private" citdl="p_aArgs[0]" line="8338" name="oTrigger" />
          </scope>
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the ContextMenu&apos;s configuration properties" line="7957" lineend="7964" name="DEFAULT_CONFIG">
          <variable citdl="Object" line="7959" lineend="7962" name="TRIGGER">
            <variable citdl="String" line="7960" name="key" />
            <variable citdl="Boolean" line="7961" name="suppressEvent" />
          </variable>
        </variable>
        <scope attributes="__local__ private" doc="PRIVATE: &quot;beforeShow&quot; event handler used to position the contextmenu." ilk="function" line="7976" lineend="7982" name="position" signature="position(p_sType, p_aArgs, p_aPos)">
          <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
          <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
          <variable citdl="Array" doc="Array representing the xy position for the context menu." ilk="argument" name="p_aPos" />
        </scope>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="8416" lineend="8886" name="(anonymous)" signature="(anonymous)()">
        <scope attributes="__local__ private" doc="PRIVATE: Checks to make sure that the value of the &quot;position&quot; property&#xA;is one of the supported strings. Returns true if the position is supported." ilk="function" line="8458" lineend="8466" name="checkPosition" returns="Boolean" signature="checkPosition(p_sPosition)">
          <variable citdl="Object" doc="String specifying the position of the menu." ilk="argument" name="p_sPosition" />
        </scope>
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the MenuBar&apos;s configuration properties" line="8479" name="Event" />
        <variable attributes="__local__ private constant" citdl="Object" doc="PRIVATE CONSTANT: Constant representing the MenuBar&apos;s configuration properties" line="8479" lineend="8501" name="DEFAULT_CONFIG">
          <variable citdl="Object" line="8481" lineend="8486" name="POSITION">
            <variable citdl="String" line="8482" name="key" />
            <variable citdl="String" line="8483" name="value" />
            <variable citdl="checkPosition" line="8484" name="validator" />
            <variable citdl="Array" line="8485" name="supercedes" />
          </variable>
          <variable citdl="Object" line="8488" lineend="8492" name="SUBMENU_ALIGNMENT">
            <variable citdl="String" line="8489" name="key" />
            <variable citdl="Array" line="8490" name="value" />
            <variable citdl="Boolean" line="8491" name="suppressEvent" />
          </variable>
          <variable citdl="Object" line="8494" lineend="8499" name="AUTO_SUBMENU_DISPLAY">
            <variable citdl="String" line="8495" name="key" />
            <variable citdl="Boolean" line="8496" name="value" />
            <variable citdl="YAHOO.lang.isBoolean" line="8497" name="validator" />
            <variable citdl="Boolean" line="8498" name="suppressEvent" />
          </variable>
        </variable>
        <variable attributes="__local__ private constant" citdl="Object" classrefs="YAHOO.widget.Menu" doc="PRIVATE CONSTANT: Constant representing the MenuBar&apos;s configuration properties" line="8479" lineend="8886" name="MenuBar">
          <scope doc="The MenuBar class&apos;s initialization method. This method is&#xA;automatically called by the constructor, and sets up all DOM references for&#xA;pre-existing markup, and creates required markup if it is not already present." ilk="function" line="8528" lineend="8553" name="init" signature="init(p_oElement, p_oConfig)">
            <variable citdl="String" doc="String specifying the id attribute of the&#xA;&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for the&#xA;menu bar." ilk="argument" name="p_oElement" />
            <variable citdl="Object" doc="Optional. Object literal specifying the&#xA;configuration for the menu bar. See configuration class documentation for&#xA;more details." ilk="argument" name="p_oConfig" />
            <variable citdl="MenuBar" name="this" />
          </scope>
          <variable citdl="YAHOO.widget.MenuBarItem" line="8532" name="ITEM_TYPE" />
          <variable attributes="constant" citdl="String" doc="CONSTANT: String representing the CSS class(es) to be applied to the menu&#xA;bar&apos;s &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element." line="8568" name="CSS_CLASS_NAME" />
          <scope attributes="private" doc="PRIVATE: &quot;keydown&quot; Custom Event handler for the menu bar." ilk="function" line="8585" lineend="8703" name="_onKeyDown" signature="_onKeyDown(p_sType, p_aArgs, p_oMenuBar)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="YAHOO.widget.MenuBar" doc="Object representing the menu bar&#xA;that fired the event." ilk="argument" name="p_oMenuBar" />
            <variable citdl="MenuBar" name="this" />
            <variable attributes="__local__ private" line="8591" name="oNextItem" />
            <variable attributes="__local__ private" citdl="p_aArgs[0]" line="8591" name="oEvent" />
            <variable attributes="__local__ private" citdl="oItem.cfg" line="8591" name="oItemCfg" />
            <variable attributes="__local__ private" citdl="oNextItem.cfg.getProperty()" line="8591" name="oSubmenu" />
            <variable attributes="__local__ private" citdl="p_aArgs[1]" line="8591" name="oItem" />
          </scope>
          <scope doc="&quot;click&quot; event handler for the menu bar." ilk="function" line="8716" lineend="8770" name="_onClick" signature="_onClick(p_sType, p_aArgs, p_oMenuBar)">
            <variable citdl="String" doc="String representing the name of the event that&#xA;was fired." ilk="argument" name="p_sType" />
            <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            <variable citdl="YAHOO.widget.MenuBar" doc="Object representing the menu bar&#xA;that fired the event." ilk="argument" name="p_oMenuBar" />
            <variable citdl="MenuBar" name="this" />
            <variable attributes="__local__ private" citdl="this.activeItem" line="8725" name="oActiveItem" />
            <variable attributes="__local__ private" citdl="p_aArgs[1]" line="8725" name="oItem" />
            <variable attributes="__local__ private" citdl="this.cfg" line="8725" name="oConfig" />
            <variable attributes="__local__ private" citdl="Event.getTarget()" line="8725" name="oTarget" />
            <variable attributes="__local__ private" citdl="p_aArgs[0]" line="8725" name="oEvent" />
            <variable attributes="__local__ private" citdl="oItem.cfg.getProperty()" line="8725" name="oSubmenu" />
          </scope>
          <scope doc="Returns a string representing the menu bar." ilk="function" line="8782" lineend="8795" name="toString" returns="String" signature="toString()">
            <variable citdl="MenuBar" name="this" />
            <variable attributes="__local__ private" citdl="String" line="8785" name="sReturnVal" />
            <variable attributes="__local__ private" citdl="this.id" line="8785" name="sId" />
          </scope>
          <scope doc="Initializes the class&apos;s configurable properties which can be&#xA;changed using the menu bar&apos;s Config object (&quot;cfg&quot;)." ilk="function" line="8803" lineend="8882" name="initDefaultConfig" signature="initDefaultConfig()">
            <variable citdl="MenuBar" name="this" />
            <variable attributes="__local__ private" citdl="this.cfg" line="8807" name="oConfig" />
          </scope>
        </variable>
      </scope>
    </scope>
  </file>
</codeintel>
