/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Komodo code.
 * 
 * The Initial Developer of the Original Code is ActiveState Software Inc.
 * Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 * ActiveState Software Inc. All Rights Reserved.
 * 
 * Contributor(s):
 *   ActiveState Software Inc
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * 
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "ISciMoz.idl"

interface ISciMoz;

[scriptable, uuid(D116A318-F894-42C5-A7D5-1F37171832AC)]
interface koIScintillaSchemeService : nsISupports {

    void getSchemeNames([array, size_is(count)] out wstring schemes,
                        out unsigned long count);

    boolean isSchemeWriteable(in wstring scheme);

    void copySchemeMakeCurrent(in ISciMoz scintilla,
                               in wstring newscheme);

    void deleteScheme(in wstring scheme);

    // This will setup an observer
    void registerScintillaPrefApplier(in koIScintillaPrefApplier prefApplier,
                                      in string group);
    void applyScheme(in wstring scheme,
                     in ISciMoz scintilla,
                     in string language,
                     in string encoding,
                     in boolean useFixed):

    void setCurrentScheme(in wstring scheme, in string group);

    void updateScheme(in wstring scheme, in string group);


    void getCommonStyles([array, size_is(count)] out string styleLabels,
                         out unsigned long count);
    void getLanguageStyles(in string language,
                           [array, size_is(count)] out string styleLabels,
                           out unsigned long count);
    
    void setFore(in string language, /* null means common styles */
                 in string styleId,
                 in long color);
    void setBack(in string language, /* null means common styles */
                 in string styleId,
                 in long color);
    void setBold(in string language, /* null means common styles */
                 in string styleId,
                 in boolean bold);
    void setItalic(in string language, /* null means common styles */
                   in string styleId,
                   in boolean italic);
    void setFont(in string language, /* null means common styles */
                 in string styleId, /* null means default */
                 in string encoding,
                 in boolean fixedWidth,
                 in string font);
    void setSize(in string language, /* null means common styles */
                 in string styleId, /* null means default */
                 in string encoding,
                 in boolean fixedWidth,
                 in long size);

    long getFore(in string language, /* null means common styles */
                 in string styleId);
    long getBack(in string language, /* null means common styles */
                 in string styleId);
    boolean getBold(in string language, /* null means common styles */
                 in string styleId);
    boolean getItalic(in string language, /* null means common styles */
                      in string styleId);
    string getFont(in string language, /* null means common styles */
                   in string styleId, /* null means default */
                   in string encoding,
                 in boolean fixedWidth);
    long getSize(in string language, /* null means common styles */
                 in string styleId, /* null means default */
                 in string encoding,
                 in boolean fixedWidth);

    void resetStyle(in string language, /* null means common styles */
                    in string styleId);

};

