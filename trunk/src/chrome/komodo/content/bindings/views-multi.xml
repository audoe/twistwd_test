<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
 Version: MPL 1.1/GPL 2.0/LGPL 2.1
 
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in
 compliance with the License. You may obtain a copy of the License at
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS"
 basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 License for the specific language governing rights and limitations
 under the License.
 
 The Original Code is Komodo code.
 
 The Initial Developer of the Original Code is ActiveState Software Inc.
 Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 ActiveState Software Inc. All Rights Reserved.
 
 Contributor(s):
   ActiveState Software Inc
 
 Alternatively, the contents of this file may be used under the terms of
 either the GNU General Public License Version 2 or later (the "GPL"), or
 the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 in which case the provisions of the GPL or the LGPL are applicable instead
 of those above. If you wish to allow use of your version of this file only
 under the terms of either the GPL or the LGPL, and not to allow others to
 use your version of this file under the terms of the MPL, indicate your
 decision by deleting the provisions above and replace them with the notice
 and other provisions required by the GPL or the LGPL. If you do not delete
 the provisions above, a recipient may use your version of this file under
 the terms of any one of the MPL, the GPL or the LGPL.
 
 ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings PUBLIC "-//MOZILLA//DTD XBL V1.0//EN" "http://www.mozilla.org/xbl" [
  <!ENTITY % bindingsDTD SYSTEM "chrome://komodo/locale/bindings.dtd">
  %bindingsDTD;
]>

<bindings
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xbl="http://www.mozilla.org/xbl"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<binding id="view-multiview"
    extends="chrome://komodo/content/bindings/views.xml#view-base">
    <content>
        <xul:box orient="vertical" flex="1"
            xbl:inherits="orient">
            <xul:view id="view-1"
                      lastfocused="true"
                      collapsed="true"
                      type="tabbed"
                      class="thin-inset-border"
                      onclick="document.getBindingParent(this).lastFocused=this;"
                      width="0"
                      height="0"
                      flex="1"/>
            <xul:splitter id="multiview-splitter"
                      collapsed="true"
                      collapse="after"
                      class="multiview_splitter"
                      orient="vertical"
                      xbl:inherits="orient"
                      tooltiptext="&doubleClickToChangeOrientation.tooltiptext;"
                      ondblclick="document.getBindingParent(this).changeOrient();"/>
            <xul:view id="view-2"
                      lastfocused="false"
                      collapsed="true"
                      type="tabbed"
                      class="thin-inset-border"
                      onclick="document.getBindingParent(this).lastFocused=this;"
                      width="0"
                      height="0"
                      flex="1"/>
        </xul:box>
    </content>
    <implementation name="viewmultiview" implements="nsIObserver, koIViewList">
        <field name="_timeout">null</field>
        <field name="_lastFocused">null</field>
        <property name="lastFocused">
            <getter>
            <![CDATA[
            if (!this._lastFocused) {
                var nodes = document.getAnonymousNodes(this);
                this._lastFocused = nodes[0].firstChild;
            }
            return this._lastFocused;
            ]]>
            </getter>
            <setter>
            <![CDATA[
            if (this._lastFocused != val) {
                this._lastFocused = val;
                val.setAttribute('lastfocused','true');
                this.otherView.setAttribute('lastfocused','false');
                var currentView = null;
                try {
                    // This accessor will trigger a 2147500037 exception
                    // if there is no view, which can happen at startup.
                    currentView = val.currentView;
                } catch(ex) {
                    return;
                }
                // We need to move focus off of the previously selected view;
                // if we can focus the tab, use that, otherwise the root element.
                // See bug 91945.  The current_view_changed handler might move
                // the focus around, so do this before firing the event.
                document.documentElement.focus();
                if (val.tabbox && val.tabbox.selectedTab) {
                    val.tabbox.selectedTab.focus();
                }
                if (currentView) {
                    try {
                        xtk.domutils.fireEvent(currentView, 'current_view_changed');
                    } catch(ex) {
                        this.log.exception(ex);
                        // dump("Can't fire an event at val.currentView ("
                        //     + currentView + "), ex=" + ex + "\n");
                    }
                }
            }
            ]]>
            </setter>
        </property>

        <property name="currentView"
            onset="throw Components.results.NS_ERROR_NOT_IMPLEMENTED;"
            onget="return this.lastFocused;"/>

        <property name="otherView"
            onset="throw Components.results.NS_ERROR_NOT_IMPLEMENTED;">
            <getter>
            <![CDATA[
                var nodes = document.getAnonymousNodes(this);
                if (this.currentView == nodes[0].firstChild) {
                    return nodes[0].lastChild;
                }
                return nodes[0].firstChild;
            ]]>
            </getter>
        </property>

        <method name="init">
        <body>
        <![CDATA[
            var views = this.getViews();
            for (var i=0; i < views.length; ++i) {
                views[i].init();
            }
            this.viewhistory = new ko.views.ViewHistory();
        ]]>
        </body>
        </method>

        <method name="close">
        <body>
        <![CDATA[
            // XXX this is here to prevent any closure of this view sending
            // a notification of 'view_closed'.  views.js decrements the number
            // of views based on that, and close_all calls the close method on
            // all views, regardless of type.
            return true;
        ]]>
        </body>
        </method>

        <method name="changeOrient">
        <body>
        <![CDATA[
            if (this.getAttribute('orient')!='vertical') {
                this.setAttribute('orient','vertical');
            } else {
                this.setAttribute('orient','horizontal');
            }
        ]]>
        </body>
        </method>

        <method name="getViewListForView">
        <parameter name="view"/>
        <body>
        <![CDATA[
            var nodes = document.getAnonymousNodes(this);
            var first = nodes[0].firstChild;
            var second = nodes[0].lastChild;
            try {
                if (first.getViewIndex(view) >= 0) return first;
            } catch(e) {}
            try {
                if (second.getViewIndex(view) >= 0) return second;
            } catch(e) {}
            return null;
        ]]>
        </body>
        </method>

        <method name="getAltViewListForView">
        <parameter name="view"/>
        <body>
        <![CDATA[
            var nodes = document.getAnonymousNodes(this);
            var first = nodes[0].firstChild;
            var second = nodes[0].lastChild;
            try {
                if (first.getViewIndex(view) >= 0) return second;
            } catch(e) {}
            try {
                if (second.getViewIndex(view) >= 0) return first;
            } catch(e) {}
            return null;
        ]]>
        </body>
        </method>

        <method name="createNewViewContainer">
        <parameter name="index"/> <!-- optional index at which to insert view -->
        <body>
        <![CDATA[
            return this.currentView.createNewViewContainer(index);
        ]]>
        </body>
        </method>

        <!--koIView findViewForDocument(in koIDocument document);-->
        <method name="findViewForDocument">
        <parameter name="doc"/>
        <body>
        <![CDATA[
            var viewlists = this.getViews();
            var viewbox,view;
            for (var i = 0; i < viewlists.length; i++) {
                viewbox = viewlists[i];
                view = viewbox.findViewForDocument(doc);
                if (view) return view;
            }
            return null;
        ]]>
        </body>
        </method>

        <method name="findViewsForDocument">
        <parameter name="doc"/>
        <body>
        <![CDATA[
            var viewlists = this.getViews();
            var list = [];
            var viewbox,view;
            for (var i = 0; i < viewlists.length; i++) {
                viewbox = viewlists[i];
                list = list.concat(viewbox.findViewsForDocument(doc));
            }
            return list;
        ]]>
        </body>
        </method>

        <!-- XXX Usages of this should be replaced by .getViewsByTypeAndURI()
             but I don't have the energy for that right now. If the "TypeAnd"
             part of that is really not wanted a .getViewsByURI() would
             be easy to add. -->
        <method name="findViewsForURI">
        <parameter name="uri"/>
        <body>
        <![CDATA[
            var viewlist = this.getViews();
            var list = [];
            for (var i = 0; i < viewlist.length; i++) {
                list = list.concat(viewlist[i].findViewsForURI(uri));
            }
            return list;
        ]]>
        </body>
        </method>

        <method name="getViewIndex">
        <parameter name="view"/>
        <body>
        <![CDATA[
            var views = this.getViews(true);
            for (var i = 0; i < views.length; i++) {
                if (views[i] == view) return i;
            }
            throw Components.results.NS_ERROR_FAILURE;
        ]]>
        </body>
        </method>

        <method name="getCurrentViewIndex">
        <body>
        <![CDATA[
            return this.currentView.getCurrentViewIndex();
        ]]>
        </body>
        </method>

        <method name="setCurrentViewIndex">
        <parameter name="index"/>  <!-- 0-based view index -->
        <body>
        <![CDATA[
            return this.currentView.setCurrentViewIndex(index);
        ]]>
        </body>
        </method>

        <!--void makeNextViewCurrent();-->
        <method name="makeNextViewCurrent">
        <body>
        <![CDATA[
            this.currentView.makeNextViewCurrent();
        ]]>
        </body>
        </method>

        <!--void makePreviousViewCurrent();-->
        <method name="makePreviousViewCurrent">
        <body>
        <![CDATA[
            this.currentView.makePreviousViewCurrent();
        ]]>
        </body>
        </method>

        <method name="newView">
        <parameter name="type"/>
        <parameter name="index"/> <!-- optional index at which to insert view -->
        <body>
        <![CDATA[
            return this.currentView.newView(type, index);
        ]]>
        </body>
        </method>

        <method name="splitView">
        <parameter name="view"/>
        <body>
        <![CDATA[
            this.lastFocused = this.otherView;
            var item = view.item;
            // We save the state of the view
            // so that the new view gets all of the settings of
            // the view being split.
            view.saveState();
            var newview = this.currentView.createViewFromDocument(
                    view.koDoc, view.getAttribute('type'), -1);
        ]]>
        </body>
        </method>

        <method name="canMoveView">
        <parameter name="view"/>
        <body><![CDATA[
            // We used to restrict moving to the other tabbed-view if the
            // document was already split. However, the implementation had
            // problems with multi-window, so we just don't bother anymore.
            return true;
        ]]></body>
        </method>

        <!--Only used in moveView below-->
        <field name="_focusTimeout">null</field>

        <method name="moveView">
        <parameter name="view"/>
        <!-- Optional index at which to insert the new view into the
             target view list. If not given, or -1, it will be appended. -->
        <parameter name="index"/>
        <body>
        <![CDATA[
            if (typeof(index) == 'undefined' || index == null) index = -1;
        
            var doc = view.koDoc;
            var viewType = view.getAttribute('type');
            view.saveState();
            ko.views.manager.batchMode = true; // There are no view changes, so nothing really need to change here.
            try {
                var newViewList = this.getAltViewListForView(view);
                var newview = newViewList.createViewFromDocument(
                                doc, viewType, index);
                
                // rejigger the connections as view.close() will
                // close the preview  [It does not do so anymore. --TM]
                if (view.preview) {
                    newview.preview = view.preview;
                    view.preview = null;
                    newview.preview.sourceView = newview;
                }
                view.close();
                
                this.lastFocused = newViewList;
                
                // XXX doing this in a timeout fixes our focus problems when
                // we move a tab from pane to pane.  This appears to be *slow*.
                // bugs 25577, 25578
                if (this._focusTimeout) {
                    this._focusTimeout.stop();
                    this._focusTimeout.free();
                }
                this._focusTimeout = new ko.objectTimer(newview.parentView,newview.parentView.doSelectView,[newview]);
                this._focusTimeout.startTimeout(0);
            } catch (e) {
                this.log.exception(e);
            }
            ko.views.manager.batchMode = false;
        ]]>
        </body>
        </method>

        <method name="getState">
        <body>
        <![CDATA[
            // The multiview widget needs to persist:
            // -- The views opened in each of its two child tabbedviews
            // -- The history of current views
            // -- Which of the two child tabbedviews is the focused one.
        try {
            var nodes = document.getAnonymousNodes(this);
            var first = nodes[0].firstChild;
            var second = nodes[0].lastChild;
            var firstPref = first.getState();
            var secondPref = second.getState();

            // Shortcut:  If no views are open, persist nothing.
            if (!firstPref && !secondPref) {
                return null; // persist nothing
            }

            var myState = Components.classes['@activestate.com/koPreferenceSet;1'].createInstance();
            var viewPref, i;
            var ordered = Components.classes['@activestate.com/koOrderedPreference;1'].createInstance();
            ordered.id = 'childState';
            if (firstPref) {
                ordered.appendPref(firstPref);
            }
            if (secondPref) {
                ordered.appendPref(secondPref);
            }
            myState.setPref('childState', ordered);
            // Now persist the "recent views" ordering
            var recentViewsPref = this.viewhistory.getState();
            recentViewsPref.id = 'viewHistoryState';
            myState.setPref('viewHistoryState', recentViewsPref);
            myState.setStringPref('orientation', this.getAttribute('orient'));
            return myState;
        } catch (e) {
            this.log.exception(e);
        }
        return null;
        ]]>
        </body>
        </method>

        <method name="setState">
        <parameter name="state"/>
        <body>
        <![CDATA[
        try {
            // We need to restore the views in each of the two child
            // tabbedviews, as well as the viewhistory
            var ordered = state.getPref('childState');
            // because makecurrent now will set lastfocused,
            // we must make sure we only setstate on the currentView
            // otherwise, all files get reopened in the bottom view
            if (state.hasPref('orientation')) {
                this.setAttribute('orient', state.getStringPref('orientation'));
            }
            var nodes = document.getAnonymousNodes(this);
            if (ordered.length > 1) {
                // we're filling in the second view first, but if there
                // are no buffers for the first view, then just use the
                // first view anyway
                var other_prefs = ordered.getPref(0).getPref('view_prefs');
                if (other_prefs.length > 0) {
                    this.lastFocused = nodes[0].lastChild;
                } else {
                    this.lastFocused = nodes[0].firstChild;
                }
                try {
                    this.currentView.setState(ordered.getPref(1));
                } catch (e) {
                    this.log.exception(e);
                }
            }
            if (ordered.length > 0) {
                this.lastFocused = nodes[0].firstChild;
                try {
                    this.currentView.setState(ordered.getPref(0));
                } catch (e) {
                    this.log.exception(e);
                }
            }
            this.viewhistory.setState(state.getPref('viewHistoryState'), this);
        } catch (e) {
            this.log.exception(e);
        }
        ]]>
        </body>
        </method>

    </implementation>
    <handlers>
        <handler event="view_list_closed" phase="capturing" >
        <![CDATA[
        var nodes = document.getAnonymousNodes(this);
        var view = event.originalTarget;
        if (view != this.currentView &&
            view != this.otherView) return;

        nodes[0].childNodes[1].setAttribute('collapsed','true');

        // hack to make parent look right
        if (nodes[0].firstChild.getAttribute('collapsed')=='true' &&
            nodes[0].lastChild.getAttribute('collapsed')=='true') {

            this.parentNode.setAttribute('class','blank-workspace');
        } else {
            // XXX this is lame, but it gets the job done.  Seems we cannot do this
            // directly within an observer that is called from an event, so we
            // have to do a timeout for it to work.  The timeout must also be > 0.
            if (view == this.currentView && this.otherView.currentView) {
                window.setTimeout(function(newView, log) {
                    try {
                        newView.makeCurrent();
                        xtk.domutils.fireEvent(newView, 'current_view_changed');
                    } catch(ex) {
                        log.exception(ex);
                    }
                }, 1, this.otherView.currentView, this.log);
            } else if (view == this.otherView && this.currentView.currentView) {
                // XXX this isn't working, and doing a timeout similar to the above
                // always fails.  This at least gets partial focus back to the
                // correct place, but commands do not get reset correctly until
                // ctrl-tab or a mouse click is done.
                var newView = this.currentView.currentView;
                newView.setFocus();
                window.setTimeout(xtk.domutils.fireEvent,
                                  1, newView, 'current_view_changed');
            }
        }
        ]]>
        </handler>
        
        <handler event="current_view_changed" phase="capturing" >
        <![CDATA[
            var nodes = document.getAnonymousNodes(this);
            var view = event.originalTarget;
            if (this.parentNode.getAttribute('class')=='blank-workspace') {
                this.parentNode.removeAttribute('class');
            }

            var ok = nodes[0].childNodes[1].getAttribute('collapsed')=='true' &&
                     nodes[0].firstChild.getAttribute('collapsed')!='true' &&
                     nodes[0].lastChild.getAttribute('collapsed')!='true';
            // handle the splitters visibility
            if (ok) {
                nodes[0].childNodes[1].removeAttribute('collapsed');
            }
        ]]>
        </handler>
    </handlers>

</binding>

</bindings>

