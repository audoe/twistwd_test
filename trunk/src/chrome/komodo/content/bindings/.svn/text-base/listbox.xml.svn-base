<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
 Version: MPL 1.1/GPL 2.0/LGPL 2.1
 
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in
 compliance with the License. You may obtain a copy of the License at
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS"
 basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 License for the specific language governing rights and limitations
 under the License.
 
 The Original Code is Komodo code.
 
 The Initial Developer of the Original Code is ActiveState Software Inc.
 Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 ActiveState Software Inc. All Rights Reserved.
 
 Contributor(s):
   ActiveState Software Inc
 
 Alternatively, the contents of this file may be used under the terms of
 either the GNU General Public License Version 2 or later (the "GPL"), or
 the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 in which case the provisions of the GPL or the LGPL are applicable instead
 of those above. If you wish to allow use of your version of this file only
 under the terms of either the GPL or the LGPL, and not to allow others to
 use your version of this file under the terms of the MPL, indicate your
 decision by deleting the provisions above and replace them with the notice
 and other provisions required by the GPL or the LGPL. If you do not delete
 the provisions above, a recipient may use your version of this file under
 the terms of any one of the MPL, the GPL or the LGPL.
 
 ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings PUBLIC "-//MOZILLA//DTD XBL V1.0//EN" "http://www.mozilla.org/xbl">

<bindings id="koListboxBindingsNew"
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xbl="http://www.mozilla.org/xbl"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding id="listbox-editable"
            extends="chrome://global/content/bindings/listbox.xml#listbox">
    <handlers>
      <handler event="keypress" key=" " phase="target">
        <![CDATA[
          if (this.currentItem) {
            if (this.currentItem.getAttribute("type") != "checkbox") {
              var v = document.getAnonymousNodes(this.currentItem);
              var isEditable = false;
              for (var i = 0; i < v.length; i++) {
                if (v[i].getAttribute("type") == "editable") {
                  v[i].edit();
                  isEditable = true;
                  break;
                }
              }
              if (!isEditable)
                this.addItemToSelection(this.currentItem);
            } else if (!this.currentItem.disabled)
                this.currentItem.checked = !this.currentItem.checked;
          }
        ]]>
      </handler>
    </handlers>
    </binding>
    
    <binding id="listcell-editable"
            extends="chrome://global/content/bindings/listbox.xml#listcell">
        <content>
            <children>
            <xul:deck id="editdeck" anonid="editdeck" class="listcell-editable-deck"
                flex="1" orient="horizontal" pack="center" align="center">
                <xul:label class="listcell-label"
                        xbl:inherits="value=label,flex=flexlabel,crop,disabled"
                        flex="1" crop="right"/>
                <xul:textbox class="listcell-textbox"
                        xbl:inherits="value=label,flex=flexlabel,crop,disabled"
                        flex="1" crop="right"/>
            </xul:deck>
            </children>
        </content>

        <implementation>
            <field name="_editmode">false</field>
            <field name="_editdeck">null</field>
            <field name="_mustedit">false</field>
            <field name="_listbox">null</field>
            <field name="_listitem">null</field>

            <constructor>
            <![CDATA[
            try {
                var parent = this.parentNode;
                while (parent) {
                    if (parent.localName == "listitem")
                        this._listitem = parent;
                    else if (parent.localName == "listbox") {
                        this._listbox = parent;
                        break;
                    }
                    parent = parent.parentNode;
                }
                this._editdeck = document.getAnonymousElementByAttribute(this, "anonid", "editdeck");
            } catch (e) {
                log.exception(e);
            }
            ]]>
            </constructor>

            <method name="edit">
            <body>
            <![CDATA[
                if (this._editdeck && !this._editmode) {
                    this._editdeck.lastChild.value = this._editdeck.firstChild.value;
                    this._editdeck.selectedIndex = 1;
                    this._editdeck.selectedPanel.focus();
                    if(this.getAttribute('label').length > 0)
                        this._editdeck.selectedPanel.select();
                    this._editmode = true;
                }
                this._mustedit = false;
            ]]>
            </body>
            </method>

            <method name="unedit">
            <body>
            <![CDATA[
                if (this._editmode) {
                    this._editdeck.lastChild.value = this._editdeck.firstChild.value;
                    this._editdeck.selectedIndex = 0;
                    this._editmode = false;
                    this._listbox.focus();
                }
            ]]>
            </body>
            </method>

        </implementation>

        <handlers>

            <handler event="keypress">
            <![CDATA[
                event.cancelBubble = true;
                if (event.keyCode == event.DOM_VK_ENTER ||
                    event.keyCode == event.DOM_VK_RETURN ||
                    event.keyCode == event.DOM_VK_TAB) {
                    this._editdeck.firstChild.value = this._editdeck.lastChild.value;
                    this.setAttribute('label',this._editdeck.firstChild.value);
                    this.parentNode.setAttribute('label',this._editdeck.firstChild.value);
                    this.unedit();
                    event.stopPropagation();
                    event.preventDefault();
                } else if (event.keyCode == event.DOM_VK_ESCAPE) {
                    this.unedit();
                    event.stopPropagation();
                    event.preventDefault();
                }
            ]]>
            </handler>

            <handler event="blur" phase="capturing">
            <![CDATA[
                this.unedit();
            ]]>
            </handler>

            <handler event="mousedown" phase="capturing">
            <![CDATA[
            try {
                if (this.parentNode.getAttribute('selected') == 'true' &&
                    !this._editmode) {
                    this._mustedit = true; // will influence 'click' handler
                }
            } catch (e) {
                log.exception(e);
            }
            ]]>
            </handler>

            <handler event="click" phase="capturing">
            <![CDATA[
            try {
                // create a new mouse event to repace this one,
                // and dispatch it on the listitem.  We must do this
                // because xul:listrow will not accept mouse events
                // from anything other than a listitem.  This makes
                // row selection work properly
                event.cancelBubble = true;

                var ev = document.createEvent("MouseEvents");
                ev.initMouseEvent(event.type, //in DOMString typeArg,
                            true, //in boolean canBubbleArg,
                            true, //in boolean cancelableArg,
                            event.view, //in nsIDOMAbstractView viewArg,
                            event.detail, //in long detailArg,
                            event.screenX, //in long screenXArg,
                            event.screenY, //in long screenYArg,
                            event.clientX, //in long clientXArg,
                            event.clientY, //in long clientYArg,
                            event.ctrlKey, //in boolean ctrlKeyArg,
                            event.altKey, //in boolean altKeyArg,
                            event.shiftKey, //in boolean shiftKeyArg,
                            event.metaKey, //in boolean metaKeyArg,
                            event.button, //in unsigned short buttonArg,
                            null //in nsIDOMEventTarget relatedTargetArg
                            );

                this._listitem.dispatchEvent(ev);
                if (this._mustedit) {
                    this.edit();
                }

            } catch (e) {
                log.exception(e);
            }
            ]]>
            </handler>
            <handler event="dblclick" phase="capturing">
            <![CDATA[
                if (!this._editmode) {
                    this.edit();
                }
            ]]>
            </handler>
        </handlers>
    </binding>

  <binding id="listitem-editable"
           extends="chrome://global/content/bindings/listbox.xml#listitem">
    <content>
      <children>
        <xul:listcell type="editable" allowevents="true"
            xbl:inherits="label,image,crop,disabled,flexlabel"/>
      </children>
    </content>
  </binding>

</bindings>
