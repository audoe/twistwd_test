<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
 Version: MPL 1.1/GPL 2.0/LGPL 2.1
 
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in
 compliance with the License. You may obtain a copy of the License at
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS"
 basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 License for the specific language governing rights and limitations
 under the License.
 
 The Original Code is Komodo code.
 
 The Initial Developer of the Original Code is ActiveState Software Inc.
 Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 ActiveState Software Inc. All Rights Reserved.
 
 Contributor(s):
   ActiveState Software Inc
 
 Alternatively, the contents of this file may be used under the terms of
 either the GNU General Public License Version 2 or later (the "GPL"), or
 the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 in which case the provisions of the GPL or the LGPL are applicable instead
 of those above. If you wish to allow use of your version of this file only
 under the terms of either the GPL or the LGPL, and not to allow others to
 use your version of this file under the terms of the MPL, indicate your
 decision by deleting the provisions above and replace them with the notice
 and other provisions required by the GPL or the LGPL. If you do not delete
 the provisions above, a recipient may use your version of this file under
 the terms of any one of the MPL, the GPL or the LGPL.
 
 ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings PUBLIC "-//MOZILLA//DTD XBL V1.0//EN" "http://www.mozilla.org/xbl" [
  <!ENTITY % bindingsDTD SYSTEM "chrome://komodo/locale/bindings.dtd">
  %bindingsDTD;
]>

<bindings
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xbl="http://www.mozilla.org/xbl"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<binding id="view-browser" display="xul:box"
    extends="chrome://komodo/content/bindings/views.xml#view-base">
    <resources>
        <stylesheet src="chrome://komodo/skin/browser.css"/>
    </resources>
    <content>
        <xul:vbox flex="1">
            <xul:toolbox xbl:inherits="collapsed=collapsenavbar" collapsed="false">
                <xul:toolbar id="nav-bar" grippyhidden="true">
                    <xul:toolbarbutton id="browser-back-button" anonid="browser-back-button" class="browser-toolbar" crop="right" onclick="window.document.getBindingParent(this).back()" tooltiptext="&back.tooltiptext;" disabled="true"/>
                    <xul:toolbarbutton id="browser-forward-button" anonid="browser-forward-button" class="browser-toolbar" style="max-width: 10em;" crop="right" onclick="window.document.getBindingParent(this).forward()" tooltiptext="&forward.tooltiptext;" disabled="true"/>
                    <xul:toolbarbutton id="browser-reload-button" anonid="browser-reload-button" class="browser-toolbar" style="max-width: 10em;" crop="right" onclick="window.document.getBindingParent(this).reload()" tooltiptext="&reload.tooltiptext;" disabled="true"/>
                    <xul:toolbarbutton id="browser-stop-button" anonid="browser-stop-button" class="browser-toolbar" style="max-width: 10em;" crop="right" onclick="window.document.getBindingParent(this).stop()" tooltiptext="&stop.tooltiptext;" disabled="true"/>
                    <xul:textbox id="urlbar" anonid="urlbar" autocomplete="true" timeout="300" flex="1"
                                 searchSessionType="urlbar" 
                                 onkeypress="if( event.keyCode == event.DOM_VK_ENTER || event.keyCode == event.DOM_VK_RETURN ) { window.document.getBindingParent(this).open(this.value); }"/>
                </xul:toolbar>
            </xul:toolbox>

            <xul:browser id="content" anonid="content" context="context" type="content" src="about:blank" flex="1" xbl:inherits="disablehistory"/>
        </xul:vbox>
    </content>
    <implementation name="viewbrowser" implements="koIBrowserView">
        <!-- The tempPreviewFile is used for remote files and untitled files,
             in order to be able to show a browser preview. -->
        <field name="tempPreviewFile">null</field>

        <!-- The icon_type is a CSS class used to style the view's icon. -->
        <field name="icon_type">'browser'</field>

        <property name="_backButton"
            onget="return window.document.getAnonymousElementByAttribute(this, 'anonid', 'browser-back-button');"/>
        <property name="_forwardButton"
            onget="return window.document.getAnonymousElementByAttribute(this, 'anonid', 'browser-forward-button');"/>
        <property name="_reloadButton"
            onget="return window.document.getAnonymousElementByAttribute(this, 'anonid', 'browser-reload-button');"/>
        <property name="_stopButton"
            onget="return window.document.getAnonymousElementByAttribute(this, 'anonid', 'browser-stop-button');"/>

        <field name="_browser">null</field>
        <property name="browser" readonly="true">
        <getter>
        <![CDATA[
            if (!this._browser) {
                this._browser = window.document.getAnonymousElementByAttribute(this, 'anonid', 'content');
            }
            return this._browser;
        ]]>
        </getter>
        </property>
        <field name="_urlBar">null</field>
        <property name="urlBar" readonly="true">
        <getter>
        <![CDATA[
            if (!this._urlBar) {
                this._urlBar = window.document.getAnonymousElementByAttribute(this, 'anonid', 'urlbar');
            }
            return this._urlBar;
        ]]>
        </getter>
        </property>

        <field name="mURIFixup" readonly="true">
            Components.classes["@mozilla.org/docshell/urifixup;1"]
                    .getService(Components.interfaces.nsIURIFixup);
        </field>

        <property name="title" readonly="true">
        <getter>
        <![CDATA[
            var title = this.browser.contentTitle;
            if (!title) {
              if (!this.tempPreviewFile && this.browser.currentURI &&
                  this.browser.currentURI.spec) {
                try {
                  title = this.mURIFixup.createExposableURI(this.browser.currentURI).spec;
                }
                catch(ex) {
                  title = this.browser.currentURI.spec;
                }
              }

              if (title && title != "about:blank") {
                // At this point, we now have a URI.
                // Let's try to unescape it using a character set
                // in case the URI is not ASCII.
                try {
                  var characterSet = Components.lookupMethod(this.browser.contentDocument, 'characterSet')
                                               .call(this.browser.contentDocument);
                  const textToSubURI = Components.classes["@mozilla.org/intl/texttosuburi;1"]
                                                 .getService(Components.interfaces.nsITextToSubURI);
                  title = textToSubURI.unEscapeNonAsciiURI(characterSet, title);
                  var basename = ko.uriparse.baseName(title);
                  if (basename)
                    title = basename;
                }
                catch(ex) {
                  // Do nothing.
                }
              } else if (this.koDoc && !this.koDoc.isUntitled) {
                title = this.koDoc.baseName;
              } else // Still no title?  Fall back to our untitled string.
                title = '(untitled)';
            }
            return title;
        ]]>
        </getter>
        </property>

        <method name="getURI">
        <body>
        <![CDATA[
            if (this.koDoc && !this.koDoc.isUntitled)
                return this.koDoc.file.URI;
            return null;
        ]]>
        </body>
        </method>

        <method name="resetArrowButtons">
        <body>
        <![CDATA[
            if (this.browser.getAttribute("disablehistory") == "true")
                return;
            if (this.browser.canGoBack)
                this._backButton.removeAttribute('disabled');
            else
                this._backButton.setAttribute('disabled','true');

            if (this.browser.canGoForward)
                this._forwardButton.removeAttribute('disabled');
            else
                this._forwardButton.setAttribute('disabled','true');
        ]]>
        </body>
        </method>

        <method name="setBusy">
        <parameter name="busy"/>
        <body>
        <![CDATA[
            if (busy) {
                this._stopButton.removeAttribute('disabled');
                this._reloadButton.setAttribute('disabled','true');
            } else {
                this._stopButton.setAttribute('disabled','true');
                this._reloadButton.removeAttribute('disabled');
            }
        ]]>
        </body>
        </method>

        <field name="progressFilter">null</field>
        <method name="init">
        <body>
        <![CDATA[
            if (this.parentView) {
                this.parentView.setContext(this, "tabContextMenu");
            }

            this._progressListener = this._getProgressListener();

            this.progressFilter = Components.classes["@mozilla.org/appshell/component/browser-status-filter;1"]
                                     .createInstance(Components.interfaces.nsIWebProgress);
            this.progressFilter.addProgressListener(this._progressListener, Components.interfaces.nsIWebProgress.NOTIFY_ALL);
            this.browser.webProgress.addProgressListener(this.progressFilter, Components.interfaces.nsIWebProgress.NOTIFY_ALL);

            this.browser.addEventListener("DOMTitleChanged", this.onTitleChanged, false);
            var navBar = document.getAnonymousElementByAttribute(this, 'id', "nav-bar");
            var this_ = this;
            this.navBarClickHandler = function(event) {
                if (event.target.id != 'urlbar') {
                    this_.setFocus();
                }
            }
            navBar.addEventListener('click', this.navBarClickHandler, false);
        ]]>
        </body>
        </method>

        <method name="setFocus">
        <body>
        <![CDATA[
            this.browser.focus();
        ]]>
        </body>
        </method>

        <method name="_getProgressListener">
        <body>
        <![CDATA[
            // refer to mozilla/embeding/browser/chrome/content/mini-nav.js
            var listener = {
              view: null,
              get docSvc() {
                    return Components.classes['@activestate.com/koDocumentService;1']
                            .getService(Components.interfaces.koIDocumentService);
              },
              QueryInterface : function(aIID)
              {
                if (aIID.equals(Components.interfaces.nsIWebProgressListener) ||
                    aIID.equals(Components.interfaces.nsISupportsWeakReference) ||
                    aIID.equals(Components.interfaces.nsISupports))
                {
                  return this;
                }
                throw Components.results.NS_NOINTERFACE;
              },
              init : function() {},
              destroy : function() {},
              onStateChange : function(aWebProgress, aRequest, aStateFlags, aStatus) {
                if (aStateFlags & Components.interfaces.nsIWebProgressListener.STATE_STOP) {
                    this.view.parentView.updateLeafName(this.view);
                    this.view.parentView.updateFileStatus(this.view);
                    this.view.setBusy(false);
                    this.view.resetArrowButtons();
                }
              },
              onProgressChange : function(aWebProgress, aRequest, aCurSelfProgress, aMaxSelfProgress, aCurTotalProgress, aMaxTotalProgress) {},
              onLocationChange : function(aWebProgress, aRequest, aLocation)
              {
                var domWindow = aWebProgress.DOMWindow;
                // Update urlbar only if there was a load on the root docshell
                if (domWindow == domWindow.top) {
                  this.view.parentView.updateLeafName(this.view);
                  this.view.parentView.updateFileStatus(this.view);
                  this.view.urlBar.value = aLocation.spec;
                  if (this.view.koDoc && this.view.koDoc.file.URI != aLocation.spec &&
                      !this.view.tempPreviewFile) {
                    this.view.koDoc = this.docSvc.createDocumentFromURI(aLocation.spec);
                  }
                }
              },
              onStatusChange : function(aWebProgress, aRequest, aStatus, aMessage) {},
              onSecurityChange : function(aWebProgress, aRequest, aState) {}
            };
            listener.view = this;
            return listener;
        ]]>
        </body>
        </method>

        <method name="onTitleChanged">
        <parameter name="event"/>
        <body>
        <![CDATA[
            if (this.parentView)
                this.parentView.updateLeafName(this);
        ]]>
        </body>
        </method>

        <method name="open">
        <parameter name="URI"/>
        <parameter name="notify"/>
        <body>
        <![CDATA[
            var doc = this.__docsvc.createDocumentFromURI(URI);
            this.initWithDocument(doc, notify);
        ]]>
        </body>
        </method>

        <method name="close">
        <body>
        <![CDATA[
            if (this.sourceView) {
                this.sourceView.preview = null;
                this.sourceView = null;
            }
            try {
                if (this.progressFilter) {
                    if (this._progressListener) {
                        this.progressFilter.removeProgressListener(this._progressListener);
                    }
                    this.browser.removeProgressListener(this.progressFilter);
                }
            } catch(e) {}
            this._progressListener = null;
            try {
                this.browser.removeEventListener("DOMTitleChanged", this.onTitleChanged, false);
                var navBar = document.getAnonymousElementByAttribute(this, 'id', 'nav-bar');
                navBar.removeEventListener('click', this.navBarClickHandler, false);
            } catch(e) {}
            /////// copied from view-base.close due to xbl inheritance issues //////
            xtk.domutils.fireEvent(this, 'view_closed');
            try {
                if (this.parentView)
                    this.parentView.removeView(this);
            } catch (e) {
                this.log.exception(e,"Unable to remove the view from the parentView, logging and continuing.");
            }
            return true;
            ////////////////////////////////////////////////////////////////////////
        ]]>
        </body>
        </method>

        <method name="initWithDocument">
        <parameter name="doc"/>
        <parameter name="notify"/>
        <body>
        <![CDATA[
            if (typeof(notify) == 'undefined') notify = true;
            this.koDoc = doc;
            // Trying to set the charset can cause problems with external style
            // sheets, see bug 84741.
            //var docCharset = this.browser.docShell.QueryInterface(
            //                    Components.interfaces.nsIDocCharset);
            //docCharset.charset = this.koDoc.encoding.python_encoding_name;
            var needsTempFile = doc.isUntitled || doc.file.isRemoteFile;
            var koFileEx;
            if (needsTempFile) {
                var koFileService = Components.classes["@activestate.com/koFileService;1"].
                                        createInstance(Components.interfaces.koIFileService);
                koFileEx = koFileService.makeTempFile(".html", "wb");
                try {
                    koFileEx.puts(doc.buffer);
                } finally {
                    koFileEx.close();
                }
                this.tempPreviewFile = koFileEx;
            } else {
                koFileEx = doc.file;
                this.tempPreviewFile = null;
            }
            // XXX bug (28969) unc paths
            try {
                this.browser.loadURI(koFileEx.URI, null);
            } catch(e) {
                this.browser.loadURI(koFileEx.path, null);
            }
            this.setBusy(true);
            this.resetArrowButtons();

            if (this.parentView) {
                this.parentView.updateLeafName(this);
                this.parentView.updateFileStatus(this);
            }
            if (notify) {
                xtk.domutils.fireEvent(this, 'view_document_attached');
                xtk.domutils.fireEvent(this, 'current_view_changed');
            }
        ]]>
        </body>
        </method>

        <method name="back">
        <parameter name="URI"/>
        <body>
        <![CDATA[
            if (this.browser.canGoBack)
                this.browser.goBack();
            this.resetArrowButtons();
        ]]>
        </body>
        </method>

        <method name="forward">
        <parameter name="URI"/>
        <body>
        <![CDATA[
            if (this.browser.canGoForward)
                this.browser.goForward();
            this.resetArrowButtons();
        ]]>
        </body>
        </method>

        <method name="stop">
        <parameter name="URI"/>
        <body>
        <![CDATA[
            this.browser.stop();
        ]]>
        </body>
        </method>

        <method name="reload">
        <body>
        <![CDATA[
            if (this.tempPreviewFile) {
                // Update the temp file from the koDoc.
                this.tempPreviewFile.open("wb");
                try {
                    this.tempPreviewFile.puts(this.koDoc.buffer);
                } finally {
                    this.tempPreviewFile.close();
                }
            }
            this.browser.reload();
            this.setBusy(true);
        ]]>
        </body>
        </method>

        <method name="getState">
        <body>
        <![CDATA[
            return null;
            /*
            XXX bug # 26803
            we'll have to refactor some of the workspace stuff to make
            restoring browser preview panes work correctly, so for now
            we take the easy route and do not restore browser preview.

            if (this.koDoc.isUntitled ||
                this.title.indexOf('about:')==0) { return null; }
            var myState = Components.classes['@activestate.com/koPreferenceSet;1'].createInstance();
            myState.setStringPref('viewtype', 'browser');
            myState.setStringPref('URI', this.koDoc.file.URI);
            return myState;
            */
        ]]>
        </body>
        </method>

        <field name="sourceView">null</field>
        <method name="viewSource">
        <body>
        <![CDATA[
            if (this.sourceView) {
                this.sourceView.makeCurrent();
            } else {
                throw Components.results.NS_ERROR_NOT_IMPLEMENTED;
            }
        ]]>
        </body>
        </method>

    </implementation>
</binding>

</bindings>
