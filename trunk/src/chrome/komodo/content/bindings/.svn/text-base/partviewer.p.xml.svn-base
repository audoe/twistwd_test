<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
 Version: MPL 1.1/GPL 2.0/LGPL 2.1
 
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in
 compliance with the License. You may obtain a copy of the License at
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS"
 basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 License for the specific language governing rights and limitations
 under the License.
 
 The Original Code is Komodo code.
 
 The Initial Developer of the Original Code is ActiveState Software Inc.
 Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 ActiveState Software Inc. All Rights Reserved.
 
 Contributor(s):
   ActiveState Software Inc
 
 Alternatively, the contents of this file may be used under the terms of
 either the GNU General Public License Version 2 or later (the "GPL"), or
 the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 in which case the provisions of the GPL or the LGPL are applicable instead
 of those above. If you wish to allow use of your version of this file only
 under the terms of either the GPL or the LGPL, and not to allow others to
 use your version of this file under the terms of the MPL, indicate your
 decision by deleting the provisions above and replace them with the notice
 and other provisions required by the GPL or the LGPL. If you do not delete
 the provisions above, a recipient may use your version of this file under
 the terms of any one of the MPL, the GPL or the LGPL.
 
 ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings PUBLIC "-//MOZILLA//DTD XBL V1.0//EN" "http://www.mozilla.org/xbl" [
  <!ENTITY % bindingsDTD SYSTEM "chrome://komodo/locale/bindings.dtd">
  %bindingsDTD;
]>

<bindings
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xbl="http://www.mozilla.org/xbl"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding id="partviewer">
        <content>
            <xul:vbox flex="1">
                <xul:hbox align="center" class="partviewer-toolbar">
                    <children includes="toolbarbutton"/>
                    <xul:toolbarseparator style="min-width:10px;" flex="1"/>
                    <xul:textbox id="partviewer-filter-textbox"
                             style="min-width:40px; max-width:200px; margin-right:0px;"
                             flex="1"
                             type="search"
                             timeout="500"
                             onfocus="window.updateCommands('undo');this.select();"
                             onblur="window.updateCommands('undo')"
                             onkeypress="document.getBindingParent(this).onFilterKeypress(event)"
                             oncommand="document.getBindingParent(this).updateFilter()"
                             tooltiptext="&filterItems.tooltiptext;"/>
                </xul:hbox>
                <xul:tree id="project-tree" flex="1" enableColumnDrag='true'
                    onmousedown="return document.getBindingParent(this).onClick(event);"
                    onselect="return document.getBindingParent(this).onSelect(event);"
                    style="margin: 0px; padding: 0px;"
                    xbl:inherits="hidecolumnpicker">
                    <xul:treecols>
                        <xul:treecol primary="true" id="name" flex="1"
                            crop="center"
                            xbl:inherits="label=treecollabel, hideheader"
                            class="treecol-header treecol-inset-header sortDirectionIndicator"
                            persist="width"/>
                    </xul:treecols>
                    <xul:treechildren id="tree" flex="1"
                        xbl:inherits="context=viewcontext"
                        context='projectContext'
                        ondraggesture="nsDragAndDrop.startDrag(event,document.getBindingParent(this));"
                        ondragover="nsDragAndDrop.dragOver(event,document.getBindingParent(this));"
                        ondragdrop="document.getBindingParent(this).doDragDropEvent(event);"
                        ondblclick="document.getBindingParent(this).onDblClick(event);"
                        class="projectTree"/>
                </xul:tree>
            </xul:vbox>
        </content>
        <implementation implements="nsIObserver">
            <field name="view">null</field>
            <field name="sortDir">1</field>   <!-- ascending -->
            <field name="sortBy">null</field>
            <field name="editable">false</field>
            <field name="lasthoverrow">-1</field>
            <field name="popupshowing">false</field>
            <field name="datapoints">{}</field>
            <field name="manager"/>
            <field name="_filterTimer">null</field>

            <property name="tree">
                <getter>
                <![CDATA[
                    var tree = null;
                    var v = document.getAnonymousNodes(this);
                    for (var i = 0; i < v.length; i++) {
                        try {
                            var l = v[i].getElementsByTagNameNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "tree");
                            if (l.length > 0) {
                                tree = l[0];
                                break; // I think this is giving us a JS error...
                            }
                        } catch (e) {log.exception(e);}
                    }
                    return tree;
                ]]>
                </getter>
            </property>

            <method name="observe">
                <parameter name="subject"/>
                <parameter name="topic"/>
                <parameter name="data"/>
                <body>
                <![CDATA[
                //TODO: Get this working, use Thobber-small.gif for the filter box icon
                //      when busy. I tried quickly to get this notification, but wasn't
                //      getting it.
                if (topic == "kpf_tree_filter_status") {
                    var filterTextbox = this.getElement('textbox','partviewer-filter-textbox');
                    if (data == "searching") {
                        filterTextbox.setAttribute('busy', 'true');
                    } else {
                        filterTextbox.removeAttribute('busy');
                    }
                }
                ]]>
                </body>
            </method>

            <method name="onLoad">
                <parameter name="manager"/>
                <body>
                <![CDATA[
                    this.manager = manager;
                    this.view = Components.classes["@activestate.com/koKPFTreeView;1"]
                                        .createInstance(Components.interfaces.koIKPFTreeView);
                    this.tree.treeBoxObject
                                  .QueryInterface(Components.interfaces.nsITreeBoxObject)
                                  .view = this.view;
                    this.editable = this.getAttribute("editable")
                    this.view.statusObserver = this;
                    this.initSortPreferences();
                    this.sort();
                ]]>
                </body>
            </method>

            <method name="addColumns">
                <parameter name="columns"/>
                <body>
                <![CDATA[
                    // XXX need to examine splitter changes for trees
                    this.datapoints = columns;
                    for (var name in columns) {
                        var s = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",'splitter');
                        var c = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", 'treecol');
                        c.setAttribute('id',columns[name]);
                        c.setAttribute('label',name);

                        // XXX need prefs for columns
                        c.setAttribute('hidden',true);
                        c.setAttribute('class',"treecol-header treecol-inset-header sortDirectionIndicator");
                        c.setAttribute('persist','width');

                        s.setAttribute('class','tree-splitter');
                        this.tree.firstChild.appendChild(s);
                        this.tree.firstChild.appendChild(c);
                        this.view.addColumnDatapoint(name, columns[name]);
                    }
                ]]>
                </body>
            </method>

            <method name="getElement">
                <parameter name="type"/>
                <parameter name="id"/>
                <body>
                <![CDATA[
                    //dump("looking for element "+type+" "+id+"\n");
                    var v = document.getAnonymousNodes(this);
                    var tree = null;
                    for (var i = 0; i < v.length; i++) {
                        try {
                            var l = v[i].getElementsByTagNameNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", type);
                            //dump("found "+l.length+" elements\n");
                            for (var j = 0; j < l.length; j++) {
                                if (l[j].getAttribute("id") == id) {
                                    //dump("found element "+id+" at index "+j+"\n");
                                    return l[j];
                                }
                            }
                        } catch (e) {}
                    }
                    //dump("ERROR, could not find element!\n");
                    return null;
                ]]>
                </body>
            </method>

            <method name="onFilterKeypress">
                <parameter name="event"/>
                <body>
                <![CDATA[
                try {
                    if (event.keyCode == event.DOM_VK_TAB && !event.ctrlKey) {
                        event.cancelBubble = true;
                        event.stopPropagation();
                        event.preventDefault();
                        this.tree.focus();
                        return;
                    } else if (event.keyCode == event.DOM_VK_ESCAPE) {
                        var filterTextbox = this.getElement('textbox','partviewer-filter-textbox');
                        if (filterTextbox.value != '') {
                            filterTextbox.value = '';
                            this.updateFilter();
                            event.cancelBubble = true;
                            event.stopPropagation();
                            event.preventDefault();
                        }
                        return;
                    }
                } catch (e) {
                    log.exception(e);
                }
                ]]>
                </body>
            </method>

            <method name="updateFilter">
                <body>
                <![CDATA[
                try {
                    var filterTextbox = this.getElement('textbox','partviewer-filter-textbox');
                    this.view.setFilter(filterTextbox.value);
                } catch(ex) {
                    log.exception(ex);
                }
                ]]>
                </body>
            </method>

            <method name="getSelectedItems">
                <body>
                <![CDATA[
                    var items = {};
                    this.view.getSelectedItems(items, new Object());
                    return items.value;
                ]]>
                </body>
            </method>

            <method name="getSelectedItem">
                <body>
                <![CDATA[
                    return this.view.getSelectedItem();
                ]]>
                </body>
            </method>

            <method name="getIndexByPart">
                <parameter name="part"/>
                <body>
                <![CDATA[
                    return this.view.getIndexByPart(part);
                ]]>
                </body>
            </method>

            <method name="getEntryByCoord">
                <parameter name="x"/>
                <parameter name="y"/>
                <body>
                <![CDATA[
                    var select = new Object();
                    select.row = {};
                    select.col = {};
                    select.obj = {};
                    select.cell = {};
                    select.cell.x = {};
                    select.cell.y = {};
                    select.cell.h = {};
                    select.cell.w = {};

                    var columnheight = this.getElement('treecol','name').boxObject.height;
                    var treeWidget = this.tree;
                    var boxObject = treeWidget.treeBoxObject.
                                QueryInterface(Components.interfaces.nsITreeBoxObject)
                    boxObject.getCellAt(x, y, select.row, select.col, select.obj);
                    try {
                        if (select.col.value == null ||
                            select.row.value < 0 || select.row.value >= this.view.rowCount) {
                            // XXX this.newVar();
                            return null;
                        } else {
                            boxObject.getCoordsForCellItem(select.row.value, select.col.value, 'text', select.cell.x, select.cell.y, select.cell.w, select.cell.h);
                            select.cell.x.value += boxObject.x;
                            select.cell.y.value += (boxObject.y + columnheight -1);
                        }
                    } catch (e) {
                        return null;
                    }
                    return select;
                ]]>
                </body>
            </method>

            <method name="onDblClick">
                <parameter name="event"/>
                <body>
                <![CDATA[
                    var t = event.originalTarget;
                    if (event.button != 2 && t.localName == "treechildren") {
                        event.cancelBubble = true;
                        var select = this.getEntryByCoord(event.clientX, event.clientY);
                        if (select && select.obj.value != "twisty") {
                            var rowItem = this.view.getRowItem(select.row.value);
                            ko.projects.extensionManager.callHandler(rowItem,'ondblclick',event);
                        }
                    }
                ]]>
                </body>
            </method>

            <method name="onSelect">
                <parameter name="event"/>
                <body>
                <![CDATA[
                    // dump('in onSelect ------------------\n');
                    this._updateCommandTimer = new ko.objectTimer(this,
                                                               this._updateCommands,
                                                               []);
                    this._updateCommandTimer.startTimeout(1);
                    return true;
                ]]>
                </body>
            </method>
            <method name="_updateCommands">
                <body>
                <![CDATA[
                    try {
                        var prj = this.manager.getSelectedProject();
                        if (prj != this._lastProject) {
                            window.updateCommands("selected_project_changed");
                            this._lastProject = prj;
                        }
                        ko.projects.extensionManager.updateMenu(this.getSelectedItems(), this);
                        if (this._updateCommandTimer) {
                            this._updateCommandTimer.free();
                            this._updateCommandTimer = null;
                        }
                    } catch (e) {
                        log.exception(e);
                    }
                ]]>
                </body>
            </method>

            <method name="initSortPreferences">
                <body>
                <![CDATA[
                    var id = this.getAttribute('id');
                    if (!id) return;

                    var prefs = Components.classes['@activestate.com/koPrefService;1'].
                                            getService(Components.interfaces.koIPrefService).prefs;
                    if (prefs.hasPref("treeSortDir_"+id)) {
                        this.sortDir = prefs.getLongPref("treeSortDir_"+id)
                    }
                    if (prefs.hasPref("treeSortBy_"+id)) {
                        this.sortBy = prefs.getStringPref("treeSortBy_"+id)
                        if (this.sortBy == 'Name') {
                            // Upgrade handling - convert the name to lowercase.
                            this.sortBy = 'name';
                        }
                    } else {
                        // Sort using the first tree column found.
                        var sortedColumn = null;
                        var treecol = this.tree.firstChild.firstChild;
                        while (treecol) {
                            if (treecol.localName == "treecol") {
                                this.sortBy = treecol.getAttribute("id");
                                break;
                            }
                            treecol = treecol.nextSibling;
                        }
                    }
                ]]>
                </body>
            </method>

            <method name="setSortIndicators">
                <parameter name="sortBy"/>
                <parameter name="sortDir"/>
                <body>
                <![CDATA[
                    // Set the sort indicator on the column we are sorted by.
                    var sortedColumn = null;
                    var treecol = this.tree.columns.getFirstColumn();
                    while (treecol) {
                        if (treecol.element.getAttribute('id') == sortBy) {
                            sortedColumn = treecol;
                        } else {
                            treecol.element.removeAttribute("sortDirection");
                        }
                        treecol = treecol.getNext();
                    }
                    if (sortedColumn) {
                        switch(sortDir) {
                            case -1:
                                sortedColumn.element.setAttribute("sortDirection", "descending");
                                break;
                            case 1:
                                sortedColumn.element.setAttribute("sortDirection", "ascending");
                                break;
                            default:
                                sortedColumn.element.removeAttribute("sortDirection");
                                break;
                        }
                    }
                ]]>
                </body>
            </method>

            <method name="sort">
                <parameter name="sortBy"/>
                <parameter name="sortDir"/>
                <body>
                <![CDATA[
                    if (typeof(sortBy) == 'undefined' || sortBy == null)
                        sortBy = this.sortBy;
                    if (typeof(sortDir) == 'undefined' || sortDir == null)
                        sortDir = this.sortDir;
                    var id = this.getAttribute('id');
                    if (id) {
                        // Remember the sort order.
                        var prefs = Components.classes['@activestate.com/koPrefService;1'].
                                                getService(Components.interfaces.koIPrefService).prefs;
                        prefs.setLongPref("treeSortDir_"+id, sortDir);
                        prefs.setStringPref("treeSortBy_"+id, sortBy)
                    }
                    this.sortBy = sortBy;
                    this.sortDir = sortDir;
                    this.setSortIndicators(sortBy, sortDir);
                    this.view.sortBy(sortBy, sortDir);
                ]]>
                </body>
            </method>

            <method name="toggleNextSortingBehaviourForColumn">
                <parameter name="sortBy"/>
                <body>
                <![CDATA[
                    // Set the sort indicator on the column we are sorted by.
                    var sortDir = 1;
                    if (sortBy == this.sortBy) {
                        sortDir = this.sortDir + 1;
                        if (sortDir >= 2) {
                            sortDir = -1;
                        }
                    }
                    this.sort(sortBy, sortDir);
                ]]>
                </body>
            </method>

            <method name="onClick">
                <parameter name="event"/>
                <body>
                <![CDATA[
                    var t = event.originalTarget;
                    // single-click on a column
                    if (t.localName == "treecol") {
                        this.toggleNextSortingBehaviourForColumn(t.id);
                        event.cancelBubble = true;
                    } else if (t.localName == "treechildren") {
                        event.cancelBubble = true;
                        var select = this.getEntryByCoord(event.clientX, event.clientY);
                        if (select && select.obj.value != "twisty") {
                            var rowItem = this.view.getRowItem(select.row.value);
                            ko.projects.extensionManager.callHandler(rowItem,'onclick',event);
                        } else if (!select) {
                            // deselect everything if click in empty space
                            this.view.selection.currentIndex = -1;
                            this.view.selection.select(-1);
                        }
                    }
                    return true;
                ]]>
                </body>
            </method>

            <method name="getDragData">
                <parameter name="part"/>
                <body>
                <![CDATA[
                // if the part is not dragable, don't drag it
                if (part.hasAttribute('dragable') && !part.getBooleanAttribute('dragable')) return null;

                var flavors = new Object();
                part.getDragFlavors(flavors, new Object());
                var transferData = new TransferData();
                flavors = flavors.value;
                for (var i = 0; i < flavors.length; i++) {
                    transferData.addDataForFlavour(flavors[i],
                                                   part.getDragDataByFlavor(flavors[i]));
                }
                return transferData;
                ]]>
                </body>
            </method>

            <method name="onDragStart">
                <parameter name="event"/>
                <parameter name="transferData"/>
                <parameter name="action"/>
                <body>
                <![CDATA[
                    var items = this.getSelectedItems();

                    var haveDragData = items.length > 0;

                    if (!haveDragData) {
                        return false;
                    }

                    transferData.data = new TransferDataSet();
                    var data;
                    for (var i = 0; i < items.length; i++) {
                        data = this.getDragData(items[i]);
                        if (data)
                            transferData.data.push(data);
                    }
                    return true;
                ]]>
                </body>
            </method>

            <method name="getSupportedFlavours">
                <body>
                <![CDATA[
                    var flavours = new FlavourSet();
                    flavours.appendFlavour("application/x-komodo-snippet");
                    flavours.appendFlavour("application/x-komodo-part");
                    flavours.appendFlavour("application/x-moz-file", "nsIFile");
                    flavours.appendFlavour("text/x-moz-url");
                    flavours.appendFlavour("text/unicode");
// #if PLATFORM != "win"
                    flavours.appendFlavour("TEXT");
// #endif
                    return flavours;
                ]]>
                </body>
            </method>

            <method name="canDrop">
                <parameter name="event"/>
                <parameter name="session"/>
                <body>
                <![CDATA[
                    session.canDrop = true;
                    return session.canDrop;
                ]]>
                </body>
            </method>

            <method name="doDragDropEvent">
                <parameter name="event"/>
            <body>
            <![CDATA[
                // This handles the dragdrop, normally we would call
                // nsDragAndDrop.drop(), but that function does not allow
                // sourceNode and target to be the same.  In this instance
                // they can be the same, so we do a bit of the work ourselves.
                if (!nsDragAndDrop.mDragSession)
                    nsDragAndDrop.mDragSession = nsDragAndDrop.mDragService.getCurrentSession();
                var flavourSet = this.getSupportedFlavours();
                var transferData = nsTransferable.get(flavourSet, nsDragAndDrop.getDragData, true);
                this.onDrop(event, transferData, nsDragAndDrop.mDragSession);
                event.stopPropagation();
            ]]>
            </body>
            </method>

            <!--// canHandleMultipleItems used by toolkit nsDragDrop.js-->
            <field name="canHandleMultipleItems">true</field>
            <method name="onDrop">
                <parameter name="event"/>
                <parameter name="transferData"/>
                <parameter name="session"/>
                <body>
                <![CDATA[
                    // unless onDrop returns false, we will cancel the event bubble
                    var result = false;
                    var select = false;
                    try {
                        select = this.getEntryByCoord(event.clientX, event.clientY);
                    } catch(e) { }
                    try {
                        result = this.manager.onDrop(event, transferData, session, select?select.row.value:-1);
                    } catch(e) { }
                    event.cancelBubble = result;
                    return result;
                ]]>
                </body>
            </method>

            <method name="onDragOver">
                <parameter name="event"/>
                <parameter name="flavour"/>
                <parameter name="session"/>
                <body>
                <![CDATA[
                    session.canDrop = true;
                    return session.canDrop;
                ]]>
                </body>
            </method>


        </implementation>
        <handlers>
            <!--We handle blur and focus events so that extensions can know which project view is the currently focused one -->
           <handler event="focus" phase="capturing">
            <![CDATA[
                ko.projects.active = this;
            ]]>
            </handler>

            <handler event="contextmenu" phase="capturing">
            <![CDATA[
                // We don't want to show a context menu if we have no
                // default interface and if we're not _on_ anything.
                var t = event.originalTarget;
                // single-click on tree body
                this.focus();
                ko.projects.active = this;
                if (t.localName == "treechildren") {
                    var select = this.getEntryByCoord(event.clientX, event.clientY);
                    if (!select) {
                        return false;
                    }
                    // if the entry at the coordinate is not selected, then
                    // select it now
                    if (!this.view.selection.isSelected(select.row.value))
                        this.view.selection.select(select.row.value);
                    if (this._updateCommandTimer != null) {
                        this._updateCommandTimer.stopTimeout();
                        this._updateCommands();
                    }
                }
                return true;
            ]]>
            </handler>

            <handler event="keypress">
            <![CDATA[
                // Here we do the same thing that is done in onDblClick (more or less
                if (event.keyCode == event.DOM_VK_RETURN &&
                    !event.shiftKey && !event.ctrlKey && !event.altKey) {
                    var t = event.originalTarget;
                    if (t.localName == "treechildren" || t.localName == 'tree') {
                        event.cancelBubble = true;
                        var items = this.getSelectedItems();
                        for (var i=0; i<items.length; i++) {
                            ko.projects.extensionManager.callHandler(items[i],'ondblclick',event);
                        }
                        event.cancelBubble = true;
                        event.preventDefault();
                    }
                }
                if (event.keyCode == event.DOM_VK_UP ||
                    event.keyCode == event.DOM_VK_DOWN ||
                    event.keyCode == event.DOM_VK_LEFT ||
                    event.keyCode == event.DOM_VK_RIGHT) {
                    var t = event.originalTarget;
                    if (t.localName == "treechildren" || t.localName == 'tree') {
                        event.cancelBubble = true;
                        event.preventDefault();
                    }
                }
                else
                if (event.keyCode == event.DOM_VK_TAB && !event.ctrlKey) {
                    event.cancelBubble = true;
                    event.stopPropagation();
                    event.preventDefault();
                    var filterTextbox = this.getElement('textbox','partviewer-filter-textbox');
                    filterTextbox.focus();
                    return;
                }

                // sometimes the partviewer is focused and target, when we
                // need the tree to be focused and target, so retarget the event
                // this is kind of hacky, but works for mozland
                if (event.originalTarget == this) {
                    this.tree.focus();
                    this.tree.dispatchEvent(event);
                }
             ]]>
            </handler>

       </handlers>
    </binding>

</bindings>
