<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
 Version: MPL 1.1/GPL 2.0/LGPL 2.1
 
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in
 compliance with the License. You may obtain a copy of the License at
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS"
 basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 License for the specific language governing rights and limitations
 under the License.
 
 The Original Code is Komodo code.
 
 The Initial Developer of the Original Code is ActiveState Software Inc.
 Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 ActiveState Software Inc. All Rights Reserved.
 
 Contributor(s):
   ActiveState Software Inc
 
 Alternatively, the contents of this file may be used under the terms of
 either the GNU General Public License Version 2 or later (the "GPL"), or
 the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 in which case the provisions of the GPL or the LGPL are applicable instead
 of those above. If you wish to allow use of your version of this file only
 under the terms of either the GPL or the LGPL, and not to allow others to
 use your version of this file under the terms of the MPL, indicate your
 decision by deleting the provisions above and replace them with the notice
 and other provisions required by the GPL or the LGPL. If you do not delete
 the provisions above, a recipient may use your version of this file under
 the terms of any one of the MPL, the GPL or the LGPL.
 
 ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings PUBLIC "-//MOZILLA//DTD XBL V1.0//EN" "http://www.mozilla.org/xbl" [
  <!ENTITY % startpageDTD SYSTEM "chrome://komodo/locale/startpage.dtd">
  <!ENTITY % komodoDTD SYSTEM "chrome://komodo/locale/komodo.dtd">
  %startpageDTD;
  %komodoDTD;
]>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">


<binding id="startpage-box" display="xul:box">
    <resources>
        <stylesheet src="chrome://komodo/skin/startpage/startpage.css"/>
    </resources>
    <content orient="vertical" xbl:inherits="closed, pref">
        <xul:vbox class="startpage-vbox" flex="1">
            <xul:hbox class="startpage-header"
                      ondblclick="window.document.getBindingParent(this).toggleBox();"
                      align="center">
                <xul:vbox>
                    <xul:spring flex="1"/>
                    <xul:image class="closebox-icon" tooltiptext="&hidePane.tooltiptext;"
                               anonid="toggle-button"
                               onclick="window.document.getBindingParent(this).toggleBox();"/>
                    <xul:spring flex="1"/>
                </xul:vbox>
                <xul:label xbl:inherits="value=title"/>
                <xul:separator flex="1"/>
            </xul:hbox>
            <xul:hbox flex="1" anonid="children-box" class="children-box">
                <children/>
            </xul:hbox>
        </xul:vbox>
    </content>

    <implementation implements="nsIObserver">
        <property name="closed">
            <getter><![CDATA[
            try {
                var closed = this.getAttribute("closed");
                if (typeof(closed) == "undefined" || closed == null || closed == "") closed = false;
                if (closed == "true") closed = true;
                if (closed == "false") closed = false;
                this.log.debug("closed getter: closed="+closed);
                return closed;
            } catch(ex) {
                this.log.error(ex);
            }
            return false;
            ]]></getter>
        </property>

        <field name="_log">null</field>
        <property name="log">
            <getter><![CDATA[
            if (!this._log) {
                this._log = ko.logging.getLogger('startpage.box');
                //this._log.setLevel(ko.logging.LOG_DEBUG); //XXX
            }
            return this._log;
            ]]></getter>
        </property>

        <property name="_globalPrefs"
            onget="return Components.classes['@activestate.com/koPrefService;1'].
                        getService(Components.interfaces.koIPrefService).prefs"/>

        <field name="_pref">null</field>

        <constructor><![CDATA[
            try {

                this._bundle = Components.classes["@mozilla.org/intl/stringbundle;1"]
                    .getService(Components.interfaces.nsIStringBundleService)
                    .createBundle("chrome://komodo/locale/startpage/startpage.properties");

                this._pref = this.getAttribute("pref");
                this.log.info("constructor (pref="+this._pref+")");
                if (typeof(this._pref) == "undefined" || this._pref == "")
                    this._pref = null;

                var closed = null;
                if (this._pref && this._globalPrefs.hasBooleanPref(this._pref)) {
                    closed = this._globalPrefs.getBooleanPref(this._pref);
                } else {
                    closed = this.closed;
                }

                if (closed) {
                    this.closeBox(true);
                } else {
                    this.openBox(true);
                }

                if (this._pref) {
                    this._globalPrefs.prefObserverService
                        .addObserver(this, this._pref, false);
                }
            } catch(ex) {
                this.log.error(ex);
            }
        ]]></constructor>

        <!-- XXX Would like this to just be a <destructor/>, but cannot
                 rely upon that getting called. Instead the container
                 of a startpage-box binding must explicitly call this. -->
        <method name="finalize">
        <body> <![CDATA[
            try {
                this.log.info("finalize (pref="+this._pref+")");
                if (this._pref) {
                    this._globalPrefs.prefObserverService
                        .removeObserver(this, this._pref);
                }
            } catch(ex) {
                this.log.error(ex);
            }
        ]]> </body>
        </method>

        <field name="_ignorePrefNotification">false</field>
        <method name="observe">
        <parameter name="subject"/>
        <parameter name="topic"/>
        <parameter name="data"/>
        <body> <![CDATA[
            if (this._ignorePrefNotification) return;
            this.log.info("observe(subject="+subject+", topic="+topic+
                          ", data="+data+")");
            try {
                var closed = subject.getBooleanPref(topic);
                if (closed) {
                    this.closeBox();
                } else {
                    this.openBox();
                }
            } catch (ex) {
                this.log.error("observe error: "+ex);
            }
        ]]> </body>
        </method>

        <method name="_rollUpABit">
        <parameter name="box"/>
        <body> <![CDATA[
            try {
                this.log.debug("_rollUpABit(box="+box+")\n");
                var interval = box.getAttribute("_interval");
                if (box.boxObject.height <= 0 ||
                    box.height != "" && box.height < box.boxObject.height) {
                    // Box cannot be shrunk any more.
                    this.log.debug("_rollUpABit: collapsing and stop\n");
                    clearInterval(interval);
                    box.removeAttribute("height");
                    box.setAttribute("collapsed", "true");
                } else {
                    this.log.debug("_rollUpABit: reduce size a bit and continue\n");
                    box.height = box.boxObject.height - 5;
                }
            } catch(ex) {
                this.log.error(ex);
            }
        ]]> </body>
        </method>

        <method name="rollUp">
        <parameter name="box"/>
        <body> <![CDATA[
            try {
                this.log.debug("rollUp(box="+box+")\n");

                // Save the interval on "this" does not work. _rollUpABit's
                // "this" does not have that attribute.
                var interval = setInterval(this._rollUpABit, 10, box);
                box.setAttribute("_interval", interval);
            } catch(ex) {
                this.log.error(ex);
            }
        ]]> </body>
        </method>

        <method name="toggleBox">
        <body> <![CDATA[
            try {
                this.log.debug("toggleBox()");

                if (this.closed) {
                    this.openBox();
                } else {
                    this.closeBox();
                }
            } catch(ex) {
                this.log.error(ex);
            }
        ]]> </body>
        </method>

        <method name="closeBox">
        <parameter name="initializing"/>
        <body> <![CDATA[
            try {
                if (typeof(initializing) == "undefined") initializing = false;
                this.log.debug("closeBox(initializing="+initializing+")");
                var button = document.getAnonymousElementByAttribute(this,
                                "anonid", "toggle-button");
                var box = document.getAnonymousElementByAttribute(this,
                                "anonid", "children-box");

                box.setAttribute("collapsed", "true");
                box.style.setProperty("margin-bottom", "0px", "");

                button.setAttribute("class", "openbox-icon");
                button.setAttribute("tooltiptext",
                    this._bundle.GetStringFromName("showPane.tooltiptext"));

                if (this._pref) {
                    this._ignorePrefNotification = true;
                    this._globalPrefs.setBooleanPref(this._pref, true);
                    this._ignorePrefNotification = false;
                }
                this.setAttribute("closed", "true");

                if (!initializing) {
                    // Fire a possible 'onboxclose' handler.
                    this._fireEvent("boxclose");
                }
            } catch(ex) {
                this.log.error(ex);
            }
        ]]> </body>
        </method>

        <method name="openBox">
        <parameter name="initializing"/>
        <body> <![CDATA[
            try {
                if (typeof(initializing) == "undefined") initializing = false;
                this.log.debug("openBox(initializing="+initializing+")");
                var button = document.getAnonymousElementByAttribute(this,
                                "anonid", "toggle-button");
                var box = document.getAnonymousElementByAttribute(this,
                                "anonid", "children-box");

                if (box.hasAttribute("collapsed"))
                    box.removeAttribute("collapsed");
                box.style.setProperty("margin-bottom", "1px", "");

                button.setAttribute("class", "closebox-icon");
                button.setAttribute("tooltiptext",
                    this._bundle.GetStringFromName("hidePane.tooltiptext"));

                if (this._pref) {
                    this._ignorePrefNotification = true;
                    this._globalPrefs.setBooleanPref(this._pref, false);
                    this._ignorePrefNotification = false;
                }
                this.setAttribute("closed", "false");

                if (!initializing) {
                    // Fire a possible 'onboxopen' handler.
                    this._fireEvent("boxopen");
                }
            } catch(ex) {
                this.log.error(ex);
            }
        ]]> </body>
        </method>

        <method name="_fireEvent">
        <parameter name="eventName"/>
        <body> <![CDATA[
            try {
                // c.f. dialog.xml::_fireButtonEvent in mozilla
                this.log.debug("_fireEvent()");
                var returned = true;
                // handle any xml attribute event handlers
                var handler = this.getAttribute("on"+eventName);
                if (handler != "") {
                    var fn = new Function(handler);
                    returned = fn.apply(this);
                }

                return returned;
            } catch(ex) {
                this.log.error(ex);
            }
            return false;
        ]]> </body>
        </method>


    </implementation>
</binding>

<binding id="startpage-bullet" display="xul:box">
    <resources>
        <stylesheet src="chrome://komodo/skin/startpage/startpage.css"/>
    </resources>
    <content orient="horizontal" align="top">
        <xul:vbox>
            <xul:button xbl:inherits="label=title,image=image"
                        valign="left" halign="top"
                        class="button-link header"/>
            <xul:vbox class="bullet-vbox">
                <children/>
            </xul:vbox>
        </xul:vbox>
    </content>
</binding>

<binding id="startpage-tree-mru">
    <resources>
        <stylesheet src="chrome://komodo/skin/global/global.css"/>
        <stylesheet src="chrome://komodo/skin/startpage/startpage.css"/>
    </resources>
    <content orient="vertical" flex="1">
        <xul:tree anonid="mru-tree" flex="1" class="no-border"
                  hidecolumnpicker="true"
                  ondblclick="window.document.getBindingParent(this).oncommand(event);"
                  context="_child"
                  tooltip="_child">
            <xul:treecols style="height: 0px">
            <xul:treecol primary="true" hideheader="true"
                     id="tree-file"
                     flex="2"
                     persist="width"
                     crop="center"/>
            <xul:splitter class="tree-splitter"/>
            <xul:treecol id="tree-date" hideheader="true"
                     persist="width"
                     style="min-width: 10em;"/>
            </xul:treecols>
            <xul:treechildren flex="1">
                <children/>
            </xul:treechildren>
            <xul:menupopup>
            <xul:menuitem anonid="context_open"
                      label="&open.label;"
                      class="menuitem-iconic native_open_icon"
                      oncommand="window.document.getBindingParent(this).openSelected();"
                      />
            <xul:menuitem anonid="context_remove"
                      label="&remove.label;"
                      class="menuitem-iconic list-item-remove-icon"
                      oncommand="window.document.getBindingParent(this).removeSelected();"
                      />
            </xul:menupopup>
            <xul:tooltip onpopupshowing="return window.document.getBindingParent(this).onTooltipPopup(event);" crop="center">
                <xul:label anonid="tooltiptext" value="" crop="center"/>
            </xul:tooltip>
        </xul:tree>
    </content>

    <implementation implements="nsIObserver">
        <field name="_osPathSvc">null</field>
        <field name="_timeSvc">null</field>
        <field name="_osSvc">null</field>
        <field name="_lastErrorSvc">null</field>
        <field name="_dateFormat">true</field>
        <field name="_projects">null</field>
        <field name="_files">null</field>
        <field name="_updateProjectMRUWhenVisible">true</field>
        <field name="_updateFileMRUWhenVisible">true</field>
        <field name="_log">null</field>
        <property name="log">
            <getter><![CDATA[
            if (!this._log) {
                this._log = ko.logging.getLogger('startpage.tree-mru');
            }
            return this._log;
            ]]></getter>
        </property>

        <property name="tree"
                  onget="return document.getAnonymousNodes(this)[0];"/>
        <property name="treeView"
                  onget="return this.tree.view;"/>
        <property name="treeChildren"
                  onget="return this.tree.firstChild.nextSibling;"/>
        <property name="tooltip"
                  onget="return this.tree.lastChild;"/>

        <method name="init">
        <body> <![CDATA[
            this._osPathSvc = Components.classes["@activestate.com/koOsPath;1"].
                getService(Components.interfaces.koIOsPath);
            this._timeSvc = Components.classes["@activestate.com/koTime;1"].
                getService(Components.interfaces.koITime);
            this._osSvc = Components.classes["@activestate.com/koOs;1"].
                getService(Components.interfaces.koIOs);
            this._lastErrorSvc = Components.classes["@activestate.com/koLastErrorService;1"].
                getService(Components.interfaces.koILastErrorService);
            this._remoteSvc = Components.classes["@activestate.com/koRemoteConnectionService;1"]
                .getService(Components.interfaces.koIRemoteConnectionService);
            this._bundle = Components.classes["@mozilla.org/intl/stringbundle;1"]
                .getService(Components.interfaces.nsIStringBundleService)
                .createBundle("chrome://komodo/locale/startpage/startpage.properties");
            this._dateFormat = ko.prefs.getStringPref("defaultDateFormat");

            var obSvc = Components.classes["@mozilla.org/observer-service;1"].
                getService(Components.interfaces.nsIObserverService);
            obSvc.addObserver(this, 'mru_changed', false);
            ko.prefs.prefObserverService.addObserver(this, "defaultDateFormat", true);
            try {
                this.homePathLC = (Components.classes["@mozilla.org/file/directory_service;1"]
                                .createInstance(Components.interfaces.nsIProperties)
                                .get("Home", Components.interfaces.nsIFile)
                                .path
                                .toLowerCase());
            } catch(ex) {
                this.homePathLC = "";
            }

            window.setTimeout(function (me) {
                me._projects = me.addTopRow(me._bundle.GetStringFromName("recentProjects.message"));
                me._files = me.addTopRow(me._bundle.GetStringFromName("recentFiles.message"));
                me.updateProjectMRUTable();
                me.updateFileMRUTable();
            }, 0, this);
        ]]> </body>
        </method>

        <method name="fini">
        <body><![CDATA[
            var obSvc = Components.classes["@mozilla.org/observer-service;1"].
                getService(Components.interfaces.nsIObserverService);
            obSvc.removeObserver(this, 'mru_changed');
            ko.prefs.prefObserverService.removeObserver(this, "defaultDateFormat");
        ]]></body>
        </method>

        <method name="addTopRow">
        <parameter name="name"/>
        <body> <![CDATA[
            var XUL_NS="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
            var item = document.createElementNS(XUL_NS, 'treeitem');
            item.setAttribute('container', "true");
            item.setAttribute('open', "true");
            var row = document.createElementNS(XUL_NS, 'treerow');
            var nameCell = document.createElementNS(XUL_NS, 'treecell');
            var dateCell = document.createElementNS(XUL_NS, 'treecell');
            nameCell.setAttribute('label', name);
            nameCell.setAttribute('properties', 'header');
            row.appendChild(nameCell);
            row.appendChild(dateCell);
            item.appendChild(row);
            var children = document.createElementNS(XUL_NS, 'treechildren');
            item.appendChild(children);
            this.treeChildren.appendChild(item);
            return item;
        ]]> </body>
        </method>

        <method name="updateFormat">
        <parameter name="name"/>
        <body> <![CDATA[
            this._dateFormat = ko.prefs.getStringPref(name);
            this.updateProjectMRUTable();
            this.updateFileMRUTable();
        ]]> </body>
        </method>

        <method name="oncommand">
        <parameter name="event"/>
        <body> <![CDATA[
            if (event.button == 2) return;
            var tree = document.getAnonymousElementByAttribute(this, "anonid", "mru-tree");
            var item = tree.view.getItemAtIndex(tree.currentIndex);
            var url = item.getAttribute('url');
            if (url)
                ko.open.URI(url);
        ]]> </body>
        </method>

        <method name="getSelectedItems">
        <body> <![CDATA[
            var tree = document.getAnonymousElementByAttribute(this, "anonid", "mru-tree");
            var start = new Object();
            var end = new Object();
            var numRanges = tree.view.selection.getRangeCount();
            var selection = [];
            for (var t=0; t<numRanges; t++){
              tree.view.selection.getRangeAt(t,start,end);
              for (var v=start.value; v<=end.value; v++){
                var item = tree.view.getItemAtIndex(v);
                selection[selection.length] = item;
              }
            }
            return selection;
        ]]> </body>
        </method>

        <method name="openSelected">
        <body> <![CDATA[
            this.log.info("openSelected");
            try {
                var items = this.getSelectedItems();
                var urls = new Array();
                for (var i=0; i< items.length; i++) {
                    var url = items[i].getAttribute('url');
                    if (url)
                        urls.push(url);
                }
                if (urls.length > 0)
                    ko.open.multipleURIs(urls, 'editor', /*isRecent=*/ true);
            } catch (ex) {
                this.log.error("openSelected error: "+ex);
            }
        ]]> </body>
        </method>

        <method name="removeSelected">
        <body> <![CDATA[
            this.log.info("removeSelected");
            try {
                // Remove the selected files and projects from their respective MRUs.
                // - Delete in reverse order so indeces are correct.
                var items = this.getSelectedItems();
                var item;
                for (var i=items.length-1; i >= 0; i--) {
                    item = items[i];
                    if (item.parentNode == this._files.lastChild) {
                        ko.mru.del("mruFileList", item.getAttribute("_index"), false);
                    } else {
                        ko.mru.del("mruProjectList", item.getAttribute("_index"), false);
                    }
                }
                this.updateProjectMRUTable();
                this.updateFileMRUTable();
            } catch (ex) {
                this.log.error("removeSelected error: "+ex);
            }
        ]]> </body>
        </method>

        <method name="clearMRU">
        <body> <![CDATA[
            // Verify and then clear the given MRU.
            //    "mru" is either "project" or "file", indicating which MRU.
            this.log.info("clearMRU()");
            try {
                var prompt = this._bundle.GetStringFromName("promptClearConfirm.message");
                var answer = ko.dialogs.okCancel(prompt);
                if (answer == "OK") {
                    ko.mru.reset("mruProjectList");
                    ko.mru.reset("mruFileList");
                }
            } catch (ex) {
                this.log.error("clearMRU error: "+ex);
            }
        ]]> </body>
        </method>

        <method name="updateProjectMRUTable">
        <body> <![CDATA[
            this.log.info("_updateProjectMRUTable()");
            try {
                var children = this._projects.lastChild;
                // Get the MRU info.
                var projectMRU = null;
                if (ko.prefs.hasPref("mruProjectList")) {
                    projectMRU = ko.prefs.getPref("mruProjectList");
                }

                // Clear the table (don't clear the header row).
                while (children.firstChild)  {
                    children.removeChild(children.firstChild)
                }

                if (projectMRU && projectMRU.length > 0) {
                    for (var i=0; i<projectMRU.length; i++) {
                        var project = projectMRU.getStringPref(i);
                        this._addMRURow(children, "project", i, project);
                    }
                }
            } catch(ex) {
                this.log.exception(ex, "_updateProjectMRUTable error: ");
            }
        ]]> </body>
        </method>

        <method name="updateFileMRUTable">
        <body> <![CDATA[
            this.log.info("_updateFileMRUTable()");
            try {
                var children = this._files.lastChild;
                // Get the MRU info.
                var fileMRU = null;
                if (ko.prefs.hasPref("mruFileList")) {
                    fileMRU = ko.prefs.getPref("mruFileList");
                }

                // Clear the table (don't clear the header row).
                while (children.firstChild)  {
                    children.removeChild(children.firstChild)
                }

                if (fileMRU && fileMRU.length > 0) {
                    for (var i=0; i<fileMRU.length; i++) {
                        var file = fileMRU.getStringPref(i);
                        this._addMRURow(children, "file", i, file);
                    }
                }
                
                
            } catch(ex) {
                this.log.exception(ex, "_updateFileMRUTable error: ");
            }
        ]]> </body>
        </method>

        <method name="_contractHomePart">
        <parameter name="filePath"/>
        <body> <![CDATA[
            var homePathLength = this.homePathLC.length;
            if (homePathLength == 0 || homePathLength >= filePath.length) return filePath;
            if (filePath.toLowerCase().indexOf(this.homePathLC) != 0) {
                // Path doesn't start with the homePath
                return filePath;
            }
            var nextChar = filePath.substr(homePathLength, 1);
            // Watch out for systems with users that are prefixes for
            // other users, like /home/jan and /home/jane
            if (nextChar != '/' && nextChar != '\\') {
                return filePath;
            }
            return "~" + filePath.substr(homePathLength);
        ]]> </body>
        </method>
    
        <method name="_addMRURow">
        <parameter name="children"/>
        <parameter name="mru"/>
        <parameter name="index"/>
        <parameter name="url"/>
        <body> <![CDATA[
            this.log.info("_addMRURow(widgets, mru='"+mru+"', index='"+index+
                          "', url='"+url+"')");
            var XUL_NS="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
            try {
                // Add the given project/file URL to the MRU table.
                //    "mru" is either "project" or "file", indicating which MRU.
                //    "index" is the zero-based index of the URL in the MRU.
                //    "url" is the URL to add.
                // update the file tree mru
                //<xul:treeitem>
                //<xul:treerow>
                //  <xul:treecell label="File 1"/>
                //  <xul:treecell label="the date"/>
                //</xul:treerow>
                //</xul:treeitem>

                // Gather data.
                var filePath = ko.uriparse.displayPath(url);

                // Build the XUL.
                var hbox, checkbox, image, button, label;
                var item = document.createElementNS(XUL_NS, "treeitem");
                item.setAttribute('url', url);
                item.setAttribute('_index', index);
                var row = document.createElementNS(XUL_NS, "treerow");
                var fncell = document.createElementNS(XUL_NS, "treecell");
                fncell.setAttribute("label", this._contractHomePart(filePath));
                fncell.setAttribute("tooltiptext", filePath);
                fncell.setAttribute("properties", mru+"-icon");
                row.appendChild(fncell);
                var fndate = document.createElementNS(XUL_NS, "treecell");
                fndate.setAttribute("label", this._getLastModifiedMessage(url));
                row.appendChild(fndate);
                item.appendChild(row);

                children.appendChild(item);
            } catch (ex) {
                this.log.error("_addMRURow error: "+ex);
            }
        ]]> </body>
        </method>

        <method name="_isToday">
        <parameter name="secs"/>
        <body> <![CDATA[
            this.log.info("_isToday(secs="+secs+")");
            try {
                // Return true iff the given 'secs' (seconds since the epoch) is today.
                var timeTuple = this._timeSvc.localtime(secs, new Object());
                var date = this._timeSvc.strftime("%Y %m %d", timeTuple.length, timeTuple);

                var secsNow = this._timeSvc.time();
                var timeTupleNow = this._timeSvc.localtime(secsNow, new Object());
                var dateNow = this._timeSvc.strftime("%Y %m %d", timeTupleNow.length, timeTupleNow);

                return date == dateNow;
            } catch (ex) {
                this.log.error("_isToday error: "+ex);
            }
            return false;
        ]]> </body>
        </method>

        <method name="_getLastModifiedMessage">
        <parameter name="url"/>
        <body> <![CDATA[
            this.log.info("_getLastModifiedMessage(url='"+url+"')");
            var msg = "";
            try {
                // Return a pretty string describing the last modified time of the given
                // URL if available.
                if (url.search(/^(file\:)/) != -1) {
                    var timeSvc = Components.classes["@activestate.com/koTime;1"].
                                 getService(Components.interfaces.koITime);
                    var path = ko.uriparse.displayPath(url);
                    return timeSvc.nice_modtime_from_path(path);
                } else if (this._remoteSvc.isSupportedRemoteUrl(url))  {
                    msg = this._bundle.GetStringFromName("couldNotDetermineRemoteFile.message");
                } else  {
                    msg = this._bundle.GetStringFromName("couldNotDetermine.message");
                }
            } catch (ex) {
                this.log.exception(ex, "_getLastModifiedMessage error");
            }
            return msg;
        ]]> </body>
        </method>


        <method name="observe">
        <parameter name="subject"/>
        <parameter name="topic"/>
        <parameter name="data"/>
        <body> <![CDATA[
            this.log.info("observe(subject="+subject+", topic="+topic+
                          ", data="+data+")");
            try {
                // Observing (1) pref and (2) plain nsIObserver notifications.
                var name = topic;

                switch (name) {
                case "mru_changed":
                    var visible = this.parentNode.parentNode.parentNode.parentNode.isCurrent;
                    if (data == "mruProjectList") {
                        if (visible) {
                            this.updateProjectMRUTable();
                        } else {
                            this._updateProjectMRUWhenVisible = true;
                        }
                    } else if (data == "mruFileList") {
                        if (visible) {
                            this.updateFileMRUTable();
                        } else {
                            this._updateFileMRUWhenVisible = true;
                        }
                    }
                    break;
                case "defaultDateFormat":
                    this.updateFormat(name);
                    break;
                }
            } catch (ex) {
                this.log.error("observe error: "+ex);
            }
        ]]> </body>
        </method>


        <method name="getEntryByCoord">
        <parameter name="x"/>
        <parameter name="y"/>
        <body>
        <![CDATA[
            var select = new Object();
            select.row = {};
            select.col = {};
            select.obj = {};
            select.cell = {};
            select.cell.x = {};
            select.cell.y = {};
            select.cell.h = {};
            select.cell.w = {};
        
            //var columnheight = this.getElement('treecol','name').boxObject.height;
            var boxObject = this.tree.treeBoxObject.
                        QueryInterface(Components.interfaces.nsITreeBoxObject)
            boxObject.getCellAt(x, y, select.row, select.col, select.obj);
            try {
                if (select.col.value == null ||
                    select.row.value < 0 || select.row.value >= this.treeView.rowCount) {
                    // XXX this.newVar();
                    return null;
                } else {
                    boxObject.getCoordsForCellItem(select.row.value, select.col.value, 'text', select.cell.x, select.cell.y, select.cell.w, select.cell.h);
                    //select.cell.x.value += boxObject.x;
                    //select.cell.y.value += (boxObject.y + columnheight -1);
                }
            } catch (e) {
                return null;
            }
            return select;
        ]]>
        </body>
        </method>

        <method name="onTooltipPopup">
        <parameter name="event"/>
        <body> <![CDATA[
            // Update the tooltip text... Must return false if the popup
            // should not be displayed.

            var select = this.getEntryByCoord(event.clientX, event.clientY);
            if (select && select.obj.value != "twisty") {
                this.tooltip.firstChild.value = "";
                //var rowItem = this.view.getRowItem(select.row.value);
                var item = this.tree.view.getItemAtIndex(select.row.value);
                var url = item.getAttribute('url');
                try {
                    this.tooltip.firstChild.value = ko.uriparse.URIToLocalPath(url);
                } catch(e) {
                    this.tooltip.firstChild.value = url;
                }
                return this.tooltip.firstChild.value != "";
            }
            return false;
        ]]> </body>
        </method>
    </implementation>

    <handlers>
        <handler event="DOMMouseScroll" phase="bubbling">
        <![CDATA[
            // prevent the whole window scrolling if scrolling the tree
            event.preventDefault();
        ]]>
        </handler>
        <handler event="mousemove" phase="bubbling">
        <![CDATA[
            // kill the tooltip if it is visible
            this.tooltip.hidePopup();
        ]]>
        </handler>
    </handlers>
</binding>

<binding id="view-startpage" display="xul:box"
         extends="chrome://komodo/content/bindings/views.xml#view-base">
    <resources>
        <stylesheet src="chrome://komodo/skin/global/global.css"/>
        <stylesheet src="chrome://komodo/skin/startpage/startpage.css"/>
    </resources>
    <content>
        <xul:vbox anonid="startpage-box" flex="1">
            <xul:box type="startpage" anonid="landingPageBox" title="&whatSNew.title;"
                     pref="start_page_landing_box_closed" ordinal="0"
                     onboxopen="
                        window.document.getBindingParent(this).loadLandingPage();
                     ">
            <xul:browser anonid="landingPage" style="height: 200px;" flex="1"
                         type="content" disablehistory="true"
                         onmousedown="window.document.getBindingParent(this).browserOnClick(event);"
                         onclick="
                            event.stopPropagation();
                            event.preventDefault();
                            event.cancelBubble = true;
                         "
                         onmouseup="
                            event.stopPropagation();
                            event.preventDefault();
                            event.cancelBubble = true;
                         "
                         />
            </xul:box>
            
            <xul:box type="startpage" anonid="quick-links-box" title="&quickLinks.title;"
                     pref="start_page_quick_links_box_closed" ordinal="1">
                <xul:hbox flex="1">
                    <xul:box>
                        <xul:box type="startpage-bullet"
                                 title="&openSampleProject.title;"
                                 oncommand="window.document.getBindingParent(this).openSampleProject();"
                                 class="open-sample">
                            <xul:description width="240px">&openSampleProject.description;</xul:description>
                        </xul:box>
                        <xul:box type="startpage-bullet"
                                 title="&checkConfiguration.title;"
                                 oncommand="window.document.getBindingParent(this).checkConfiguration();"
                                 class="properties-icon">
                            <xul:description width="240px">&checkConfiguration.description;</xul:description>  
                        </xul:box>
                    </xul:box>
                </xul:hbox>
            </xul:box>

            <xul:box type="startpage" anonid="mru-box" title="&recentProjectFiles.title;"
                     pref="start_page_mru_box_closed" flex="1" ordinal="2">
                <xul:hbox flex="1">

                    <xul:separator/>
                    <xul:vbox style="padding: 2px 5px 0px 5px">
                        <xul:label value="&actions.label;" style="font-weight: bold"/>
                        <xul:button anonid="menu_file_newFile"
                                  label="&newFile.label;"
                                  align="left" pack="center"
                                  class="button-link native-new-file-icon"
                                  observes="cmd_newTemplate"
                                  />
                        <xul:button label="&newProject.label;"
                                  anonid="menu_newProject"
                                  class="button-link new-project-icon"
                                  observes="cmd_newProject"
                                  />
                        <xul:menuseparator anonid="sp-template-mru-rows"/>
                    </xul:vbox>
                </xul:hbox>
            </xul:box>
        </xul:vbox>  <!-- end getting-started-box -->

    </content>
    <implementation name="viewstartpage" implements="koIStartPageView, nsIObserver">
        <!-- `document` DEPRECATED in Komodo 6.0.0, use `koDoc` -->
        <property name="document"
            onget="this.log.deprecated('`koIView.document` is deprecated, use `koIView.koDoc`');
                return this.koDoc;"
            onset="this.log.deprecated('`koIView.document` is deprecated, use `koIView.koDoc`');
                this.koDoc = val" />

        <property name="title" readonly="true" onget="return '&startPage.title;';"/>
        
        <field name="widgets">null</field>

        <field name="_updateTemplateMRUWhenVisible">true</field>
        
        <field name="_requestedFeatureStatuses">false</field>

        <constructor><![CDATA[
            try {
                this._bundle = Components.classes["@mozilla.org/intl/stringbundle;1"]
                    .getService(Components.interfaces.nsIStringBundleService)
                    .createBundle("chrome://komodo/locale/startpage/startpage.properties");
            } catch(ex) {
                this.log.error(ex);
            }
        ]]></constructor>

        <method name="init">
        <body> <![CDATA[
            //this.log.setLevel(ko.logging.LOG_DEBUG);
            this.log.info("init");
            try {
                this.parentView.setContext(this, "startpageTabContextMenu");

                var obSvc = Components.classes["@mozilla.org/observer-service;1"].
                    getService(Components.interfaces.nsIObserverService);

                this.widgets = new Object();
                this.widgets.mrubox = document.getAnonymousElementByAttribute(this, "anonid", "mru-box");
                this.widgets.templateMRURows = document.getAnonymousElementByAttribute(this, "anonid", "sp-template-mru-rows");
                this.widgets.openSelectedButton = document.getAnonymousElementByAttribute(this, "anonid", "sp-open-selected-button");
                this.widgets.removeSelectedButton = document.getAnonymousElementByAttribute(this, "anonid", "sp-remove-selected-button");
                this.widgets.quickLinksBox = document.getAnonymousElementByAttribute(this, "anonid", "quick-links-box");
                this.widgets.landingPageBox = document.getAnonymousElementByAttribute(this, "anonid", "landingPageBox");

                window.setTimeout(function (el) {
                    var t = document.createElement("mrutree");
                    el.insertBefore(t, el.firstChild);
                    t.init();
                }, 1, this.widgets.mrubox.firstChild);
                
                obSvc.addObserver(this, 'mru_changed', false);

                if (!ko.prefs.getBooleanPref("start_page_landing_box_closed")) {
                    this.loadLandingPage();
                }
            } catch(ex) {
                this.log.error("init error: "+ex);
            }
        ]]> </body>
        </method>

        <method name="loadLandingPage">
        <body>
        <![CDATA[
        try {
            // just ping the server to see if we can load a webpage
            var browser = document.getAnonymousElementByAttribute(this, "anonid", "landingPage");
            var url = ko.prefs.getStringPref('start_page_landing_box_url');
            if (!url) {
                browser.setAttribute("src", "chrome://komodo/content/startpage/offline/edit_offline.html");
                return;
            }

            var infoSvc = Components.classes["@activestate.com/koInfoService;1"].
                          getService(Components.interfaces.koIInfoService);
            if (url.indexOf("?") == -1) url += "?";
            url += "v=" + infoSvc.version;
            //this.log.warn("loading url "+url);

            var req = new XMLHttpRequest();
            req.open('HEAD', url, true);
            req._browser = browser;
            var this_ = this;
            req.onload = function (event) {
                if(req.status == 200) {
                    var flags = Components.interfaces.nsIWebNavigation.LOAD_FLAGS_BYPASS_CACHE |
                                Components.interfaces.nsIWebNavigation.LOAD_FLAGS_BYPASS_PROXY;
                    var webNav = req._browser.webNavigation;
                    webNav.loadURI(url, flags, null, null, null);
                } else {
                    this_.log.warn("unable to connect, status "+req.status);
                    req._browser.setAttribute("src", "chrome://komodo/content/startpage/offline/edit_offline.html");
                }
            };
            req.onerror = function (event) {
                this_.log.info("unable to connect (probably offline)");
                req._browser.setAttribute("src", "chrome://komodo/content/startpage/offline/edit_offline.html");
            }
            req.send(null);
            // kep a reference
            this._req = req;
        } catch(e) {
            this.log.exception(e);
        }
        ]]>
        </body>
        </method>
        <method name="browserOnClick">
        <parameter name="event"/>
        <body> <![CDATA[
        event.stopPropagation();
        event.preventDefault();
        event.cancelBubble = true;

        var url = null;
        var chrome = null;
        var target = event.target;
        // deal with A elements having child elements such as SPAN
        while (target) {
            if (target.getAttribute) {
                url = target.getAttribute("href");
                if (url) break;
            }
            target = target.parentNode;
        }
        if (!url) return;
        if (url.match(/^\komododoc:/)) {
            ko.help.open(url.substring(10));
            return;
        }
        if (!url.match(/^\w+:\/\//)) {
            var browser = document.getAnonymousElementByAttribute(this, "anonid", "landingPage");
            url = browser.currentURI.resolve(url);
        }
        if (!url) return;
        ko.browse.openUrlInDefaultBrowser(url);
        ]]> </body>
        </method>

        <method name="close">
        <body> <![CDATA[
            this.log.info("close");
            try {
                var obSvc = Components.classes["@mozilla.org/observer-service;1"].
                        getService(Components.interfaces.nsIObserverService);
                obSvc.removeObserver(this, 'mru_changed');
                
                // Finalize the "Recent Projects & Recent Files" mru-tree.
                this.widgets.mrubox.firstChild.firstChild.fini();

                // Finalize all the widgets that use pref observers.
                this.widgets.quickLinksBox.finalize();
                this.widgets.landingPageBox.finalize();
                this.widgets.mrubox.finalize();
            } catch(ex) {
                this.log.error(ex);
            }

            /////// copied from view-base.close due to xbl inheritance issues //////
            xtk.domutils.fireEvent(this, 'view_closed');
            try {
                if (this.parentView)
                    this.parentView.removeView(this);
            } catch (e) {
                this.log.exception(e,"Unable to remove the view from the parentView, logging and continuing.");
            }
            return true;
            ////////////////////////////////////////////////////////////////////////
        ]]> </body>
        </method>

        <method name="initWithDocument">
        <parameter name="doc"/>
        <body> <![CDATA[
            this.log.info("initWithDocument");
            this.koDoc = doc;
            this.parentView.updateLeafName(this);
            this.parentView.updateFileStatus(this);
            xtk.domutils.fireEvent(this, 'view_document_attached');
            xtk.domutils.fireEvent(this, 'current_view_changed');
        ]]> </body>
        </method>

        <method name="doFocus">
        <parameter name="event"/>
        <body>
        <![CDATA[
            // do nothing, just implements view api
        ]]>
        </body>
        </method>

        <method name="setFocus">
        <body> <![CDATA[
            this.log.info("setFocus");
            try {
                // Lazily rebuild the MRU tables, as necessary, when this
                // view is made visible.
                var mru = this.widgets.mrubox.firstChild.firstChild
                this.log.info("setFocus: update project table="+mru.nodeName);
                if (mru.nodeName == "mrutree") {
                    mru.updateProjectMRUTable();
                    mru.updateFileMRUTable();
                }
                if (this._updateTemplateMRUWhenVisible) {
                    this._updateTemplateMRU();
                    this._updateTemplateMRUWhenVisible = false;
                }

                // Update the focus, otherwise the command system may think the
                // focus is still on an editor view.
                this.focus();
            } catch(ex) {
                this.log.error("setFocus error: "+ex);
            }
        ]]> </body>
        </method>

        <method name="observe">
        <parameter name="subject"/>
        <parameter name="topic"/>
        <parameter name="data"/>
        <body> <![CDATA[
            this.log.info("observe(subject="+subject+", topic="+topic+
                          ", data="+data+")");
            try {
                // Observing (1) pref and (2) plain nsIObserver notifications.
                // Below we key on the notification "name", whose def'n
                // depends on the type of notification.
                var name;
                if (topic == "") {
                    name = data;  // presumably this is a pref notification
                } else {
                    name = topic; // a normal notification
                }

                switch (name) {
                case "mru_changed":
                    var prefName = data;
                    // XXX This is inefficient if say, a number of files are opened at
                    //     once. We will regenerate the file list for every opened file which
                    //     means, among other things, that we will stat every file in
                    //     the MRU for every file open.
                    if (prefName == "mruTemplateList") {
                        if (this.isCurrent) {
                            this._updateTemplateMRU();
                        } else {
                            this._updateTemplateMRUWhenVisible = true;
                        }
                    }
                    break;
                }
            } catch (ex) {
                this.log.error("observe error: "+ex);
            }
        ]]> </body>
        </method>

        <method name="_updateTemplateMRU">
        <body> <![CDATA[
            this.log.info("_updateTemplateMRU()");
            try {
                // Get the MRU info.
                var mru = null;
                if (ko.prefs.hasPref("mruTemplateList")) {
                    mru = ko.prefs.getPref("mruTemplateList");
                }

                // Clear the table (don't clear the header row).
                while (this.widgets.templateMRURows.nextSibling)  {
                    var row = this.widgets.templateMRURows.nextSibling;
                    this.widgets.templateMRURows.parentNode.removeChild(row);
                }

                if (mru && mru.length > 0) {
                    for (var i=0; i<mru.length; i++) {
                        this._addMRUButton("template", i, mru.getStringPref(i));
                    }
                }
            } catch(ex) {
                this.log.exception(ex, "_updateTemplateMRU error: ");
            }
        ]]> </body>
        </method>



        <method name="_addMRUButton">
        <parameter name="mru"/>
        <parameter name="index"/>
        <parameter name="url"/>
        <body> <![CDATA[
            this.log.debug("_addMRUButton(mru='"+mru+"')");
            try {
                // Add a "No Recent Files/Projects" row.
                //    "mru" is either "project" or "file", indicating which MRU.
                //
                // One like this:
                //    <xul:button label="&newProjectFromTemplate.label;"
                //              anonid="menu_newProjectFromTemplate"
                //              class="button-link new-project-icon"
                //              observes="cmd_newProjectFromTemplate"
                //              />

                var hbox, label;

                var btn = document.createElement("button");
                btn.setAttribute("class", "button-link native-new-file-icon");
                var name = ko.uriparse.baseName(url);
                btn.setAttribute("label", name);

                btn.setAttribute("oncommand",
                    "ko.uilayout.newFileFromTemplateOrTrimMRU('"+url+"', '"+name+"',"+index+");");

                this.widgets.templateMRURows.parentNode.appendChild(btn);
            } catch (ex) {
                this.log.error("_addMRUButton error: "+ex);
            }
        ]]> </body>
        </method>


        <method name="openSampleProject">
        <body> <![CDATA[
            this.log.info("openSampleProject");
            try {
                var koDirSvc = Components.classes["@activestate.com/koDirs;1"].
                        getService(Components.interfaces.koIDirs);
                var osPathSvc = Components.classes["@activestate.com/koOsPath;1"].
                        getService(Components.interfaces.koIOsPath);
                var sampleProjectPath = osPathSvc.joinlist(3,
                        [koDirSvc.userDataDir, "samples", "sample_project.komodoproject"]);
                
                if (! osPathSvc.exists(sampleProjectPath)) {
                    var response = ko.dialogs.okCancel(this._bundle.formatStringFromName(
                                "theSampleProjectCouldNotBeFound.message",
                                [sampleProjectPath], 1),
                                "Cancel");
                    if (response == "OK") {
                        var initSvc = Components.classes["@activestate.com/koInitService;1"].
                                getService(Components.interfaces.koIInitService);
                        initSvc.installSamples(true);
                    } else {
                        return;
                    }
                }

                var sampleProjectUrl = ko.uriparse.pathToURI(sampleProjectPath);
                ko.projects.open(sampleProjectUrl);
            } catch (ex) {
                this.log.exception(ex,"openSampleProject error: "+ex);
            }
        ]]> </body>
        </method>

        <method name="checkConfiguration">
        <body> <![CDATA[
            this.log.info("checkConfiguration");
            try {
                window.openDialog("chrome://komodo/content/dialogs/featureControlPanel.xul",
                                  "Komodo:FeatureControlPanel",
                                  "chrome,titlebar");
            } catch (ex) {
                this.log.exception(ex, "checkConfiguration error");
            }
        ]]> </body>
        </method>

    </implementation>


</binding>

</bindings>
