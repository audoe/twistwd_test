- localization: .dtd, .properties
- MPL in ok tree
- bug: dialog is globally modal on-top on Mac OS X. Why?


# TODO later

- nicknames
- hgignore support in project includes/excludes
- project index
- multiple selection with Shift+arrows with focus in textbox
- some identifying style for hit types (so can see where they came from)
  Some commented-out code that is a start at this in r27314.

      

# gatherers (i.e. sources of files/tabs/hits for the dialog)

- files in the current project: a search on the project's index
  (if a long time since it was indexed, then send a warning message
  to uiDriver)
- files in the cwd(s)
- currently open views
- recent files in the history
- [later] files under "interesting dirs"
- [later] files *under* cwd(s), this is hard because need to index those
  dirs. This smacks of trying to be too smart.
- [later] go-tool prefix dirs
- [later] remote cwd(s)
- [later] sidebar panels and bottom panels
- [later] starred/bookmarked files


# "path mode" navigation

- Support path navigation a la Open/Find toolbar? How does that work?
- Presence of any of ['/', '~', '..', '\\'] switches to path mode?
- Alarm bells go off with modes.


# older thoughts

See also: black workbook p 87

- what will the UI be? tree? HTML? that new TAC type (a la awesome bar?)
  a. tree in dialog a la textmate and quickopen extension.
  b. Eventually want to move to a textbox in the toolbar with TAC on that
     using the awesome-bar HTML TAC elements
  c. Then *eventually* want to have a ubiquity-based UI for this.
- quick dialog and naive functionality for curr project
- quick functionality for recent history
- plan for performant functionality for large projects
    - perf compare: (a) sqlite dbs (building db, searching it, see how
      FF awesome bar is doing it) vs (b) pprint or pickle or flat file
      simple layout
    - http://mxr.mozilla.org/mozilla-central/source/toolkit/components/places/src/nsNavHistory.cpp
    - do we just index file base names? perhaps up one dir too? That
      might be problematic because would mean that "chrome dtd" wouldn't
      match anything in Komodo project. *Could* potentially deal with
      that: Multi-word Q would also build on previous if it had hits.
      If no hits, then start afresh in the index and use the bits that
      drive it to zero to match against the full path. Does that avoid
      q-order-dependent results? I.e. "chrome dtd" and "dtd chrome" MUST
      return the same results.
    - can sqlite FTS help here? Does it hit with partial word match?
- polish UI
- curr dir bias
- absolute path support
- go.xml support?
- current open tabs

