/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Komodo code.
 * 
 * The Initial Developer of the Original Code is ActiveState Software Inc.
 * Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 * ActiveState Software Inc. All Rights Reserved.
 * 
 * Contributor(s):
 *   ActiveState Software Inc
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * 
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsITreeView.idl"


// An outliner view for the extension lists in the "Windows Integration"
// preferences panel.
[scriptable, uuid(3E38EFE9-8DC9-41e9-9F91-DA5DF086AC05)]
interface koIExtensionsView: nsITreeView {
    // Add the given ext. Silently do nothing if already have this ext.
    void Add(in string extension);
    // Remove the given ext. Silently do nothing if don't have this ext.
    void Remove(in string extension);
    // Remove the ext at the given index. Raise an error if don't have
    // this index.
    void RemoveIndex(in PRInt32 index);
    string Get(in PRUint32 index);

    // Sort the find result data by a certain key (this key typically
    // matches the <outlinercol id=.../> id's).
    void Sort(in string sortBy);

    // Get/Set the list of extensions as a ';'-separated list.
    void SetExtensions(in string extensions); // Set initial state.
    string GetExtensions();
};


// A service to integrate Komodo into Microsoft Windows.
[scriptable, uuid(EC1EA3D5-60B8-4b7b-AF97-5EA0D9A3ABE6)]
interface koIWindowsIntegrationService: nsISupports {
    // All methods will raise an exception and set the error on
    // koILastErrorService in case of failure.

    // Set and retrieve the "Edit" and "Edit with Komodo" associations.
    void setEditAssociations(in string encodedAssocs);
    string getEditAssociations(); // return ';'-separated list of extensions
    void setEditWithAssociations(in string encodedAssocs);
    string getEditWithAssociations(); // return ';'-separated list of exts
    
    // Check if the current "Edit" and "Edit with Komodo" associations
    // are set properly in the registry. If they *are* then return null.
    // Otherwise return a text description of what is not set.
    wstring checkAssociations();
};

