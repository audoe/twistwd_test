#!/usr/local/bin/perl
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
# 
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
# 
# The Original Code is Komodo code.
# 
# The Initial Developer of the Original Code is ActiveState Software Inc.
# Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
# ActiveState Software Inc. All Rights Reserved.
# 
# Contributor(s):
#   ActiveState Software Inc
# 
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
# 
# ***** END LICENSE BLOCK *****

# Conscript for building the scintilla dll (with lexer)
#   Neil Hodgson provides a makefile to build this but it duplicates
#   some stuff that is better done with Komodo's Cons built system. The
#   makefile is pretty simple anyway so it is replaced by a direct
#   Cons build system. This will have to be kept in sync.
#
#   NOTE: This *should* have been a joke in Cons, but it does not
#     know anythings about resource compilation on Windows, so have
#     to do it manually. I still don't want to just call Neil's
#     makefile because it hardcodes paths.
#

Import(
    'cons',
    'platform',
    'build',
    'buildType',
    'ranRegxpcomStateFileName',
    'mozComponentsDir',
    'mozLibPath',
    'mozBin',
    'mozIncludePath',
    'mozIdlIncludePath',
    'mozPluginsDir',
    'mozSrc',
    'mozObjDir',
    'mozDist',
    'mozDevelDist',
    'scintillaBuildDir',
    'idlExportDir',
    'unsiloedPythonExe',
    'build',
    'mozVersion',
    'mozVersionNumber',
    'productType',
    'buildFlavour',
    'sdkDir',
);

if ($^O eq "linux") {
    Import(
        "linuxDistro",
    );
}

# Autogenerate C++ interface functions and IDL interface stubs from
# Scintilla.iface. The IDL stubs are patched into ISciMoz.template.idl to
# make ISciMoz.idl.
#
# The Scintilla.iface *must* be patched before the XPFacer is used,
# to ensure the Scintilla definitions are aware of pointer references,
# this is done in the "iface_64bit.patch" file in the patches directory.
$cons->Command(
    ["npscimoz_gen.h",
     "generated_plugin_code.h",
     "ISciMoz_lite_gen.idl.fragment",
     "ISciMoz_gen.idl.fragment",
     "ISciMoz_gen.consts.fragment",
     "ISciMoz_jswrapper_gen.fragment"],
    # files needed to do the generation
    "XPFacer.py",
    "../scintilla/include/Scintilla.iface",
    "../scintilla/include/Face.py",
    qq(
        $unsiloedPythonExe bin/run-in-dir.py %1:d $unsiloedPythonExe %1:f
    )
);

$cons->Command(
    "ISciMoz.idl",
    # files needed to do the generation and patching
    "ISciMoz.template.idl",
    "ISciMoz_lite_gen.idl.fragment",
    "ISciMoz_gen.idl.fragment",
    "ISciMoz_gen.consts.fragment",
    "#util/patch-template.py",
    qq(
        $unsiloedPythonExe %5 %1 %0 __ISCIMOZ_LITE_INTERFACE__ \@%2 __ISCIMOZ_INTERFACE__ \@%3 __ISCIMOZ_INTERFACE_CONSTS__ \@%4
    )
);

# build the typelibs and headers from the idl files
$cons->Install($idlExportDir, 'ISciMoz.idl');
$cons->Install($idlExportDir, 'ISciMozEvents.idl');
$cons->Install($idlExportDir, 'ISciMozController.idl');
$cons->BuildAndInstallXpt('ISciMoz.idl');
$cons->BuildAndInstallXpt('ISciMozEvents.idl');
$cons->BuildAndInstallXpt('ISciMozController.idl');
$cons->BuildHeaderFromIdl('ISciMoz.idl');
$cons->BuildHeaderFromIdl('ISciMozEvents.idl');
$cons->Preprocess('koScintillaController.p.py','koScintillaController.py');
$cons->InstallXpcomComponent('koScintillaController.py');


$cons->Command(
    'scimoz_wrapper.js',
    'scimoz_wrapper.template.js',
    'ISciMoz_jswrapper_gen.fragment',
    "#util/patch-template.py",
    qq(
        $unsiloedPythonExe %3 %1 %0 __ISCIMOZ_JS_WRAPPER_GEN__ \@%2
    ));
$cons->InstallXpcomComponent('scimoz_wrapper.js',
                             {'@activestate.com/koSciMozWrapper;1' => "{487f68c7-386a-4802-8874-b0f4912e59dc}"});

# build and install the Mozilla plugin
my $pluginName;
my $xScintillaBuildDir = DirPath($scintillaBuildDir);

if ($platform eq "win") {
    $pluginName = 'npscimoz.dll';

    %consLocal = $cons->copy();

    my $LDFLAGS = $consLocal{'LDFLAGS'} . " /dll kernel32.lib user32.lib gdi32.lib shell32.lib advapi32.lib xpcomglue_s.lib xpcom.lib nspr4.lib mozalloc.lib";
    foreach my $libDir (split(';', $mozLibPath)) {
        $LDFLAGS .= " /libpath:$libDir";
    }
    $consLocal{'CPPPATH'} = [
        "$scintillaBuildDir/include",
        "$mozDevelDist/include/xulapp",
        "$mozSrc/mozilla/xpcom/ds",
        "$mozDevelDist/include/widget",
        "$mozDevelDist/include/dom",
        "$mozDevelDist/include/string",
        "$mozDevelDist/include/xpcom",
        "$mozDevelDist/include/nspr",
        "$mozDevelDist/include/content",
        "$mozDevelDist/include/gfx",
        "$mozDevelDist/include/content",
        "$mozDevelDist/include/java",
        "helper"];
    my $CXXFLAGS = $consLocal{'CXXFLAGS'} .
        " /W3 /D_WINDOWS /DWIN32 /DXP_WIN" .
        " /FI$mozObjDir\\mozilla-config.h" .
        " /DCONTAINER_HANDLES_EVENTS=1 /DINCLUDE_DEPRECATED_FEATURES";

    if ($buildType eq 'debug') {
        $CXXFLAGS .= " /ZI /Od /DDEBUG /D_DEBUG /MDd";
        $LDFLAGS .= " /DEBUG";
    } else {
        $CXXFLAGS .= " /Ox /DNDEBUG /D_NDEBUG /MD";
        # LDFLAGS is fine!
    }

    if ($mozVersionNumber le 699) {
        # To avoid linker problems like this:
        #     nsSciDoc.obj : error LNK2019: unresolved external symbol "__declspec(dllimport) wchar_t * __cdecl ToNewUnicode(class nsAString_internal const &)" (__imp_?ToNewUnicode@@YAPA_WABVnsAString_internal@@@Z) referenced in function "public: virtual unsigned int __stdcall SciDoc::TransformLineEnds(wchar_t const *,int,wchar_t * *)" (?TransformLineEnds@SciDoc@@UAGIPB_WHPAPA_W@Z)
        # The problem is the mangled linkage name. Attempting to import:
        #   ?ToNewUnicode@@YAPA_WABVnsAString_internal@@@Z (wchar_t * __cdecl ToNewUnicode(class nsAString_internal const &)
        # But the export is:
        #   ?ToNewUnicode@@YAPAGABVnsAString_internal@@@Z (unsigned short * __cdecl ToNewUnicode(class nsAString_internal const &))
        # From http://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B_Name_Mangling
        #   '_W' means __wchar_t
        #   'G'  means unsigned short
        # From http://groups.google.com/group/mozilla.dev.embedding/browse_thread/thread/454eea957b336805
        #   Use '-Zc:wchar_t-' (Treat wchar_t as Built-In Type: NO) option.
        $CXXFLAGS .= " -Zc:wchar_t-";
    }

    # Others parts of the build for other platforms are defining these.
    # TODO: Clean up #define's in the file. This Conscript is a mess
    #       and is causing confusion.
    $CXXFLAGS .= " /DMOZ_VERSION=$mozVersionNumber";
    $CXXFLAGS .= " /DBUILDFLAVOUR=$buildFlavour";

    foreach my $includeDir (split(';', $mozIncludePath)) {
        $CXXFLAGS .= " /I$includeDir"
    }

    $consLocal{'CXXFLAGS'} = $CXXFLAGS;
    $consLocal = new cons(%consLocal);
    my @scimozobjs = $consLocal->Objects(
        "npn_gate.cpp",
        "plugin.cxx",
        "nsSciMoz.cxx",
        "nsSciMozWin.cxx",
        "sendscintilla.cxx",
        "SciMozEvents.cxx"
        );

    $cons->Command("npscimoz.res",
        "npscimoz.rc",
        qq(
            rc /fo%> %<
        )
    );
    $cons->Command($pluginName,
        "npscimoz.def",
        "npscimoz.res",
        @scimozobjs,
        qq(
            link /nologo $LDFLAGS /out:%> /DEF:%1 %<
        )
    );
    $consLocal->Depends($pluginName,
        # scintilla must be built first (this is a little artificial because
        # this is only necessary to get the scintilla headers in the build
        # directory before this build
        "$scintillaBuildDir/bin/SciLexer.dll"
    );
}

elsif ($platform eq "darwin") {
    $pluginName = "SciMoz.plugin";

    %consLocal = $cons->copy();
    $consLocal{'LDFLAGS'} = "-dynamic";
    $consLocal{'LIBS'} = "-bundle -lscintilla";
    $consLocal{'LIBS'} .= " -Wl,-dead_strip -L$mozDevelDist/bin ";
    $consLocal{'LIBS'} .= " -Wl,-executable_path,$mozDevelDist/bin ";
    $consLocal{'LIBS'} .= " $mozDevelDist/lib/libxpcomglue_s.a -lxpcom -lnspr4 -lmozalloc ";
    # add required frameworks
    $consLocal{'LIBS'} .= "-framework Carbon -framework CoreFoundation ";
    # scintilla
    

    $consLocal{'CPPPATH'} = "$scintillaBuildDir/lexlib:$scintillaBuildDir/include:$scintillaBuildDir/src:$scintillaBuildDir/macosx:$mozIncludePath:$mozDevelDist/include/java";
    $consLocal{'LIBPATH'} = "$mozLibPath:$mozBin";
    $consLocal{'CXXFLAGS'} = " -Wall -Wno-non-virtual-dtor -fno-exceptions -fno-rtti -fno-common -fshort-wchar";
    # Add the global FLAGS.
    $consLocal{'CXXFLAGS'} .= " $consLocal{ENV}{'CXXFLAGS'}";
    $consLocal{'CFLAGS'} = $consLocal{ENV}{'CFLAGS'};
    $consLocal{'LDFLAGS'} = $consLocal{ENV}{'LDFLAGS'};
    $consLocal{'CXXFLAGS'} .= " -DSCI_NAMESPACE=1 -DMACOSX=1 -DSCI_LEXER ".
                            " -DCONTAINER_HANDLES_EVENTS=1 -DINCLUDE_DEPRECATED_FEATURES".
                            " -DXP_MACOSX=1 -DNO_X11=1 -DUSE_SYSTEM_CONSOLE=1 ".
                            " -DMOZ_VERSION=$mozVersionNumber ";
    $consLocal{'CXXFLAGS'} .= " -DBUILDFLAVOUR=$buildFlavour ";
    # to have SciMoz use carbon instead of quickdraw, do the following
    #if ($mozVersionNumber >= 190) {
    #    $consLocal{'CXXFLAGS'} .= " -DUSE_CARBON=1";
    #}
    $consLocal{'CXXFLAGS'} .= " -include Carbon/Carbon.h ";

    # Ensure that these are defined for use by mozilla headers
    $consLocal{'CXXFLAGS'} .= " -include $mozObjDir/mozilla-config.h " .
        " -I$mozDevelDist/include/string" .
        " -I$mozSrc/mozilla/xpcom/ds" .
        " -I$mozDevelDist/include/content" .
        " -I$mozDevelDist/include/gfx" .
	" -I/Developer/Headers/FlatCarbon";

    if ($buildType eq 'debug') {
        $consLocal{'CXXFLAGS'} .= " -g";
        $consLocal{'CXXFLAGS'} .= " -DNS_DEBUG -DDEBUG "; # for debugging
    } else {
        $consLocal{'CXXFLAGS'} .= " -Os ";
    }

    $consLocal = new cons(%consLocal);
    $consLocal->Depends("SciMoz", "$mozBin/libscintilla.dylib");
    $consLocal->Install("$mozBin", "$scintillaBuildDir/bin/libscintilla.dylib");


    $consLocal->Program(
	"SciMoz",
	"plugin.cxx",
        "npn_gate.cpp",
	"nsSciMoz.cxx",
	"nsSciMozMac.cxx",
	"sendscintilla.cxx",
        "SciMozEvents.cxx",
	);

    # here we build the bundle package
    # we also manually install since installRecursive likes to mess on up this.
    $cons->Command("$pluginName/Contents/MacOS/SciMoz",
		"SciMoz.r",
		"Info.plist",
		"English.lproj/InfoPlist.strings",
		"./SciMoz",
		(
		 qq(
$unsiloedPythonExe bin/run-in-dir.py %1:d rm -Rf SciMoz.plugin
$unsiloedPythonExe bin/run-in-dir.py %1:d mkdir -p SciMoz.plugin
$unsiloedPythonExe bin/run-in-dir.py %1:d mkdir -p SciMoz.plugin/Contents
$unsiloedPythonExe bin/run-in-dir.py %1:d mkdir -p SciMoz.plugin/Contents/MacOS
$unsiloedPythonExe bin/run-in-dir.py %1:d mkdir -p SciMoz.plugin/Contents/Resources
$unsiloedPythonExe bin/run-in-dir.py %1:d cp Info.plist SciMoz.plugin/Contents
$unsiloedPythonExe bin/run-in-dir.py %1:d chmod u+w SciMoz.plugin/Contents/Info.plist
$unsiloedPythonExe bin/run-in-dir.py %1:d cp -R English.lproj SciMoz.plugin/Contents/Resources
$unsiloedPythonExe bin/run-in-dir.py %1:d /Developer/Tools/Rez -useDF -i /Developer/Headers/FlatCarbon /Developer/Headers/FlatCarbon/Types.r SciMoz.r -o SciMoz.plugin/Contents/Resources/SciMoz.rsrc
$unsiloedPythonExe bin/run-in-dir.py %1:d cp SciMoz SciMoz.plugin/Contents/MacOS/SciMoz
$unsiloedPythonExe bin/run-in-dir.py %1:d chmod -R a+r SciMoz.plugin
$unsiloedPythonExe bin/run-in-dir.py %1:d rm -rf $mozPluginsDir/$pluginName
$unsiloedPythonExe bin/run-in-dir.py %1:d mkdir -p $mozPluginsDir
$unsiloedPythonExe bin/run-in-dir.py %1:d cp -R SciMoz.plugin $mozPluginsDir/$pluginName
chmod a+rX $mozPluginsDir/$pluginName
                   )
		));

} 
else {
    $pluginName = "libnpscimoz.so";

    %consLocal = $cons->copy();
    $consLocal{'LIBS'} = "$xScintillaBuildDir/bin/scintilla.a";
    # PCRE is built from contrib/pcre and is required by LexUDL.
    $consLocal{'LIBS'} .= " $xScintillaBuildDir/gtk/libpcre.a";
    $consLocal{'LIBS'} .= " `pkg-config --libs gthread-2.0 gtk+-2.0 gmodule-no-export-2.0`";
    $consLocal{'LIBS'} .= " -lxpcomglue_s -lxpcom -lmozalloc -lplds4 -lplc4 -lnspr4 ";
    $consLocal{'LDFLAGS'} = " -fPIC -Wl,-z,defs -shared";

    $consLocal{'CPPPATH'} = "$mozIncludePath:$scintillaBuildDir/include:$mozDevelDist/include/java";
    $consLocal{'LIBPATH'} = "$mozLibPath:$pluginSdkObjDir/samples/common:../scintilla/bin";

    ## XXX PKG_CONFIG_PATH env var will point to pgkconfig dir for the platform.
    ## -DGTK is required to properly include the Scintilla headers.
    $consLocal{'CXXFLAGS'} = "`pkg-config --cflags gtk+-2.0` -DGTK -DGTK2_XEMBED";
    $consLocal{'CXXFLAGS'} .= " -DCONTAINER_HANDLES_EVENTS=1 -DINCLUDE_DEPRECATED_FEATURES ";
    # Add the global FLAGS.
    $consLocal{'CXXFLAGS'} .= $consLocal{ENV}{'CXXFLAGS'};
    $consLocal{'CFLAGS'} = $consLocal{ENV}{'CFLAGS'};

    # Ensure that these are defined for use by mozilla headers
    $consLocal{'CXXFLAGS'} .= " -include $mozObjDir/mozilla-config.h " .
        " -I$pluginSdkSrcDir/samples/include ".
        " -I$mozDevelDist/include" .
        " -I$mozSrc/mozilla/xpcom/ds" .      # required for nsIObserver includes
        " -I$mozDevelDist/include/content" .
        " -I$mozDevelDist/include/gfx" .
        " -DMOZ_VERSION=$mozVersionNumber";
        
    $consLocal{'CFLAGS'} .= " -DXP_UNIX=1";
    $consLocal{'CXXFLAGS'} .= " -DXP_UNIX=1";

    if ($platform eq "solaris") {
        # Solaris ships with broken X11 headers that do not specify int
        # return types.  The -fpermissive flag converts the errors g++
        # would otherwise generate into warnings.
        $consLocal{'CXXFLAGS'} .= " -fpermissive"
    }

    if ($buildType eq 'debug') {
        $consLocal{'CXXFLAGS'} .= " -g";
        $consLocal{'CXXFLAGS'} .= " -DNS_DEBUG "; # for debugging
    } elsif ($buildFlavour eq 'dev') {
        $consLocal{'CXXFLAGS'} .= " -g";
    } else {
        $consLocal{'CXXFLAGS'} .= " -O2";
    }

    # On Solaris, you have to use the -mimpure-text option if you are linking
    # a shared library that links to static libs (like scintilla.a).
    if ($platform eq "solaris") {
        $consLocal{'LDFLAGS'} .= " -mimpure-text";
    }

    $consLocal = new cons(%consLocal);
    $consLocal->Depends($pluginName, "$scintillaBuildDir/bin/scintilla.a");

    #XXX have to add licensing code here as well.
    $consLocal->Program($pluginName,
        "plugin.cxx",
        "npn_gate.cpp",
        "nsSciMoz.cxx",
        "nsSciMozGtk.cxx",
        "SciMozEvents.cxx",
        "sendscintilla.cxx",
    );
}

if ($platform eq "darwin") {
} else {
    $cons->Install("$mozPluginsDir", $pluginName);
}


if ($platform ne "linux") { # until this can be worked on for more than darwin
# the SciDoc XPCOM component
$cons->Install($idlExportDir, 'ISciDoc.idl');
$cons->BuildAndInstallXpt('ISciDoc.idl');
$cons->BuildHeaderFromIdl('ISciDoc.idl');

if ($platform eq "win") {
    my $LDFLAGS = "/libpath:$xScintillaBuildDir\\bin ";
    my $CXXFLAGS = "/I$xScintillaBuildDir/include /I$xScintillaBuildDir/src ";
    foreach my $includeDir (split(';', $mozIncludePath)) {
        $CXXFLAGS .= " -I$includeDir";
    }
    foreach my $libDir (split(';', $mozLibPath)) {
        $LDFLAGS .= " /libpath:$libDir";
    }

    $CXXFLAGS .= ' -I./include';
    $CXXFLAGS .= ' -I./include/private';
    $CXXFLAGS .= ' -DMOZ_NO_MOZALLOC';
    $LDFLAGS .= " xpcomglue_s_nomozalloc.lib";
    $LDFLAGS .= " xpcom.lib nspr4.lib SciLexer.lib ";
    $LDFLAGS .= " /dll";
    $CXXFLAGS .= " -DLAYERS -W3 -D_WINDOWS -DWIN32 ";
    $CXXFLAGS .= " -D_IMPL_NS_LAYOUT -DMOZ_VERSION=$mozVersionNumber";
    $CXXFLAGS .= " -DBUILDFLAVOUR=$buildFlavour";
    $CXXFLAGS .= " /FI$mozObjDir\\mozilla-config.h";

    if ($buildType eq 'debug') {
        $LDFLAGS .= " /DEBUG";
        $CXXFLAGS .= " /Od -Zi  -DDEBUG  -D_DEBUG -MDd";
    } else {
        $CXXFLAGS .= " /Ox -DNDEBUG -D_NDEBUG -MD";
        # LDFLAGS is fine!
    }
    $dllName = 'koSciDoc.dll';

    if ($mozVersionNumber le 699) {
        # See discussion above for same option for nsSciMoz.cxx build.
        $CXXFLAGS .= " -Zc:wchar_t-";
    }

    $cons->Command($dllName,
        "nsSciDoc.cxx",
        "ISciDoc.idl",
        "ISciDoc.h",
        "$scintillaBuildDir/bin/SciLexer.dll",
        qq(
            cl /nologo $CXXFLAGS /Fo%1:b.obj /c %1
            link /nologo $LDFLAGS /out:%0 %1:b.obj
        )
    );
}

else {
    %consLocal = $cons->copy();

    $consLocal{'LIBPATH'} = "$mozLibPath:$pluginSdkObjDir/samples/common:$mozBin";
    $consLocal{'CPPPATH'} = "$mozIncludePath:$scintillaBuildDir/include:$scintillaBuildDir/src";
    $consLocal{'CXXFLAGS'} .= " -I$mozDevelDist/include/content" .
        " -I$mozDevelDist/include/necko" .
        " -I$mozDevelDist/include/layout";
    $consLocal{'CXXFLAGS'} .= " -DSCI_NAMESPACE=1 -DSCI_LEXER ".
                            " -DCONTAINER_HANDLES_EVENTS=1 -DINCLUDE_DEPRECATED_FEATURES".
                            " -DUSE_SYSTEM_CONSOLE=1 ".
                            " -DMOZ_VERSION=$mozVersionNumber ";

    $consLocal{'LIBS'} = "-lxpcomglue_s ";
    $consLocal{'LIBS'} .= "-bundle -lxpcomglue_s -lxpcom -lnspr4 -lplc4 -lplds4 -lscintilla -lmozalloc ";
    if ($platform eq "darwin") {
        $consLocal{'LDFLAGS'} = "-framework Carbon -bundle";
        $consLocal{'CXXFLAGS'} .= " -DMACOSX=1 -DXP_MACOSX=1 -DNO_X11=1 ";
        # Add the global FLAGS.
        $consLocal{'CXXFLAGS'} .= " $consLocal{ENV}{'CXXFLAGS'}";
        $consLocal{'CFLAGS'} .= " $consLocal{ENV}{'CFLAGS'}";
        $consLocal{'LDFLAGS'} .= " $consLocal{ENV}{'LDFLAGS'}";
	$consLocal{'CXXFLAGS'} .= " -isysroot /Developer/SDKs/MacOSX10.5.sdk";
	$consLocal{'CFLAGS'} .= " -isysroot /Developer/SDKs/MacOSX10.5.sdk";
	$consLocal{'LDFLAGS'} .= " -Wl,-syslibroot,/Developer/SDKs/MacOSX10.5.sdk";
    } else {
        $consLocal{'LDFLAGS'} = "-fPIC -shared";
    }
    $consLocal{'CXXFLAGS'} .= " -fno-rtti -DLAYERS -Wall -Wno-non-virtual-dtor -D_IMPL_NS_LAYOUT";
    $consLocal{'CXXFLAGS'} .= " -include $mozObjDir/mozilla-config.h -DMOZ_VERSION=$mozVersionNumber";
    if ($platform eq "darwin" or $mozVersionNumber le 699) {
	$consLocal{'CXXFLAGS'} .= " -fshort-wchar";
    } else {
	# TODO: Some versions may not support this - get CXXFLAGS from Moz build?
	$consLocal{'CXXFLAGS'} .= " -std=c++0x";
    }

    if ($platform eq "solaris") {

	# big-endian byte order indicator to license code
        $consLocal{'CXXFLAGS'} .= " -DBYTEORDER=0x4321";
    }
    # On Solaris, you have to use the -mimpure-text option if you are linking
    # a shared library that links to static libs.
    if ($platform eq "solaris") {
        $consLocal{'LDFLAGS'} .= " -mimpure-text";
    }

    if ($buildType eq 'debug') {
        $consLocal{'CXXFLAGS'} .= " -g -DDEBUG -D_DEBUG";
    } else {
        $consLocal{'CXXFLAGS'} .= " -DNDEBUG -D_NDEBUG";
        if ($withSymbols) {
            $consLocal{'CXXFLAGS'} .= " -g";
        }
    }
    if ($platform eq "darwin") {
      $consLocal{'DYLD_LIBRARY_PATH'} = "$mozSrc/mozilla/dist/bin";
      $dllName = "libkoSciDoc.dylib";
    } else {
      $dllName = 'libkoSciDoc.so';
    }
    $consLocal = new cons(%consLocal);

    $consLocal->Program($dllName,
                        "nsSciDoc.cxx");
}

$cons->InstallXpcomComponent($dllName);

}

###
# Build and install the SciMoz IME helper
$cons->Install($idlExportDir, 'koISciMozIMEHelper.idl');
$cons->BuildAndInstallXpt('koISciMozIMEHelper.idl');
$cons->BuildHeaderFromIdl('koISciMozIMEHelper.idl');

my %consIME = $cons->copy();
my $dllNameIME;
$consIME{'CPPPATH'} = [
    "$mozDevelDist/include", # for gecko 2.0
    "$mozDevelDist/include/xpcom",
    "$mozDevelDist/include/string", # not windows!?
    "$mozSrc/mozilla/xpcom/ds",
    "$mozDevelDist/include/nspr",
    "$mozDevelDist/include/content",
    "$mozDevelDist/include/widget",
    "$mozDevelDist/include/dom",
    "$mozDevelDist/include/gfx",
    "$mozDevelDist/include/layout",
    "$mozDevelDist/include/plugin",
    "$scintillaBuildDir/include",
    "$scintillaBuildDir/lexlib",
    ".."];
$consIME{'CXXFLAGS'} .= " -DMOZ_VERSION=$mozVersionNumber";
if ($platform eq "win") {
    $dllNameIME = 'koSciMozIMEHelper.dll';

    my $LDFLAGS = $consIME{'LDFLAGS'}
                  . " -dll";
    my $LIBS = $consIME{'LIBS'};
    $LIBS .= " nspr4.lib " .
             " xpcom.lib" .
             " xpcomglue_s.lib" .
             " mozalloc.lib" .
             "";

    foreach my $libDir (split(';', $mozLibPath)) {
        $LDFLAGS .= " /libpath:$libDir";
    }
    $consIME{'CXXFLAGS'} .=
        " -FI$mozObjDir\\mozilla-config.h" .
        " ";

    if ($buildType eq 'debug') {
        $consIME{'CXXFLAGS'} .= " -Zi";
        $consIME{'CXXFLAGS'} .= " -DDEBUG "; # for debugging
    }

    $consIME = new cons(%consIME);
    $consIME->Module($dllNameIME,
        "koSciMozIMEHelper.cpp",
        "koSciMozIMEHelperModule.cpp",
        qq(
            link /nologo $LDFLAGS $LIBS /out:%0 %<
        )
    );
}
else {
    $consIME{'CXXFLAGS'} .= " -include $mozObjDir/mozilla-config.h ";
    if ($platform eq "darwin") {
        $consIME{'DYLD_LIBRARY_PATH'} = "$mozSrc/mozilla/dist/bin";
        $consIME{'CXXFLAGS'} .= ' -DSCI_NAMESPACE';
        # lots of warnings about ATSUI. We know.
        $consIME{'CXXFLAGS'} .= ' -Wno-deprecated-declarations';
        $dllNameIME = "koSciMozIMEHelper.dylib";
        push @{$consIME{'CPPPATH'}}, (
             "$scintillaBuildDir/macosx",
             "$scintillaBuildDir/src");
        $consIME{'LIBPATH'} = ["$mozBin",
                               "$mozDevelDist/bin"];
        $consIME{'LIBS'} .= " -Wl,-dead_strip " .
                            " -Wl,-executable_path,$mozDevelDist/bin " .
                            " -bundle " .
                            " $mozDevelDist/lib/libxpcomglue_s_nomozalloc.a " .
                            " -lxpcom -lnspr4 -lplc4 -lplds4 -lscintilla -lmozalloc";
    } else {
        $dllNameIME = "koSciMozIMEHelper.so";

        ## XXX PKG_CONFIG_PATH env var will point to pgkconfig dir for the platform.
	## -DGTK is required to properly include the Scintilla headers.
        $consIME{'CXXFLAGS'} .= " `pkg-config --cflags gtk+-2.0` -DGTK -DGTK2_XEMBED";
        $consIME{'CXXFLAGS'} .= " -DCONTAINER_HANDLES_EVENTS=1 -DINCLUDE_DEPRECATED_FEATURES ";
        # Add the global FLAGS.
        $consIME{'CXXFLAGS'} .= $consIME{ENV}{'CXXFLAGS'};
        $consIME{'CFLAGS'} = $consIME{ENV}{'CFLAGS'};
        $consIME{'LIBS'} .=
            " -lxpcomglue_s" .
            " -lnspr4" .
            " -lxpcom" .
            " -lmozalloc" .
            "";
        $consIME{'LIBPATH'} .= "$mozLibPath";
        $consIME{'LDFLAGS'} .= " -shared";
    }
    if ($buildType eq 'debug') {
        $consIME{'CXXFLAGS'} .= " -ggdb";
        $consIME{'CXXFLAGS'} .= " -DDEBUG "; # for debugging
    }
    $consIME = new cons(%consIME);
    $consIME->Program($dllNameIME,
                      "koSciMozIMEHelper.cpp",
                      "koSciMozIMEHelperModule.cpp");
}
$cons->InstallXpcomComponent($dllNameIME);
